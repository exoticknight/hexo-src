{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/avatar_green.png","path":"images/avatar_green.png","modified":0,"renderable":0},{"_id":"source/images/wechatqcode.jpg","path":"images/wechatqcode.jpg","modified":0,"renderable":0},{"_id":"source/images/alipay.JPG","path":"images/alipay.JPG","modified":0,"renderable":0},{"_id":"source/images/wechatpay.JPG","path":"images/wechatpay.JPG","modified":0,"renderable":0},{"_id":"source/images/favicon/android-chrome-192x192.png","path":"images/favicon/android-chrome-192x192.png","modified":0,"renderable":0},{"_id":"source/images/favicon/android-chrome-512x512.png","path":"images/favicon/android-chrome-512x512.png","modified":0,"renderable":0},{"_id":"source/images/favicon/apple-touch-icon.png","path":"images/favicon/apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/images/favicon/browserconfig.xml","path":"images/favicon/browserconfig.xml","modified":0,"renderable":0},{"_id":"source/images/favicon/favicon-16x16.png","path":"images/favicon/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/images/favicon/favicon-32x32.png","path":"images/favicon/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/images/favicon/favicon.ico","path":"images/favicon/favicon.ico","modified":0,"renderable":0},{"_id":"source/images/favicon/mstile-150x150.png","path":"images/favicon/mstile-150x150.png","modified":0,"renderable":0},{"_id":"source/images/favicon/safari-pinned-tab.svg","path":"images/favicon/safari-pinned-tab.svg","modified":0,"renderable":0},{"_id":"source/images/favicon/site.webmanifest","path":"images/favicon/site.webmanifest","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/LICENSE","path":"lib/Han/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/README.md","path":"lib/Han/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/LICENSE","path":"lib/bookmark/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/README.md","path":"lib/bookmark/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/bookmark.min.js","path":"lib/bookmark/bookmark.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/index.js","path":"lib/bookmark/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/bookmark/package.json","path":"lib/bookmark/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/LICENSE","path":"lib/canvas-ribbon/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/README.md","path":"lib/canvas-ribbon/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/README.md","path":"lib/fancybox/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/LICENSE","path":"lib/fancybox/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/LICENSE","path":"lib/jquery_lazyload/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/LICENSE","path":"lib/needsharebutton/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/README.md","path":"lib/needsharebutton/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/quicklink/LICENSE","path":"lib/quicklink/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/quicklink/README.md","path":"lib/quicklink/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/LICENSE","path":"lib/reading_progress/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/README.md","path":"lib/reading_progress/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/package.json","path":"lib/reading_progress/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/reading_progress.js","path":"lib/reading_progress/reading_progress.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/reading_progress/reading_progress.min.js","path":"lib/reading_progress/reading_progress.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","path":"lib/fancybox/source/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/quicklink/dist/quicklink.umd.js","path":"lib/quicklink/dist/quicklink.umd.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","path":"lib/fancybox/source/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"3575abe3bc04081f086d246aba72ef99737ddfb8","modified":1558618149743},{"_id":"source/CNAME","hash":"65b471973edea1b4adab2e1204032a447c28de29","modified":1557920339905},{"_id":"themes/next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1557901996085},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1557901996086},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1557901996086},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1557901996086},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1557901996086},{"_id":"themes/next/.gitignore","hash":"3558a8b174618c7a643aceb13233edd729813f9a","modified":1557901996092},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1557901996092},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1557901996092},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1557901996092},{"_id":"themes/next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1557901996093},{"_id":"themes/next/_config.yml","hash":"b8855380519f6b15ef945c7e655265d0e9ecf66f","modified":1558605188576},{"_id":"themes/next/bower.json","hash":"9bc3900396a375f817db47d147bb6d207c661678","modified":1557901996093},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1557901996094},{"_id":"themes/next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1557901996100},{"_id":"themes/next/package.json","hash":"0284636ddd0e06ae593f4887819f3a35b08c1370","modified":1557901996126},{"_id":"source/about/index.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557917681128},{"_id":"source/_drafts/Yue - 一个新的跨平台.md","hash":"84a4994371c110d8c7472d073316426203e37a54","modified":1521958800603},{"_id":"source/_posts/30 分钟速成古埃及历史.md","hash":"72f8d4930c60b443c9ddce33f03b234d3360b5de","modified":1558673486132},{"_id":"source/_posts/.DS_Store","hash":"53e7764658f6e97d199090fd6af870fef34ef07d","modified":1558439259851},{"_id":"source/_posts/5 分钟速成古埃及神明.md","hash":"ef0c49ff10d7b40c3d5330c59d7f1e72c9c902fa","modified":1558663104123},{"_id":"source/_posts/C-实现简单的控件动画.md","hash":"4552fa9e0037110eeadba68186e6dcfda6a57db9","modified":1557913063548},{"_id":"source/_posts/CoolShell-puzzle-game-攻略.md","hash":"a055a791aca092b1aafd0bb92796df01533f53e5","modified":1557914709727},{"_id":"source/_posts/FictionInjection-始动：Angular-依赖注入分析和源码抽取改造（上）.md","hash":"eb9b0de858fff0f6c4f1571bb99e367073cf34ef","modified":1557913407886},{"_id":"source/_posts/Mocha-Chai-istanbul-in-ES2015.md","hash":"26baa776e267dd3af16eef103a7670bf577581c3","modified":1557913441633},{"_id":"source/_posts/PSO2-鬼斬-剑灵，网游个人分析和感受.md","hash":"5706117134a4f6c7a49bbfae700eb2281719f518","modified":1557915353187},{"_id":"source/_posts/dont-only-use-for-any-more.md","hash":"8d1b06751531a0aea624883a89d82bde87c9cae3","modified":1558516157365},{"_id":"source/_posts/i18n-js库的编写兼使用npm辅助开发.md","hash":"36e73e316453f117c9fa08ec179b7328a6f0e8e0","modified":1557915425889},{"_id":"source/_posts/mocha-chai-Travis-CI-Codecov-使用流程.md","hash":"be9b69cf0bc85a59d6730832fc677bed1fcfd953","modified":1557913473339},{"_id":"source/_posts/python中有趣的zip函数.md","hash":"b5b297a11d68794e1cc5aa36ed715460eea5f867","modified":1557914945751},{"_id":"source/_posts/radioit计划——动画广播辅助脚本radioitScript.md","hash":"7f11c75a942165f1b979f0e45eda294f28350baf","modified":1557914670300},{"_id":"source/_posts/segmentfault光棍节闯关攻略.md","hash":"bae31dc69bbd7b9906b43227725d780cff43e850","modified":1557913640508},{"_id":"source/_posts/simpleTemplate-js中列表和标志位的功能的实现.md","hash":"ecd7e8f4dbb94640b14d0461974c0c5d62460759","modified":1557915331154},{"_id":"source/_posts/simpleTemplate-js中列表渲染的改进.md","hash":"561d997a46eb8a366ea27b15eb0abb7a6397e58c","modified":1557915325053},{"_id":"source/_posts/simpleTemplate-js的三版本分化和新功能编写.md","hash":"625fdc23046f894cd08ec8ac9215f84f0da28931","modified":1557915319014},{"_id":"source/_posts/《Understanding-ECMAScript-6》笔记.md","hash":"9a4574e5d20cc14b3116f68d814e041a46987d1e","modified":1557913079189},{"_id":"source/_posts/《来自风平浪静的明天》人物关系简单理清和个人简单分析.md","hash":"3fd101b12da58997a0a5c2ca3f81e005621d2361","modified":1557913119052},{"_id":"source/_posts/クリスマス？なにそれ？美味しいの？.md","hash":"87811592001e664cfb0d53bd8c3bf7a6367c0d94","modified":1557913887927},{"_id":"source/_posts/一段简单的js模板渲染代码.md","hash":"f223dc79c11e4cb39de704ecc3cf7e0620f262b7","modified":1557915309257},{"_id":"source/_posts/为上一篇分析如何保存网络广播的博文追加一个脚本.md","hash":"3cffb41066113683d4e966032da416a7a8acd6a7","modified":1557915296239},{"_id":"source/_posts/使用ES6编写一个生命游戏.md","hash":"f94c6af382b51f093753cfa2accd7d781b6bde85","modified":1557914785346},{"_id":"source/_posts/四川实训遗诗一首.md","hash":"3f0d6ab252b0390aa0df22d4063dd5d2035c9383","modified":1557915283119},{"_id":"source/_posts/如何保存一些网络广播.md","hash":"22d96fcd343f24d4a920572d2ea705d8dbbf1ecb","modified":1557915271690},{"_id":"source/_posts/拔牙.md","hash":"62332851ac5f0b114c892a2a1173e20f87b7cbd2","modified":1557915197196},{"_id":"source/_posts/深圳EVA-EXPO-2-0-相片选-97p.md","hash":"e4cd30198f55cf61cd8034d00b1ea0748fb019da","modified":1557915024528},{"_id":"source/_posts/看《Sherlock-The-Abominable-Bride》.md","hash":"c5e1ff5ddacc4aa8da20118c9b17a8dcff3a50ab","modified":1557915462455},{"_id":"source/_posts/自顾自地对simpleTemplate-js进行优化.md","hash":"989238ff13e77b2c3692ea78746c65a985cfddc4","modified":1557915525166},{"_id":"source/_posts/记一次奇怪的爬虫经历.md","hash":"861b2acd014bca008bfc010fdcd57d3409007023","modified":1557915609668},{"_id":"source/_posts/说说牛客上的一道-JavaScript-题目.md","hash":"33f0444361b4ac611b7d944fbad282004cc3d268","modified":1557915626466},{"_id":"source/_posts/阿里智勇大闯关第三季答案.md","hash":"90c0bb8eb3991a8c1d41007ff32e1827cd6e2352","modified":1557915687191},{"_id":"source/categories/index.md","hash":"49182868f6b865f671c0d37a77f650876964d3b7","modified":1557906864642},{"_id":"source/images/.DS_Store","hash":"02a5f6546b9ef1ff742449072be436fbbc20b293","modified":1557989387620},{"_id":"source/images/avatar_green.png","hash":"1af3e41e167a452f145346552056451ca1ceb35c","modified":1395748112000},{"_id":"source/images/wechatqcode.jpg","hash":"6853364a55fb62db348c95409fa94e7cc26abc0f","modified":1558523524350},{"_id":"source/tags/index.md","hash":"9e20f9b1b62d42ccea44f25962f66602fa794014","modified":1557906769957},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557901996073},{"_id":"themes/next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1557901996076},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557901988010},{"_id":"themes/next/.git/index","hash":"93d9bca887bddc29479eb795515865dd4b650292","modified":1557901996192},{"_id":"themes/next/.git/packed-refs","hash":"5b9c164bd001216952ac7322c55b85812c802311","modified":1557901996070},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1557901996087},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"285a95aca36e0ac770bcde2b35e3b572d45d1518","modified":1557901996087},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1557901996088},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"492b2c159d871e5b5d4c70d259f36e603afe192d","modified":1557901996089},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1557901996089},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1557901996090},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1557901996090},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1557901996090},{"_id":"themes/next/.github/mergeable.yml","hash":"8e3a6abc74b5cba57f9586fe6d98762fd4fc9b04","modified":1557901996090},{"_id":"themes/next/.github/release-drafter.yml","hash":"b4476ada5c62ee7d63ba2e59ead2ec4897086e3c","modified":1557901996091},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1557901996091},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1557901996091},{"_id":"themes/next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1557901996091},{"_id":"themes/next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1557901996091},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1557901996095},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1557901996094},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1557901996095},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1557901996095},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1557901996095},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1557901996096},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1557901996096},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1557901996097},{"_id":"themes/next/docs/MATH.md","hash":"026d2cff73c22a30ea39c50783557ff4913aceac","modified":1557901996096},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1557901996101},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1557901996101},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1557901996101},{"_id":"themes/next/languages/es.yml","hash":"1752429687861b5cedd063c6ebe5dacefbe7e5a7","modified":1557901996101},{"_id":"themes/next/languages/fa.yml","hash":"cd41db832af5e399590b70a5227cfe0b0e98e101","modified":1557901996102},{"_id":"themes/next/languages/fr.yml","hash":"7005c2b42c2c6e82bd7a1be5cc2f443b5fc79105","modified":1557901996102},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1557901996102},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1557901996102},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1557901996103},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1557901996103},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1557901996103},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1557901996103},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1557901996104},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1557901996104},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1557901996104},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1557901996104},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1557901996105},{"_id":"themes/next/languages/zh-CN.yml","hash":"a939a72865c1ea11d251b859285c830bddcf06c8","modified":1558240101318},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1557901996105},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1557901996105},{"_id":"themes/next/layout/_layout.swig","hash":"74701fcf2303d59400587436ab4c244e04df7ad9","modified":1557901996106},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1557901996124},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1557901996125},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1557901996125},{"_id":"themes/next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1557901996125},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1557901996125},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1557901996125},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1557901996126},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1557901996127},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1557901996127},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1557901996190},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1557901996190},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1557901996190},{"_id":"source/images/alipay.JPG","hash":"cbdc8a8591cf5ac849aca2daa9290f04969e3872","modified":1558516824641},{"_id":"source/images/wechatpay.JPG","hash":"4ba41426562ed4b9142bfb07485bb20667726192","modified":1558516769170},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557901996167},{"_id":"source/_posts/build-application-with-angular-and-ng-material-based-on-electron/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1557911044596},{"_id":"source/_posts/build-application-with-angular-and-ng-material-based-on-electron/配合-angular-和-angular-material-来开发基于-electron-的应用-·-0-前言.md","hash":"5b85e1f32e37d808adb6b14b8c2cb03ce7de5594","modified":1557917577890},{"_id":"source/_posts/build-application-with-angular-and-ng-material-based-on-electron/配合-angular-和-angular-material-来开发基于-electron-的应用-·-1-分析与配置.md","hash":"73f1cf09d49eac2dc301e542a476ed56d1919717","modified":1557917613758},{"_id":"source/_posts/build-application-with-angular-and-ng-material-based-on-electron/配合-angular-和-angular-material-来开发基于-electron-的应用-·-2-node-库的使用和抓取代码的编写.md","hash":"1540cdd3213210a12062ff1e0f2e8e188e5e56a0","modified":1557917609001},{"_id":"source/_posts/build-application-with-angular-and-ng-material-based-on-electron/配合-angular-和-angular-material-来开发基于-electron-的应用-·-3-文件组织结构和开发流程.md","hash":"f6048b26e042c9bb0ee6a607ba47b99b7122e8b7","modified":1557917624536},{"_id":"source/_posts/chrome-tutorial/Google-Chrome（谷歌浏览器）个人详细教程——安装篇.md","hash":"ceba277db2ab6611760047d78959996308a87001","modified":1557917295497},{"_id":"source/_posts/chrome-tutorial/Google-Chrome（谷歌浏览器）个人详细教程——总论篇.md","hash":"997656d1146c9388a249df457b6eca96ec42e62e","modified":1557917301561},{"_id":"source/_posts/chrome-tutorial/Google-Chrome（谷歌浏览器）个人详细教程——提高篇.md","hash":"e66b150398e638ba137ff876a30da92c73a1486d","modified":1557917311247},{"_id":"source/_posts/chrome-tutorial/Google-Chrome（谷歌浏览器）个人详细教程——日常使用篇.md","hash":"1230a101d0194ee68be25e1c07b6a8300350391b","modified":1557917316371},{"_id":"source/_posts/python-with-Qt-application-development/python-×-Qt应用开发-·-0-序.md","hash":"21624e59480c7c3257f71679cb364f34e5ef5892","modified":1557917215651},{"_id":"source/_posts/python-with-Qt-application-development/python-×-Qt应用开发-·-1-基本界面.md","hash":"8381dc9cc0e2e7be42b19c114d5413af0036aeb7","modified":1557917211302},{"_id":"source/_posts/python-with-Qt-application-development/python-×-Qt应用开发-·-2-5-改进软件界面.md","hash":"9c3e0a087164ee6028fdb7362ea0329c2e0a8d13","modified":1557917422667},{"_id":"source/_posts/python-with-Qt-application-development/python-×-Qt应用开发-·-2-界面初步设计.md","hash":"efe972899ed66caa94e89dcb2e2e6cb6212d2600","modified":1557917202546},{"_id":"source/_posts/python-with-Qt-application-development/python-×-Qt应用开发-·-3-MVC中model的基本实现.md","hash":"24c17812e96453001b3c11ebee6b9aabeb6845df","modified":1557917220680},{"_id":"source/_posts/python-with-Qt-application-development/python-×-Qt应用开发-·-4-数据库设计.md","hash":"9ab1eba7edff2d04b5c94ae7d8de62da795c65ba","modified":1557917227875},{"_id":"source/_posts/python-with-Qt-application-development/python-×-Qt应用开发-·-5-数据库helper类的编写.md","hash":"8ce0ee66e53bc6178cf0984f16ab50ced0753b86","modified":1557917233884},{"_id":"source/_posts/python-with-Qt-application-development/python-×-Qt应用开发系列目录（连载中）.md","hash":"3b9a8bf888254396cec110b1ace70f23e3b6bb49","modified":1557917238968},{"_id":"source/_posts/translation/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1557910989075},{"_id":"source/_posts/traveling/旅游照——上海-20p.md","hash":"8a092555d0c6fbd57ea5d5ee23b05d75e130d0d9","modified":1557917005054},{"_id":"source/_posts/traveling/旅游照——乌镇-杭州-53p.md","hash":"af8ef2bd40e66cb8401d74fe1f0a0c2a84e7aefb","modified":1557917007206},{"_id":"source/_posts/traveling/旅游照——杭州-21p.md","hash":"01cb241dee5b3492a4efdad16abb0ba819c469e2","modified":1557917010153},{"_id":"source/_posts/traveling/旅游照——苏州-乌镇晚上-44p.md","hash":"39e8a12bd3f5180e1339e796a80bc0771d21e901","modified":1557917015986},{"_id":"source/images/favicon/android-chrome-192x192.png","hash":"5ec06b1da56c68eef860beecbf0760f10cbcdb14","modified":1557989239000},{"_id":"source/images/favicon/android-chrome-512x512.png","hash":"672140bb6b04b063adb67b2f5839d7cf36f30431","modified":1557989239000},{"_id":"source/images/favicon/apple-touch-icon.png","hash":"e6c906a9f3bc977101bd4dad42617892ebfb3d21","modified":1557989239000},{"_id":"source/images/favicon/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1557989239000},{"_id":"source/images/favicon/favicon-16x16.png","hash":"64af7e939bca7ed516d8ea7c1a8db589fba5e0e2","modified":1557989239000},{"_id":"source/images/favicon/favicon-32x32.png","hash":"af8a5ab3f82ecadf810558ce02ae3bc5559bc502","modified":1557989239000},{"_id":"source/images/favicon/favicon.ico","hash":"648cd8f51fb9a283326826593390b7e2e5057022","modified":1557989240000},{"_id":"source/images/favicon/mstile-150x150.png","hash":"ac703cd55949d759647f77f917e381e3f277d483","modified":1557989240000},{"_id":"source/images/favicon/safari-pinned-tab.svg","hash":"ce4521d7abddff522b5ddd478081675ee9877524","modified":1557989240000},{"_id":"source/images/favicon/site.webmanifest","hash":"13e5aa58eb2182d8ace63266856c8cc29c47c083","modified":1557989240000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557901988011},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557901988010},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1557901988012},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557901988013},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557901988013},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1557901988011},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557901988013},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1557901988011},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557901988012},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1557901988012},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557901988014},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557901988010},{"_id":"themes/next/.git/logs/HEAD","hash":"09df1f4a75124b80374daa60e5f99ee8bb95db6f","modified":1557901996074},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1557901996088},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1557901996088},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1557901996089},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1557901996089},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1557901996097},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1557901996097},{"_id":"themes/next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1557901996097},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1557901996098},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1557901996098},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1557901996098},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bc43beb3af74d64fbd3920539d08861e4cadb9a0","modified":1557901996099},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1557901996099},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1557901996099},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1557901996099},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"83feca62190abcca0332915ffe0eefe582573085","modified":1557901996100},{"_id":"themes/next/docs/zh-CN/README.md","hash":"cdd7a8bdcf4a83ff4c74ee6c95c6bcc0b8c1831c","modified":1557901996100},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1557901996100},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1557901996106},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1557901996106},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1557901996106},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1557901996107},{"_id":"themes/next/layout/_macro/post.swig","hash":"8a8a2865b09e933c454d9a68e54dd9063dc8c559","modified":1557901996107},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1557901996108},{"_id":"themes/next/layout/_partials/comments.swig","hash":"20645a99e2ca8c7ad205786a8fed57f1458a4e91","modified":1558529132814},{"_id":"themes/next/layout/_partials/footer.swig","hash":"589f545333e21a8c7823bce89ab45cf1eb7db6e2","modified":1557901996108},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1557901996108},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1557901996111},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1557901996111},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1557901996113},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1557901996114},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1557901996114},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1557901996114},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1557901996115},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"83470eb401f78f4683907c48ad6760b90730daa3","modified":1557901996116},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1557901996119},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1557901996119},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1557901996119},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"9be7c2c9cef63006866d1232c5289901e46be7ed","modified":1557901996121},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1557901996122},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1557901996122},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1557901996122},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1557901996123},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5db80e8d7ea3f29e998320f79508f7e14342a33c","modified":1557901996123},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1557901996123},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1557901996123},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1557901996124},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1557901996126},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1557901996126},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1557901996127},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1557901996128},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1557901996128},{"_id":"themes/next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1557901996128},{"_id":"themes/next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1557901996129},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1557901996129},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1557901996129},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1557901996129},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1557901996129},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1557901996130},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1557901996130},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1557901996131},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1557901996134},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1557901996166},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1557901996167},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1557901996167},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1557901996167},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1557901996168},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1557901996168},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1557901996168},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1557901996168},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1557901996169},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1557901996169},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1557901996169},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1557901996169},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1557901996170},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557901996170},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1557901996170},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557901996171},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1557901996171},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1557901996172},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1557901996172},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1557901996173},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1557901996173},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1557901996173},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1557901996173},{"_id":"themes/next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1557901996174},{"_id":"themes/next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1557901996174},{"_id":"themes/next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1557901996174},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1557901996176},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1557901996176},{"_id":"themes/next/source/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1557901996176},{"_id":"source/_posts/chrome-tutorial/Google-Chrome（谷歌浏览器）个人详细教程——扩展程序篇.md","hash":"fce9b21feceb62e2df5c58f198f20ebcc36c4d39","modified":1557917306523},{"_id":"source/_posts/translation/译-使用AngularJS编写2048游戏.md","hash":"97e9cafbcfb0b29fab497eebaec8a2eb62f6ddd0","modified":1557917109641},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557901996158},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557901996158},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557901996159},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557901996166},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557901996166},{"_id":"themes/next/.git/refs/heads/master","hash":"d591ec996e3ef9ea7b8660103296d85235048ca2","modified":1557901996074},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1557901996107},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1557901996107},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1557901996109},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1557901996109},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"36eae78a4d7160a1c5e59ca3f7333f00b43d359b","modified":1557901996109},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1557901996110},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1557901996110},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1557901996110},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1557901996110},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1557901996110},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1557901996111},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f1a8a6562c339ae66420439374977002b851843b","modified":1558196689662},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1557901996111},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1557901996111},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1557901996112},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1557901996112},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1557901996112},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1557901996112},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1557901996112},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1557901996113},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1557901996113},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1557901996113},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1557901996114},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1557901996115},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1557901996115},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1557901996115},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1557901996115},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1557901996116},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1557901996116},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1557901996116},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1557901996117},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1557901996117},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1557901996117},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1557901996117},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"d422beaf35a5d2646feaa098bc3e5adf691c7565","modified":1557901996117},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1557901996118},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1557901996118},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1557901996118},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1557901996118},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1557901996118},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1557901996119},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1557901996119},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1557901996120},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"c77a2e7ef5f449a445fb4d36b055721fba4a81af","modified":1557901996120},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1557901996120},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1557901996120},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1557901996120},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1557901996121},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1557901996121},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1557901996121},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1557901996122},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1557901996122},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1557901996123},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1557901996124},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1557901996124},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1557901996158},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1557901996158},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1557901996158},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"2036bbb73afd43251982ce824f06c6e88d35a2ef","modified":1557901996159},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1557901996165},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1557901996165},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1557901996166},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1557901996175},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1557901996175},{"_id":"themes/next/source/lib/Han/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1557991349947},{"_id":"themes/next/source/lib/Han/README.md","hash":"572a02d6dfcb37f35eb47339862da6fddae00826","modified":1557991349947},{"_id":"themes/next/source/lib/bookmark/.eslintignore","hash":"3d3910611724b7584a29297a3f7132334a3ad091","modified":1557991419926},{"_id":"themes/next/source/lib/bookmark/.eslintrc.js","hash":"76bec2314ec3477b18e357f9992cf42a9524a3f7","modified":1557991419927},{"_id":"themes/next/source/lib/bookmark/.gitignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1557991419928},{"_id":"themes/next/source/lib/bookmark/LICENSE","hash":"1440355648a72be5b7625fe6fa055b462fcc78b0","modified":1557991419928},{"_id":"themes/next/source/lib/bookmark/README.md","hash":"ecfb09270cf202fb2228e9a79fa970b60be69222","modified":1557991419928},{"_id":"themes/next/source/lib/bookmark/bookmark.min.js","hash":"9e525329553335c2484f6faf9e933a6bbee9ab6d","modified":1557991419929},{"_id":"themes/next/source/lib/bookmark/index.js","hash":"5e5cba645a1a4531ccbb4782df2f7a075626393f","modified":1557991419929},{"_id":"themes/next/source/lib/bookmark/package.json","hash":"013ff96fc03cd4ed7b17059af207e53f94953202","modified":1557991419929},{"_id":"themes/next/source/lib/canvas-ribbon/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1557907960912},{"_id":"themes/next/source/lib/canvas-ribbon/README.md","hash":"07e86d67c508a3f974c45ff61cd0760d79bcebc5","modified":1557907960913},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1557907960913},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"d8bf9cb15d9d91c7ad022ba2954b5b4d326f17f7","modified":1557977062840},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1557977062840},{"_id":"themes/next/source/lib/fancybox/README.md","hash":"a40db80eb6386b085ff810fd3e302f12e76b8df7","modified":1557977062842},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1557977091343},{"_id":"themes/next/source/lib/fancybox/LICENSE","hash":"8624bcdae55baeef00cd11d5dfcfa60f68710a02","modified":1557977062841},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1557977091343},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"a79e7b87a27497922f34e1013d7299f838badc79","modified":1557977091344},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1557977091344},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1557901996177},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1557901996177},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1557901996178},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1557901996178},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1557901996179},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1557977100587},{"_id":"themes/next/source/lib/jquery_lazyload/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1557977100588},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"195a44ef23a22f166f7e56d37eaf27647b4f8b19","modified":1557977100588},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1557977100589},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1557977100590},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1557977100590},{"_id":"themes/next/source/lib/needsharebutton/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1557990912522},{"_id":"themes/next/source/lib/needsharebutton/README.md","hash":"46bb223bdf714a47a1449666f4f70556447786d1","modified":1557990912523},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"f151bb5ba4a2cd334061bac27a1a155969b62cdb","modified":1557990912524},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"75dee2bb4796ca66693831d769d9a105eed8c290","modified":1557990912524},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1557977106756},{"_id":"themes/next/source/lib/pace/README.md","hash":"33b87ed998d59f117dc329f999a4ffc744b41e79","modified":1557977106757},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1557977106758},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1557977106759},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1557977106760},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1557977106760},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1557977106760},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1557977106761},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1557977106761},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1557977106762},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1557977106762},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1557977106763},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1557977106763},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1557977106764},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1557977106764},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1557977106765},{"_id":"themes/next/source/lib/quicklink/LICENSE","hash":"78d636bebe5b99f30e0e0676ef71805ebf00c9b9","modified":1557991314629},{"_id":"themes/next/source/lib/quicklink/README.md","hash":"350a184f2d44ef0dd7e4dcece0b7cb1d16e15187","modified":1557991314630},{"_id":"themes/next/source/lib/reading_progress/.editorconfig","hash":"7d47ecd70ca58d26af4f69ff1b23034edcf4475e","modified":1557991455349},{"_id":"themes/next/source/lib/reading_progress/.gitignore","hash":"09cde1060b4213a7eee528b54560777d2d3756e8","modified":1557991455350},{"_id":"themes/next/source/lib/reading_progress/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1557991455350},{"_id":"themes/next/source/lib/reading_progress/README.md","hash":"9b00c4ce1a739c825df4e51977f7525d2c9f6b81","modified":1557991455351},{"_id":"themes/next/source/lib/reading_progress/package.json","hash":"7bcb3787978a0c445b1bd3dfeca6ae6016c98abc","modified":1557991455351},{"_id":"themes/next/source/lib/reading_progress/reading_progress.js","hash":"ec68a79421cfba022ac53f46813d013dd48617c0","modified":1557991455352},{"_id":"themes/next/source/lib/reading_progress/reading_progress.min.js","hash":"b768dc009e6d37dd952632c317f6c33e6e2d89ad","modified":1557991455352},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1557901996189},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1557901996189},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1557901996189},{"_id":"themes/next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1557901996166},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1557901996186},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"09df1f4a75124b80374daa60e5f99ee8bb95db6f","modified":1557901996074},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557901996072},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1557901996135},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1557901996135},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1557901996135},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1557901996135},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1557901996135},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1557901996142},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1557901996147},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1557901996147},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1557901996155},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1557901996155},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1557901996155},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a190ef2f49bdbf69604b48ad1dc7197895ee9b6","modified":1557901996156},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1557901996156},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1557901996156},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1557901996156},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1558195105281},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1557901996160},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1557901996160},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1557901996160},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1557901996161},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1557901996161},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1557901996161},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1557901996161},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1557901996162},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1557901996162},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1557901996163},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1557901996163},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1557901996163},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1557901996164},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1557901996164},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1557901996164},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6400c98a9fd2b9a8502269f33355bd7ab3ff793b","modified":1557901996164},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1557901996165},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1557901996165},{"_id":"themes/next/source/lib/Han/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557991349938},{"_id":"themes/next/source/lib/Han/.git/config","hash":"a3f105c8a521127ed214de7c66afe2fc5bbd7538","modified":1557991349941},{"_id":"themes/next/source/lib/Han/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557991333918},{"_id":"themes/next/source/lib/Han/.git/index","hash":"0739ff905ef08693703ee7db907874eae548799a","modified":1557991349952},{"_id":"themes/next/source/lib/Han/.git/packed-refs","hash":"f2d02ddb66a0daab04792c58479b228feda2f951","modified":1557991349935},{"_id":"themes/next/source/lib/Han/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1557991349946},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1557991349950},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1557991349951},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1557991349952},{"_id":"themes/next/source/lib/bookmark/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1557991419927},{"_id":"themes/next/source/lib/bookmark/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557991419917},{"_id":"themes/next/source/lib/bookmark/.git/config","hash":"7c5ec419dd0549da89bdd8376a1327f19049f461","modified":1557991419920},{"_id":"themes/next/source/lib/bookmark/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557991415062},{"_id":"themes/next/source/lib/bookmark/.git/index","hash":"e5dad51e94e794b543b1053183ac043131ba69f3","modified":1557991419930},{"_id":"themes/next/source/lib/bookmark/.git/packed-refs","hash":"1023a77146b22cbe5c9a83119953fefa515280bf","modified":1557991419915},{"_id":"themes/next/source/lib/canvas-ribbon/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1557907960912},{"_id":"themes/next/source/lib/canvas-ribbon/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557907960901},{"_id":"themes/next/source/lib/canvas-ribbon/.git/config","hash":"f79e33176f8d3e893553102df6eb347a74fd078f","modified":1557907960904},{"_id":"themes/next/source/lib/canvas-ribbon/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557907955144},{"_id":"themes/next/source/lib/canvas-ribbon/.git/index","hash":"5c48369b5bc7b392e7ca4b1d9ff5bfe07a1786d1","modified":1557907960914},{"_id":"themes/next/source/lib/canvas-ribbon/.git/packed-refs","hash":"e9b32db6334e83336cbca343dedc5b9cc64e8e66","modified":1557907960898},{"_id":"themes/next/source/lib/fancybox/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557977062830},{"_id":"themes/next/source/lib/fancybox/.git/config","hash":"0bd9061daa1ae14bc8c15ccb2616123858620669","modified":1557977062833},{"_id":"themes/next/source/lib/fancybox/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557977045677},{"_id":"themes/next/source/lib/fancybox/.git/index","hash":"510ae1f9456f750eeef03ce824bc177ebce0f562","modified":1557977062846},{"_id":"themes/next/source/lib/fancybox/.git/packed-refs","hash":"2f41f00b14f8655021d9339e7b28a15c01f5522c","modified":1557977062827},{"_id":"themes/next/source/lib/fancybox/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1557977062841},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"e43435fb9eaa918f5b8e35c9e110124b8bd13751","modified":1557977062842},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1557977062843},{"_id":"themes/next/source/lib/fastclick/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557977091332},{"_id":"themes/next/source/lib/fastclick/.git/config","hash":"b355df77af94588e555c06b72b2073ad4e697feb","modified":1557977091337},{"_id":"themes/next/source/lib/fastclick/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557977074522},{"_id":"themes/next/source/lib/fastclick/.git/index","hash":"6b41100cd4e0c7fd93d78f1c15e1865079a14f6b","modified":1557977091346},{"_id":"themes/next/source/lib/fastclick/.git/packed-refs","hash":"e3614be67e9f9bfcbdace120ac82bb60b36ec054","modified":1557977091329},{"_id":"themes/next/source/lib/fastclick/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1557977091343},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"9782a228f911ef442a03390a0064b40102fc1682","modified":1557977091345},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"4496faa08c7d2979747f15c7b79cdf79e5a91cc1","modified":1557977091345},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1557901996179},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1557901996179},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1557901996180},{"_id":"themes/next/source/lib/jquery_lazyload/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557977100576},{"_id":"themes/next/source/lib/jquery_lazyload/.git/config","hash":"6860ad6f2ec237c0ae97708790a172e4b3836cf8","modified":1557977100580},{"_id":"themes/next/source/lib/jquery_lazyload/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557977093484},{"_id":"themes/next/source/lib/jquery_lazyload/.git/index","hash":"569bf635e9874093df76f3c71a0f7b6bc3fb0720","modified":1557977100591},{"_id":"themes/next/source/lib/jquery_lazyload/.git/packed-refs","hash":"83ee2ab10ad076007e0c6c5896841c2e95de64ec","modified":1557977100573},{"_id":"themes/next/source/lib/jquery_lazyload/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1557977100587},{"_id":"themes/next/source/lib/needsharebutton/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557990912511},{"_id":"themes/next/source/lib/needsharebutton/.git/config","hash":"3bd2fc1363cc36b469c252931084daa7b046d52a","modified":1557990912516},{"_id":"themes/next/source/lib/needsharebutton/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557990908760},{"_id":"themes/next/source/lib/needsharebutton/.git/index","hash":"4f566d31b82a36f2f6823242079fd82ca2693629","modified":1557990912525},{"_id":"themes/next/source/lib/needsharebutton/.git/packed-refs","hash":"018b03f9d6b9a0c7174e34007d73f0e086898663","modified":1557990912508},{"_id":"themes/next/source/lib/needsharebutton/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1557990912522},{"_id":"themes/next/source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557977106741},{"_id":"themes/next/source/lib/pace/.git/config","hash":"46d590e05dc25560a69d5cc71b337adad9654443","modified":1557977106746},{"_id":"themes/next/source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557977102761},{"_id":"themes/next/source/lib/pace/.git/index","hash":"fc20c3c6efe9adaac1d8c105d3dd4eb55e435058","modified":1557977106766},{"_id":"themes/next/source/lib/pace/.git/packed-refs","hash":"a04f762b5ecb138fde3c5f6107d05494d8e4c905","modified":1557977106736},{"_id":"themes/next/source/lib/pace/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1557977106755},{"_id":"themes/next/source/lib/quicklink/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557991314617},{"_id":"themes/next/source/lib/quicklink/.git/config","hash":"a352eef20ba117caba756bae1e60c5a07648c349","modified":1557991314621},{"_id":"themes/next/source/lib/quicklink/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557991312659},{"_id":"themes/next/source/lib/quicklink/.git/index","hash":"039170e1962ffe3de9924052ce9253b27f2ff716","modified":1557991314631},{"_id":"themes/next/source/lib/quicklink/.git/packed-refs","hash":"647213edad9693b7d85f507eebcd5ec13459c9dc","modified":1557991314614},{"_id":"themes/next/source/lib/quicklink/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1557991314628},{"_id":"themes/next/source/lib/quicklink/dist/quicklink.umd.js","hash":"d18dc2633f75d7f3801649f4c4af4b11a291750c","modified":1557991314630},{"_id":"themes/next/source/lib/reading_progress/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557991455337},{"_id":"themes/next/source/lib/reading_progress/.git/config","hash":"961f76a65d5278408c0317ac92bff35cfe52dfe8","modified":1557991455341},{"_id":"themes/next/source/lib/reading_progress/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557991448860},{"_id":"themes/next/source/lib/reading_progress/.git/index","hash":"d1976a0e29e3d53302b67034c95f499b92bd46f9","modified":1557991455353},{"_id":"themes/next/source/lib/reading_progress/.git/packed-refs","hash":"bf8dcb185c69accefc518791f11f13432bf25cb5","modified":1557991455332},{"_id":"themes/next/source/lib/reading_progress/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1557991455350},{"_id":"themes/next/.git/objects/pack/pack-666779668e313d586492f3aeaa86e15bf70118a9.idx","hash":"2b90239a27d36ba9cdfa0c1c243719fc084f611b","modified":1557901996059},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1557991349951},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1557977062844},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1557901996185},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1557901996184},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"09df1f4a75124b80374daa60e5f99ee8bb95db6f","modified":1557901996072},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1557901996136},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1557901996137},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1557901996137},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1557901996137},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1557901996138},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1557901996138},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1557901996138},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1557901996138},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1557901996139},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1557901996139},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1557901996140},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1557901996140},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1557901996140},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1557901996141},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1557901996141},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1557901996141},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1557901996141},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1557901996142},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1557901996142},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1557901996142},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1557901996143},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1557901996143},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1557901996143},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1557901996144},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1557901996145},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1557901996145},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1557901996145},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1557901996145},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1557901996146},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1557901996146},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1557901996146},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1557901996146},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1557901996146},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1557901996148},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1557901996148},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1557901996148},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1557901996148},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1557901996148},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1557901996149},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1557901996149},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c01609176929590f8f347075a9a12b661acd661e","modified":1557901996149},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1557901996150},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1557901996150},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1557901996150},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1557901996150},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1557901996150},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1557901996151},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1557901996151},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1557901996151},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"fcda60fecff1479adaf6521cf629cda2506337a8","modified":1557901996152},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1557901996152},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1557901996152},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1557901996153},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1557901996153},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1557901996153},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1557901996153},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1557901996154},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1557901996154},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1557901996154},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1557901996154},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"03c4fa9573fddd930552784cf484fd2ee7825323","modified":1557901996155},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1557901996161},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1557901996162},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1557901996163},{"_id":"themes/next/source/lib/Han/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557991333920},{"_id":"themes/next/source/lib/Han/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557991333919},{"_id":"themes/next/source/lib/Han/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1557991333920},{"_id":"themes/next/source/lib/Han/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557991333921},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557991333921},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1557991333919},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557991333922},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1557991333919},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557991333920},{"_id":"themes/next/source/lib/Han/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1557991333921},{"_id":"themes/next/source/lib/Han/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557991333922},{"_id":"themes/next/source/lib/Han/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557991333918},{"_id":"themes/next/source/lib/Han/.git/logs/HEAD","hash":"a725fa8409ab606820bd34664eb3d9d0514e4cd6","modified":1557991349939},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1557991349948},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1557991349948},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1557991349949},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1557991349949},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1557991349950},{"_id":"themes/next/source/lib/bookmark/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557991415063},{"_id":"themes/next/source/lib/bookmark/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557991415063},{"_id":"themes/next/source/lib/bookmark/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1557991415064},{"_id":"themes/next/source/lib/bookmark/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557991415065},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557991415065},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1557991415063},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557991415065},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1557991415063},{"_id":"themes/next/source/lib/bookmark/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557991415064},{"_id":"themes/next/source/lib/bookmark/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1557991415064},{"_id":"themes/next/source/lib/bookmark/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557991415065},{"_id":"themes/next/source/lib/bookmark/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557991415062},{"_id":"themes/next/source/lib/bookmark/.git/logs/HEAD","hash":"2b8647b4c7bb4928abff7f2528fe5819d7e35e1d","modified":1557991419919},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557907955146},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557907955145},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1557907955146},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557907955148},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557907955148},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1557907955146},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557907955148},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1557907955146},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557907955147},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1557907955147},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557907955149},{"_id":"themes/next/source/lib/canvas-ribbon/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557907955144},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/HEAD","hash":"4db5fac275abdf72e55fdb31c1ddb0b2eb65f36c","modified":1557907960902},{"_id":"themes/next/source/lib/fancybox/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557977045683},{"_id":"themes/next/source/lib/fancybox/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557977045678},{"_id":"themes/next/source/lib/fancybox/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1557977045685},{"_id":"themes/next/source/lib/fancybox/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557977045688},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557977045688},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1557977045682},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557977045689},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1557977045680},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557977045686},{"_id":"themes/next/source/lib/fancybox/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1557977045687},{"_id":"themes/next/source/lib/fancybox/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557977045689},{"_id":"themes/next/source/lib/fancybox/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557977045676},{"_id":"themes/next/source/lib/fancybox/.git/logs/HEAD","hash":"092abefecf4f4391cf20d6a1e9140d5bc02699f9","modified":1557977062832},{"_id":"themes/next/source/lib/fastclick/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557977074528},{"_id":"themes/next/source/lib/fastclick/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557977074526},{"_id":"themes/next/source/lib/fastclick/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1557977074529},{"_id":"themes/next/source/lib/fastclick/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557977074531},{"_id":"themes/next/source/lib/fastclick/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557977074533},{"_id":"themes/next/source/lib/fastclick/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557977074534},{"_id":"themes/next/source/lib/fastclick/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1557977074527},{"_id":"themes/next/source/lib/fastclick/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557977074530},{"_id":"themes/next/source/lib/fastclick/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1557977074530},{"_id":"themes/next/source/lib/fastclick/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557977074534},{"_id":"themes/next/source/lib/fastclick/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557977074521},{"_id":"themes/next/source/lib/fastclick/.git/logs/HEAD","hash":"fcbc244b406a3a07456654ebca3f62fc08130531","modified":1557977091334},{"_id":"themes/next/source/lib/jquery_lazyload/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557977093485},{"_id":"themes/next/source/lib/jquery_lazyload/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557977093485},{"_id":"themes/next/source/lib/jquery_lazyload/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1557977093485},{"_id":"themes/next/source/lib/jquery_lazyload/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557977093486},{"_id":"themes/next/source/lib/jquery_lazyload/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557977093486},{"_id":"themes/next/source/lib/jquery_lazyload/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1557977093485},{"_id":"themes/next/source/lib/jquery_lazyload/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557977093487},{"_id":"themes/next/source/lib/jquery_lazyload/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1557977093485},{"_id":"themes/next/source/lib/jquery_lazyload/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557977093486},{"_id":"themes/next/source/lib/jquery_lazyload/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1557977093486},{"_id":"themes/next/source/lib/jquery_lazyload/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557977093487},{"_id":"themes/next/source/lib/jquery_lazyload/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557977093484},{"_id":"themes/next/source/lib/jquery_lazyload/.git/logs/HEAD","hash":"68eae627021f841a8cee14987addf0d1c3214dfe","modified":1557977100579},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557990908764},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557990908761},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1557990908767},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557990908771},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557990908771},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1557990908763},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557990908772},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1557990908762},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557990908768},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1557990908770},{"_id":"themes/next/source/lib/needsharebutton/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557990908772},{"_id":"themes/next/source/lib/needsharebutton/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557990908759},{"_id":"themes/next/source/lib/needsharebutton/.git/logs/HEAD","hash":"f17dc7452e8545a7c2202ec0664b750d2676cb56","modified":1557990912514},{"_id":"themes/next/source/lib/pace/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557977102762},{"_id":"themes/next/source/lib/pace/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557977102762},{"_id":"themes/next/source/lib/pace/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1557977102763},{"_id":"themes/next/source/lib/pace/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557977102764},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557977102764},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1557977102762},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557977102764},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1557977102762},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557977102763},{"_id":"themes/next/source/lib/pace/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1557977102763},{"_id":"themes/next/source/lib/pace/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557977102765},{"_id":"themes/next/source/lib/pace/.git/logs/HEAD","hash":"52cda833101f83026cd6938c807ad2f415fe3099","modified":1557977106743},{"_id":"themes/next/source/lib/pace/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557977102761},{"_id":"themes/next/source/lib/quicklink/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557991312661},{"_id":"themes/next/source/lib/quicklink/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557991312660},{"_id":"themes/next/source/lib/quicklink/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1557991312661},{"_id":"themes/next/source/lib/quicklink/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557991312662},{"_id":"themes/next/source/lib/quicklink/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557991312662},{"_id":"themes/next/source/lib/quicklink/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1557991312660},{"_id":"themes/next/source/lib/quicklink/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557991312663},{"_id":"themes/next/source/lib/quicklink/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1557991312660},{"_id":"themes/next/source/lib/quicklink/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557991312661},{"_id":"themes/next/source/lib/quicklink/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1557991312662},{"_id":"themes/next/source/lib/quicklink/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557991312663},{"_id":"themes/next/source/lib/quicklink/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557991312658},{"_id":"themes/next/source/lib/quicklink/.git/logs/HEAD","hash":"4e7cc39a98846036195dcfa3f6e368b284666b4d","modified":1557991314619},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557991448862},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557991448861},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1557991448862},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557991448863},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557991448863},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1557991448862},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557991448863},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1557991448861},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557991448862},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1557991448863},{"_id":"themes/next/source/lib/reading_progress/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557991448864},{"_id":"themes/next/source/lib/reading_progress/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557991448860},{"_id":"themes/next/source/lib/reading_progress/.git/logs/HEAD","hash":"2733bad7f53bacd93699c29623b3af7e8d01d8d1","modified":1557991455339},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1557901996188},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"27f034e5db8c32e268e2959b9a7c1258d36e4510","modified":1557977062845},{"_id":"themes/next/source/lib/fastclick/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1557977074528},{"_id":"themes/next/source/lib/Han/.git/objects/01/1e06c7aa90464f2b1d40aae05cf9d69e7667f1","hash":"e9888d4243b096c91da6cd30a348734b88c652e4","modified":1557991344271},{"_id":"themes/next/source/lib/Han/.git/objects/02/c49afbd642c373142ce96b321820b2e31136dc","hash":"1e84c7eb747dd99355ec99a190aca59f10f38a61","modified":1557991344276},{"_id":"themes/next/source/lib/Han/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1557991340087},{"_id":"themes/next/source/lib/Han/.git/objects/12/e5ad35b941c6dc1c10c0db6a04cd7bc7136d79","hash":"65020d9c30858a2131ec75547ad8daff94916274","modified":1557991340086},{"_id":"themes/next/source/lib/Han/.git/objects/14/222c5cf0874b3d006fcab6244c9e34c13cae11","hash":"32841604a28018f255ed74be25a3fed374729561","modified":1557991349910},{"_id":"themes/next/source/lib/Han/.git/objects/14/ffa69f0388b6648af6e413387201f1c5dc34b2","hash":"d94589ced41c1438b11e1a02ae2ed8695ec4bfe3","modified":1557991340076},{"_id":"themes/next/source/lib/Han/.git/objects/1a/dff38de35c5dcd90b1c9abb363d60cedc677c3","hash":"e3bb99642f5f820b6e41c5a2dbeaa5a5e7629cf9","modified":1557991340081},{"_id":"themes/next/source/lib/Han/.git/objects/1b/2d9ec86c12358ba35f7db597cccb93c4977154","hash":"7e90faafec65ae60455922b819ad373460c708c4","modified":1557991349915},{"_id":"themes/next/source/lib/Han/.git/objects/1b/d905fca417b7dc6e1091fbf5dcb99a8e3f44a3","hash":"f904eb01291a0c87f34747183435918e4696a960","modified":1557991340077},{"_id":"themes/next/source/lib/Han/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1557991340088},{"_id":"themes/next/source/lib/Han/.git/objects/2c/e2f46ca183a46f1b06517b1a2a8f96bcaab1b8","hash":"e9a8ddf8b0af2f52063c05075df107b7aacc0d91","modified":1557991341605},{"_id":"themes/next/source/lib/Han/.git/objects/29/c753eafb74ec88615f947d25acb4659340747d","hash":"5d0cc15f306cc2c34a9107c6aeb3576b90343956","modified":1557991348566},{"_id":"themes/next/source/lib/Han/.git/objects/47/b5af07d4d3fd429c6f4b405ff9acd5f4ee7975","hash":"0e69266d563abb092c5b40035331345f771021c2","modified":1557991349909},{"_id":"themes/next/source/lib/Han/.git/objects/4b/5f7d0162b051571cc9d87ba674ef913a7c5a29","hash":"8738e2f3453a3192d07fb0267d9f9194b910bee7","modified":1557991340096},{"_id":"themes/next/source/lib/Han/.git/objects/57/3ad3f32f0689138c4d6f7007621e0cf2bf23ea","hash":"fdb2d9e977cbbd0b44059cf61d5baad92f9df016","modified":1557991349918},{"_id":"themes/next/source/lib/Han/.git/objects/5f/7d3c8d8a6340f1efccc4b3eac842788c1628ec","hash":"af2accb69f344e9cfc870ca7dbe8d25c9e103318","modified":1557991340077},{"_id":"themes/next/source/lib/Han/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1557991340090},{"_id":"themes/next/source/lib/Han/.git/objects/6c/cc84f8ea3543926a1a1e78b5c50a56c0dc8025","hash":"8b4b97a1e3e0089940bc797e8ee3d6eca9d09d28","modified":1557991341609},{"_id":"themes/next/source/lib/Han/.git/objects/72/c270d58afaf026bd65fea390e277b6d63aa22f","hash":"2ebc915da4f2146762025c321bbd54fca1e7b9eb","modified":1557991349912},{"_id":"themes/next/source/lib/Han/.git/objects/75/976c6dc20178b5d24b07ba76700a73205a9b52","hash":"532198fa938fafd2b53dd45193e65a7c8c0f8c84","modified":1557991348263},{"_id":"themes/next/source/lib/Han/.git/objects/77/8fba47fc8f68467fb45002edcd717a71a4ea18","hash":"896ae007894c3f537f1723674f06740489bbf73c","modified":1557991349905},{"_id":"themes/next/source/lib/Han/.git/objects/7d/713d14ed6c435cc41223736376f9e41f8001ed","hash":"fe9cd361e4ab229e32f8a0303b108a5386d09429","modified":1557991349902},{"_id":"themes/next/source/lib/Han/.git/objects/84/5b1bc2898c9924eff3e1b0bd92b6178b4908db","hash":"7c8453a9632d2e4b2720c4a7d50b289936699d1c","modified":1557991341607},{"_id":"themes/next/source/lib/Han/.git/objects/8a/7ee041ca7a999ccd5f35177f9f806232b93738","hash":"627b29c5fa02783ab8130433036db571143e564f","modified":1557991340095},{"_id":"themes/next/source/lib/Han/.git/objects/9b/afab6ef59ce585cbc456d03770e167d2a3c9e2","hash":"32c4243f56b9334f340559d9e7bb7140aadb5959","modified":1557991344880},{"_id":"themes/next/source/lib/Han/.git/objects/a3/8e5bd4193fa1f52aa27eb2a7f32cf103d20a57","hash":"d8897f2030f55a50c5dcea877dd5b0f9a3a977d5","modified":1557991340079},{"_id":"themes/next/source/lib/Han/.git/objects/a5/57ad3eeef222d2387e98f4418b0438655a2765","hash":"cdaa150ec84c29d84750ef44aa586a600f901d63","modified":1557991349900},{"_id":"themes/next/source/lib/Han/.git/objects/aa/9916f898bfa69c88a84d6f0e99a549c8831d07","hash":"74c546dc2710eba88138d6a12df1d3e05e03ae35","modified":1557991349916},{"_id":"themes/next/source/lib/Han/.git/objects/ad/cf15c7f3d6cb69da502326740997e4a0e3bae3","hash":"0d53088c3633db9d45f69b6c12fd3f2cd4d53062","modified":1557991340085},{"_id":"themes/next/source/lib/Han/.git/objects/af/46be34010c865593eec22d79552334f3fac3f1","hash":"5d8888376467232bd9a13f99c8c76a386a5505e5","modified":1557991349903},{"_id":"themes/next/source/lib/Han/.git/objects/b3/7c278058df61bbd959c9f775f80f3a24b49a16","hash":"3429c10084546b79746b6b0e9f3e4b29fa6443e4","modified":1557991340084},{"_id":"themes/next/source/lib/Han/.git/objects/c3/a4e2326f7650fde4756dadf7c67484cf14aa4b","hash":"4b0e77607c87ea06fe9b612b8ee7cd99f87be559","modified":1557991340091},{"_id":"themes/next/source/lib/Han/.git/objects/cb/cf355438829a21ee86cb3f116a68daab599b5d","hash":"163216cd6c2b363b3bbdf32da39142dbd4ca690b","modified":1557991340093},{"_id":"themes/next/source/lib/Han/.git/objects/d3/6ccff12388f072c23857d33c6abd1f57b3dc86","hash":"a8d4bddb3c913051763dc7d2d3cfc243ef181701","modified":1557991340078},{"_id":"themes/next/source/lib/Han/.git/objects/e1/f0b9c30d5426977a4685d63a0cef6fd6abdd89","hash":"103eeacd4a6750c0e7313b84a571373fa8369579","modified":1557991340082},{"_id":"themes/next/source/lib/Han/.git/objects/e2/d2e185fbd7d888a3658fe97dde4ba595290caf","hash":"4edae1bf781e76b61bdc43395a76574c0d20107b","modified":1557991349911},{"_id":"themes/next/source/lib/Han/.git/objects/e6/02654d32318f5c7135c521ee586f93235452a7","hash":"c6dc38516b0cefe68f0d466f43afffc9d31c2428","modified":1557991349915},{"_id":"themes/next/source/lib/Han/.git/objects/e7/237bfe33deeeec901fb5f0a60bac33cbb446d7","hash":"6589766fc012cfd184f634e3747d944efe405797","modified":1557991349907},{"_id":"themes/next/source/lib/Han/.git/objects/f0/a838932f748272263bc294b178b9a3297a1295","hash":"77694c0d730fa2582dc473d3d3ee782156f4cf74","modified":1557991349913},{"_id":"themes/next/source/lib/Han/.git/refs/heads/master","hash":"51faea5cd9b558363c460cd1fb22b20e81b1715f","modified":1557991349939},{"_id":"themes/next/source/lib/bookmark/.git/objects/02/b27223487ca819cf7167dc23626af595112e25","hash":"e5bbb1906aa9a8e2696817d19d85aeedf82539ed","modified":1557991419885},{"_id":"themes/next/source/lib/bookmark/.git/objects/07/4d4d38a37d506f5db482b5c27ad1143bba5aab","hash":"ee76158694b6490056328594b5d15a54faba253e","modified":1557991419863},{"_id":"themes/next/source/lib/bookmark/.git/objects/0a/9e6b66e9d710a68e08fcc295fca440eabcb4bc","hash":"aa0b269640b41735ba54a9279f10ddd19ecd5887","modified":1557991418619},{"_id":"themes/next/source/lib/bookmark/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1557991418626},{"_id":"themes/next/source/lib/bookmark/.git/objects/0d/61683ea74054da2645effdd51d0a3282d6a9ff","hash":"879563c866dbe7efa0074a1ebcd206723e552f27","modified":1557991418612},{"_id":"themes/next/source/lib/bookmark/.git/objects/11/8348fe672067e7d9c32c73d586023804eeb565","hash":"2b73c34eb535ff7e7d91cefb5215feddd9f2c36f","modified":1557991419853},{"_id":"themes/next/source/lib/bookmark/.git/objects/16/75d42fcbd2aded2e9b42efe38c347ced893495","hash":"979ec745cfdc8dd979785b78c9be7645bb73d922","modified":1557991419844},{"_id":"themes/next/source/lib/bookmark/.git/objects/17/ad1e81c2805cc9c5c00846c8bf9bf16524b55a","hash":"8f779f28267873af1e5c71386603042dbaff6211","modified":1557991419860},{"_id":"themes/next/source/lib/bookmark/.git/objects/18/77388dd9427b36d7c8703038a215b79f1218c2","hash":"8d48c7c0d7427116dbeb32552c576cc4edbe2d38","modified":1557991419889},{"_id":"themes/next/source/lib/bookmark/.git/objects/1b/db4ff581f77318e6c4783d8e1ce811c37f13bf","hash":"06b3da6e152ffd68ed4617db1c4e3912f41d8bec","modified":1557991418614},{"_id":"themes/next/source/lib/bookmark/.git/objects/25/42ea91169dbe9da086918ad02160e42310e185","hash":"3c942c82f3ef7fcd9a15276c82fcf59fa141521c","modified":1557991419894},{"_id":"themes/next/source/lib/bookmark/.git/objects/25/b729e9ad0151b51f50297ea35280111b953236","hash":"af4bf7f3feb175c6980ee81a84f679149f713987","modified":1557991419859},{"_id":"themes/next/source/lib/bookmark/.git/objects/29/de98ce86c01618ebbe3352e213db74feda0dc0","hash":"046bf7ab442c095f0150c96fe06d83855c92092f","modified":1557991419847},{"_id":"themes/next/source/lib/bookmark/.git/objects/2b/358da01f778126b38fc4ddf5ecafa625cad38b","hash":"d4613d86e15d9679b8f1f18950b71a182af4b5c8","modified":1557991418611},{"_id":"themes/next/source/lib/bookmark/.git/objects/2b/d59834388b6377fd14413f2614f550e35e35f1","hash":"654763c707c65aa3f353f8a9edb0cc0ae4bcccfa","modified":1557991418624},{"_id":"themes/next/source/lib/bookmark/.git/objects/2f/425e03cfa918b2d638bbd37279a8b1e7757508","hash":"283713eda90efb64849519db267b652facfdbd63","modified":1557991419850},{"_id":"themes/next/source/lib/bookmark/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1557991418628},{"_id":"themes/next/source/lib/bookmark/.git/objects/36/6ee3e25fa36be8ea88ed1c7913a8de8fd3b820","hash":"81c45f061381dd947da576758992b64b6101fbc8","modified":1557991419841},{"_id":"themes/next/source/lib/bookmark/.git/objects/3f/30e2e442e4fdc1e91d5d1b642662e3900e5d6f","hash":"358397c32831b80fa4828334de7080bdaafe1c52","modified":1557991419888},{"_id":"themes/next/source/lib/bookmark/.git/objects/40/b878db5b1c97fc77049537a71bb2e249abe5dc","hash":"929471c4b27858bbdae034381982f996144f6b3d","modified":1557991418629},{"_id":"themes/next/source/lib/bookmark/.git/objects/41/bde8ccd130442ef0b3f8b24764a6d72635a485","hash":"4a833bb669ac126a00dec7153f8c263eab47b024","modified":1557991419897},{"_id":"themes/next/source/lib/bookmark/.git/objects/41/fcb40408cfe2e9e0d1796ce1384024f7ba2c1c","hash":"600f3ee28c5dc2f1b21f8d9043d271b9601750b1","modified":1557991419898},{"_id":"themes/next/source/lib/bookmark/.git/objects/42/c32aba927940c9e92b9928dceee88eacbf4874","hash":"2c7b6bb078f2eb52eead906df3ed4fa136a1e651","modified":1557991418036},{"_id":"themes/next/source/lib/bookmark/.git/objects/47/1dd1f3ddf970ee3418f801ae787bf98191d47e","hash":"8634518aeeffc4b8b0dbe6ca6159480264cf1916","modified":1557991418023},{"_id":"themes/next/source/lib/bookmark/.git/objects/48/7e5a296eebd45809199d2f557e340603931bad","hash":"6cf9f9b5ae990bbb0083b37b0c29b269cd8cc735","modified":1557991419877},{"_id":"themes/next/source/lib/bookmark/.git/objects/4a/16717bb5a449fab2291e6397c30c6cb34814f1","hash":"5e244da7b9b6dfc9ad924ee5259805d4ae272c2e","modified":1557991419855},{"_id":"themes/next/source/lib/bookmark/.git/objects/4a/6e0d94cae4e01312054983b4e2e4007e3fd3b8","hash":"9eff6f1c82336ebdab0503e0ab0f753cd18f01ff","modified":1557991418622},{"_id":"themes/next/source/lib/bookmark/.git/objects/4a/7e8d64b8956ffd9339000e62d490f18dcd3ecd","hash":"3cc8fd65b3663a750887093f67bb28696492d5e5","modified":1557991419895},{"_id":"themes/next/source/lib/bookmark/.git/objects/4e/7ec652ef197de221d6576a717edf0b583a688a","hash":"e45f3b02a04d04eb3bcd6373ae79d86cbbd62798","modified":1557991419874},{"_id":"themes/next/source/lib/bookmark/.git/objects/55/31419f7d03a523182be5373e246e43acdf60d7","hash":"274085edc584079218a79c199bd0c7360a700290","modified":1557991418608},{"_id":"themes/next/source/lib/bookmark/.git/objects/58/b257bc636adc71871da51e615e6734c9479f3a","hash":"4e63de59c359c9bf480b47aa5e342ed78663fb58","modified":1557991419893},{"_id":"themes/next/source/lib/bookmark/.git/objects/5c/02525c8b55f89f0ec0304cd0d266453bdf0541","hash":"51cab03e6cbebdb421eea45818b1ff7d9ec7783f","modified":1557991419862},{"_id":"themes/next/source/lib/bookmark/.git/objects/5c/ffa97fb277e628a550bc1d8f7fa7c5c776129f","hash":"8c4e4a79d14522f34280ef85c794df6f4886e040","modified":1557991419846},{"_id":"themes/next/source/lib/bookmark/.git/objects/5e/038b5098480c14a29cefd944e3eb23109473b2","hash":"9c3aba7ff1afc70708a90e2f4f610499ee268d4a","modified":1557991419896},{"_id":"themes/next/source/lib/bookmark/.git/objects/5f/1541db4b58002e45b9b5fe19426551a8239a49","hash":"9a50dcb663e39892adbfccab943fb8dc37add2d0","modified":1557991419879},{"_id":"themes/next/source/lib/bookmark/.git/objects/60/438c0c99eece781f9c7b2779ab7673ab34ba62","hash":"76032e20bf2916b03d9f795982831868f42a03af","modified":1557991419842},{"_id":"themes/next/source/lib/bookmark/.git/objects/61/4795cc61f429929887fde3962027254db90a62","hash":"c4e415dda2e421df728dda51f953cc2f01296378","modified":1557991419891},{"_id":"themes/next/source/lib/bookmark/.git/objects/62/150c9d8f54ca62e1af3c9d666bb5e35eb3bdbd","hash":"2998eaea45a0135e879da15851a535ae2940d85e","modified":1557991418609},{"_id":"themes/next/source/lib/bookmark/.git/objects/69/d5670af93cd1d3f0acc082583b1d150c5d61b5","hash":"e6c6fdb25f5fc4949594e217ae14d309b2fba4a1","modified":1557991418025},{"_id":"themes/next/source/lib/bookmark/.git/objects/74/dba5056028cc4bac4f79ffec7da1e076260ffd","hash":"cd7bbf512f3c0291badb58f0679485c18a98c034","modified":1557991418623},{"_id":"themes/next/source/lib/bookmark/.git/objects/6d/1188177a8798893f9efe275d4d75d0f9301be9","hash":"b8652b3249ef6662a8dee7c01e5667f7e4f33cc4","modified":1557991418615},{"_id":"themes/next/source/lib/bookmark/.git/objects/75/4a45e75b8a6dc256755287312c729adc2fc6c9","hash":"e700708d93a902401e54d96d4d632ae4225cdf2c","modified":1557991419866},{"_id":"themes/next/source/lib/bookmark/.git/objects/77/d7bbc93f0a411d2e50b7c67a2827dece42727f","hash":"6865e0eb54a9882e55e70669a44cdddb2da1665e","modified":1557991418618},{"_id":"themes/next/source/lib/bookmark/.git/objects/79/c8a354ccacb4edc27acbcc503f26acf6119624","hash":"7a44189d1189ad7aedea595fc8a4ef387de7041d","modified":1557991419840},{"_id":"themes/next/source/lib/bookmark/.git/objects/7e/58471cd13382a6bafd05015cd0a5b5a8e899eb","hash":"21ae04d7ac48092d7b07b7278bf099cfc2691e57","modified":1557991419848},{"_id":"themes/next/source/lib/bookmark/.git/objects/84/08abfa6c03a2809cb160da5badc6d1050bfbb3","hash":"9d3f29a89223403d1a0292681a330cbf7616c190","modified":1557991418022},{"_id":"themes/next/source/lib/bookmark/.git/objects/85/839f2b88dfaef92ae7c84c10f446e98d07b852","hash":"9662dba024cf43e039d41f4253e7aa282e2141ba","modified":1557991418020},{"_id":"themes/next/source/lib/bookmark/.git/objects/8a/7f4f27cc671188881ca5cd80d941720a78be04","hash":"de24124a9660dad2ee4e1d25a3580ac87d42b3e0","modified":1557991419856},{"_id":"themes/next/source/lib/bookmark/.git/objects/8d/ae3702857a081653c16320999ed63f3c6fb719","hash":"cc5ed8d3d17451c722a3ebfa3251fff27d348218","modified":1557991419881},{"_id":"themes/next/source/lib/bookmark/.git/objects/8e/b07c89ff54bda39a40d6448a6a8ef4df57c8f2","hash":"fadb84b2a2c5dee0b8f67dd53b4e2b8a5b270e92","modified":1557991419838},{"_id":"themes/next/source/lib/bookmark/.git/objects/92/f5900e81d1cf9e90787b7138f4285434e45c10","hash":"05c5b8557d69133fd01ebd1b85a5e009a822ca20","modified":1557991419861},{"_id":"themes/next/source/lib/bookmark/.git/objects/96/353334c808a19403f7d2f0e880668bf8f0e320","hash":"dbcb9efdc52a50d5f0431394c24b35ff47f1833d","modified":1557991418031},{"_id":"themes/next/source/lib/bookmark/.git/objects/97/b44840ca6d92e3e650428f433b75a501b1427c","hash":"a899d561a89c4ab798063c1df81d78015992ad15","modified":1557991418033},{"_id":"themes/next/source/lib/bookmark/.git/objects/9d/a80d05852c1c5aec3e8d31b63d429bcfecc0c5","hash":"392385eddea633b0bea1194c2c66db593c6a9c0a","modified":1557991418625},{"_id":"themes/next/source/lib/bookmark/.git/objects/a9/21fc59cd52b57fc3093fbdc04b446bae0a2f8a","hash":"a2e879b7fdb0cf153f8526064a6b8810b2cd8988","modified":1557991419864},{"_id":"themes/next/source/lib/bookmark/.git/objects/aa/d78f9de11c827340e4695cbc1f5a73f53ee577","hash":"0f5086a5818caf093dcf60126a7d0f72bc73928b","modified":1557991419868},{"_id":"themes/next/source/lib/bookmark/.git/objects/ad/b3297e18bb4d11be9f7305db144e5015f40738","hash":"b44f4417307f3dbb33d30c22700dbfb61c87f198","modified":1557991419872},{"_id":"themes/next/source/lib/bookmark/.git/objects/b5/c8b8aa1a6dba7c8152b49ef103a0952f1bb9ca","hash":"d070cad9094ddcf44be0e16b3872f1fb4f05ae0d","modified":1557991418034},{"_id":"themes/next/source/lib/bookmark/.git/objects/b8/e5e058b339881ced4b4b5c4d89f337ccfb67de","hash":"0d229cce5fbe7e41e4961070dd2e4d76c7b3efb6","modified":1557991419899},{"_id":"themes/next/source/lib/bookmark/.git/objects/bc/0570da6c07cf361d794008e58455455a2580be","hash":"822af280dbbe78499a932faf9229f4c467d48cbe","modified":1557991419867},{"_id":"themes/next/source/lib/bookmark/.git/objects/bf/05dfc0c17af4b48e94676e1e2feaba911d8c71","hash":"4d8adbebcb8ffb4bc3c61b9c97bd225f128b8e74","modified":1557991418617},{"_id":"themes/next/source/lib/bookmark/.git/objects/bf/c91bf59adb7231937b98d35cb952b4bab01fff","hash":"016dc36835bb17ba3f54eebaef4d57f5498015da","modified":1557991418037},{"_id":"themes/next/source/lib/bookmark/.git/objects/c1/7940ffb480f454472c9083efabce723ff53cd4","hash":"29bbded01d4399f509abd809c00957f182226432","modified":1557991419852},{"_id":"themes/next/source/lib/bookmark/.git/objects/c3/75bd4420a3baa49b9a5d52f8040400491ac933","hash":"beb87437d1591c6bec51a6e85176f576092a83f2","modified":1557991419886},{"_id":"themes/next/source/lib/bookmark/.git/objects/c6/26688a33395276a262158e171027a61c56150c","hash":"3727c122ab41e9dd1abc6490a40eb28f212c5c8e","modified":1557991418026},{"_id":"themes/next/source/lib/bookmark/.git/objects/c7/631242bf4ea5781b2d173d999b41c69fdd8ace","hash":"f2d3b9fb648bed7f61dc917d9ad45550c4c70e77","modified":1557991419897},{"_id":"themes/next/source/lib/bookmark/.git/objects/ca/799c34c37f63bd64ed9b49413e7fc6db8ab2ef","hash":"4e6ee2dffc199b5954fb34b129fe2f012099463d","modified":1557991418621},{"_id":"themes/next/source/lib/bookmark/.git/objects/cd/ea049768c3f2d2b89792c19a523584590292c5","hash":"5e69fbae98becc6ed3be947a2450511294252891","modified":1557991419869},{"_id":"themes/next/source/lib/bookmark/.git/objects/ce/70a57b7d6bcddae01e3434d416c27c84b24727","hash":"d8ccbf99469b51ae629347665f96354c264457b4","modified":1557991419857},{"_id":"themes/next/source/lib/bookmark/.git/objects/d2/45f9acfffc2e168c17bcc4e115527f21a77521","hash":"76d31ac0c9ca563b5854fe5b6c5ab46ebb202680","modified":1557991419878},{"_id":"themes/next/source/lib/bookmark/.git/objects/d3/a06b992cfe7d26e022b14abf5ba563e6e63c4a","hash":"6820962ea4a4da9e9de834c97c1630477c30ef20","modified":1557991418630},{"_id":"themes/next/source/lib/bookmark/.git/objects/d4/d4c40411de7936e90c6ebbc19e182ad225cb4c","hash":"f8d44f87905d5dfbeb1fdf5519a5256d27d00120","modified":1557991419890},{"_id":"themes/next/source/lib/bookmark/.git/objects/d6/31561b3edf93b81d38f81278d6574c77006e39","hash":"afaad8a2c6944b11695122cf45cedadbc3bd7605","modified":1557991419870},{"_id":"themes/next/source/lib/bookmark/.git/objects/db/3b3566df6e7d89575c4150067f61087be1bedb","hash":"118afda770f93908ad97d6ad0bb6a42b21aab9cf","modified":1557991418029},{"_id":"themes/next/source/lib/bookmark/.git/objects/de/52a356f671fa73a9d9910c26968d47100c655f","hash":"5bd5f521df149c8e24640151b6d83b3c6be1fd30","modified":1557991418028},{"_id":"themes/next/source/lib/bookmark/.git/objects/df/af7173f5d152681fb2bc7adfdebb54ad195281","hash":"7fc27717b2f7da8f6a6e40ac8d88c75485a505fa","modified":1557991419836},{"_id":"themes/next/source/lib/bookmark/.git/objects/e7/aba3f8ec35017b4dd2bc8f5ca94253a8674ce7","hash":"8fe85003f71bf38e6ae367366ae6e95a819d046d","modified":1557991418021},{"_id":"themes/next/source/lib/bookmark/.git/objects/ef/090e162cd7cc22d2da95d77acac1d7a1eb9c43","hash":"a6997644fb850bedaeeb01adfc90fc404cf80074","modified":1557991419839},{"_id":"themes/next/source/lib/bookmark/.git/objects/f4/5d8f110c3034162a1091dafe4b03d2e56b323e","hash":"963dad8248030a8d7b185f4726e40a65a0583c0e","modified":1557991419900},{"_id":"themes/next/source/lib/bookmark/.git/objects/f6/c892849ea799eb017a3d5bf05edb602780cd38","hash":"3b568af69c7a3dc7439155fe36b64a65e8b0bb79","modified":1557991418032},{"_id":"themes/next/source/lib/bookmark/.git/objects/f7/bc8429b09417e69629d9fa0c2874dd5adc30d2","hash":"d8b3844ae942e165b59b6a57c5decdeb35582539","modified":1557991419876},{"_id":"themes/next/source/lib/bookmark/.git/objects/fb/0a1d42d6507805651dec61ecc4df11f37dc1a6","hash":"fcef8ee1a40833b2cf5ecae90bfa22002f46b29a","modified":1557991419884},{"_id":"themes/next/source/lib/bookmark/.git/objects/fc/63af0044284a5b08f20cf1444a062176d835fe","hash":"9994dd502452c757856b88aa0d1be86540dd7a82","modified":1557991419883},{"_id":"themes/next/source/lib/bookmark/.git/refs/heads/master","hash":"fce63708909b2252a3ec110e5bb2519a3d702c79","modified":1557991419918},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/02/5cf882fc75a324b1d71b0921eb52ea427387fd","hash":"4a0f15d00f50c629f01c2274e26ef05b3779b6c6","modified":1557907960867},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1557907960872},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/15/9cfb8a3050111dfb3e6635e3f37fe68de2ab30","hash":"f4e1752896135edd6c9a36164b45893a59839548","modified":1557907960874},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/20/47d8728f7950fcc2276c339ee199302805838d","hash":"813e7f6c3b8954c40b250e6ba592d6bac7874397","modified":1557907960881},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/25/3593d429ba9f66eb536d2577e4aa8b74ed7dfa","hash":"b68bb1519d36e82753367a811009e5850db4ddce","modified":1557907960865},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/56/4913335d11e112ac80e8d550c8347016007f6d","hash":"50e9db730ceac6b2d0c8e8d5a3fec450290fdd8e","modified":1557907960880},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/57/6d268825c6e7b3892828b61b9b408600faa1f2","hash":"2ca9617d2459b9e010e71b3b221fec42d76cae32","modified":1557907960876},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1557907960878},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1557907960879},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/6c/34e310dd41c6bfa8db842190388ab83e6d4fa2","hash":"b327c0ce763240a6a8bd2f3fb55ace6b9e3df671","modified":1557907960870},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/7e/871dba93cad35ffcec76a936259ae9a3641bc7","hash":"957e9e7db09ee72fc49ca852d3cc67242567fa45","modified":1557907960884},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/ab/2197a6f5baffdd1d2895c169f4777921cc4027","hash":"81a75ca40bcfd278d6a9d67dedc8d61d959e2baa","modified":1557907960877},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/b9/07949515b208cc605b513ff9d5b8153cbe2fe1","hash":"8fb6e8f2e6b4df8787239335ef9777a6c888d3c0","modified":1557907960882},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/c5/8416b72bd371aaf3bc8952f819c1afd3e4c0b4","hash":"aa8e6e340697fc6d9697c1ab8213ee40aca4ea82","modified":1557907960871},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/c6/d0381e6cd08086561110f76b5f921bf81a6f87","hash":"be98eb9329c91132e90d942a44d05a41c78b4470","modified":1557907960869},{"_id":"themes/next/source/lib/canvas-ribbon/.git/refs/heads/master","hash":"03b53be10249625c87e7cf7311b225cb145e3039","modified":1557907960902},{"_id":"themes/next/source/lib/fancybox/.git/objects/00/c03f6be011e8878608eec12f68caf42b73f38e","hash":"8516bd35bc8f9223e13de5877778c8d14d49d6db","modified":1557977055272},{"_id":"themes/next/source/lib/fancybox/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1557977049442},{"_id":"themes/next/source/lib/fancybox/.git/objects/16/b01254a56610f4c6b7721c534ed4fc40ae51dd","hash":"88ca5fd99322d3a4067e0711af79f41c078f2ef5","modified":1557977055285},{"_id":"themes/next/source/lib/fancybox/.git/objects/19/3567a3107003507fafacd255c349857e417926","hash":"ef5eab75e8c6998cb223edb4eb8a26c4cfc9415c","modified":1557977052922},{"_id":"themes/next/source/lib/fancybox/.git/objects/1f/a2c5f332b7e304431213aec21012e53f8781d7","hash":"7632806182aa989d3b7029579d5c03c34b113ee3","modified":1557977049434},{"_id":"themes/next/source/lib/fancybox/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1557977049443},{"_id":"themes/next/source/lib/fancybox/.git/objects/36/9bab09306448a2970d378b59bb21c059edad63","hash":"877e0c15623d0d6ff8f09bb627fc60a489f3c105","modified":1557977049451},{"_id":"themes/next/source/lib/fancybox/.git/objects/3d/521bfc64755e348870094e85323dc1b9c96a6b","hash":"e9660fc4f89ecb176b0ab6e4860579c1bfe9f9cb","modified":1557977055280},{"_id":"themes/next/source/lib/fancybox/.git/objects/47/d427b6c52396bbab53a05f57aaa82b52c805b1","hash":"c5626bbb62f4d1d1e39034e7f44baf4c509410d6","modified":1557977062809},{"_id":"themes/next/source/lib/fancybox/.git/objects/51/cf05811ed7d35e92551db1ba5a6e267ce781a5","hash":"99c009035ea86e3876b586577677d4d62ae12379","modified":1557977055278},{"_id":"themes/next/source/lib/fancybox/.git/objects/53/ceaabe0f8677333c5be196778b3e40840a1869","hash":"7bc1c1c42059d5402335b5293bfb5e54bee22557","modified":1557977049437},{"_id":"themes/next/source/lib/fancybox/.git/objects/54/0a7b36ee26decfc3f0f34bf73bc85c48899128","hash":"2e5447a9dd879d71368e9dddd34d93849d00b934","modified":1557977055274},{"_id":"themes/next/source/lib/fancybox/.git/objects/63/c555caede30ab06d6dba16644a827e9574c8cb","hash":"846603220288272ad5d35ebdc3c917cc4adce424","modified":1557977055275},{"_id":"themes/next/source/lib/fancybox/.git/objects/64/c47e893a0fef71c8c0930975ef114d9812da56","hash":"eaad75fab15724f9c2b069fc1ce9b8216be149d7","modified":1557977055281},{"_id":"themes/next/source/lib/fancybox/.git/objects/78/068b93f813cecbbd50c8247de547035009d512","hash":"4bc2bee779bd7e3cca13ee34801cf1e12585e5ae","modified":1557977049453},{"_id":"themes/next/source/lib/fancybox/.git/objects/7b/15d3cb03fda86241f8b2b335f04e9b9de0e1c4","hash":"d1fe3bd82c90f7d93874798a8ee8ebf1391d7207","modified":1557977049455},{"_id":"themes/next/source/lib/fancybox/.git/objects/7c/c60b295fa2dcb82537a63792c9b3b3c2e74c33","hash":"b2dc23c71b13726c391aaefaa5312227a9b6ab7e","modified":1557977056790},{"_id":"themes/next/source/lib/fancybox/.git/objects/7c/00ef8195b73793d477d22e723ecdac9553ebf3","hash":"fd8c4fd143b32fb3e86367f123feb7c35b305262","modified":1557977062799},{"_id":"themes/next/source/lib/fancybox/.git/objects/89/9d7a75b543fbed2a785f67d995bc77e06eb2e9","hash":"5651e2b80703225f642625c0fb2646543096d2cf","modified":1557977049435},{"_id":"themes/next/source/lib/fancybox/.git/objects/80/6b27034bd69d563e4243c2f12b43c7064b32dd","hash":"b7d3e8020767ae60a2029da8eccb0068623dc618","modified":1557977062807},{"_id":"themes/next/source/lib/fancybox/.git/objects/92/4369c371444afb18fb86309229f5b4c24c6cf4","hash":"9eb6fa8ff9081e6650f6bee350d21567df105737","modified":1557977049686},{"_id":"themes/next/source/lib/fancybox/.git/objects/94/a9ed024d3859793618152ea559a168bbcbb5e2","hash":"1c2d080a86f03eb960e112a94910a5115addf57a","modified":1557977049448},{"_id":"themes/next/source/lib/fancybox/.git/objects/9b/fe9361836240600c1bcc3cab9d42b35e731fad","hash":"3d38ffc7ac1ae85224691ef15d7f32e40c40b3a2","modified":1557977055283},{"_id":"themes/next/source/lib/fancybox/.git/objects/aa/654e17af8c354994f706c4e33bba6b5b70caeb","hash":"22b1bdf0b0974bf5e9022953ac26066056c235ff","modified":1557977055270},{"_id":"themes/next/source/lib/fancybox/.git/objects/ac/97c2cc9f61c52753abe4174a4a74b2064e5af0","hash":"272e74036b0612de83d9d0aa9604d3edf888b249","modified":1557977052919},{"_id":"themes/next/source/lib/fancybox/.git/objects/ad/569256343419017e8832a38faaa1c786716a1d","hash":"0538e4abd112b0a843035f28a511edabbe73f2ce","modified":1557977055276},{"_id":"themes/next/source/lib/fancybox/.git/objects/b3/b3098638624b56be968573e2dab1684f8a7f06","hash":"6fa11a2d904dff2b8f4ae1bd88bdbb66736438a1","modified":1557977058313},{"_id":"themes/next/source/lib/fancybox/.git/objects/bd/e1f741357b44b49290d43fdd193125202fef81","hash":"9beefc75cc0c37d04e98dd13b51ad85df40e77b9","modified":1557977049439},{"_id":"themes/next/source/lib/fancybox/.git/objects/c2/fc5def1b6c38369e5e8b849adb956bd79b549e","hash":"27f03b9616e615b2724bac0fa4507d152697f3f1","modified":1557977049436},{"_id":"themes/next/source/lib/fancybox/.git/objects/f6/bb280a0b2c68256a8e906b35c6976c80c1b3be","hash":"5daaee11fc384fbe0f02c7123036c954ee9a73fd","modified":1557977049440},{"_id":"themes/next/source/lib/fancybox/.git/objects/d5/d10f6be62acc10fec6e11e8dc4affe1184a17b","hash":"cec51b2539349d2aba1ec5d11eaded3815eccdc5","modified":1557977058317},{"_id":"themes/next/source/lib/fancybox/.git/refs/heads/master","hash":"d1840ae4717ac8eb10df2e61a7851f5542f70f90","modified":1557977062832},{"_id":"themes/next/source/lib/fastclick/.git/objects/06/e01f4e99baeefef4a483cd1e902193bcce988a","hash":"2452637b09d437ee414cb711f3091e6aaf49eaf9","modified":1557977088757},{"_id":"themes/next/source/lib/fastclick/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1557977087942},{"_id":"themes/next/source/lib/fastclick/.git/objects/0d/dbe7d4eb11134cfb5fa14b3e190bd9fb3ed82b","hash":"95af863cce08aad6f65d6932af9ef732712740f7","modified":1557977087947},{"_id":"themes/next/source/lib/fastclick/.git/objects/18/e1abd47f6274ffd7ed82dc00decd1c00c6e323","hash":"5a569722fa4f206672376b71c3e1c16f643e64f7","modified":1557977087950},{"_id":"themes/next/source/lib/fastclick/.git/objects/22/5ff660ec3fd4a0a98aa3dbeb6c6c66ecac5e54","hash":"2535a5fadc55fcfbcf38cb047f660985cc22c729","modified":1557977091310},{"_id":"themes/next/source/lib/fastclick/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1557977087945},{"_id":"themes/next/source/lib/fastclick/.git/objects/3a/f4f9d6f14e39b48e9c449de1c660e245a2bc27","hash":"bf9503b3af60d018a7b9ad9e177b424b14a970e5","modified":1557977088752},{"_id":"themes/next/source/lib/fastclick/.git/objects/61/c39a632ceeb8d42b91481c0b54970cf035267a","hash":"dfb032f767e71a01cf332cfec0eca764ae7073d6","modified":1557977087937},{"_id":"themes/next/source/lib/fastclick/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1557977087946},{"_id":"themes/next/source/lib/fastclick/.git/objects/82/8e51d486478532fecc7e21d0b410a0c09e40ed","hash":"efb8b264c23d6265b18a8e8ce11b2d4e17746cd8","modified":1557977088759},{"_id":"themes/next/source/lib/fastclick/.git/objects/86/c3d4aeba88b97f37cd9f6b70bf2d57a7a21826","hash":"fff2a0379207fb85c1508fc1c63bed957c294202","modified":1557977087952},{"_id":"themes/next/source/lib/fastclick/.git/objects/8d/eee862332602c5f704f7f55d8a996b60cc6be8","hash":"b46e05207a48d1c732f8179a7a5b83d1649ce82d","modified":1557977087936},{"_id":"themes/next/source/lib/fastclick/.git/objects/9f/d0fb1402a4c303aebe2f19463f7e6a1e220cd5","hash":"b830d61384e84ba93984d0db1609bd2d4ad81300","modified":1557977087938},{"_id":"themes/next/source/lib/fastclick/.git/objects/b1/be81d4f11e36095d68afc4502fdb16aaf944be","hash":"3a5ba6f240fb736ae697059d327f635fbf1bec20","modified":1557977088756},{"_id":"themes/next/source/lib/fastclick/.git/objects/b2/5dad1c30c8b4830293330b60d39c75f7e3886e","hash":"8206eb6b273e8e6ac85535f0f7a645d3c3394885","modified":1557977088754},{"_id":"themes/next/source/lib/fastclick/.git/objects/c2/e7e6ecb9903a6bfc8949f082afdf36271abf09","hash":"20586bdc4ffa17071096e03691f455fd681348e2","modified":1557977091312},{"_id":"themes/next/source/lib/fastclick/.git/objects/cf/0642795f0b53282dac0e2978ae6d1b03b365b5","hash":"7c8b1e12e4d34a5e3295e98f25a3529a7f33479e","modified":1557977088753},{"_id":"themes/next/source/lib/fastclick/.git/objects/cf/abed7d73eee3176b90b91f3dd656666d8c639d","hash":"bda6cd7c2f9d7b568498f96a3d4248563034eabe","modified":1557977087940},{"_id":"themes/next/source/lib/fastclick/.git/objects/ea/f4c46b3e372e54a737e6d6cb2d4e0c386bf230","hash":"0c683fca4712fe82a3fb591d565e6c002bd7c0ac","modified":1557977088758},{"_id":"themes/next/source/lib/fastclick/.git/objects/ec/12c6da577ebf74eaad24abe751db12ea736045","hash":"a3728b76676627e7ae4227158bc169e7eb2b81a2","modified":1557977087939},{"_id":"themes/next/source/lib/fastclick/.git/objects/ef/3f987c6490745eedd60367aa3c25413f69879d","hash":"b9bdc7896f4e609871226f46720d5e425e0f65b5","modified":1557977088755},{"_id":"themes/next/source/lib/fastclick/.git/refs/heads/master","hash":"29e337078ba669ba9419e1a8f5a5175432ae9c71","modified":1557977091334},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1557901996183},{"_id":"themes/next/source/lib/jquery_lazyload/.git/objects/08/d4d5ef639d45881e2c31089252871109b3cb0e","hash":"e1d5e486a1d20a1cb219a6998fcb9549f84ca0a7","modified":1557977100535},{"_id":"themes/next/source/lib/jquery_lazyload/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1557977100543},{"_id":"themes/next/source/lib/jquery_lazyload/.git/objects/0d/fe01dbfc3817db9740f7d9593e6c0d0ce4bcfe","hash":"40d7c408638a545f5d206dacc7a666562ae863b6","modified":1557977100556},{"_id":"themes/next/source/lib/jquery_lazyload/.git/objects/1e/6843316b3b3be83c6296e38edbcf7a1a389eaa","hash":"b85a7e69e5655a3e37e9fc6d0f7e2bacdbff58fc","modified":1557977100553},{"_id":"themes/next/source/lib/jquery_lazyload/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1557977100545},{"_id":"themes/next/source/lib/jquery_lazyload/.git/objects/3a/9ca03dafb2e0a3ee0132e998e1f95146a1187b","hash":"b2a3ed46595b48486b9ba48cc3718cb981f62533","modified":1557977100558},{"_id":"themes/next/source/lib/jquery_lazyload/.git/objects/49/94fde5a528c6dcf575d1300c9feb7a790580dd","hash":"849400735df951aba8ed44ba0a66b4d7c13c09a8","modified":1557977100559},{"_id":"themes/next/source/lib/jquery_lazyload/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1557977100547},{"_id":"themes/next/source/lib/jquery_lazyload/.git/objects/7e/6c9d90608b7b346b87da90c2aa3389822a5872","hash":"5a939a822a36748559b6b67651f48b82d6d9a209","modified":1557977100538},{"_id":"themes/next/source/lib/jquery_lazyload/.git/objects/92/9d3c446aba8ac3a7854bca3fa99071ec0f1b0a","hash":"324298d9a7b50c2a0640053f01aeaa53e8d1a7ca","modified":1557977100551},{"_id":"themes/next/source/lib/jquery_lazyload/.git/objects/99/99f3981a0f624ec98a63f2bef6b59ab5a4a130","hash":"e3318de2933bd40a6b707e06d63d97a72d2a41b6","modified":1557977100539},{"_id":"themes/next/source/lib/jquery_lazyload/.git/objects/a0/bb6371002f36c275d90ef0a78f4e951c1b36a4","hash":"e73b2d57d9528243fa4163d4078ff74f274aa159","modified":1557977100555},{"_id":"themes/next/source/lib/jquery_lazyload/.git/objects/cb/5cc9434249607fc442175e3e6c31f3a8cb7a04","hash":"ee1bd67de46a7e6c3a47a1abe0487a2b741d6be4","modified":1557977100549},{"_id":"themes/next/source/lib/jquery_lazyload/.git/objects/b8/7cfcee7b6c989840000d9f5e3bfe75287e7450","hash":"51ead0dc580f672ab9fab6ae4b4b49918b813574","modified":1557977100537},{"_id":"themes/next/source/lib/jquery_lazyload/.git/objects/fe/a9333a5d0d257dd748e4348bd97a5b71075026","hash":"a093eb542e88824fac9dda1103bb8def2c565ec6","modified":1557977100533},{"_id":"themes/next/source/lib/jquery_lazyload/.git/refs/heads/master","hash":"ffca309262e3481ddc8a642c00d96ba47da8dca4","modified":1557977100578},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/10/7997cd9f09e787407d6a579bb0ead61ba0c44e","hash":"a7bb772e0f541b9f0c5e4682f88881faef7d2b87","modified":1557990911543},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/0c/97d452adf1f9aa29468c10dc5aca581c40d35d","hash":"8247b73544627904f1c49b2d48e8a5ca24c49d94","modified":1557990912482},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1557990911550},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/1f/9bfac8ac3b22f100c85bb82877c7af973f011a","hash":"74f0088767a48b5b8874bb5e8953604058233105","modified":1557990912449},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1557990911551},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/34/73a532c76c2ec7eaafc9bba9bc37851cb5a349","hash":"991d675a7982030fef4e8103ecdf717e2e153143","modified":1557990912477},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/35/b5765a89abcc57439ad0e7b60dc67225e76570","hash":"b020fa3885506f64651a4a63d42b32c7874a072a","modified":1557990912474},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/37/e84bbc9c853d9abc39b18361a67d09402a9fec","hash":"330ba4772d5feaf23bd85aa38be94a1b254cac8a","modified":1557990911534},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/3c/673c6e10073f4cf715526c3ab99edf7461b267","hash":"9362453f89eefcc6988cd3a39548c90402f616a8","modified":1557990911549},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/40/a8a2ab6075fb13a489aa2585f55518e03440cc","hash":"40a879b454bae72ba30ab918e7cbb3dee04c45c4","modified":1557990912466},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/41/f2acffe002ce9fa94904bdbb105c62697c08bf","hash":"6aca807e726bf9bbffdab1b97cae1132dd3570c8","modified":1557990911535},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/46/66508d485306f48ac866f4a0eded896b01adb0","hash":"a37ee79e50b83b3a5a7f736cfc6b8eafc210ebca","modified":1557990912489},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/49/c5d2b0c8ded3a5465f659504d5654759b45ce9","hash":"133f2916c8dd706d9ea44203f671d42abed6d183","modified":1557990912468},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/49/e08108a89c7bf4f1e03fdf9d23fa1841ddc40a","hash":"3a32bfdf83debfa739a05a12c77c9c8c9fad6baf","modified":1557990911532},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/51/e4a626dc726971ce48b9d29531ec4fa11ab93c","hash":"8bc98d2bd4f224fbba56e0339ba9e1abfbd0e676","modified":1557990911541},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/63/ce5669cda10d9c600a65df1c509155a9dce354","hash":"e7eefb05c18a77c99c1044dc53cc0b33bc4bc723","modified":1557990911544},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1557990911552},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/72/38adfc9f0b65e7dd8e7eb39b53fd8dbd05728d","hash":"67f5fb35cbbb4625e049368c8ef7fef03e21315d","modified":1557990912491},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/77/ad104add4d67baba615eccfcc7876bdf60256f","hash":"787497f0b2a074be846ae940ba58475a830690d4","modified":1557990912493},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/77/b1d62571d3374de0902fdf14c3fd925263c295","hash":"f0d087a62296e14072d250d0db5bfeb01e3e0f4c","modified":1557990911546},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/80/8d63b637e30043e74f5150047c232028ffa3bf","hash":"c7cd9201316a2cf66b63cd0f520dc827912d8be8","modified":1557990911553},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/8a/e95435136e887fc30227f9fdab68ff72689315","hash":"f1225345f08eb5abbf849a40efdec16839268c9b","modified":1557990911548},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/91/85a82ce05e0c4c6287e3ce6c31d79049a6c5de","hash":"d40af8a4f325b8b2d6eeb1f51497d2313aade46d","modified":1557990912475},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/96/b1227c70e63f95b099993321043a2e05abdbea","hash":"d1f0885e3a68fdfc87e68e5ba6b60de116c3c7a5","modified":1557990912486},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/99/ac01b3cae78a765c45566d5540596f71f0f9ed","hash":"394e54788569a0aef47f5c1867b7a617d314b677","modified":1557990911538},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/9a/563a770314159840897f1852b05f183911ae71","hash":"0949c3c36849e955c84cc66f544fbeeca266ae19","modified":1557990912488},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/9c/850e429959950cfd82a30843ad130dfd24331a","hash":"001c3423e8a4bf2ccd3e0ad3080d5cace613d42c","modified":1557990912470},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/9f/e80d3fee719ad9953c0e8e8dec472bb727d17d","hash":"09516f8a3f62a9e286f3ac1985969d0913d53271","modified":1557990912458},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/a1/5c0ab3f7ca37d06a7a3dc28f6375ac8fcaffe1","hash":"3aa24fa2254a71f9b408a01ad7154cc1cbf7cde6","modified":1557990911545},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/a7/df932fbaa27cde88a4e1b6b222e445d24d88a9","hash":"65ed1fff3d6ea0eed90011b6c9c892381c0b4837","modified":1557990912456},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/aa/f4e31e1d4ea073ad9f6926e146fea3c6d8b423","hash":"7c412d2a2243907dff0a1940f13a539675d76428","modified":1557990912487},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/b2/8efd888e853a00d7c8ba8fc827ddb0edb6668b","hash":"8c17e115b7c8a860650191fc1b74e7861ab0f7b9","modified":1557990912472},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/b4/8a9ad41dbacf220607a3854e23f2136ced96fb","hash":"81ee83b48edb7df4f08573cdd14200be5f62128a","modified":1557990911537},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/bf/839b1a2dfd79af314506907196f817d1d540b0","hash":"196a52782c02c03b787cca10ca172a6be6ddb8e0","modified":1557990912494},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/da/3a5548a43813122821bf626fdd51a15f89afe3","hash":"1d8c39585806e5c7b051eb58d566a399b0e77006","modified":1557990911539},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/e3/096992403adfd6ad955585273915bdeae3dc32","hash":"356ee4003511e7f9c9c4badd52af674adceec2d9","modified":1557990911533},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/e7/169e14c00f267f49acb69c1ba41dc9a3229d36","hash":"2b79081ef52aec5ca3896894e25e330aed84ac6f","modified":1557990912465},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/eb/83c3470835cc056d65fbaec5ba59fc01a341c6","hash":"a48447a56db4dce3b2ce99fcfd4cbb5d5902877f","modified":1557990912481},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/f5/a400ecc881307dc0faa24170ae0a9bcbba861c","hash":"4b82935622bd12041cf7665503ae8e060705e7fd","modified":1557990911536},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/f5/fc2c417f7156d25437bbe069fa10645b4c3a63","hash":"377e0fce80cab14d6966371260926ee78da12b09","modified":1557990911547},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/ec/efb0da782cd6bdfbd7aec14e8e186c2010beb3","hash":"002214074d8349ca4765414ee39cbeb0a3a443d6","modified":1557990912460},{"_id":"themes/next/source/lib/needsharebutton/.git/objects/ec/fd49187c43c81ad64c250eac1d63893c073e38","hash":"0e6f432ab1ec9a413655267ad3f62205e2e71f99","modified":1557990912479},{"_id":"themes/next/source/lib/needsharebutton/.git/refs/heads/master","hash":"414a643b841a756253dc0c2472b2f7a6e9b14778","modified":1557990912513},{"_id":"themes/next/source/lib/pace/.git/objects/00/13175fe71888324d9142744034e8296501174a","hash":"0ad0e50f7fe91fe14491924aa4b1e2e8f060a5cd","modified":1557977106486},{"_id":"themes/next/source/lib/pace/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1557977106483},{"_id":"themes/next/source/lib/pace/.git/objects/1c/159365320ef5dde63906912f3df067376b40d0","hash":"1dd6b7373c3f9c67e34aa319c9c08fd0f667156a","modified":1557977106714},{"_id":"themes/next/source/lib/pace/.git/objects/23/4f9b3e93f06a85cb2ec01acc872ccdc2bec7cb","hash":"63f8640eceff35a80175a102fcbd8789e690cfaa","modified":1557977106716},{"_id":"themes/next/source/lib/pace/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1557977106484},{"_id":"themes/next/source/lib/pace/.git/objects/35/a749d823ad0aae6111a76dc501a1170478f376","hash":"e757129fb6bca3170b62b05f3e850e4b55f3ae88","modified":1557977106713},{"_id":"themes/next/source/lib/pace/.git/objects/3e/dcd352d2a1a60dbb6a43e7e9f00bab8b55791a","hash":"725bf5094855cd943dd1cd351906fb1ebec1d861","modified":1557977106490},{"_id":"themes/next/source/lib/pace/.git/objects/41/28e69301ad36a283c0fc523f3aef89644d2467","hash":"d8b985cf431fbdc5b4fa3be89e27db7a3437c920","modified":1557977106720},{"_id":"themes/next/source/lib/pace/.git/objects/49/0db22b657dd64430d003fe2831905a54858b22","hash":"43694656c4c331cfa3667afca630bd486ac0d0fe","modified":1557977106500},{"_id":"themes/next/source/lib/pace/.git/objects/4d/fbb499a4f7b2f26a535c335cd66c966ff8b261","hash":"14e4cdcc137045c7efed32f796273d40c9fcef87","modified":1557977106711},{"_id":"themes/next/source/lib/pace/.git/objects/53/3d55db0342c2b011ac05703c3b42e88a25c1ed","hash":"c48454760d2e04602a5499188b33d38839c58aee","modified":1557977106712},{"_id":"themes/next/source/lib/pace/.git/objects/60/0378418401f2b0e7c58407a7bbc5a5196cfa51","hash":"20489d796247dda758599f40cbfcf14d194ef64a","modified":1557977106479},{"_id":"themes/next/source/lib/pace/.git/objects/61/fcbe3a99ad371eacdf3a3703883f8e95e072c8","hash":"480b60d684f9a077ade5dda0acfc75bcd9597aff","modified":1557977106482},{"_id":"themes/next/source/lib/pace/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1557977106485},{"_id":"themes/next/source/lib/pace/.git/objects/82/8dcba3c8a21de08d1eb38f2eee453b51543188","hash":"629aad2ee2e564790e78cd46e99ad396544960ab","modified":1557977106492},{"_id":"themes/next/source/lib/pace/.git/objects/84/a17ac7b4fe9cea559de91f00af88f810bff7f1","hash":"b41b6d3cbccd75b711f0523bba1c26bf19b0a862","modified":1557977106477},{"_id":"themes/next/source/lib/pace/.git/objects/8b/b4535a79cc15127f8906b24c4e0bb4a38a5947","hash":"9c2d65a63f18929b09f3592dda064f24309ff98b","modified":1557977106495},{"_id":"themes/next/source/lib/pace/.git/objects/97/1e8a1f2ad6d45f693980c106af0aead9d1c215","hash":"e45f0963920a53a57f6b53d178e5b05a8e315189","modified":1557977106487},{"_id":"themes/next/source/lib/pace/.git/objects/9b/3058068409f2282607ebb91717d7a6a1406230","hash":"651c5857021e11dc397df86dbe0f01e6c7dc7f16","modified":1557977106497},{"_id":"themes/next/source/lib/pace/.git/objects/a6/dbd9c99e726f621e2bdcd3c6fe2795a5d4272d","hash":"25350dd31f504af7206610ced355d162aabda8dd","modified":1557977106499},{"_id":"themes/next/source/lib/pace/.git/objects/aa/813c5a6398600e01b740696cd889eb3becad84","hash":"c62a1513ca820dc59fe1cd6d9ec16c92e0e2fbf0","modified":1557977106480},{"_id":"themes/next/source/lib/pace/.git/objects/c0/05c71f1a000d8187df58083d215c962d7f5505","hash":"dffd212ca2ec705233fabe82a6f483d6be4b151d","modified":1557977106493},{"_id":"themes/next/source/lib/pace/.git/objects/da/79363b808519d44a7eda67d7bc81e1587a06e8","hash":"0dc5dc27991da9a09d705e488bc3f1fe5a4d4728","modified":1557977106473},{"_id":"themes/next/source/lib/pace/.git/objects/de/79ab6539ac3702aaac64b879d95e6575f4eefa","hash":"0046fefd52ed4679e0fee757cc91ced94e3ddc12","modified":1557977106718},{"_id":"themes/next/source/lib/pace/.git/objects/f3/0e0a99bb016267bde55537dd47b3657ae59544","hash":"8bf0bc17a6111b6a82981073133f33cc8e815c41","modified":1557977106488},{"_id":"themes/next/source/lib/pace/.git/refs/heads/master","hash":"2cf353bc3f5e2816a3a0e05d3f154a777200f091","modified":1557977106742},{"_id":"themes/next/source/lib/quicklink/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1557991314583},{"_id":"themes/next/source/lib/quicklink/.git/objects/11/e8067e6c0cdae639117aecc2ca3ad6d888ca87","hash":"72dfc49c3c5a406882d490b97d76b66589382082","modified":1557991314585},{"_id":"themes/next/source/lib/quicklink/.git/objects/52/042037798bcdd9a5726448028efaa17f772dca","hash":"95dd799d8f7c87b6a21c2e3a71b7b20eaf1e1ce3","modified":1557991314578},{"_id":"themes/next/source/lib/quicklink/.git/objects/5b/fb1bff7b70e4efdd92493fc9c425448dbf67d2","hash":"31166d650cf0e8e585745153fedc6c90affd2164","modified":1557991314582},{"_id":"themes/next/source/lib/quicklink/.git/objects/82/237e12a9bc524318fd82791f3423a850ba4497","hash":"f59dd24cdc59455ef40a2d3574f46e35957fde8a","modified":1557991314593},{"_id":"themes/next/source/lib/quicklink/.git/objects/8f/acf79585e851e57f649f22f6975886e0ff8f9f","hash":"03e4deb2399a210e871c5b0b8a633d4bf1e34580","modified":1557991314587},{"_id":"themes/next/source/lib/quicklink/.git/objects/99/113457b4bc6c60dc08411fc5d217f2805dfaea","hash":"b29dc34f9f9330e2457f1188bc8ba8559a63c981","modified":1557991314592},{"_id":"themes/next/source/lib/quicklink/.git/objects/c2/54409c5a9195082e66cb0de96dd75dc32eee71","hash":"a8d5ec055ba13e049e47f4e3f6a675043ac42572","modified":1557991314579},{"_id":"themes/next/source/lib/quicklink/.git/objects/e8/a7b4ea5b53ee629d6133d59c80baf82e9f7fc1","hash":"8e7ea1bb1e6dabeac62afa7f90c0e12505a1818e","modified":1557991314590},{"_id":"themes/next/source/lib/quicklink/.git/objects/ea/c7a903f1e20021b4a2e4ccb1c1ea3c10cdc37b","hash":"4d5363eb11fa64c9ca3f06d2ddae3a30d3f5ef05","modified":1557991314586},{"_id":"themes/next/source/lib/quicklink/.git/objects/f1/85d082f90ee52bb436706f1fe28d9f2c67885b","hash":"9a713944eb485f928bda96af5ce74220f10cc5cc","modified":1557991314589},{"_id":"themes/next/source/lib/quicklink/.git/objects/f7/ee626c66d1cead9b19287aa61064219dee34cb","hash":"4541aceb19efe3a1a57f6d82d12ac219fcae2b61","modified":1557991314577},{"_id":"themes/next/source/lib/quicklink/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1557991314584},{"_id":"themes/next/source/lib/quicklink/.git/refs/heads/master","hash":"abf63b88cb301601e13373372744778305d27a0b","modified":1557991314619},{"_id":"themes/next/source/lib/reading_progress/.git/objects/00/4fa4280892c7d18f6151fac22daf51344c02ea","hash":"7a81ed1087c3792f37bd83137d4034179c911627","modified":1557991455282},{"_id":"themes/next/source/lib/reading_progress/.git/objects/01/36e1990fcbef0586e0bd4b9d90b96900dcd575","hash":"37ac2f94a41384f4cb66cd74c8313099367a5603","modified":1557991455277},{"_id":"themes/next/source/lib/reading_progress/.git/objects/01/9a385ce3e8b0232ee5edfa6b4e1dcd44cf142e","hash":"6894d6df0722077c5d21d116f33046625cd57ab8","modified":1557991455297},{"_id":"themes/next/source/lib/reading_progress/.git/objects/03/f74f308aba6eaa459b8e5b1c7e7203aa9d06ef","hash":"fafadfedfbd5b6b7d49061ee85d3568c791e0f3a","modified":1557991455313},{"_id":"themes/next/source/lib/reading_progress/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1557991455288},{"_id":"themes/next/source/lib/reading_progress/.git/objects/0f/1d02f84180d20e5abcaabc0c1bd312a873867b","hash":"192e0e348a38739f606fdef8bd5f710339067ff6","modified":1557991455309},{"_id":"themes/next/source/lib/reading_progress/.git/objects/2b/c9c88e86c252b037a36df9a3d3df519b254bfc","hash":"e647f9721e4f2e1cd52bfff3c80683b787f76a11","modified":1557991455278},{"_id":"themes/next/source/lib/reading_progress/.git/objects/2d/488e7ac12f9be4cba8a7a383e972449b4ecef7","hash":"e477cea6ada0896804b0e8dab23c9d56825a0ece","modified":1557991455285},{"_id":"themes/next/source/lib/reading_progress/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1557991455289},{"_id":"themes/next/source/lib/reading_progress/.git/objects/36/58085a9181df88f19f04603b28f6ea21d199cc","hash":"6a467dd51d39b28c1af9c25869e25c6821f6602a","modified":1557991455306},{"_id":"themes/next/source/lib/reading_progress/.git/objects/48/1ebe947f06e440e41c1a971be0844e852c1d37","hash":"61fea90ca1824db58df6cfc662bc5b371db02224","modified":1557991455293},{"_id":"themes/next/source/lib/reading_progress/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1557991455290},{"_id":"themes/next/source/lib/reading_progress/.git/objects/71/4aebae4e17e00cdb0e82893d9fa39d35b20b59","hash":"d09daa7d244ee40035e6eb67f13867182fb8af86","modified":1557991455294},{"_id":"themes/next/source/lib/reading_progress/.git/objects/72/14afbfc63460dc013ba6368e8c0886597db666","hash":"f67bc8964bd60f5f78fd2437ae946b4e4021a8d6","modified":1557991455318},{"_id":"themes/next/source/lib/reading_progress/.git/objects/82/2aa7ea95e2f40a1c9808fcdba0353650781cf9","hash":"07db481043efdac756c39b1a1c9f11048787bb1a","modified":1557991455315},{"_id":"themes/next/source/lib/reading_progress/.git/objects/83/d5a97b3daaa59cccb44af55f6723f431f2e94a","hash":"448c16fa4f53e5123838d4c3593dcfb15f309905","modified":1557991455303},{"_id":"themes/next/source/lib/reading_progress/.git/objects/8e/0a48f30df2d542c8e86197067f80ce5f794583","hash":"02367707e47c2549ef585f3b2da72c864d6a8307","modified":1557991455286},{"_id":"themes/next/source/lib/reading_progress/.git/objects/8f/ca1e70cfeea939105e31d7d17f7c3516120b30","hash":"312d55b1a7fbdcc14c54b3805f0827fc42ad94ed","modified":1557991455281},{"_id":"themes/next/source/lib/reading_progress/.git/objects/98/a2041bc808f55bbcb9d8b53560e22558338bda","hash":"ebb53379aa2d77ea0832973fa3e44846df0f170f","modified":1557991455305},{"_id":"themes/next/source/lib/reading_progress/.git/objects/a2/7bba2bf42630fc03150b64fc74f2a29c151a27","hash":"b1afe600ba94298a2905a2cf64c900f5954cc146","modified":1557991455292},{"_id":"themes/next/source/lib/reading_progress/.git/objects/a5/3476a996e477ae4494a5b47aff4237b9859a73","hash":"cd32f255f625f6325f13df5acdef0df20c1a982a","modified":1557991455314},{"_id":"themes/next/source/lib/reading_progress/.git/objects/a8/63332915ebfd107ca4418c25c80674875c422b","hash":"f12e708237bcf98c072e73e45f1542cfb5646839","modified":1557991455299},{"_id":"themes/next/source/lib/reading_progress/.git/objects/08/4d73e711ab990007314dab66ac8da236a98212","hash":"aca52af21085b7a579b275a1e7bb5f1a8818e3d4","modified":1557991455289},{"_id":"themes/next/source/lib/reading_progress/.git/objects/ae/aa7a68a7131bd03e0bce06f45bfdfa1cd93587","hash":"d7d37380ba502a4050834df40227d612cf911595","modified":1557991455304},{"_id":"themes/next/source/lib/reading_progress/.git/objects/b1/97881becc7883ad3d3e37cbc6b33f29ef89512","hash":"c044f51aeff15821889c1a2b036ee99b742a35db","modified":1557991455274},{"_id":"themes/next/source/lib/reading_progress/.git/objects/b2/6b015c6a0aacd5fcbd3fd3a09b0b216855f35c","hash":"6924e4c4558366a76578a2497d2fca15ef39a9f8","modified":1557991455296},{"_id":"themes/next/source/lib/reading_progress/.git/objects/b6/eda56cb9647d239b26d86f579204cbccf745fe","hash":"12e479d3dfe08df6f9d4d56be2f0a17d9720d846","modified":1557991455302},{"_id":"themes/next/source/lib/reading_progress/.git/objects/c0/018cb7262951a7eea4001bea16bf6c1db1de0e","hash":"b54299894dbbf00b3187ae3e16a480a91ca75e73","modified":1557991455287},{"_id":"themes/next/source/lib/reading_progress/.git/objects/d1/94060fce08431ebef4cb5f4c02739b913373cb","hash":"b9022b117b03703b5fa8af85fc076b692bde33cf","modified":1557991455307},{"_id":"themes/next/source/lib/reading_progress/.git/objects/c7/8ceb135b768a369ded42f77d4db3f6363bde20","hash":"aa90e157f2a043dad6017bab2e4aa699f6236a63","modified":1557991455300},{"_id":"themes/next/source/lib/reading_progress/.git/objects/e5/dc795cdf7d9163cc736be938a9707f73869c9f","hash":"57163dfa4eebe09d57ede37ee259b7cbb2b1e643","modified":1557991455279},{"_id":"themes/next/source/lib/reading_progress/.git/objects/f0/acd06a59665dabfb6eb0608f0a797fdcd44158","hash":"f85f3dbe326b8752f6e32c7169ed3b409f4167b7","modified":1557991455284},{"_id":"themes/next/source/lib/reading_progress/.git/objects/f1/dcdfc585f60cb1614c480c3b06a1632b1b6d8e","hash":"606959b7d91b2ed28c670c607623ce36ab3a0c07","modified":1557991455310},{"_id":"themes/next/source/lib/reading_progress/.git/objects/f4/5d8f110c3034162a1091dafe4b03d2e56b323e","hash":"963dad8248030a8d7b185f4726e40a65a0583c0e","modified":1557991455316},{"_id":"themes/next/source/lib/reading_progress/.git/objects/f6/8184f97255dfd504e22775df6450edb9b51d70","hash":"b0a36dcf81780a9f82db6318daa065200e16efee","modified":1557991455308},{"_id":"themes/next/source/lib/reading_progress/.git/refs/heads/master","hash":"de1c871eebc3a4c2459021ac3233e709765d1957","modified":1557991455339},{"_id":"themes/next/source/lib/Han/.git/logs/refs/heads/master","hash":"a725fa8409ab606820bd34664eb3d9d0514e4cd6","modified":1557991349940},{"_id":"themes/next/source/lib/Han/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557991349937},{"_id":"themes/next/source/lib/bookmark/.git/logs/refs/heads/master","hash":"2b8647b4c7bb4928abff7f2528fe5819d7e35e1d","modified":1557991419919},{"_id":"themes/next/source/lib/bookmark/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557991419917},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/refs/heads/master","hash":"4db5fac275abdf72e55fdb31c1ddb0b2eb65f36c","modified":1557907960903},{"_id":"themes/next/source/lib/canvas-ribbon/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557907960900},{"_id":"themes/next/source/lib/fancybox/.git/logs/refs/heads/master","hash":"092abefecf4f4391cf20d6a1e9140d5bc02699f9","modified":1557977062832},{"_id":"themes/next/source/lib/fancybox/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557977062830},{"_id":"themes/next/source/lib/fastclick/.git/logs/refs/heads/master","hash":"fcbc244b406a3a07456654ebca3f62fc08130531","modified":1557977091335},{"_id":"themes/next/source/lib/fastclick/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557977091331},{"_id":"themes/next/source/lib/jquery_lazyload/.git/logs/refs/heads/master","hash":"68eae627021f841a8cee14987addf0d1c3214dfe","modified":1557977100579},{"_id":"themes/next/source/lib/jquery_lazyload/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557977100576},{"_id":"themes/next/source/lib/needsharebutton/.git/logs/refs/heads/master","hash":"f17dc7452e8545a7c2202ec0664b750d2676cb56","modified":1557990912515},{"_id":"themes/next/source/lib/needsharebutton/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557990912511},{"_id":"themes/next/source/lib/pace/.git/logs/refs/heads/master","hash":"52cda833101f83026cd6938c807ad2f415fe3099","modified":1557977106744},{"_id":"themes/next/source/lib/pace/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557977106740},{"_id":"themes/next/source/lib/quicklink/.git/logs/refs/heads/master","hash":"4e7cc39a98846036195dcfa3f6e368b284666b4d","modified":1557991314619},{"_id":"themes/next/source/lib/quicklink/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557991314617},{"_id":"themes/next/source/lib/reading_progress/.git/logs/refs/heads/master","hash":"2733bad7f53bacd93699c29623b3af7e8d01d8d1","modified":1557991455340},{"_id":"themes/next/source/lib/reading_progress/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557991455336},{"_id":"themes/next/source/lib/Han/.git/logs/refs/remotes/origin/HEAD","hash":"a725fa8409ab606820bd34664eb3d9d0514e4cd6","modified":1557991349937},{"_id":"themes/next/source/lib/bookmark/.git/logs/refs/remotes/origin/HEAD","hash":"2b8647b4c7bb4928abff7f2528fe5819d7e35e1d","modified":1557991419917},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/refs/remotes/origin/HEAD","hash":"4db5fac275abdf72e55fdb31c1ddb0b2eb65f36c","modified":1557907960900},{"_id":"themes/next/source/lib/fancybox/.git/logs/refs/remotes/origin/HEAD","hash":"092abefecf4f4391cf20d6a1e9140d5bc02699f9","modified":1557977062830},{"_id":"themes/next/source/lib/fastclick/.git/logs/refs/remotes/origin/HEAD","hash":"fcbc244b406a3a07456654ebca3f62fc08130531","modified":1557977091331},{"_id":"themes/next/source/lib/jquery_lazyload/.git/logs/refs/remotes/origin/HEAD","hash":"68eae627021f841a8cee14987addf0d1c3214dfe","modified":1557977100576},{"_id":"themes/next/source/lib/needsharebutton/.git/logs/refs/remotes/origin/HEAD","hash":"f17dc7452e8545a7c2202ec0664b750d2676cb56","modified":1557990912511},{"_id":"themes/next/source/lib/pace/.git/logs/refs/remotes/origin/HEAD","hash":"52cda833101f83026cd6938c807ad2f415fe3099","modified":1557977106739},{"_id":"themes/next/source/lib/quicklink/.git/logs/refs/remotes/origin/HEAD","hash":"4e7cc39a98846036195dcfa3f6e368b284666b4d","modified":1557991314616},{"_id":"themes/next/source/lib/reading_progress/.git/logs/refs/remotes/origin/HEAD","hash":"2733bad7f53bacd93699c29623b3af7e8d01d8d1","modified":1557991455336},{"_id":"themes/next/.git/objects/pack/pack-666779668e313d586492f3aeaa86e15bf70118a9.pack","hash":"b859230713abef4a5f125dd8f95b1af83c96f4b0","modified":1557901996055},{"_id":"public/baidusitemap.xml","hash":"e45f07fee98cd75092bd665cf37777665d06cbde","modified":1558664083514},{"_id":"public/atom.xml","hash":"ed96ab65ca18c298bca5bd6331b2a5dfd363b044","modified":1558673506613},{"_id":"public/search.xml","hash":"64b1974768e100e02addae6bdc159be7a68f37a8","modified":1558673506756},{"_id":"public/sitemap.xml","hash":"e058637320e09ef2712ac1fd97b59451f37f4862","modified":1558673506614},{"_id":"public/about/index.html","hash":"9ba3e8965e7faeb3530ac2a583f6940f5cdadf37","modified":1558673506775},{"_id":"public/tags/index.html","hash":"060478b876fd01bc583c1ed9eaeab31162a0eabf","modified":1558673506775},{"_id":"public/categories/index.html","hash":"230e8fe60b8c988542be29347fe565c2fd25862e","modified":1558673506775},{"_id":"public/learn-ancient-egyptian-gods-in-5-minutes/index.html","hash":"4b437e5e4f7d42b549dbd9573f8373c17966abdf","modified":1558673506775},{"_id":"public/learn-ancient-egyptian-history-in-30-minutes/index.html","hash":"5f05799422ed45aed5998c1764821579c918d8c0","modified":1558673506775},{"_id":"public/dont-only-use-for-any-more/index.html","hash":"50f48691cbbbd47d38d7f791c47e7bbe6f42305f","modified":1558673506775},{"_id":"public/mocha-chai-istanbul-in-es2015/index.html","hash":"0b48ef4fe69b68297e2fb5557550b16fbcd14df2","modified":1558673506775},{"_id":"public/talk-about-a-question-in-nowcoder/index.html","hash":"bcbb49dc4b9bff6f4b0a5fab9f567042d365394b","modified":1558673506775},{"_id":"public/fictioninjection-series-analyze-angular-dependence-injection-and-extract-it-part-1/index.html","hash":"8436856e3507ccb2cea820d5a9ee3aa4080f7e3b","modified":1558673506775},{"_id":"public/watch-sherlock-the-abominable-bride/index.html","hash":"6066ff3bd2ae5946216574bbd456b62bbd4a6a56","modified":1558673506776},{"_id":"public/single-bell-2015/index.html","hash":"e2d960286b646c990b729274c0d724775be1dfe0","modified":1558673506776},{"_id":"public/write-a-game-of-life-using-es6/index.html","hash":"7f6d0ea16f218ad1538349d2a0f8ccb368ea8f27","modified":1558673506776},{"_id":"public/understanding-ecmascript6-note/index.html","hash":"4187e88812aa7f5bc6559f7803bbac7586c1e97f","modified":1558673506776},{"_id":"public/mocha-chai-travis-ci-codecov-workflow/index.html","hash":"850619e9e0334b9d352b2028c6a9f0fdc716a660","modified":1558673506776},{"_id":"public/build-application-with-angular-and-ng-material-based-on-electron-3-file-structure-and-workflow/index.html","hash":"125e1c4dfc0b211259f9e876e917ad4179b25929","modified":1558673506776},{"_id":"public/a-weird-experience-while-using-pyspider/index.html","hash":"56fffcccc6a266f36769a9d9580e66a71f4a9837","modified":1558673506776},{"_id":"public/build-application-with-angular-and-ng-material-based-on-electron-2-use-node-lib-and-code/index.html","hash":"2bae207ec49e70bb18262cf25d885d0a0a4b41d3","modified":1558673506777},{"_id":"public/build-application-with-angular-and-ng-material-based-on-electron-1-analyze-and-configuration/index.html","hash":"89b3cf58644b918ecebb40e0e8c43cb67de3d772","modified":1558673506777},{"_id":"public/build-application-with-angular-and-ng-material-based-on-electron-0-preface/index.html","hash":"f82d54a289f1f9812cb8b0879363b990733b9dd3","modified":1558673506777},{"_id":"public/python-with-qt-application-development-catalogue/index.html","hash":"09f6b2f1c818b2e63a194638a6e22a7b5d086bc8","modified":1558673506777},{"_id":"public/write-i18n-js-with-help-of-npm-as-build-tool/index.html","hash":"a8c2434575d5c0258921aa681375c29e22673905","modified":1558673506777},{"_id":"public/radioit-plan-animate-radio-script-radioitscript/index.html","hash":"68d88f31bc22255d3386efce4bdc27a00b48718f","modified":1558673506777},{"_id":"public/python-with-qt-application-development-2-5-developing-gui/index.html","hash":"7ca425638a6191e9bbde2b8a0ad1244d36e53ae0","modified":1558673506778},{"_id":"public/tour-photo-hangzhou/index.html","hash":"3863473db4e2b734d68421d6a151ce4db8a8ddd2","modified":1558673506778},{"_id":"public/tour-photo-wuzhen-hangzhou/index.html","hash":"bb47737b50b423ee6b88ea74678551b1e77581fc","modified":1558673506778},{"_id":"public/tour-photo-suzhou-wuzhen-night/index.html","hash":"a3e4afae968fe4df280086a3c252f59817a61d69","modified":1558673506778},{"_id":"public/tour-photo-shanghai/index.html","hash":"bd8973cf98429eaa73f25b790f0566f1d8f6ce1e","modified":1558673506778},{"_id":"public/simpletemplatejs-three-versions-and-new-features/index.html","hash":"42623c5b93a051dbfe9f442f0deb7bf6bdabfd85","modified":1558673506778},{"_id":"public/eva-expo-2-photos/index.html","hash":"4ab9589162f149c1f2f87f53bd65f9ac18a4178a","modified":1558673506778},{"_id":"public/optimize-simpletemplatejs-by-myself/index.html","hash":"f42598c3c81acf324925f1fe1e5057c47ca2ae95","modified":1558673506779},{"_id":"public/improve-list-feature-simpletemplatejs/index.html","hash":"4279c2a558b45f4ef5a89fcb1ede6b372ee3c056","modified":1558673506779},{"_id":"public/implements-list-and-flag-in-simpletemplatejs/index.html","hash":"5ed52a9bae9898bd9ff379a2ba4fa9afcbce06bc","modified":1558673506779},{"_id":"public/a-piece-of-simple-javascript-for-template-render/index.html","hash":"4b32da0f18af1b2e5f1a242a1d2d45e77b59ed17","modified":1558673506779},{"_id":"public/dental-extraction/index.html","hash":"0828924d789f1546ccc6e7b8f5bc4392622cf2dc","modified":1558673506779},{"_id":"public/coolshell-puzzle-game-walkthrough/index.html","hash":"cfc908fdf5b699e4de83be2930a6d4525c70947e","modified":1558673506779},{"_id":"public/python-interesting-function-zip/index.html","hash":"3c62717a3974e03c230413a2a12216984b4a9a9a","modified":1558673506779},{"_id":"public/append-a-python-script-for-last-post-about-saving-internet-radio/index.html","hash":"120d9aa209b02598f87c878d6aca304e1755dd26","modified":1558673506780},{"_id":"public/how-to-save-internet-radio/index.html","hash":"b3dd01770cd1dd695cf467091c406f132bdbceb9","modified":1558673506780},{"_id":"public/a-poem-after-the-train-in-sichuan/index.html","hash":"245833237ab258df23de80add963a78529536fc0","modified":1558673506780},{"_id":"public/translation-building-the-2048-game-in-angularjs/index.html","hash":"e5e1b049009f8e8e173c4a8e436e7dc3d39a9a93","modified":1558673506780},{"_id":"public/python-with-qt-application-development-5-database-helper/index.html","hash":"e743dfedd9cf8588553874b09a9f70c13ce2d10a","modified":1558673506780},{"_id":"public/python-with-qt-application-development-4-database-design/index.html","hash":"acb0eba711d3188a7d8ef393dff5e86f08e47757","modified":1558673506780},{"_id":"public/python-with-qt-application-development-3-basic-model-in-mvc/index.html","hash":"b4dfbb78ddbda810b88121362b22a7758b498a38","modified":1558673506781},{"_id":"public/python-with-qt-application-development-2-preliminary-design/index.html","hash":"438047b37959ffc91830e0b0ed6f0d4fd30a1516","modified":1558673506781},{"_id":"public/python-with-qt-application-development-1-basic-view/index.html","hash":"aafdc0eeb14912e53e4a0318f2fdbe6162b1c2d5","modified":1558673506781},{"_id":"public/python-with-qt-application-development-0-prologue/index.html","hash":"e7586e1c71004f299503d07e3ea9a1e4173eea9e","modified":1558673506781},{"_id":"public/chrome-tutorial-advance/index.html","hash":"cfd5c390a50d7dd23da5053a1b3ce2d1138602de","modified":1558673506781},{"_id":"public/chrome-tutorial-extension/index.html","hash":"8821c80ec0ee2aa32cbf1dde1a776d4a963cd2b8","modified":1558673506781},{"_id":"public/chrome-tutorial-setup/index.html","hash":"ff1be06fbb474c88a7ff60c85543d4b2e6bb4856","modified":1558673506782},{"_id":"public/chrome-tutorial-daily-use/index.html","hash":"40c42b4b1840b68a2619168b36d54ab6d9641260","modified":1558673506781},{"_id":"public/chrome-tutorial-preface/index.html","hash":"57d92409a4ad590db3f0fc03b1c27405d0912ae4","modified":1558673506782},{"_id":"public/nagiasu-relationship-between-charactors/index.html","hash":"04d44d8e15573c6a74c9891a9a4d4f24895c8e2b","modified":1558673506782},{"_id":"public/pso2-onigiri-bladesoul-personal-comment/index.html","hash":"b40b1477c302d65924361582b003c76fb30f66b4","modified":1558673506782},{"_id":"public/segmentfault-1111-quiz-walkthrough/index.html","hash":"5256ac377294a3bb52d07f10d872e1d987722679","modified":1558673506782},{"_id":"public/answers-for-alibaba-quiz3/index.html","hash":"9d96c713419a0ddfcc4360cc889118bbb6add024","modified":1558673506782},{"_id":"public/csharp-simple-animation-component/index.html","hash":"ddbad3ab0a384012cf25dc0951c589bb008dc9eb","modified":1558673506783},{"_id":"public/archives/index.html","hash":"13da76c69a0402db38be55f6a7a1858ae201f6d6","modified":1558673506783},{"_id":"public/archives/page/2/index.html","hash":"a280e4d60672cdd01ab2d64927cf041aab9ed433","modified":1558673506783},{"_id":"public/archives/page/3/index.html","hash":"d87b99d7fd3a002935a5f9b800ebbe9fe6ab9a35","modified":1558673506783},{"_id":"public/archives/page/4/index.html","hash":"f779b415346b2dfd7efcedd0148ed28b9214f7f0","modified":1558673506783},{"_id":"public/archives/page/5/index.html","hash":"fd095e5992b522c4a62b7f51d1891003fafd445d","modified":1558673506784},{"_id":"public/archives/page/6/index.html","hash":"9ff429e49de7c20f15e992d29e3f1ba8542e7912","modified":1558673506784},{"_id":"public/archives/2014/index.html","hash":"19d0bb131c52f6243baef79ce6c00efe86021ea4","modified":1558673506784},{"_id":"public/archives/2014/page/2/index.html","hash":"c2a80cea7fe0f34f925fd91f2aa8fbf5123adcc8","modified":1558673506784},{"_id":"public/archives/2014/page/3/index.html","hash":"64a08c9f1002cea6b028c1586c5242895b3b947d","modified":1558673506784},{"_id":"public/archives/2014/01/index.html","hash":"632f62ddef3025684dc8f1dc085f001616892ec3","modified":1558673506784},{"_id":"public/archives/2014/03/index.html","hash":"d802100b607ea9e46d5955f2a9814f06b89e4756","modified":1558673506784},{"_id":"public/archives/2014/05/index.html","hash":"aae2f0799a902d954c63ea5bbb810a2f90e902a0","modified":1558673506784},{"_id":"public/archives/2014/07/index.html","hash":"01f558d38732312c1d043231a4b25aaac0f50430","modified":1558673506784},{"_id":"public/archives/2014/08/index.html","hash":"1ceae06539d57acd5aaa088d6978d73c98c67752","modified":1558673506785},{"_id":"public/archives/2014/10/index.html","hash":"169a793fa9ec871dfec80fa0c6018504d8417229","modified":1558673506785},{"_id":"public/archives/2014/11/index.html","hash":"8c65ff1fcdb27f3efa834dcb640ac92b8fa35bf3","modified":1558673506785},{"_id":"public/archives/2014/12/index.html","hash":"763fcb93a8173499aad81056df29424ce35cb78a","modified":1558673506785},{"_id":"public/archives/2015/index.html","hash":"98ce306abe5c6547d4ccacdd79310455115f2d0f","modified":1558673506785},{"_id":"public/archives/2015/page/2/index.html","hash":"cadb79903d976799f50f23b537657372c84a8046","modified":1558673506786},{"_id":"public/archives/2015/01/index.html","hash":"2914f9d9fa5dae2a31ec180b8aad2176ab4ebfd9","modified":1558673506786},{"_id":"public/archives/2015/03/index.html","hash":"77141b7add0f4f6982e089ab77e92574070a4501","modified":1558673506786},{"_id":"public/archives/2015/04/index.html","hash":"c9650a4230bddb92c22883d92ed50b2924b99c38","modified":1558673506786},{"_id":"public/archives/2015/06/index.html","hash":"0359a5689b40799b8b49734bf3c1128e004f8ebc","modified":1558673506786},{"_id":"public/archives/2015/07/index.html","hash":"09735fa28c831fb25d9a4901ba858256816cc029","modified":1558673506786},{"_id":"public/archives/2015/09/index.html","hash":"5feef82642c49b2abb9e4c8bf268b846bfef0602","modified":1558673506786},{"_id":"public/archives/2015/10/index.html","hash":"ceca186c7ac0b80b4be5ba59f56e165d0cc9426b","modified":1558673506787},{"_id":"public/archives/2015/11/index.html","hash":"0c17f28361a49a3703c60fd5ed22a39dab42c6b4","modified":1558673506787},{"_id":"public/archives/2015/12/index.html","hash":"da85ca56720bd2bfc62783284d33752a1305b6c8","modified":1558673506787},{"_id":"public/archives/2016/index.html","hash":"6917c4d8019792608903636ab2883afe76c8aa75","modified":1558673506787},{"_id":"public/archives/2016/01/index.html","hash":"68e6d4a2c984eb44711e63fd013d6bc9cdfb46cf","modified":1558673506787},{"_id":"public/archives/2016/05/index.html","hash":"415be7a25536240dcefa8721d9bfbf5ff5de5a51","modified":1558673506787},{"_id":"public/archives/2016/12/index.html","hash":"08b3f683af657da1e91a9de0e3e30acdb5ee055a","modified":1558673506787},{"_id":"public/archives/2017/index.html","hash":"914f2c7832e0286cdc68edff02433f4e8b379e05","modified":1558673506787},{"_id":"public/archives/2017/08/index.html","hash":"22862e7d695707d6b57c1cdc38dd3f036b531907","modified":1558673506788},{"_id":"public/archives/2017/10/index.html","hash":"eadee78e6000ac1fbf842a3e27a634e6cf903432","modified":1558673506788},{"_id":"public/archives/2019/index.html","hash":"4fa0fd151edda416c56cd22ab818c0c5a8d6ed40","modified":1558673506788},{"_id":"public/archives/2019/05/index.html","hash":"3afa2ca0d80c34c91ef8a9bf161c47f064b80654","modified":1558673506788},{"_id":"public/categories/技术/index.html","hash":"28c364ed7ba65083571f24bb0c14b894e1594ea2","modified":1558673506789},{"_id":"public/categories/技术/page/2/index.html","hash":"600860bd5e2484e4a64be924158dd4fdd5936d43","modified":1558673506789},{"_id":"public/categories/技术/page/3/index.html","hash":"ed03f619d56c545a6ed0ee23b09c131472927491","modified":1558673506789},{"_id":"public/categories/技术/page/4/index.html","hash":"65473b19a72455a0f74f6ec4b59a9b835259916c","modified":1558673506789},{"_id":"public/categories/技术/黑客/index.html","hash":"5dc9e0bc7de14de278bb513a1c2efbe3ccae8a2e","modified":1558673506789},{"_id":"public/categories/技术/前端/index.html","hash":"c84fa113c0362cb7ed962dd8efe9b7ca32ac8c33","modified":1558673506789},{"_id":"public/categories/技术/前端/page/2/index.html","hash":"8c2657d4f549fac1991ebb7b359b939b6f2454dc","modified":1558673506790},{"_id":"public/categories/ACGN/index.html","hash":"6b6358ea59dbe011450dfefc89b347ca67cb7290","modified":1558673506790},{"_id":"public/categories/技术/杂谈/index.html","hash":"eddef11261bf8fca65241a69d3a9b77f6a6e4ac7","modified":1558673506790},{"_id":"public/categories/技术/算法/index.html","hash":"f2dd7b65b7e3df8f5d9052a7596632f73e1c9527","modified":1558673506790},{"_id":"public/categories/生活/index.html","hash":"57c7061cbd5b56ecd4e29d7064e7736c33aa31da","modified":1558673506790},{"_id":"public/categories/编程语言/index.html","hash":"1a8ff89a772838b9b36b22c54a465e8b6fd41853","modified":1558673506790},{"_id":"public/categories/编程语言/page/2/index.html","hash":"7de823c82e1b4c861d3eaa1271e5c0ae68bcf697","modified":1558673506790},{"_id":"public/categories/编程语言/page/3/index.html","hash":"131551591234e3c37abf92ba84224cd422258937","modified":1558673506790},{"_id":"public/categories/编程语言/page/4/index.html","hash":"81dff08810033662a0ea860c1f2d3ad0009692bf","modified":1558673506790},{"_id":"public/categories/摄影/index.html","hash":"7f39985f2454f29b4758632f38bb0da146eaea33","modified":1558673506790},{"_id":"public/categories/ACGN/动画/index.html","hash":"d4447bb89a5dc131a2faaa71bb36c13b866a04d8","modified":1558673506791},{"_id":"public/categories/生活/诗/index.html","hash":"9d8562e445e67e8d83a1c085b6b1e7517ddd36d6","modified":1558673506791},{"_id":"public/categories/编程语言/python/index.html","hash":"eb081364c029c8390e9ff1369febcf8d0d1d3144","modified":1558673506791},{"_id":"public/categories/编程语言/python/page/2/index.html","hash":"e54612763896a52e5c9e77a4b064247928100c6f","modified":1558673506791},{"_id":"public/categories/生活/杂/index.html","hash":"974d66aa9fe5b3abeb5604db5b9848e32f93d8ee","modified":1558673506791},{"_id":"public/categories/摄影/展览/index.html","hash":"38f68447e5677b30e674e7fabe2c44923ea8eba7","modified":1558673506791},{"_id":"public/categories/编程语言/javascript/index.html","hash":"43a26e440862f585f6e3d1b8ff78c189b77b424b","modified":1558673506791},{"_id":"public/categories/编程语言/javascript/page/2/index.html","hash":"6cb8c27b0e4820207edff18755236b9f4ad846f7","modified":1558673506791},{"_id":"public/categories/生活/电影/index.html","hash":"d213207457d1c32eabf2a74e87a9aa91f1e253b1","modified":1558673506791},{"_id":"public/categories/编程语言/C/index.html","hash":"1ff58497530f39baa72ebbdf6387b9f0e3c7581f","modified":1558673506791},{"_id":"public/categories/知识/index.html","hash":"3254de0a65ba18973248a8adaba7dd7bfb2d9924","modified":1558673506791},{"_id":"public/categories/ACGN/游戏/index.html","hash":"348e5482e909713287e88d6040678c77894978a9","modified":1558673506791},{"_id":"public/categories/知识/古埃及/index.html","hash":"117fcef28413d9c086483d4318b5a7073378630c","modified":1558673506792},{"_id":"public/categories/技术/electron/index.html","hash":"301b5a314b1e9bf32abf655567f76b1356238840","modified":1558673506792},{"_id":"public/categories/技术/教程/index.html","hash":"edd7072a89b80ec3a73077ca1692703e76c9780f","modified":1558673506792},{"_id":"public/categories/技术/软件/index.html","hash":"0ee9c0749bc8d981bcaf3be1a0d3ac6c2e85eb6b","modified":1558673506792},{"_id":"public/categories/摄影/旅游/index.html","hash":"e37455626613543e7c23c1d8d32f862c1a9cb9e0","modified":1558673506792},{"_id":"public/categories/生活/旅游/index.html","hash":"ea23048677e19e8accb460403a6da00e96e307e8","modified":1558673506793},{"_id":"public/categories/翻译/index.html","hash":"7a8596783d1d8a51cf6a95a613ea5dccb5c93ae3","modified":1558673506793},{"_id":"public/categories/翻译/技术/index.html","hash":"58848705469f5eec2120ec2d09e84c6f41280dc3","modified":1558673506793},{"_id":"public/index.html","hash":"9ce45d8574855d1737b4aa2fc600c8a16a8ffd71","modified":1558673506788},{"_id":"public/page/2/index.html","hash":"ab29853b0203a1d6cb1ca2f2eb2cc1b08124c301","modified":1558673506788},{"_id":"public/page/3/index.html","hash":"1cb4c86fc61512016b30859b2a4cf3521a0316fd","modified":1558673506788},{"_id":"public/page/4/index.html","hash":"106df6e0c5e3780e0d78f30f3f42ab6fed056e0c","modified":1558673506788},{"_id":"public/page/5/index.html","hash":"3d545b0cce31a17c62997775774d943d73178f9f","modified":1558673506789},{"_id":"public/page/6/index.html","hash":"eda04dbc6ab5fd64e343595f86bf87f06c69ae71","modified":1558673506789},{"_id":"public/tags/javascript/index.html","hash":"f133e62290817eb93bb5937f8c9b6b7acc0ec5aa","modified":1558673506793},{"_id":"public/tags/javascript/page/2/index.html","hash":"5e753b7899cc093dd9d8f3ad30cbe3a44c4e208b","modified":1558673506794},{"_id":"public/tags/mocha/index.html","hash":"d4e385f689f9c8354fd0f0136fd9f5a50e7a486d","modified":1558673506794},{"_id":"public/tags/chai/index.html","hash":"a3c0033daabb06aed1614c1d23d1941aaa466735","modified":1558673506794},{"_id":"public/tags/istanbul/index.html","hash":"276eb5966b54776f0419bc0f8f26ae8c75fd7352","modified":1558673506794},{"_id":"public/tags/测试/index.html","hash":"9352a53bba13acc4ff048d1c02e81d02f0570b76","modified":1558673506794},{"_id":"public/tags/travisci/index.html","hash":"c12aaa0b9d545f1e1e8d683fde2124a989950999","modified":1558673506794},{"_id":"public/tags/codecov/index.html","hash":"f302cab4b88920a90d7ffb6f3ba1886312ca136a","modified":1558673506794},{"_id":"public/tags/持续交付/index.html","hash":"993cb6c182064d825ecace38d4483fa0a8af1e53","modified":1558673506794},{"_id":"public/tags/python/index.html","hash":"124fe3945dc3949bfd6dc0655254ca7484a7d8ba","modified":1558673506795},{"_id":"public/tags/python/page/2/index.html","hash":"f5a049fc19b1e84ae856f5cd7e2e0cb0f0648a4d","modified":1558673506795},{"_id":"public/tags/radioit/index.html","hash":"628b0a13b9e760d854f35ce918398639337ff9e3","modified":1558673506795},{"_id":"public/tags/11-11/index.html","hash":"3d8531aa6d0d1ecc8924da8b1cc698955263bd1f","modified":1558673506795},{"_id":"public/tags/segmentfault/index.html","hash":"34897ff4955ce5c580f7cd15a73376ce0706e095","modified":1558673506795},{"_id":"public/tags/walkthrough/index.html","hash":"c8f65652427e7df59464493344f94deb2a8716e4","modified":1558673506795},{"_id":"public/tags/quiz/index.html","hash":"1bf3be9a4e8db721815274bbe3d04f89eac2e0bb","modified":1558673506795},{"_id":"public/tags/string-template/index.html","hash":"473e7758414ed8bcc65e7d4aa3febd69edefce80","modified":1558673506795},{"_id":"public/tags/anime/index.html","hash":"e2bf45dab8712a2f66778763435c03d60fcda651","modified":1558673506795},{"_id":"public/tags/script/index.html","hash":"6a0a7b22362f9c27a543d7cfeb3bec198a9192ab","modified":1558673506795},{"_id":"public/tags/spider/index.html","hash":"a702357824b91945b03a48a63e04b30d53d07539","modified":1558673506796},{"_id":"public/tags/scraper/index.html","hash":"59eb2ae86b85cf4399a385aa4692b5cdd6154043","modified":1558673506795},{"_id":"public/tags/poem/index.html","hash":"421ec8e670080255cb4a82d490635b62d5156791","modified":1558673506796},{"_id":"public/tags/life/index.html","hash":"ab17d991e545d7c7dc8f3dab268f91de608e8d48","modified":1558673506796},{"_id":"public/tags/photograph/index.html","hash":"9986eab5a57d4a21d97fc23810a042f895e742aa","modified":1558673506796},{"_id":"public/tags/exhibition/index.html","hash":"18b541f687ab9c72134c19bc7c1f7328aed83c41","modified":1558673506796},{"_id":"public/tags/movie/index.html","hash":"acceb6bdcc2131f7c903d92468383faf5b6ced56","modified":1558673506796},{"_id":"public/tags/bytalk/index.html","hash":"e367c1d75bf051b94c38ed02cd15006a09961ef1","modified":1558673506796},{"_id":"public/tags/pyspider/index.html","hash":"06aa0153a4672d0f35a4e7ba7158decd252548e3","modified":1558673506796},{"_id":"public/tags/alibaba/index.html","hash":"c40e9539261535d6ab8d882ef26324cfcff738e3","modified":1558673506796},{"_id":"public/tags/C/index.html","hash":"15851f3e753946b151a88b385e032e426b169be1","modified":1558673506796},{"_id":"public/tags/ancient-egypt/index.html","hash":"c03c7a489b6d3c071ec92cfd7a778c9be21150cc","modified":1558673506796},{"_id":"public/tags/god/index.html","hash":"4e5e18103cd36bf6f56adf25a33b61c6f662d155","modified":1558673506796},{"_id":"public/tags/pso2/index.html","hash":"992cf4af91df25ef9139d1ee5106211c34de939c","modified":1558673506796},{"_id":"public/tags/鬼斬/index.html","hash":"2c292c2169dd6e19ea793c762aa515e42af32dec","modified":1558673506797},{"_id":"public/tags/剑灵/index.html","hash":"8667b6a034049e08851c4123b4750db9828ef2b7","modified":1558673506797},{"_id":"public/tags/MMORPG/index.html","hash":"379ed63f2354b58b35133ea03c6dcf5a25e06d59","modified":1558673506797},{"_id":"public/tags/FictionInjection/index.html","hash":"9896438a6710f93b437335968805bfe38ff6d7e3","modified":1558673506797},{"_id":"public/tags/i18n/index.html","hash":"6f00a21e4b0ed3ad5b7e18a45d186ceb959d0e0b","modified":1558673506797},{"_id":"public/tags/ECMAScript6/index.html","hash":"82e2c5d17fb5e7a89104c0b765aaff0bb8011567","modified":1558673506797},{"_id":"public/tags/note/index.html","hash":"f202d09d769a8bfbb7da98833c033bfa8dfa616d","modified":1558673506797},{"_id":"public/tags/angularjs/index.html","hash":"81c0dfffb2f98689a6f54cb7a06f98298a1fe022","modified":1558673506797},{"_id":"public/tags/angular-material/index.html","hash":"254a621676d3e018e8ec2804f7506bcb6f182774","modified":1558673506797},{"_id":"public/tags/electron/index.html","hash":"eceec526cf945df4e81268f5147f46e4d17adf07","modified":1558673506797},{"_id":"public/tags/tutorial/index.html","hash":"95c721199d77f90d364d989fcab1315934584f46","modified":1558673506797},{"_id":"public/tags/chrome/index.html","hash":"35b62b4ea5a94e513d8ebb9ed01731ae19059311","modified":1558673506797},{"_id":"public/tags/Qt/index.html","hash":"2f751d7f69f72c302cde04da6ee5db376599cd11","modified":1558673506798},{"_id":"public/tags/software/index.html","hash":"7f58ebedffc8d05fb87c1794c7c28a24a30c1399","modified":1558673506798},{"_id":"public/tags/travel/index.html","hash":"ab6c271406477069db820e417d35bda727abf91f","modified":1558673506798},{"_id":"public/tags/history/index.html","hash":"79dbff78c03e3792827d4616f4598a2d17a61833","modified":1558673506798},{"_id":"public/tags/translation/index.html","hash":"7b74446046a41828e364b47628a0df2ea5f7c5d6","modified":1558673506798},{"_id":"public/CNAME","hash":"65b471973edea1b4adab2e1204032a447c28de29","modified":1558618103733},{"_id":"public/images/avatar_green.png","hash":"1af3e41e167a452f145346552056451ca1ceb35c","modified":1558618103733},{"_id":"public/images/wechatqcode.jpg","hash":"6853364a55fb62db348c95409fa94e7cc26abc0f","modified":1558618103733},{"_id":"public/images/favicon/android-chrome-192x192.png","hash":"5ec06b1da56c68eef860beecbf0760f10cbcdb14","modified":1558618103733},{"_id":"public/images/favicon/apple-touch-icon.png","hash":"e6c906a9f3bc977101bd4dad42617892ebfb3d21","modified":1558618103733},{"_id":"public/images/favicon/browserconfig.xml","hash":"974aea18bda5a95802c06b80126ab1d96d91d708","modified":1558618103733},{"_id":"public/images/favicon/favicon-16x16.png","hash":"64af7e939bca7ed516d8ea7c1a8db589fba5e0e2","modified":1558618103733},{"_id":"public/images/favicon/favicon-32x32.png","hash":"af8a5ab3f82ecadf810558ce02ae3bc5559bc502","modified":1558618103733},{"_id":"public/images/favicon/favicon.ico","hash":"648cd8f51fb9a283326826593390b7e2e5057022","modified":1558618103733},{"_id":"public/images/favicon/mstile-150x150.png","hash":"ac703cd55949d759647f77f917e381e3f277d483","modified":1558618103733},{"_id":"public/images/favicon/safari-pinned-tab.svg","hash":"ce4521d7abddff522b5ddd478081675ee9877524","modified":1558618103733},{"_id":"public/images/favicon/site.webmanifest","hash":"13e5aa58eb2182d8ace63266856c8cc29c47c083","modified":1558618103733},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1558618103733},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1558618103733},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1558618103733},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1558618103733},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1558618103733},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1558618103733},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1558618103733},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1558618103733},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1558618103733},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1558618103733},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1558618103734},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1558618103734},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558618103734},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1558618103734},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558618103734},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1558618103734},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1558618103734},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1558618103734},{"_id":"public/lib/Han/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1558618103734},{"_id":"public/lib/bookmark/LICENSE","hash":"1440355648a72be5b7625fe6fa055b462fcc78b0","modified":1558618103734},{"_id":"public/lib/canvas-ribbon/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1558618103734},{"_id":"public/lib/fastclick/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1558618103734},{"_id":"public/lib/fancybox/LICENSE","hash":"8624bcdae55baeef00cd11d5dfcfa60f68710a02","modified":1558618103734},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1558618103734},{"_id":"public/lib/jquery_lazyload/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1558618103734},{"_id":"public/lib/needsharebutton/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1558618103734},{"_id":"public/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1558618103734},{"_id":"public/lib/quicklink/LICENSE","hash":"78d636bebe5b99f30e0e0676ef71805ebf00c9b9","modified":1558618103734},{"_id":"public/lib/reading_progress/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1558618103734},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1558618103734},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1558618103734},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1558618103734},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1558618103734},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1558618103734},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1558618103734},{"_id":"public/images/alipay.JPG","hash":"cbdc8a8591cf5ac849aca2daa9290f04969e3872","modified":1558618104279},{"_id":"public/images/wechatpay.JPG","hash":"4ba41426562ed4b9142bfb07485bb20667726192","modified":1558618104285},{"_id":"public/images/favicon/android-chrome-512x512.png","hash":"672140bb6b04b063adb67b2f5839d7cf36f30431","modified":1558618104286},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1558618104287},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1558618104287},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1558618104294},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1558618104294},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1558618104295},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1558618104295},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1558618104295},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1558618104295},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1558618104295},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1558618104295},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1558618104295},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1558618104295},{"_id":"public/lib/bookmark/bookmark.min.js","hash":"9e525329553335c2484f6faf9e933a6bbee9ab6d","modified":1558618104295},{"_id":"public/lib/bookmark/index.js","hash":"5e5cba645a1a4531ccbb4782df2f7a075626393f","modified":1558618104295},{"_id":"public/lib/bookmark/package.json","hash":"9f06f3432c12b68a2c2fe3f318455b35a965a1da","modified":1558618104295},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1558618104295},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1558618104296},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1558618104296},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1558618104296},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1558618104296},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1558618104296},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1558618104296},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1558618104296},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1558618104296},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1558618104296},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1558618104296},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1558618104296},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1558618104296},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1558618104296},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1558618104296},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1558618104296},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1558618104296},{"_id":"public/lib/reading_progress/package.json","hash":"e404a0bdf26df62eb89173c6fe5f5824345801c5","modified":1558618104296},{"_id":"public/lib/reading_progress/reading_progress.min.js","hash":"b768dc009e6d37dd952632c317f6c33e6e2d89ad","modified":1558618104296},{"_id":"public/lib/reading_progress/reading_progress.js","hash":"ec68a79421cfba022ac53f46813d013dd48617c0","modified":1558618104296},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"4496faa08c7d2979747f15c7b79cdf79e5a91cc1","modified":1558618104296},{"_id":"public/lib/quicklink/dist/quicklink.umd.js","hash":"d18dc2633f75d7f3801649f4c4af4b11a291750c","modified":1558618104296},{"_id":"public/lib/Han/README.html","hash":"eada32c4b016db5f8d0d697d84d8ef3b7f05752e","modified":1558618104296},{"_id":"public/lib/bookmark/README.html","hash":"7f7eafeda0668e53fc3b99e6974f611b35829270","modified":1558618104297},{"_id":"public/lib/canvas-ribbon/README.html","hash":"5a3b90f72c2c6659aeba78fc235372f0b72c1f28","modified":1558618104297},{"_id":"public/lib/fancybox/README.html","hash":"32a70d79d6a3590a40e742a90a34000694ad3980","modified":1558618104297},{"_id":"public/lib/fastclick/README.html","hash":"b38b8de077d33d1b2e68ad146b2fd15853b023e9","modified":1558618104297},{"_id":"public/lib/jquery_lazyload/README.html","hash":"77016203f2bba6176a054dba09b980dbac7a5045","modified":1558618104297},{"_id":"public/lib/needsharebutton/README.html","hash":"a02a3905ce9ab80b2c5e68d99ad98a9f3ce315cc","modified":1558618104297},{"_id":"public/lib/pace/README.html","hash":"0739df73902c11eb9a95d2c0845e2d596977a4e7","modified":1558618104297},{"_id":"public/lib/quicklink/README.html","hash":"4e5eae06836709606655c51d1f2427b0aa318665","modified":1558618104297},{"_id":"public/lib/reading_progress/README.html","hash":"ac0209e94caf41ca02955ec49b0989ec58cbab50","modified":1558618104297},{"_id":"public/css/main.css","hash":"44ab6747971a8f6ea2fdc50471287f4cf5d99e08","modified":1558618104297},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1558618104307},{"_id":"public/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1558618104307},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1558618104307},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1558618104307},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1558618104307},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1558618104307},{"_id":"public/lib/fancybox/source/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1558618104307},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1558618104307},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"75dee2bb4796ca66693831d769d9a105eed8c290","modified":1558618104312},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"e43435fb9eaa918f5b8e35c9e110124b8bd13751","modified":1558618104312},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"9782a228f911ef442a03390a0064b40102fc1682","modified":1558618104329},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1558618104329},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1558618104335},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1558618104335},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1558618104337},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1558618104337},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1558618104338},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"f151bb5ba4a2cd334061bac27a1a155969b62cdb","modified":1558618104349},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1558618104349},{"_id":"public/lib/fancybox/source/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1558618104394},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1558618104405},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1558618104407},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"27f034e5db8c32e268e2959b9a7c1258d36e4510","modified":1558618104412},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1558618104415}],"Category":[{"name":"技术","_id":"cjw0oyuoe0008n7t46443el5e"},{"name":"黑客","parent":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuop000jn7t4v2afobf1"},{"name":"前端","parent":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuos000nn7t4osfuiewl"},{"name":"ACGN","_id":"cjw0oyup2001an7t4wi9wrzlf"},{"name":"杂谈","parent":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyup3001cn7t46wwg7v5x"},{"name":"算法","parent":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyup3001en7t4au3jv79l"},{"name":"生活","_id":"cjw0oyup4001gn7t4wpce5rrc"},{"name":"编程语言","_id":"cjw0oyup5001kn7t46ue4gdoo"},{"name":"摄影","_id":"cjw0oyup8001yn7t4k30wxe0f"},{"name":"动画","parent":"cjw0oyup2001an7t4wi9wrzlf","_id":"cjw0oyupi002un7t45qqrsrln"},{"name":"诗","parent":"cjw0oyup4001gn7t4wpce5rrc","_id":"cjw0oyupk0032n7t4b25dvbgo"},{"name":"python","parent":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyupl0038n7t4p3qxkzej"},{"name":"杂","parent":"cjw0oyup4001gn7t4wpce5rrc","_id":"cjw0oyupn003fn7t4ctyamz82"},{"name":"展览","parent":"cjw0oyup8001yn7t4k30wxe0f","_id":"cjw0oyupo003kn7t4ny5hjnj1"},{"name":"javascript","parent":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyupp003pn7t4f4upfgu5"},{"name":"电影","parent":"cjw0oyup4001gn7t4wpce5rrc","_id":"cjw0oyupr003vn7t43awoxvym"},{"name":"C#","parent":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyury0064n7t4j9ch4gl3"},{"name":"知识","_id":"cjw0oyus20069n7t4i8pl8uzh"},{"name":"游戏","parent":"cjw0oyup2001an7t4wi9wrzlf","_id":"cjw0oyus5006gn7t4nms5oj4v"},{"name":"古埃及","parent":"cjw0oyus20069n7t4i8pl8uzh","_id":"cjw0oyus7006mn7t4d6ezev4b"},{"name":"electron","parent":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyutt0083n7t42b5n1m47"},{"name":"教程","parent":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyutz008jn7t4tf3xx1h9"},{"name":"软件","parent":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuue0097n7t4g8clkec1"},{"name":"旅游","parent":"cjw0oyup8001yn7t4k30wxe0f","_id":"cjw0oyuul00a0n7t46wzyq91c"},{"name":"旅游","parent":"cjw0oyup4001gn7t4wpce5rrc","_id":"cjw0oyuut00amn7t4m32bryhr"},{"name":"翻译","_id":"cjw0oyv6000eln7t4069frf6q"},{"name":"技术","parent":"cjw0oyv6000eln7t4069frf6q","_id":"cjw0oyv6100enn7t4k5bt9h9p"}],"Data":[],"Page":[{"_content":"","source":"about/index.md","raw":"","date":"2019-05-15T10:54:41.128Z","updated":"2019-05-15T10:54:41.128Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cjw0oyufx0000n7t46jagcov5","content":"","site":{"data":{}},"excerpt":"","more":"","length":0},{"title":"标签","date":"2019-05-15T07:44:01.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-05-15 15:44:01\ntype: \"tags\"\ncomments: false\n---","updated":"2019-05-15T07:52:49.957Z","path":"tags/index.html","layout":"page","_id":"cjw0oyuo50002n7t40brtc4ei","content":"","site":{"data":{}},"excerpt":"","more":"","length":0},{"title":"分类","date":"2019-05-15T07:54:05.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-05-15 15:54:05\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-05-15T07:54:24.642Z","path":"categories/index.html","layout":"page","_id":"cjw0oyuo80004n7t4ihad67gf","content":"","site":{"data":{}},"excerpt":"","more":"","length":0}],"Post":[{"_content":"# Yue - 一个新的跨平台图形界面程序编写方案\n\n## 什么是 Yue\n\n## \n\n## Reference\n\n[FAQ - Yue]: http://libyue.com/docs/v0.3.2/js/guides/faq.html","source":"_drafts/Yue - 一个新的跨平台.md","raw":"# Yue - 一个新的跨平台图形界面程序编写方案\n\n## 什么是 Yue\n\n## \n\n## Reference\n\n[FAQ - Yue]: http://libyue.com/docs/v0.3.2/js/guides/faq.html","slug":"Yue - 一个新的跨平台","published":0,"date":"2018-03-25T06:00:53.659Z","updated":"2018-03-25T06:20:00.603Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuo20001n7t4mlr1p93f","content":"<h1 id=\"Yue-一个新的跨平台图形界面程序编写方案\"><a href=\"#Yue-一个新的跨平台图形界面程序编写方案\" class=\"headerlink\" title=\"Yue - 一个新的跨平台图形界面程序编写方案\"></a>Yue - 一个新的跨平台图形界面程序编写方案</h1><h2 id=\"什么是-Yue\"><a href=\"#什么是-Yue\" class=\"headerlink\" title=\"什么是 Yue\"></a>什么是 Yue</h2><h2 id><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h2><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Yue-一个新的跨平台图形界面程序编写方案\"><a href=\"#Yue-一个新的跨平台图形界面程序编写方案\" class=\"headerlink\" title=\"Yue - 一个新的跨平台图形界面程序编写方案\"></a>Yue - 一个新的跨平台图形界面程序编写方案</h1><h2 id=\"什么是-Yue\"><a href=\"#什么是-Yue\" class=\"headerlink\" title=\"什么是 Yue\"></a>什么是 Yue</h2><h2 id><a href=\"#\" class=\"headerlink\" title=\" \"></a> </h2><h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2>","length":40},{"title":"Mocha + Chai + istanbul in ES2015","id":"54","updated":"2017-08-06T07:45:21.000Z","date":"2017-08-06T07:20:41.000Z","_content":"\n使用 JavaScript 写代码的时候，无论是使用 TDD 方法还是为了保证代码的质量和可维护性，都应该考虑加上单元测试。在博文 [mocha + chai + Travis CI + Codecov 使用流程](https://blog.e10t.net/mocha-chai-travis-ci-codecov-workflow/) 中有简单地介绍了如何使用流行的 JavsScript 库来对代码进行自动测试，检查代码覆盖率。\n\n在那篇文章中，使用的是 Mocha／Chai／istanbul 和在线的 Codecov，以及和 Github 关系密切的 Travis CI，而且测试的 JavaScript 代码是 es5。现在 es2015 已经标准化了，那么教程也需要更新一下了。另外如果项目是私有项目，那么还是使用完备的离线测试环境比较好。接下来就是一个快速可行的教程。\n\n##  安装和配置\n\n测试框架无需变更，还是 Mocha + Chai 的组合，但是 istanbul 需要稍微变动一下。\n\n> 如果你不需要 istanbul 做覆盖率测试，那么需要使用 `npm install --save-dev babel-register` 和 `mocha --require babel-register` 使 mocha 能识别 es2015 的代码\n\n使用新套件，直接安装 `npm i -S mocha chai cross-env nyc babel-plugin-istanbul babel-register babel-preset-env`。\n\nmocha 和 chai 不用解释了，`nyc` 可以理解是 istanbul 的命令行工具；`babel-plugin-istanbul` 是在 babel 中插入 istanbul，`babel-register` 是 istanbul 使用的 babel 接口，这样两个库就打通了；最后 `babel-preset-env` 是 babel 的运行配置。\n\n先来配置 `babel-plugin-istanbul`，新建 `.babelrc`：\n\n```javascript\n{\n  \"presets\": [\n    \"env\"\n  ],\n  \"env\": {\n    \"test\": {\n      \"plugins\": [ \"istanbul\" ]\n    }\n  }\n}\n```\n\n`presets` 配置告诉 babel 使用 `babel-preset-env`。当然也可以用 'es2015' + 'stage-0' 的组合，具体可以自行斟酌。\n\n`env.test.plugins` 告诉 babel 在 `NODE_ENV=test` 的情况下使用插件 `babel-plugin-istanbul`。\n\n接下来配置 `babel-register`，新建 `.nycrc`：\n\n> `.nycrc` 是 nyc 的配置文件，和 `.babelrc` 类似，当然配置也是可以直接写进 `package.json` 的。\n\n```javascript\n{\n  \"require\": [\n    \"babel-register\"\n  ],\n  \"reporter\": [\n    \"lcov\",\n    \"text-summary\"\n  ],\n  \"sourceMap\": false,\n  \"instrument\": false\n}\n```\n\n以上的配置直接用了官方的配置。`require` 字段告诉 nyc 使用 `babel-register`，`reporter` 字段的 'lcov' 会让 nyc 生成 `lcov.info` 文件和对应的 HTML 报告，如果使用 `lcovonly` 则只生成 'lcov.info'。'text-summary' 则是会在控制台输出覆盖率等信息。\n\n> 文件会默认生成在 `/coverage` 下，可以使用 `report-dir` 字段指定。\n\n最后，在 `package.json` 中\b加入：\n\n```javascript\n  \"scripts\": {\n    \"test\": \"cross-env NODE_ENV=test nyc mocha test/**/*.spec.js\"\n  },\n```\n\n##  测试编写事例\n\n比如有 `index.js`：\n\n```javascript\nexport class Test {\n  constructor () {\n    this.data = 'a'\n  }\n}\n```\n\n那么可以写 `test/index.spec.js`，可以直接上 ES2015 的语法：\n\n```javascript\nimport { expect } from 'chai'\nimport { Test } from '../index'\n\ndescribe('index test', function() {\n  it('should be a string', function() {\n    let test = new Test\n    expect(test.data).to.be.a('string')\n  })\n})\n```\n\n使用 `npm test` 运行测试，得到：\n\n```text\n> cross-env NODE_ENV=test nyc mocha test/**/*.spec.js\n\n\n\n  index test\n    ✓ should be a string\n\n\n  1 passing (8ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 100% ( 1/1 )\nBranches     : 100% ( 0/0 )\nFunctions    : 100% ( 1/1 )\nLines        : 100% ( 1/1 )\n================================================================================\n```\n\n##  Bonus\n\n在测试中经常需要测试 promise 等异步操作，虽然 Mocha 库是可以使用回调来完成测试的，但是我们当然要用 async／await 啦。\n\n比如，需要测试 `index.js` 中的 `requestAsync`：\n\n```javascript\nexport class Test {\n  constructor () {\n    this.data = 'a'\n  }\n\n  requestAsync () {\n    return new Promise((res, rej) => {\n      res(this.data)\n    })\n  }\n}\n```\n\n那么需要先 `npm i -S babel-polyfill babel-plugin-transform-async-to-generator`。\n\n然后配置 `.nycrc`，加上 'babel-polyfill' 支持 generator \b运行时：\n\n```javascript\n{\n  \"require\": [\n    \"babel-polyfill\",\n    \"babel-register\"\n  ],\n  ...\n}\n```\n\n配置 `.babelrc`，加上 'transform-async-to-generator'，将 async 模式转换为 generator 模式。\n\n```javascript\n{\n  ...\n  \"env\": {\n    \"test\": {\n      \"plugins\": [ \"istanbul\", \"transform-async-to-generator\" ]\n    }\n  }\n}\n```\n\n接着这样测试异步：\n\n```javascript\nimport { expect } from 'chai'\nimport { Test } from '../index'\n\ndescribe('test#requestAsync', function() {\n  it('should get a string', async function() {\n    const test = new Test\n    const ret = await test.requestAsync()\n    expect(ret).to.be.a('string')\n  })\n})\n```\n\n在测试项 `it` 的第二个函数前加 'async' 标志异步，然后在返回 promise 的调用前加上 'await'，OK。\n\n```text\n> cross-env NODE_ENV=test nyc mocha test/**/*.spec.js\n\n\n\n  test#requestAsync\n    ✓ should get a string\n\n\n  1 passing (14ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 100% ( 3/3 )\nBranches     : 100% ( 0/0 )\nFunctions    : 100% ( 3/3 )\nLines        : 100% ( 3/3 )\n================================================================================\n```","source":"_posts/Mocha-Chai-istanbul-in-ES2015.md","raw":"---\ntitle: Mocha + Chai + istanbul in ES2015\ncategories:\n  - [技术, 前端]\n  - [编程语言, javascript]\ntags: [javascript, mocha, chai, istanbul, 测试]\npermalink: mocha-chai-istanbul-in-es2015\nid: 54\nupdated: '2017-08-06 15:45:21'\ndate: 2017-08-06 15:20:41\n---\n\n使用 JavaScript 写代码的时候，无论是使用 TDD 方法还是为了保证代码的质量和可维护性，都应该考虑加上单元测试。在博文 [mocha + chai + Travis CI + Codecov 使用流程](https://blog.e10t.net/mocha-chai-travis-ci-codecov-workflow/) 中有简单地介绍了如何使用流行的 JavsScript 库来对代码进行自动测试，检查代码覆盖率。\n\n在那篇文章中，使用的是 Mocha／Chai／istanbul 和在线的 Codecov，以及和 Github 关系密切的 Travis CI，而且测试的 JavaScript 代码是 es5。现在 es2015 已经标准化了，那么教程也需要更新一下了。另外如果项目是私有项目，那么还是使用完备的离线测试环境比较好。接下来就是一个快速可行的教程。\n\n##  安装和配置\n\n测试框架无需变更，还是 Mocha + Chai 的组合，但是 istanbul 需要稍微变动一下。\n\n> 如果你不需要 istanbul 做覆盖率测试，那么需要使用 `npm install --save-dev babel-register` 和 `mocha --require babel-register` 使 mocha 能识别 es2015 的代码\n\n使用新套件，直接安装 `npm i -S mocha chai cross-env nyc babel-plugin-istanbul babel-register babel-preset-env`。\n\nmocha 和 chai 不用解释了，`nyc` 可以理解是 istanbul 的命令行工具；`babel-plugin-istanbul` 是在 babel 中插入 istanbul，`babel-register` 是 istanbul 使用的 babel 接口，这样两个库就打通了；最后 `babel-preset-env` 是 babel 的运行配置。\n\n先来配置 `babel-plugin-istanbul`，新建 `.babelrc`：\n\n```javascript\n{\n  \"presets\": [\n    \"env\"\n  ],\n  \"env\": {\n    \"test\": {\n      \"plugins\": [ \"istanbul\" ]\n    }\n  }\n}\n```\n\n`presets` 配置告诉 babel 使用 `babel-preset-env`。当然也可以用 'es2015' + 'stage-0' 的组合，具体可以自行斟酌。\n\n`env.test.plugins` 告诉 babel 在 `NODE_ENV=test` 的情况下使用插件 `babel-plugin-istanbul`。\n\n接下来配置 `babel-register`，新建 `.nycrc`：\n\n> `.nycrc` 是 nyc 的配置文件，和 `.babelrc` 类似，当然配置也是可以直接写进 `package.json` 的。\n\n```javascript\n{\n  \"require\": [\n    \"babel-register\"\n  ],\n  \"reporter\": [\n    \"lcov\",\n    \"text-summary\"\n  ],\n  \"sourceMap\": false,\n  \"instrument\": false\n}\n```\n\n以上的配置直接用了官方的配置。`require` 字段告诉 nyc 使用 `babel-register`，`reporter` 字段的 'lcov' 会让 nyc 生成 `lcov.info` 文件和对应的 HTML 报告，如果使用 `lcovonly` 则只生成 'lcov.info'。'text-summary' 则是会在控制台输出覆盖率等信息。\n\n> 文件会默认生成在 `/coverage` 下，可以使用 `report-dir` 字段指定。\n\n最后，在 `package.json` 中\b加入：\n\n```javascript\n  \"scripts\": {\n    \"test\": \"cross-env NODE_ENV=test nyc mocha test/**/*.spec.js\"\n  },\n```\n\n##  测试编写事例\n\n比如有 `index.js`：\n\n```javascript\nexport class Test {\n  constructor () {\n    this.data = 'a'\n  }\n}\n```\n\n那么可以写 `test/index.spec.js`，可以直接上 ES2015 的语法：\n\n```javascript\nimport { expect } from 'chai'\nimport { Test } from '../index'\n\ndescribe('index test', function() {\n  it('should be a string', function() {\n    let test = new Test\n    expect(test.data).to.be.a('string')\n  })\n})\n```\n\n使用 `npm test` 运行测试，得到：\n\n```text\n> cross-env NODE_ENV=test nyc mocha test/**/*.spec.js\n\n\n\n  index test\n    ✓ should be a string\n\n\n  1 passing (8ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 100% ( 1/1 )\nBranches     : 100% ( 0/0 )\nFunctions    : 100% ( 1/1 )\nLines        : 100% ( 1/1 )\n================================================================================\n```\n\n##  Bonus\n\n在测试中经常需要测试 promise 等异步操作，虽然 Mocha 库是可以使用回调来完成测试的，但是我们当然要用 async／await 啦。\n\n比如，需要测试 `index.js` 中的 `requestAsync`：\n\n```javascript\nexport class Test {\n  constructor () {\n    this.data = 'a'\n  }\n\n  requestAsync () {\n    return new Promise((res, rej) => {\n      res(this.data)\n    })\n  }\n}\n```\n\n那么需要先 `npm i -S babel-polyfill babel-plugin-transform-async-to-generator`。\n\n然后配置 `.nycrc`，加上 'babel-polyfill' 支持 generator \b运行时：\n\n```javascript\n{\n  \"require\": [\n    \"babel-polyfill\",\n    \"babel-register\"\n  ],\n  ...\n}\n```\n\n配置 `.babelrc`，加上 'transform-async-to-generator'，将 async 模式转换为 generator 模式。\n\n```javascript\n{\n  ...\n  \"env\": {\n    \"test\": {\n      \"plugins\": [ \"istanbul\", \"transform-async-to-generator\" ]\n    }\n  }\n}\n```\n\n接着这样测试异步：\n\n```javascript\nimport { expect } from 'chai'\nimport { Test } from '../index'\n\ndescribe('test#requestAsync', function() {\n  it('should get a string', async function() {\n    const test = new Test\n    const ret = await test.requestAsync()\n    expect(ret).to.be.a('string')\n  })\n})\n```\n\n在测试项 `it` 的第二个函数前加 'async' 标志异步，然后在返回 promise 的调用前加上 'await'，OK。\n\n```text\n> cross-env NODE_ENV=test nyc mocha test/**/*.spec.js\n\n\n\n  test#requestAsync\n    ✓ should get a string\n\n\n  1 passing (14ms)\n\n\n=============================== Coverage summary ===============================\nStatements   : 100% ( 3/3 )\nBranches     : 100% ( 0/0 )\nFunctions    : 100% ( 3/3 )\nLines        : 100% ( 3/3 )\n================================================================================\n```","slug":"mocha-chai-istanbul-in-es2015","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuo60003n7t4aa8t3riq","content":"<p>使用 JavaScript 写代码的时候，无论是使用 TDD 方法还是为了保证代码的质量和可维护性，都应该考虑加上单元测试。在博文 <a href=\"https://blog.e10t.net/mocha-chai-travis-ci-codecov-workflow/\">mocha + chai + Travis CI + Codecov 使用流程</a> 中有简单地介绍了如何使用流行的 JavsScript 库来对代码进行自动测试，检查代码覆盖率。</p>\n<p>在那篇文章中，使用的是 Mocha／Chai／istanbul 和在线的 Codecov，以及和 Github 关系密切的 Travis CI，而且测试的 JavaScript 代码是 es5。现在 es2015 已经标准化了，那么教程也需要更新一下了。另外如果项目是私有项目，那么还是使用完备的离线测试环境比较好。接下来就是一个快速可行的教程。</p>\n<h2 id=\"安装和配置\"><a href=\"#安装和配置\" class=\"headerlink\" title=\"安装和配置\"></a>安装和配置</h2><p>测试框架无需变更，还是 Mocha + Chai 的组合，但是 istanbul 需要稍微变动一下。</p>\n<blockquote>\n<p>如果你不需要 istanbul 做覆盖率测试，那么需要使用 <code>npm install --save-dev babel-register</code> 和 <code>mocha --require babel-register</code> 使 mocha 能识别 es2015 的代码</p>\n</blockquote>\n<p>使用新套件，直接安装 <code>npm i -S mocha chai cross-env nyc babel-plugin-istanbul babel-register babel-preset-env</code>。</p>\n<p>mocha 和 chai 不用解释了，<code>nyc</code> 可以理解是 istanbul 的命令行工具；<code>babel-plugin-istanbul</code> 是在 babel 中插入 istanbul，<code>babel-register</code> 是 istanbul 使用的 babel 接口，这样两个库就打通了；最后 <code>babel-preset-env</code> 是 babel 的运行配置。</p>\n<p>先来配置 <code>babel-plugin-istanbul</code>，新建 <code>.babelrc</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"env\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"env\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"plugins\"</span>: [ <span class=\"string\">\"istanbul\"</span> ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>presets</code> 配置告诉 babel 使用 <code>babel-preset-env</code>。当然也可以用 ‘es2015’ + ‘stage-0’ 的组合，具体可以自行斟酌。</p>\n<p><code>env.test.plugins</code> 告诉 babel 在 <code>NODE_ENV=test</code> 的情况下使用插件 <code>babel-plugin-istanbul</code>。</p>\n<p>接下来配置 <code>babel-register</code>，新建 <code>.nycrc</code>：</p>\n<blockquote>\n<p><code>.nycrc</code> 是 nyc 的配置文件，和 <code>.babelrc</code> 类似，当然配置也是可以直接写进 <code>package.json</code> 的。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"require\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"babel-register\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"reporter\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"lcov\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"text-summary\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"sourceMap\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"string\">\"instrument\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上的配置直接用了官方的配置。<code>require</code> 字段告诉 nyc 使用 <code>babel-register</code>，<code>reporter</code> 字段的 ‘lcov’ 会让 nyc 生成 <code>lcov.info</code> 文件和对应的 HTML 报告，如果使用 <code>lcovonly</code> 则只生成 ‘lcov.info’。’text-summary’ 则是会在控制台输出覆盖率等信息。</p>\n<blockquote>\n<p>文件会默认生成在 <code>/coverage</code> 下，可以使用 <code>report-dir</code> 字段指定。</p>\n</blockquote>\n<p>最后，在 <code>package.json</code> 中\b加入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"test\"</span>: <span class=\"string\">\"cross-env NODE_ENV=test nyc mocha test/**/*.spec.js\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试编写事例\"><a href=\"#测试编写事例\" class=\"headerlink\" title=\"测试编写事例\"></a>测试编写事例</h2><p>比如有 <code>index.js</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = <span class=\"string\">'a'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么可以写 <code>test/index.spec.js</code>，可以直接上 ES2015 的语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; expect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Test &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../index'</span></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'index test'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should be a string'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> test = <span class=\"keyword\">new</span> Test</span><br><span class=\"line\">    expect(test.data).to.be.a(<span class=\"string\">'string'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用 <code>npm test</code> 运行测试，得到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cross-env NODE_ENV=test nyc mocha test/**/*.spec.js</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  index test</span><br><span class=\"line\">    ✓ should be a string</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  1 passing (8ms)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">=============================== Coverage summary ===============================</span><br><span class=\"line\">Statements   : 100% ( 1/1 )</span><br><span class=\"line\">Branches     : 100% ( 0/0 )</span><br><span class=\"line\">Functions    : 100% ( 1/1 )</span><br><span class=\"line\">Lines        : 100% ( 1/1 )</span><br><span class=\"line\">================================================================================</span><br></pre></td></tr></table></figure>\n<h2 id=\"Bonus\"><a href=\"#Bonus\" class=\"headerlink\" title=\"Bonus\"></a>Bonus</h2><p>在测试中经常需要测试 promise 等异步操作，虽然 Mocha 库是可以使用回调来完成测试的，但是我们当然要用 async／await 啦。</p>\n<p>比如，需要测试 <code>index.js</code> 中的 <code>requestAsync</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = <span class=\"string\">'a'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  requestAsync () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      res(<span class=\"keyword\">this</span>.data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么需要先 <code>npm i -S babel-polyfill babel-plugin-transform-async-to-generator</code>。</p>\n<p>然后配置 <code>.nycrc</code>，加上 ‘babel-polyfill’ 支持 generator \b运行时：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"require\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"babel-polyfill\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"babel-register\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置 <code>.babelrc</code>，加上 ‘transform-async-to-generator’，将 async 模式转换为 generator 模式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">\"env\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"plugins\"</span>: [ <span class=\"string\">\"istanbul\"</span>, <span class=\"string\">\"transform-async-to-generator\"</span> ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着这样测试异步：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; expect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Test &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../index'</span></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'test#requestAsync'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should get a string'</span>, <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> test = <span class=\"keyword\">new</span> Test</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ret = <span class=\"keyword\">await</span> test.requestAsync()</span><br><span class=\"line\">    expect(ret).to.be.a(<span class=\"string\">'string'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在测试项 <code>it</code> 的第二个函数前加 ‘async’ 标志异步，然后在返回 promise 的调用前加上 ‘await’，OK。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cross-env NODE_ENV=test nyc mocha test/**/*.spec.js</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  test#requestAsync</span><br><span class=\"line\">    ✓ should get a string</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  1 passing (14ms)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">=============================== Coverage summary ===============================</span><br><span class=\"line\">Statements   : 100% ( 3/3 )</span><br><span class=\"line\">Branches     : 100% ( 0/0 )</span><br><span class=\"line\">Functions    : 100% ( 3/3 )</span><br><span class=\"line\">Lines        : 100% ( 3/3 )</span><br><span class=\"line\">================================================================================</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>使用 JavaScript 写代码的时候，无论是使用 TDD 方法还是为了保证代码的质量和可维护性，都应该考虑加上单元测试。在博文 <a href=\"https://blog.e10t.net/mocha-chai-travis-ci-codecov-workflow/\">mocha + chai + Travis CI + Codecov 使用流程</a> 中有简单地介绍了如何使用流行的 JavsScript 库来对代码进行自动测试，检查代码覆盖率。</p>\n<p>在那篇文章中，使用的是 Mocha／Chai／istanbul 和在线的 Codecov，以及和 Github 关系密切的 Travis CI，而且测试的 JavaScript 代码是 es5。现在 es2015 已经标准化了，那么教程也需要更新一下了。另外如果项目是私有项目，那么还是使用完备的离线测试环境比较好。接下来就是一个快速可行的教程。</p>\n<h2 id=\"安装和配置\"><a href=\"#安装和配置\" class=\"headerlink\" title=\"安装和配置\"></a>安装和配置</h2><p>测试框架无需变更，还是 Mocha + Chai 的组合，但是 istanbul 需要稍微变动一下。</p>\n<blockquote>\n<p>如果你不需要 istanbul 做覆盖率测试，那么需要使用 <code>npm install --save-dev babel-register</code> 和 <code>mocha --require babel-register</code> 使 mocha 能识别 es2015 的代码</p>\n</blockquote>\n<p>使用新套件，直接安装 <code>npm i -S mocha chai cross-env nyc babel-plugin-istanbul babel-register babel-preset-env</code>。</p>\n<p>mocha 和 chai 不用解释了，<code>nyc</code> 可以理解是 istanbul 的命令行工具；<code>babel-plugin-istanbul</code> 是在 babel 中插入 istanbul，<code>babel-register</code> 是 istanbul 使用的 babel 接口，这样两个库就打通了；最后 <code>babel-preset-env</code> 是 babel 的运行配置。</p>\n<p>先来配置 <code>babel-plugin-istanbul</code>，新建 <code>.babelrc</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"env\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"env\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"plugins\"</span>: [ <span class=\"string\">\"istanbul\"</span> ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>presets</code> 配置告诉 babel 使用 <code>babel-preset-env</code>。当然也可以用 ‘es2015’ + ‘stage-0’ 的组合，具体可以自行斟酌。</p>\n<p><code>env.test.plugins</code> 告诉 babel 在 <code>NODE_ENV=test</code> 的情况下使用插件 <code>babel-plugin-istanbul</code>。</p>\n<p>接下来配置 <code>babel-register</code>，新建 <code>.nycrc</code>：</p>\n<blockquote>\n<p><code>.nycrc</code> 是 nyc 的配置文件，和 <code>.babelrc</code> 类似，当然配置也是可以直接写进 <code>package.json</code> 的。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"require\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"babel-register\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"reporter\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"lcov\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"text-summary\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"sourceMap\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"string\">\"instrument\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上的配置直接用了官方的配置。<code>require</code> 字段告诉 nyc 使用 <code>babel-register</code>，<code>reporter</code> 字段的 ‘lcov’ 会让 nyc 生成 <code>lcov.info</code> 文件和对应的 HTML 报告，如果使用 <code>lcovonly</code> 则只生成 ‘lcov.info’。’text-summary’ 则是会在控制台输出覆盖率等信息。</p>\n<blockquote>\n<p>文件会默认生成在 <code>/coverage</code> 下，可以使用 <code>report-dir</code> 字段指定。</p>\n</blockquote>\n<p>最后，在 <code>package.json</code> 中\b加入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"test\"</span>: <span class=\"string\">\"cross-env NODE_ENV=test nyc mocha test/**/*.spec.js\"</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试编写事例\"><a href=\"#测试编写事例\" class=\"headerlink\" title=\"测试编写事例\"></a>测试编写事例</h2><p>比如有 <code>index.js</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = <span class=\"string\">'a'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么可以写 <code>test/index.spec.js</code>，可以直接上 ES2015 的语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; expect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Test &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../index'</span></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'index test'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should be a string'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> test = <span class=\"keyword\">new</span> Test</span><br><span class=\"line\">    expect(test.data).to.be.a(<span class=\"string\">'string'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用 <code>npm test</code> 运行测试，得到：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cross-env NODE_ENV=test nyc mocha test/**/*.spec.js</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  index test</span><br><span class=\"line\">    ✓ should be a string</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  1 passing (8ms)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">=============================== Coverage summary ===============================</span><br><span class=\"line\">Statements   : 100% ( 1/1 )</span><br><span class=\"line\">Branches     : 100% ( 0/0 )</span><br><span class=\"line\">Functions    : 100% ( 1/1 )</span><br><span class=\"line\">Lines        : 100% ( 1/1 )</span><br><span class=\"line\">================================================================================</span><br></pre></td></tr></table></figure>\n<h2 id=\"Bonus\"><a href=\"#Bonus\" class=\"headerlink\" title=\"Bonus\"></a>Bonus</h2><p>在测试中经常需要测试 promise 等异步操作，虽然 Mocha 库是可以使用回调来完成测试的，但是我们当然要用 async／await 啦。</p>\n<p>比如，需要测试 <code>index.js</code> 中的 <code>requestAsync</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data = <span class=\"string\">'a'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  requestAsync () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">res, rej</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      res(<span class=\"keyword\">this</span>.data)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么需要先 <code>npm i -S babel-polyfill babel-plugin-transform-async-to-generator</code>。</p>\n<p>然后配置 <code>.nycrc</code>，加上 ‘babel-polyfill’ 支持 generator \b运行时：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"require\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"babel-polyfill\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"babel-register\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置 <code>.babelrc</code>，加上 ‘transform-async-to-generator’，将 async 模式转换为 generator 模式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">\"env\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"plugins\"</span>: [ <span class=\"string\">\"istanbul\"</span>, <span class=\"string\">\"transform-async-to-generator\"</span> ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着这样测试异步：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; expect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Test &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../index'</span></span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'test#requestAsync'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should get a string'</span>, <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> test = <span class=\"keyword\">new</span> Test</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ret = <span class=\"keyword\">await</span> test.requestAsync()</span><br><span class=\"line\">    expect(ret).to.be.a(<span class=\"string\">'string'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>在测试项 <code>it</code> 的第二个函数前加 ‘async’ 标志异步，然后在返回 promise 的调用前加上 ‘await’，OK。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; cross-env NODE_ENV=test nyc mocha test/**/*.spec.js</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  test#requestAsync</span><br><span class=\"line\">    ✓ should get a string</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  1 passing (14ms)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">=============================== Coverage summary ===============================</span><br><span class=\"line\">Statements   : 100% ( 3/3 )</span><br><span class=\"line\">Branches     : 100% ( 0/0 )</span><br><span class=\"line\">Functions    : 100% ( 3/3 )</span><br><span class=\"line\">Lines        : 100% ( 3/3 )</span><br><span class=\"line\">================================================================================</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sun Aug 06 2017 15:45:21 GMT+0800 (China Standard Time)","title":"Mocha + Chai + istanbul in ES2015","path":"mocha-chai-istanbul-in-es2015/","eyeCatchImage":null,"excerpt":null,"date":"2017-08-06T07:20:41.000Z","pv":0,"totalPV":0,"categories":"技术 > 前端 > 编程语言 > javascript","tags":["javascript","mocha","chai","istanbul","测试"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1788},{"title":"mocha + chai + Travis CI + Codecov 使用流程","id":"47","updated":"2015-09-24T15:31:01.000Z","date":"2015-09-24T15:29:00.000Z","_content":"\n### [mocha](https://mochajs.org/)\na feature-rich JavaScript test framework running on Node.js and the browser\n\n### [chai](http://chaijs.com/)\na BDD / TDD assertion library for node and the browser that can be delightfully paired with any javascript testing framework\n\n### [Travis CI](https://travis-ci.org/)\nFree continuous integration platform for GitHub projects\n\n### [Codecov](https://codecov.io/)\nContinuous Code Coverage\n\n## 编写测试\n\n简单来说，就是使用 mocha 作为测试框架，chai 作为断言库，将项目交给 Travis CI 做自动测试，交给 Codecov 做覆盖率测试。\n\n以我自己的项目 [simpleTemplate.js](https://github.com/exoticknight/simpleTemplate.js) 为例。\n\n先给项目装上 mocha 和 chai。\n\n```bash\nnpm i mocha chai --save-dev\n```\n\n在 `package.json` 文件中添加测试脚本命令行。\n\n```javascript\n\"scripts\": {\n    \"test\": \"mocha\"\n}\n```\n\n项目根目录新建文件 `test.js`。\n\n引入 chai 以及三个要测试的库。\n\n```javascript\nvar expect = require( 'chai' ).expect;\n\nvar bare = require( './simpleTemplate.bare.js' ),\n    normal = require( './simpleTemplate.normal.js' ),\n    advanced = require( './simpleTemplate.advanced.js' );\n```\n\n定义必需的数据。\n\n```javascript\nvar testData = {\n    'text1': 'mocha tastes good, chai tastes good too.',\n    'html': '<hr>',\n    'list': [1, 2, 3],\n    'objectList': [\n        { 'name': 'a' },\n        { 'name': 'b' },\n        { 'name': 'c' }\n    ],\n    'obj': { 'name': 'obj' },\n    'boolFalse': false,\n    'boolTrue': true\n}\n```\n\nmocha 用起来其实也不复杂，常用的就是使用 `describe` 定义一个项目，使用 `it` 来执行一项测试。\n\n```javascript\ndescribe( 'bare', function () {\n    describe( 'string template', function () {\n        it( 'should output correct string', function () {\n            var template = bare( '<p>{=text1}</p>' );\n\n            expect( template.fill( testData ).render() ).to.equal( '<p>mocha tastes good, chai tastes good too.</p>' );\n        });\n    });\n});\n```\n\n这里就是定义了一个 `bare` 项，里面再定义一个 `string template` 项，然后在 `it` 的回调函数中写断言，第一个参数可以写上断言描述。如果断言失败，测试就会失败。\n\nOK，执行 `npm test`，可以看到结果输出。\n\n```markup\n  bare\n    string template\n      √ should output correct string\n\n\n  1 passing (9ms)\n```\n\n`expect(...).to.equal(...)` 就是用到了 chai 了。\n\n剩下的测试编写就不再详述了，基本都一样。\n\n## 自动测试\n\n去 Travis-CI 官网使用 github 帐号登录，开启对应项目的访问权限。\n\n然后在 `package.json` 同目录（根目录）下，新建文件 `.travis.yml`，写入如下内容。\n\n```markup\nlanguage: node_js\nnode_js:\n  - \"0.12\"\n```\n\n`git push` 一次，再访问 Travis-CI，会发现已经给你显示出测试结果了。\n\n那么好了，测试通过，何不贴个奖章 show off 一下呢？\n\n在项目旁边有一个黑色加绿色的按钮，点一下，弹框中选择 markdown 格式，将代码贴进 `readme`，再 `git push`，去 github 的项目页一看，是不是高大上起来了呢？\n\n## 代码覆盖率\n\n代码覆盖率其实也没必要到 100%，只要不是太低的值就可以了。\n\n去 Codecov 官网使用 github 帐号登录，开启对应项目的访问权限。\n\n然后在 `package.json` 同目录（根目录）下的 `.travis.yml` 加入如下内容。\n\n```markup\nenv:\n  global:\n    - CODECOV_TOKEN: your-uuid\nscript:\n  - istanbul cover node_modules/mocha/bin/_mocha\n  - cat ./coverage/coverage.json | node_modules/codecov.io/bin/codecov.io.js\n```\n\nyour-uuid 替换成开启项目时生成的 `Repository Upload Token`。\n\n继续 `git push` 一次，再访问 Codecov 就可以看到项目的代码覆盖率了。\n\n照样里添加上 badge，点击右边齿轮的 `badge`，就可以得到 markdown 代码了。\n\n## 打完收工\n\n以后每次 `push`，都会自动运行测试和代码率覆盖统计，去查看一下就知道代码有没有错误或者改进了。\n\n参考文章：\n\n[Basic Front End Testing With Mocha & Chai](http://callmenick.com/post/basic-front-end-testing-with-mocha-chai)\n\n[折腾 Coffee + mocha + Travis-CI 单元测试与覆盖率报告](https://cnodejs.org/topic/5443b8342be2db9d42e8f685)\n\n[Example Node with Codecov](https://github.com/codecov/example-node)","source":"_posts/mocha-chai-Travis-CI-Codecov-使用流程.md","raw":"---\ntitle: mocha + chai + Travis CI + Codecov 使用流程\ncategories:\n  - [技术, 前端]\n  - [编程语言, javascript]\ntags: [javascript, mocha, chai, travisci, codecov, 测试, 持续交付]\npermalink: mocha-chai-travis-ci-codecov-workflow\nid: 47\nupdated: '2015-09-24 23:31:01'\ndate: 2015-09-24 23:29:00\n---\n\n### [mocha](https://mochajs.org/)\na feature-rich JavaScript test framework running on Node.js and the browser\n\n### [chai](http://chaijs.com/)\na BDD / TDD assertion library for node and the browser that can be delightfully paired with any javascript testing framework\n\n### [Travis CI](https://travis-ci.org/)\nFree continuous integration platform for GitHub projects\n\n### [Codecov](https://codecov.io/)\nContinuous Code Coverage\n\n## 编写测试\n\n简单来说，就是使用 mocha 作为测试框架，chai 作为断言库，将项目交给 Travis CI 做自动测试，交给 Codecov 做覆盖率测试。\n\n以我自己的项目 [simpleTemplate.js](https://github.com/exoticknight/simpleTemplate.js) 为例。\n\n先给项目装上 mocha 和 chai。\n\n```bash\nnpm i mocha chai --save-dev\n```\n\n在 `package.json` 文件中添加测试脚本命令行。\n\n```javascript\n\"scripts\": {\n    \"test\": \"mocha\"\n}\n```\n\n项目根目录新建文件 `test.js`。\n\n引入 chai 以及三个要测试的库。\n\n```javascript\nvar expect = require( 'chai' ).expect;\n\nvar bare = require( './simpleTemplate.bare.js' ),\n    normal = require( './simpleTemplate.normal.js' ),\n    advanced = require( './simpleTemplate.advanced.js' );\n```\n\n定义必需的数据。\n\n```javascript\nvar testData = {\n    'text1': 'mocha tastes good, chai tastes good too.',\n    'html': '<hr>',\n    'list': [1, 2, 3],\n    'objectList': [\n        { 'name': 'a' },\n        { 'name': 'b' },\n        { 'name': 'c' }\n    ],\n    'obj': { 'name': 'obj' },\n    'boolFalse': false,\n    'boolTrue': true\n}\n```\n\nmocha 用起来其实也不复杂，常用的就是使用 `describe` 定义一个项目，使用 `it` 来执行一项测试。\n\n```javascript\ndescribe( 'bare', function () {\n    describe( 'string template', function () {\n        it( 'should output correct string', function () {\n            var template = bare( '<p>{=text1}</p>' );\n\n            expect( template.fill( testData ).render() ).to.equal( '<p>mocha tastes good, chai tastes good too.</p>' );\n        });\n    });\n});\n```\n\n这里就是定义了一个 `bare` 项，里面再定义一个 `string template` 项，然后在 `it` 的回调函数中写断言，第一个参数可以写上断言描述。如果断言失败，测试就会失败。\n\nOK，执行 `npm test`，可以看到结果输出。\n\n```markup\n  bare\n    string template\n      √ should output correct string\n\n\n  1 passing (9ms)\n```\n\n`expect(...).to.equal(...)` 就是用到了 chai 了。\n\n剩下的测试编写就不再详述了，基本都一样。\n\n## 自动测试\n\n去 Travis-CI 官网使用 github 帐号登录，开启对应项目的访问权限。\n\n然后在 `package.json` 同目录（根目录）下，新建文件 `.travis.yml`，写入如下内容。\n\n```markup\nlanguage: node_js\nnode_js:\n  - \"0.12\"\n```\n\n`git push` 一次，再访问 Travis-CI，会发现已经给你显示出测试结果了。\n\n那么好了，测试通过，何不贴个奖章 show off 一下呢？\n\n在项目旁边有一个黑色加绿色的按钮，点一下，弹框中选择 markdown 格式，将代码贴进 `readme`，再 `git push`，去 github 的项目页一看，是不是高大上起来了呢？\n\n## 代码覆盖率\n\n代码覆盖率其实也没必要到 100%，只要不是太低的值就可以了。\n\n去 Codecov 官网使用 github 帐号登录，开启对应项目的访问权限。\n\n然后在 `package.json` 同目录（根目录）下的 `.travis.yml` 加入如下内容。\n\n```markup\nenv:\n  global:\n    - CODECOV_TOKEN: your-uuid\nscript:\n  - istanbul cover node_modules/mocha/bin/_mocha\n  - cat ./coverage/coverage.json | node_modules/codecov.io/bin/codecov.io.js\n```\n\nyour-uuid 替换成开启项目时生成的 `Repository Upload Token`。\n\n继续 `git push` 一次，再访问 Codecov 就可以看到项目的代码覆盖率了。\n\n照样里添加上 badge，点击右边齿轮的 `badge`，就可以得到 markdown 代码了。\n\n## 打完收工\n\n以后每次 `push`，都会自动运行测试和代码率覆盖统计，去查看一下就知道代码有没有错误或者改进了。\n\n参考文章：\n\n[Basic Front End Testing With Mocha & Chai](http://callmenick.com/post/basic-front-end-testing-with-mocha-chai)\n\n[折腾 Coffee + mocha + Travis-CI 单元测试与覆盖率报告](https://cnodejs.org/topic/5443b8342be2db9d42e8f685)\n\n[Example Node with Codecov](https://github.com/codecov/example-node)","slug":"mocha-chai-travis-ci-codecov-workflow","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuoa0005n7t4i1cgsb4p","content":"<h3 id=\"mocha\"><a href=\"#mocha\" class=\"headerlink\" title=\"mocha\"></a><a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"noopener\">mocha</a></h3><p>a feature-rich JavaScript test framework running on Node.js and the browser</p>\n<h3 id=\"chai\"><a href=\"#chai\" class=\"headerlink\" title=\"chai\"></a><a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"noopener\">chai</a></h3><p>a BDD / TDD assertion library for node and the browser that can be delightfully paired with any javascript testing framework</p>\n<h3 id=\"Travis-CI\"><a href=\"#Travis-CI\" class=\"headerlink\" title=\"Travis CI\"></a><a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">Travis CI</a></h3><p>Free continuous integration platform for GitHub projects</p>\n<h3 id=\"Codecov\"><a href=\"#Codecov\" class=\"headerlink\" title=\"Codecov\"></a><a href=\"https://codecov.io/\" target=\"_blank\" rel=\"noopener\">Codecov</a></h3><p>Continuous Code Coverage</p>\n<h2 id=\"编写测试\"><a href=\"#编写测试\" class=\"headerlink\" title=\"编写测试\"></a>编写测试</h2><p>简单来说，就是使用 mocha 作为测试框架，chai 作为断言库，将项目交给 Travis CI 做自动测试，交给 Codecov 做覆盖率测试。</p>\n<p>以我自己的项目 <a href=\"https://github.com/exoticknight/simpleTemplate.js\" target=\"_blank\" rel=\"noopener\">simpleTemplate.js</a> 为例。</p>\n<p>先给项目装上 mocha 和 chai。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mocha chai --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>package.json</code> 文件中添加测试脚本命令行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>项目根目录新建文件 <code>test.js</code>。</p>\n<p>引入 chai 以及三个要测试的库。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> expect = <span class=\"built_in\">require</span>( <span class=\"string\">'chai'</span> ).expect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bare = <span class=\"built_in\">require</span>( <span class=\"string\">'./simpleTemplate.bare.js'</span> ),</span><br><span class=\"line\">    normal = <span class=\"built_in\">require</span>( <span class=\"string\">'./simpleTemplate.normal.js'</span> ),</span><br><span class=\"line\">    advanced = <span class=\"built_in\">require</span>( <span class=\"string\">'./simpleTemplate.advanced.js'</span> );</span><br></pre></td></tr></table></figure>\n<p>定义必需的数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> testData = &#123;</span><br><span class=\"line\">    <span class=\"string\">'text1'</span>: <span class=\"string\">'mocha tastes good, chai tastes good too.'</span>,</span><br><span class=\"line\">    <span class=\"string\">'html'</span>: <span class=\"string\">'&lt;hr&gt;'</span>,</span><br><span class=\"line\">    <span class=\"string\">'list'</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">    <span class=\"string\">'objectList'</span>: [</span><br><span class=\"line\">        &#123; <span class=\"string\">'name'</span>: <span class=\"string\">'a'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">'name'</span>: <span class=\"string\">'b'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">'name'</span>: <span class=\"string\">'c'</span> &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">'obj'</span>: &#123; <span class=\"string\">'name'</span>: <span class=\"string\">'obj'</span> &#125;,</span><br><span class=\"line\">    <span class=\"string\">'boolFalse'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'boolTrue'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>mocha 用起来其实也不复杂，常用的就是使用 <code>describe</code> 定义一个项目，使用 <code>it</code> 来执行一项测试。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe( <span class=\"string\">'bare'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    describe( <span class=\"string\">'string template'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        it( <span class=\"string\">'should output correct string'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> template = bare( <span class=\"string\">'&lt;p&gt;&#123;=text1&#125;&lt;/p&gt;'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">            expect( template.fill( testData ).render() ).to.equal( <span class=\"string\">'&lt;p&gt;mocha tastes good, chai tastes good too.&lt;/p&gt;'</span> );</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里就是定义了一个 <code>bare</code> 项，里面再定义一个 <code>string template</code> 项，然后在 <code>it</code> 的回调函数中写断言，第一个参数可以写上断言描述。如果断言失败，测试就会失败。</p>\n<p>OK，执行 <code>npm test</code>，可以看到结果输出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bare</span><br><span class=\"line\">  string template</span><br><span class=\"line\">    √ should output correct string</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1 passing (9ms)</span><br></pre></td></tr></table></figure>\n<p><code>expect(...).to.equal(...)</code> 就是用到了 chai 了。</p>\n<p>剩下的测试编写就不再详述了，基本都一样。</p>\n<h2 id=\"自动测试\"><a href=\"#自动测试\" class=\"headerlink\" title=\"自动测试\"></a>自动测试</h2><p>去 Travis-CI 官网使用 github 帐号登录，开启对应项目的访问权限。</p>\n<p>然后在 <code>package.json</code> 同目录（根目录）下，新建文件 <code>.travis.yml</code>，写入如下内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js:</span><br><span class=\"line\">  - &quot;0.12&quot;</span><br></pre></td></tr></table></figure>\n<p><code>git push</code> 一次，再访问 Travis-CI，会发现已经给你显示出测试结果了。</p>\n<p>那么好了，测试通过，何不贴个奖章 show off 一下呢？</p>\n<p>在项目旁边有一个黑色加绿色的按钮，点一下，弹框中选择 markdown 格式，将代码贴进 <code>readme</code>，再 <code>git push</code>，去 github 的项目页一看，是不是高大上起来了呢？</p>\n<h2 id=\"代码覆盖率\"><a href=\"#代码覆盖率\" class=\"headerlink\" title=\"代码覆盖率\"></a>代码覆盖率</h2><p>代码覆盖率其实也没必要到 100%，只要不是太低的值就可以了。</p>\n<p>去 Codecov 官网使用 github 帐号登录，开启对应项目的访问权限。</p>\n<p>然后在 <code>package.json</code> 同目录（根目录）下的 <code>.travis.yml</code> 加入如下内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env:</span><br><span class=\"line\">  global:</span><br><span class=\"line\">    - CODECOV_TOKEN: your-uuid</span><br><span class=\"line\">script:</span><br><span class=\"line\">  - istanbul cover node_modules/mocha/bin/_mocha</span><br><span class=\"line\">  - cat ./coverage/coverage.json | node_modules/codecov.io/bin/codecov.io.js</span><br></pre></td></tr></table></figure>\n<p>your-uuid 替换成开启项目时生成的 <code>Repository Upload Token</code>。</p>\n<p>继续 <code>git push</code> 一次，再访问 Codecov 就可以看到项目的代码覆盖率了。</p>\n<p>照样里添加上 badge，点击右边齿轮的 <code>badge</code>，就可以得到 markdown 代码了。</p>\n<h2 id=\"打完收工\"><a href=\"#打完收工\" class=\"headerlink\" title=\"打完收工\"></a>打完收工</h2><p>以后每次 <code>push</code>，都会自动运行测试和代码率覆盖统计，去查看一下就知道代码有没有错误或者改进了。</p>\n<p>参考文章：</p>\n<p><a href=\"http://callmenick.com/post/basic-front-end-testing-with-mocha-chai\" target=\"_blank\" rel=\"noopener\">Basic Front End Testing With Mocha &amp; Chai</a></p>\n<p><a href=\"https://cnodejs.org/topic/5443b8342be2db9d42e8f685\" target=\"_blank\" rel=\"noopener\">折腾 Coffee + mocha + Travis-CI 单元测试与覆盖率报告</a></p>\n<p><a href=\"https://github.com/codecov/example-node\" target=\"_blank\" rel=\"noopener\">Example Node with Codecov</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"mocha\"><a href=\"#mocha\" class=\"headerlink\" title=\"mocha\"></a><a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"noopener\">mocha</a></h3><p>a feature-rich JavaScript test framework running on Node.js and the browser</p>\n<h3 id=\"chai\"><a href=\"#chai\" class=\"headerlink\" title=\"chai\"></a><a href=\"http://chaijs.com/\" target=\"_blank\" rel=\"noopener\">chai</a></h3><p>a BDD / TDD assertion library for node and the browser that can be delightfully paired with any javascript testing framework</p>\n<h3 id=\"Travis-CI\"><a href=\"#Travis-CI\" class=\"headerlink\" title=\"Travis CI\"></a><a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"noopener\">Travis CI</a></h3><p>Free continuous integration platform for GitHub projects</p>\n<h3 id=\"Codecov\"><a href=\"#Codecov\" class=\"headerlink\" title=\"Codecov\"></a><a href=\"https://codecov.io/\" target=\"_blank\" rel=\"noopener\">Codecov</a></h3><p>Continuous Code Coverage</p>\n<h2 id=\"编写测试\"><a href=\"#编写测试\" class=\"headerlink\" title=\"编写测试\"></a>编写测试</h2><p>简单来说，就是使用 mocha 作为测试框架，chai 作为断言库，将项目交给 Travis CI 做自动测试，交给 Codecov 做覆盖率测试。</p>\n<p>以我自己的项目 <a href=\"https://github.com/exoticknight/simpleTemplate.js\" target=\"_blank\" rel=\"noopener\">simpleTemplate.js</a> 为例。</p>\n<p>先给项目装上 mocha 和 chai。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mocha chai --save-dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>package.json</code> 文件中添加测试脚本命令行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"mocha\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>项目根目录新建文件 <code>test.js</code>。</p>\n<p>引入 chai 以及三个要测试的库。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> expect = <span class=\"built_in\">require</span>( <span class=\"string\">'chai'</span> ).expect;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bare = <span class=\"built_in\">require</span>( <span class=\"string\">'./simpleTemplate.bare.js'</span> ),</span><br><span class=\"line\">    normal = <span class=\"built_in\">require</span>( <span class=\"string\">'./simpleTemplate.normal.js'</span> ),</span><br><span class=\"line\">    advanced = <span class=\"built_in\">require</span>( <span class=\"string\">'./simpleTemplate.advanced.js'</span> );</span><br></pre></td></tr></table></figure>\n<p>定义必需的数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> testData = &#123;</span><br><span class=\"line\">    <span class=\"string\">'text1'</span>: <span class=\"string\">'mocha tastes good, chai tastes good too.'</span>,</span><br><span class=\"line\">    <span class=\"string\">'html'</span>: <span class=\"string\">'&lt;hr&gt;'</span>,</span><br><span class=\"line\">    <span class=\"string\">'list'</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">    <span class=\"string\">'objectList'</span>: [</span><br><span class=\"line\">        &#123; <span class=\"string\">'name'</span>: <span class=\"string\">'a'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">'name'</span>: <span class=\"string\">'b'</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"string\">'name'</span>: <span class=\"string\">'c'</span> &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">'obj'</span>: &#123; <span class=\"string\">'name'</span>: <span class=\"string\">'obj'</span> &#125;,</span><br><span class=\"line\">    <span class=\"string\">'boolFalse'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">'boolTrue'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>mocha 用起来其实也不复杂，常用的就是使用 <code>describe</code> 定义一个项目，使用 <code>it</code> 来执行一项测试。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe( <span class=\"string\">'bare'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    describe( <span class=\"string\">'string template'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        it( <span class=\"string\">'should output correct string'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> template = bare( <span class=\"string\">'&lt;p&gt;&#123;=text1&#125;&lt;/p&gt;'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">            expect( template.fill( testData ).render() ).to.equal( <span class=\"string\">'&lt;p&gt;mocha tastes good, chai tastes good too.&lt;/p&gt;'</span> );</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里就是定义了一个 <code>bare</code> 项，里面再定义一个 <code>string template</code> 项，然后在 <code>it</code> 的回调函数中写断言，第一个参数可以写上断言描述。如果断言失败，测试就会失败。</p>\n<p>OK，执行 <code>npm test</code>，可以看到结果输出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bare</span><br><span class=\"line\">  string template</span><br><span class=\"line\">    √ should output correct string</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">1 passing (9ms)</span><br></pre></td></tr></table></figure>\n<p><code>expect(...).to.equal(...)</code> 就是用到了 chai 了。</p>\n<p>剩下的测试编写就不再详述了，基本都一样。</p>\n<h2 id=\"自动测试\"><a href=\"#自动测试\" class=\"headerlink\" title=\"自动测试\"></a>自动测试</h2><p>去 Travis-CI 官网使用 github 帐号登录，开启对应项目的访问权限。</p>\n<p>然后在 <code>package.json</code> 同目录（根目录）下，新建文件 <code>.travis.yml</code>，写入如下内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">language: node_js</span><br><span class=\"line\">node_js:</span><br><span class=\"line\">  - &quot;0.12&quot;</span><br></pre></td></tr></table></figure>\n<p><code>git push</code> 一次，再访问 Travis-CI，会发现已经给你显示出测试结果了。</p>\n<p>那么好了，测试通过，何不贴个奖章 show off 一下呢？</p>\n<p>在项目旁边有一个黑色加绿色的按钮，点一下，弹框中选择 markdown 格式，将代码贴进 <code>readme</code>，再 <code>git push</code>，去 github 的项目页一看，是不是高大上起来了呢？</p>\n<h2 id=\"代码覆盖率\"><a href=\"#代码覆盖率\" class=\"headerlink\" title=\"代码覆盖率\"></a>代码覆盖率</h2><p>代码覆盖率其实也没必要到 100%，只要不是太低的值就可以了。</p>\n<p>去 Codecov 官网使用 github 帐号登录，开启对应项目的访问权限。</p>\n<p>然后在 <code>package.json</code> 同目录（根目录）下的 <code>.travis.yml</code> 加入如下内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env:</span><br><span class=\"line\">  global:</span><br><span class=\"line\">    - CODECOV_TOKEN: your-uuid</span><br><span class=\"line\">script:</span><br><span class=\"line\">  - istanbul cover node_modules/mocha/bin/_mocha</span><br><span class=\"line\">  - cat ./coverage/coverage.json | node_modules/codecov.io/bin/codecov.io.js</span><br></pre></td></tr></table></figure>\n<p>your-uuid 替换成开启项目时生成的 <code>Repository Upload Token</code>。</p>\n<p>继续 <code>git push</code> 一次，再访问 Codecov 就可以看到项目的代码覆盖率了。</p>\n<p>照样里添加上 badge，点击右边齿轮的 <code>badge</code>，就可以得到 markdown 代码了。</p>\n<h2 id=\"打完收工\"><a href=\"#打完收工\" class=\"headerlink\" title=\"打完收工\"></a>打完收工</h2><p>以后每次 <code>push</code>，都会自动运行测试和代码率覆盖统计，去查看一下就知道代码有没有错误或者改进了。</p>\n<p>参考文章：</p>\n<p><a href=\"http://callmenick.com/post/basic-front-end-testing-with-mocha-chai\" target=\"_blank\" rel=\"noopener\">Basic Front End Testing With Mocha &amp; Chai</a></p>\n<p><a href=\"https://cnodejs.org/topic/5443b8342be2db9d42e8f685\" target=\"_blank\" rel=\"noopener\">折腾 Coffee + mocha + Travis-CI 单元测试与覆盖率报告</a></p>\n<p><a href=\"https://github.com/codecov/example-node\" target=\"_blank\" rel=\"noopener\">Example Node with Codecov</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Sep 24 2015 23:31:01 GMT+0800 (China Standard Time)","title":"mocha + chai + Travis CI + Codecov 使用流程","path":"mocha-chai-travis-ci-codecov-workflow/","eyeCatchImage":null,"excerpt":null,"date":"2015-09-24T15:29:00.000Z","pv":0,"totalPV":0,"categories":"技术 > 前端 > 编程语言 > javascript","tags":["javascript","mocha","chai","测试","travisci","codecov","持续交付"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1449},{"title":"python中有趣的zip函数","id":"21","updated":"2014-08-03T14:00:38.000Z","date":"2014-08-03T13:50:14.000Z","_content":"\n懂python的都知道有一个内置函数zip，作用是将多个序列里面的对应组合起来。\n\n直接上图。\n\n![zip作用图示](http://i.imgur.com/lamRGpg.png)\n\n图中a1、a2、result都是序列。zip在执行的时候将序列a1中的一个元素取出，再取出序列a2对应位置中的元素，组合成一个tuple，最后将这些tuple组合成一个数组。\n\n所以，最后我们得到一个数组result=[(1,a),(2,b),(3,c),...]\n\n所以这个zip的意思理解成拉链比较形象。\n\n两个序列是两边的链，zip函数将它们拉上组合起来。\n\n当然zip函数可接收多个序列。\n\n然后很有趣的事情就来了，如果在这之后再执行`zip(*result)`，就可以取回序列a1和序列a2！\n\n代码上看更直观。\n\n```python\n>>> a1 = [1, 2, 3]\n>>> a2 = ['a', 'b', 'c']\n>>> result = zip(a, b)\n>>> result\n[(1, 'a'), (2, 'b'), (3, 'c')]\n>>> zip(*result)\n[(1, 2, 3), ('a', 'b', 'c')]\n```\n\n注意到`result`前有一个`*`号，这其实是告诉zip函数传入的是一个序列，于是`result`从一个参数变成了多个参数了。\n\n从`zip([(1, 'a'), (2, 'b'), (3, 'c')])`变成了`zip((1, 'a'), (2, 'b'), (3, 'c'))`了。\n\n于是也就不难理解为什么能拆回来。\n\n图示就是如下。\n\n![拆开result](http://i.imgur.com/YWDddpl.png)\n\n实际上起到了unzip的作用了～\n\npython还真是可愛い～\n\n![python拟人](http://next.rikunabi.com/tech/contents/ts_report/img/201312/002412/part3_img.jpg)","source":"_posts/python中有趣的zip函数.md","raw":"---\ntitle: python中有趣的zip函数\ncategories:\n  - [技术, 杂谈]\n  - [编程语言, python]\ntags: [python]\npermalink: python-interesting-function-zip\nid: 21\nupdated: '2014-08-03 22:00:38'\ndate: 2014-08-03 21:50:14\n---\n\n懂python的都知道有一个内置函数zip，作用是将多个序列里面的对应组合起来。\n\n直接上图。\n\n![zip作用图示](http://i.imgur.com/lamRGpg.png)\n\n图中a1、a2、result都是序列。zip在执行的时候将序列a1中的一个元素取出，再取出序列a2对应位置中的元素，组合成一个tuple，最后将这些tuple组合成一个数组。\n\n所以，最后我们得到一个数组result=[(1,a),(2,b),(3,c),...]\n\n所以这个zip的意思理解成拉链比较形象。\n\n两个序列是两边的链，zip函数将它们拉上组合起来。\n\n当然zip函数可接收多个序列。\n\n然后很有趣的事情就来了，如果在这之后再执行`zip(*result)`，就可以取回序列a1和序列a2！\n\n代码上看更直观。\n\n```python\n>>> a1 = [1, 2, 3]\n>>> a2 = ['a', 'b', 'c']\n>>> result = zip(a, b)\n>>> result\n[(1, 'a'), (2, 'b'), (3, 'c')]\n>>> zip(*result)\n[(1, 2, 3), ('a', 'b', 'c')]\n```\n\n注意到`result`前有一个`*`号，这其实是告诉zip函数传入的是一个序列，于是`result`从一个参数变成了多个参数了。\n\n从`zip([(1, 'a'), (2, 'b'), (3, 'c')])`变成了`zip((1, 'a'), (2, 'b'), (3, 'c'))`了。\n\n于是也就不难理解为什么能拆回来。\n\n图示就是如下。\n\n![拆开result](http://i.imgur.com/YWDddpl.png)\n\n实际上起到了unzip的作用了～\n\npython还真是可愛い～\n\n![python拟人](http://next.rikunabi.com/tech/contents/ts_report/img/201312/002412/part3_img.jpg)","slug":"python-interesting-function-zip","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuod0007n7t4j7g12asw","content":"<p>懂python的都知道有一个内置函数zip，作用是将多个序列里面的对应组合起来。</p>\n<p>直接上图。</p>\n<p><img src=\"http://i.imgur.com/lamRGpg.png\" alt=\"zip作用图示\"></p>\n<p>图中a1、a2、result都是序列。zip在执行的时候将序列a1中的一个元素取出，再取出序列a2对应位置中的元素，组合成一个tuple，最后将这些tuple组合成一个数组。</p>\n<p>所以，最后我们得到一个数组result=[(1,a),(2,b),(3,c),…]</p>\n<p>所以这个zip的意思理解成拉链比较形象。</p>\n<p>两个序列是两边的链，zip函数将它们拉上组合起来。</p>\n<p>当然zip函数可接收多个序列。</p>\n<p>然后很有趣的事情就来了，如果在这之后再执行<code>zip(*result)</code>，就可以取回序列a1和序列a2！</p>\n<p>代码上看更直观。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a2 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>result = zip(a, b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>result</span><br><span class=\"line\">[(<span class=\"number\">1</span>, <span class=\"string\">'a'</span>), (<span class=\"number\">2</span>, <span class=\"string\">'b'</span>), (<span class=\"number\">3</span>, <span class=\"string\">'c'</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>zip(*result)</span><br><span class=\"line\">[(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>), (<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>)]</span><br></pre></td></tr></table></figure>\n<p>注意到<code>result</code>前有一个<code>*</code>号，这其实是告诉zip函数传入的是一个序列，于是<code>result</code>从一个参数变成了多个参数了。</p>\n<p>从<code>zip([(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;)])</code>变成了<code>zip((1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;))</code>了。</p>\n<p>于是也就不难理解为什么能拆回来。</p>\n<p>图示就是如下。</p>\n<p><img src=\"http://i.imgur.com/YWDddpl.png\" alt=\"拆开result\"></p>\n<p>实际上起到了unzip的作用了～</p>\n<p>python还真是可愛い～</p>\n<p><img src=\"http://next.rikunabi.com/tech/contents/ts_report/img/201312/002412/part3_img.jpg\" alt=\"python拟人\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>懂python的都知道有一个内置函数zip，作用是将多个序列里面的对应组合起来。</p>\n<p>直接上图。</p>\n<p><img src=\"http://i.imgur.com/lamRGpg.png\" alt=\"zip作用图示\"></p>\n<p>图中a1、a2、result都是序列。zip在执行的时候将序列a1中的一个元素取出，再取出序列a2对应位置中的元素，组合成一个tuple，最后将这些tuple组合成一个数组。</p>\n<p>所以，最后我们得到一个数组result=[(1,a),(2,b),(3,c),…]</p>\n<p>所以这个zip的意思理解成拉链比较形象。</p>\n<p>两个序列是两边的链，zip函数将它们拉上组合起来。</p>\n<p>当然zip函数可接收多个序列。</p>\n<p>然后很有趣的事情就来了，如果在这之后再执行<code>zip(*result)</code>，就可以取回序列a1和序列a2！</p>\n<p>代码上看更直观。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a2 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>result = zip(a, b)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>result</span><br><span class=\"line\">[(<span class=\"number\">1</span>, <span class=\"string\">'a'</span>), (<span class=\"number\">2</span>, <span class=\"string\">'b'</span>), (<span class=\"number\">3</span>, <span class=\"string\">'c'</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>zip(*result)</span><br><span class=\"line\">[(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>), (<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>)]</span><br></pre></td></tr></table></figure>\n<p>注意到<code>result</code>前有一个<code>*</code>号，这其实是告诉zip函数传入的是一个序列，于是<code>result</code>从一个参数变成了多个参数了。</p>\n<p>从<code>zip([(1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;)])</code>变成了<code>zip((1, &#39;a&#39;), (2, &#39;b&#39;), (3, &#39;c&#39;))</code>了。</p>\n<p>于是也就不难理解为什么能拆回来。</p>\n<p>图示就是如下。</p>\n<p><img src=\"http://i.imgur.com/YWDddpl.png\" alt=\"拆开result\"></p>\n<p>实际上起到了unzip的作用了～</p>\n<p>python还真是可愛い～</p>\n<p><img src=\"http://next.rikunabi.com/tech/contents/ts_report/img/201312/002412/part3_img.jpg\" alt=\"python拟人\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"http://i.imgur.com/lamRGpg.png","popularPost_tmp_gaData":{"updated":"Sun Aug 03 2014 22:00:38 GMT+0800 (China Standard Time)","title":"python中有趣的zip函数","path":"python-interesting-function-zip/","eyeCatchImage":"http://i.imgur.com/lamRGpg.png","excerpt":null,"date":"2014-08-03T13:50:14.000Z","pv":0,"totalPV":0,"categories":"技术 > 杂谈 > 编程语言 > python","tags":["python"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":541},{"title":"radioit 计划——动画广播辅助脚本 radioitScript","id":"39","updated":"2015-03-23T12:27:02.000Z","date":"2015-03-23T12:25:53.000Z","_content":"\n在 [这篇文章](http://blog.e10t.net/how-to-save-internet-radio/) 的实践基础和 [这篇文章](http://blog.e10t.net/append-a-python-script-for-last-post-about-saving-internet-radio/) 的代码基础上，我重新将代码整理一下，并添加了一些功能，将原来三个脚本的共同点提炼，写成一个网络广播查看和获取的框架。继而在这个框架上，写出对应三个广播站的脚本的 ver 2.0。\n\n原来的脚本的功能就不再详述了，来说说一下新版脚本三大功能，分别是：探索广播、下载广播和查看广播。\n\n探索广播是指能够列出某一个广播站上所有的 / 当天的 / 星期 x 的 / 最新的广播，旨在能够帮助使用者发现自己喜欢的广播和新推出的广播。\n\n下载广播是指能提取出广播音频 / 图片的地址，供第三方播放器播放或保存。\n\n查看广播是指能够列出某广播的主要信息：包括更新日期、最新一期的内容、主持人等。\n\n基本可以说，有了新版的脚本，基本就不需要用浏览器浏览广播站的网页了。并且，因为脚本只是需要抓单个页面和将网页内容整理好再输出，所以对比起网页，能更快更高效地呈现有用的信息。\n\n## 子命令\n\n对比旧版，新版脚本的一大改进是引入了子命令。最直观的反映就是，调用方式的不同。\n\n旧版\n```bash\npython www.py -x -y zzz\n```\n\n新版\n```bash\npython www.py xxx -y zzz\n```\n\n就是类似 `git` 命令行的那样，`argparse` 库非常给力地支持这种方法。\n\n重点是使用 `add_subparsers` 函数和 `add_parser` 函数，详细使用看 [文档](https://docs.python.org/2/library/argparse.html) 和[github 上的代码](https://github.com/exoticknight/radioitScript/blob/master/_radioit_script_template.py)。\n\n多亏了能够这样嵌套命令，即使再多的功能也能变得清晰分明。\n\n## 整体框架\n\nver 2.0 的起点是一个脚本框架，承载参数的解释和自定义函数调用的重要功能。\n\n脚本的一次执行基本流程是：\n\n入口 → 解析参数 → 调用自定义函数 → 执行自定义函数\n\n前三个都能够定下来，不同的广播站只需要各自填充自定义函数就可以了。\n\n最简框架代码如下：\n\n```python\n\"\"\"自定义函数\"\"\"\ndef foo():\n    pass\n\n\n\"\"\"子命令和参数跳转\"\"\"\ndef process(option):\n    if option.sp_name == \"www\":\n        if option.xxx:\n            foo()\n\n\n\"\"\"入口\"\"\"\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(version=\"2.0\")\n\n    # 子命令\n    sp = parser.add_subparsers(title=\"commands\", description=\"support commands\", help=\"what they will do\", dest=\"sp_name\")\n\n    # 添加子命令\n    sp_www = sp.add_parser(\"www\")\n\n    # 添加子命令参数\n    sp_www.add_argument(\"-x\", \"--xxx\", action=\"store_true\", dest=\"xxx\")\n\n    try:\n        args = parser.parse_args(sys.argv[1:])\n    except argparse.ArgumentError, e:\n        print(\"bad options: {0}\".format(e))\n    except argparse.ArgumentTypeError, e:\n        print(\"bad option value: {0}\".format(e))\n    else:\n        process(args)\n```\n\n## 自定义函数骨架\n\n框架还基于库 `urllib`、`urllib2`、`argparse` 和 `bs4`，制定了自定义函数的骨架。\n\n脚本做的事情，无非就是获取网页资源，接着在 html 结构中筛选有用信息，然后格式化成文本输出。因此，自定义函数也可以制定出骨架，不同的广播站就只需要指定筛选的规则就行了。\n\n```python\n# 获取网页\ntry:\n    soup = BeautifulSoup(urllib2.urlopen(u\"http://url\", timeout=60)) # 1\nexcept Exception, e:\n    handle_error(e, \"Network Error.\")\n    return\n\n# 筛选\ncontent = soup.select(\"html\") # 2\n\n# 组织内容\ntable = [(u\"ID\", u\"Name\")] + [a for a in content] # 3\n# 格式化文本\ntext = prettify_table(table)\n\n# 输出\nprint(text.encode(\"gb18030\"))\n```\n\n虽说骨架是定下来了，但在特殊函数比如下载函数就需要另外编写。\n\n## 总结\n\n虽然新版脚本框架是为了 radioit 计划而写的代码，但是其中 `argparse` 模块的使用的代码也是能被借鉴在其他需要带参数运行的 python 脚本中。\n\n新版对比旧版，增加了功能，但是也增加了使用的复杂度和代码的长度。旧版还是可以保留下来，供日常快速使用。","source":"_posts/radioit计划——动画广播辅助脚本radioitScript.md","raw":"---\ntitle: radioit 计划——动画广播辅助脚本 radioitScript\ncategories:\n  - [技术, 黑客]\n  - [编程语言, python]\ntags: [python, radioit]\npermalink: radioit-plan-animate-radio-script-radioitscript\nid: 39\nupdated: '2015-03-23 20:27:02'\ndate: 2015-03-23 20:25:53\n---\n\n在 [这篇文章](http://blog.e10t.net/how-to-save-internet-radio/) 的实践基础和 [这篇文章](http://blog.e10t.net/append-a-python-script-for-last-post-about-saving-internet-radio/) 的代码基础上，我重新将代码整理一下，并添加了一些功能，将原来三个脚本的共同点提炼，写成一个网络广播查看和获取的框架。继而在这个框架上，写出对应三个广播站的脚本的 ver 2.0。\n\n原来的脚本的功能就不再详述了，来说说一下新版脚本三大功能，分别是：探索广播、下载广播和查看广播。\n\n探索广播是指能够列出某一个广播站上所有的 / 当天的 / 星期 x 的 / 最新的广播，旨在能够帮助使用者发现自己喜欢的广播和新推出的广播。\n\n下载广播是指能提取出广播音频 / 图片的地址，供第三方播放器播放或保存。\n\n查看广播是指能够列出某广播的主要信息：包括更新日期、最新一期的内容、主持人等。\n\n基本可以说，有了新版的脚本，基本就不需要用浏览器浏览广播站的网页了。并且，因为脚本只是需要抓单个页面和将网页内容整理好再输出，所以对比起网页，能更快更高效地呈现有用的信息。\n\n## 子命令\n\n对比旧版，新版脚本的一大改进是引入了子命令。最直观的反映就是，调用方式的不同。\n\n旧版\n```bash\npython www.py -x -y zzz\n```\n\n新版\n```bash\npython www.py xxx -y zzz\n```\n\n就是类似 `git` 命令行的那样，`argparse` 库非常给力地支持这种方法。\n\n重点是使用 `add_subparsers` 函数和 `add_parser` 函数，详细使用看 [文档](https://docs.python.org/2/library/argparse.html) 和[github 上的代码](https://github.com/exoticknight/radioitScript/blob/master/_radioit_script_template.py)。\n\n多亏了能够这样嵌套命令，即使再多的功能也能变得清晰分明。\n\n## 整体框架\n\nver 2.0 的起点是一个脚本框架，承载参数的解释和自定义函数调用的重要功能。\n\n脚本的一次执行基本流程是：\n\n入口 → 解析参数 → 调用自定义函数 → 执行自定义函数\n\n前三个都能够定下来，不同的广播站只需要各自填充自定义函数就可以了。\n\n最简框架代码如下：\n\n```python\n\"\"\"自定义函数\"\"\"\ndef foo():\n    pass\n\n\n\"\"\"子命令和参数跳转\"\"\"\ndef process(option):\n    if option.sp_name == \"www\":\n        if option.xxx:\n            foo()\n\n\n\"\"\"入口\"\"\"\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(version=\"2.0\")\n\n    # 子命令\n    sp = parser.add_subparsers(title=\"commands\", description=\"support commands\", help=\"what they will do\", dest=\"sp_name\")\n\n    # 添加子命令\n    sp_www = sp.add_parser(\"www\")\n\n    # 添加子命令参数\n    sp_www.add_argument(\"-x\", \"--xxx\", action=\"store_true\", dest=\"xxx\")\n\n    try:\n        args = parser.parse_args(sys.argv[1:])\n    except argparse.ArgumentError, e:\n        print(\"bad options: {0}\".format(e))\n    except argparse.ArgumentTypeError, e:\n        print(\"bad option value: {0}\".format(e))\n    else:\n        process(args)\n```\n\n## 自定义函数骨架\n\n框架还基于库 `urllib`、`urllib2`、`argparse` 和 `bs4`，制定了自定义函数的骨架。\n\n脚本做的事情，无非就是获取网页资源，接着在 html 结构中筛选有用信息，然后格式化成文本输出。因此，自定义函数也可以制定出骨架，不同的广播站就只需要指定筛选的规则就行了。\n\n```python\n# 获取网页\ntry:\n    soup = BeautifulSoup(urllib2.urlopen(u\"http://url\", timeout=60)) # 1\nexcept Exception, e:\n    handle_error(e, \"Network Error.\")\n    return\n\n# 筛选\ncontent = soup.select(\"html\") # 2\n\n# 组织内容\ntable = [(u\"ID\", u\"Name\")] + [a for a in content] # 3\n# 格式化文本\ntext = prettify_table(table)\n\n# 输出\nprint(text.encode(\"gb18030\"))\n```\n\n虽说骨架是定下来了，但在特殊函数比如下载函数就需要另外编写。\n\n## 总结\n\n虽然新版脚本框架是为了 radioit 计划而写的代码，但是其中 `argparse` 模块的使用的代码也是能被借鉴在其他需要带参数运行的 python 脚本中。\n\n新版对比旧版，增加了功能，但是也增加了使用的复杂度和代码的长度。旧版还是可以保留下来，供日常快速使用。","slug":"radioit-plan-animate-radio-script-radioitscript","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuoe0009n7t4o8s66jum","content":"<p>在 <a href=\"http://blog.e10t.net/how-to-save-internet-radio/\">这篇文章</a> 的实践基础和 <a href=\"http://blog.e10t.net/append-a-python-script-for-last-post-about-saving-internet-radio/\">这篇文章</a> 的代码基础上，我重新将代码整理一下，并添加了一些功能，将原来三个脚本的共同点提炼，写成一个网络广播查看和获取的框架。继而在这个框架上，写出对应三个广播站的脚本的 ver 2.0。</p>\n<p>原来的脚本的功能就不再详述了，来说说一下新版脚本三大功能，分别是：探索广播、下载广播和查看广播。</p>\n<p>探索广播是指能够列出某一个广播站上所有的 / 当天的 / 星期 x 的 / 最新的广播，旨在能够帮助使用者发现自己喜欢的广播和新推出的广播。</p>\n<p>下载广播是指能提取出广播音频 / 图片的地址，供第三方播放器播放或保存。</p>\n<p>查看广播是指能够列出某广播的主要信息：包括更新日期、最新一期的内容、主持人等。</p>\n<p>基本可以说，有了新版的脚本，基本就不需要用浏览器浏览广播站的网页了。并且，因为脚本只是需要抓单个页面和将网页内容整理好再输出，所以对比起网页，能更快更高效地呈现有用的信息。</p>\n<h2 id=\"子命令\"><a href=\"#子命令\" class=\"headerlink\" title=\"子命令\"></a>子命令</h2><p>对比旧版，新版脚本的一大改进是引入了子命令。最直观的反映就是，调用方式的不同。</p>\n<p>旧版<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python www.py -x -y zzz</span><br></pre></td></tr></table></figure></p>\n<p>新版<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python www.py xxx -y zzz</span><br></pre></td></tr></table></figure></p>\n<p>就是类似 <code>git</code> 命令行的那样，<code>argparse</code> 库非常给力地支持这种方法。</p>\n<p>重点是使用 <code>add_subparsers</code> 函数和 <code>add_parser</code> 函数，详细使用看 <a href=\"https://docs.python.org/2/library/argparse.html\" target=\"_blank\" rel=\"noopener\">文档</a> 和<a href=\"https://github.com/exoticknight/radioitScript/blob/master/_radioit_script_template.py\" target=\"_blank\" rel=\"noopener\">github 上的代码</a>。</p>\n<p>多亏了能够这样嵌套命令，即使再多的功能也能变得清晰分明。</p>\n<h2 id=\"整体框架\"><a href=\"#整体框架\" class=\"headerlink\" title=\"整体框架\"></a>整体框架</h2><p>ver 2.0 的起点是一个脚本框架，承载参数的解释和自定义函数调用的重要功能。</p>\n<p>脚本的一次执行基本流程是：</p>\n<p>入口 → 解析参数 → 调用自定义函数 → 执行自定义函数</p>\n<p>前三个都能够定下来，不同的广播站只需要各自填充自定义函数就可以了。</p>\n<p>最简框架代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"自定义函数\"\"\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"子命令和参数跳转\"\"\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process</span><span class=\"params\">(option)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> option.sp_name == <span class=\"string\">\"www\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> option.xxx:</span><br><span class=\"line\">            foo()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"入口\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    parser = argparse.ArgumentParser(version=<span class=\"string\">\"2.0\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 子命令</span></span><br><span class=\"line\">    sp = parser.add_subparsers(title=<span class=\"string\">\"commands\"</span>, description=<span class=\"string\">\"support commands\"</span>, help=<span class=\"string\">\"what they will do\"</span>, dest=<span class=\"string\">\"sp_name\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 添加子命令</span></span><br><span class=\"line\">    sp_www = sp.add_parser(<span class=\"string\">\"www\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 添加子命令参数</span></span><br><span class=\"line\">    sp_www.add_argument(<span class=\"string\">\"-x\"</span>, <span class=\"string\">\"--xxx\"</span>, action=<span class=\"string\">\"store_true\"</span>, dest=<span class=\"string\">\"xxx\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        args = parser.parse_args(sys.argv[<span class=\"number\">1</span>:])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> argparse.ArgumentError, e:</span><br><span class=\"line\">        print(<span class=\"string\">\"bad options: &#123;0&#125;\"</span>.format(e))</span><br><span class=\"line\">    <span class=\"keyword\">except</span> argparse.ArgumentTypeError, e:</span><br><span class=\"line\">        print(<span class=\"string\">\"bad option value: &#123;0&#125;\"</span>.format(e))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        process(args)</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义函数骨架\"><a href=\"#自定义函数骨架\" class=\"headerlink\" title=\"自定义函数骨架\"></a>自定义函数骨架</h2><p>框架还基于库 <code>urllib</code>、<code>urllib2</code>、<code>argparse</code> 和 <code>bs4</code>，制定了自定义函数的骨架。</p>\n<p>脚本做的事情，无非就是获取网页资源，接着在 html 结构中筛选有用信息，然后格式化成文本输出。因此，自定义函数也可以制定出骨架，不同的广播站就只需要指定筛选的规则就行了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取网页</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    soup = BeautifulSoup(urllib2.urlopen(<span class=\"string\">u\"http://url\"</span>, timeout=<span class=\"number\">60</span>)) <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception, e:</span><br><span class=\"line\">    handle_error(e, <span class=\"string\">\"Network Error.\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 筛选</span></span><br><span class=\"line\">content = soup.select(<span class=\"string\">\"html\"</span>) <span class=\"comment\"># 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 组织内容</span></span><br><span class=\"line\">table = [(<span class=\"string\">u\"ID\"</span>, <span class=\"string\">u\"Name\"</span>)] + [a <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> content] <span class=\"comment\"># 3</span></span><br><span class=\"line\"><span class=\"comment\"># 格式化文本</span></span><br><span class=\"line\">text = prettify_table(table)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">print(text.encode(<span class=\"string\">\"gb18030\"</span>))</span><br></pre></td></tr></table></figure>\n<p>虽说骨架是定下来了，但在特殊函数比如下载函数就需要另外编写。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然新版脚本框架是为了 radioit 计划而写的代码，但是其中 <code>argparse</code> 模块的使用的代码也是能被借鉴在其他需要带参数运行的 python 脚本中。</p>\n<p>新版对比旧版，增加了功能，但是也增加了使用的复杂度和代码的长度。旧版还是可以保留下来，供日常快速使用。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 <a href=\"http://blog.e10t.net/how-to-save-internet-radio/\">这篇文章</a> 的实践基础和 <a href=\"http://blog.e10t.net/append-a-python-script-for-last-post-about-saving-internet-radio/\">这篇文章</a> 的代码基础上，我重新将代码整理一下，并添加了一些功能，将原来三个脚本的共同点提炼，写成一个网络广播查看和获取的框架。继而在这个框架上，写出对应三个广播站的脚本的 ver 2.0。</p>\n<p>原来的脚本的功能就不再详述了，来说说一下新版脚本三大功能，分别是：探索广播、下载广播和查看广播。</p>\n<p>探索广播是指能够列出某一个广播站上所有的 / 当天的 / 星期 x 的 / 最新的广播，旨在能够帮助使用者发现自己喜欢的广播和新推出的广播。</p>\n<p>下载广播是指能提取出广播音频 / 图片的地址，供第三方播放器播放或保存。</p>\n<p>查看广播是指能够列出某广播的主要信息：包括更新日期、最新一期的内容、主持人等。</p>\n<p>基本可以说，有了新版的脚本，基本就不需要用浏览器浏览广播站的网页了。并且，因为脚本只是需要抓单个页面和将网页内容整理好再输出，所以对比起网页，能更快更高效地呈现有用的信息。</p>\n<h2 id=\"子命令\"><a href=\"#子命令\" class=\"headerlink\" title=\"子命令\"></a>子命令</h2><p>对比旧版，新版脚本的一大改进是引入了子命令。最直观的反映就是，调用方式的不同。</p>\n<p>旧版<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python www.py -x -y zzz</span><br></pre></td></tr></table></figure></p>\n<p>新版<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python www.py xxx -y zzz</span><br></pre></td></tr></table></figure></p>\n<p>就是类似 <code>git</code> 命令行的那样，<code>argparse</code> 库非常给力地支持这种方法。</p>\n<p>重点是使用 <code>add_subparsers</code> 函数和 <code>add_parser</code> 函数，详细使用看 <a href=\"https://docs.python.org/2/library/argparse.html\" target=\"_blank\" rel=\"noopener\">文档</a> 和<a href=\"https://github.com/exoticknight/radioitScript/blob/master/_radioit_script_template.py\" target=\"_blank\" rel=\"noopener\">github 上的代码</a>。</p>\n<p>多亏了能够这样嵌套命令，即使再多的功能也能变得清晰分明。</p>\n<h2 id=\"整体框架\"><a href=\"#整体框架\" class=\"headerlink\" title=\"整体框架\"></a>整体框架</h2><p>ver 2.0 的起点是一个脚本框架，承载参数的解释和自定义函数调用的重要功能。</p>\n<p>脚本的一次执行基本流程是：</p>\n<p>入口 → 解析参数 → 调用自定义函数 → 执行自定义函数</p>\n<p>前三个都能够定下来，不同的广播站只需要各自填充自定义函数就可以了。</p>\n<p>最简框架代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"自定义函数\"\"\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"子命令和参数跳转\"\"\"</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process</span><span class=\"params\">(option)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> option.sp_name == <span class=\"string\">\"www\"</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> option.xxx:</span><br><span class=\"line\">            foo()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"入口\"\"\"</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    parser = argparse.ArgumentParser(version=<span class=\"string\">\"2.0\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 子命令</span></span><br><span class=\"line\">    sp = parser.add_subparsers(title=<span class=\"string\">\"commands\"</span>, description=<span class=\"string\">\"support commands\"</span>, help=<span class=\"string\">\"what they will do\"</span>, dest=<span class=\"string\">\"sp_name\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 添加子命令</span></span><br><span class=\"line\">    sp_www = sp.add_parser(<span class=\"string\">\"www\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 添加子命令参数</span></span><br><span class=\"line\">    sp_www.add_argument(<span class=\"string\">\"-x\"</span>, <span class=\"string\">\"--xxx\"</span>, action=<span class=\"string\">\"store_true\"</span>, dest=<span class=\"string\">\"xxx\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        args = parser.parse_args(sys.argv[<span class=\"number\">1</span>:])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> argparse.ArgumentError, e:</span><br><span class=\"line\">        print(<span class=\"string\">\"bad options: &#123;0&#125;\"</span>.format(e))</span><br><span class=\"line\">    <span class=\"keyword\">except</span> argparse.ArgumentTypeError, e:</span><br><span class=\"line\">        print(<span class=\"string\">\"bad option value: &#123;0&#125;\"</span>.format(e))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        process(args)</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义函数骨架\"><a href=\"#自定义函数骨架\" class=\"headerlink\" title=\"自定义函数骨架\"></a>自定义函数骨架</h2><p>框架还基于库 <code>urllib</code>、<code>urllib2</code>、<code>argparse</code> 和 <code>bs4</code>，制定了自定义函数的骨架。</p>\n<p>脚本做的事情，无非就是获取网页资源，接着在 html 结构中筛选有用信息，然后格式化成文本输出。因此，自定义函数也可以制定出骨架，不同的广播站就只需要指定筛选的规则就行了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取网页</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    soup = BeautifulSoup(urllib2.urlopen(<span class=\"string\">u\"http://url\"</span>, timeout=<span class=\"number\">60</span>)) <span class=\"comment\"># 1</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception, e:</span><br><span class=\"line\">    handle_error(e, <span class=\"string\">\"Network Error.\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 筛选</span></span><br><span class=\"line\">content = soup.select(<span class=\"string\">\"html\"</span>) <span class=\"comment\"># 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 组织内容</span></span><br><span class=\"line\">table = [(<span class=\"string\">u\"ID\"</span>, <span class=\"string\">u\"Name\"</span>)] + [a <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> content] <span class=\"comment\"># 3</span></span><br><span class=\"line\"><span class=\"comment\"># 格式化文本</span></span><br><span class=\"line\">text = prettify_table(table)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输出</span></span><br><span class=\"line\">print(text.encode(<span class=\"string\">\"gb18030\"</span>))</span><br></pre></td></tr></table></figure>\n<p>虽说骨架是定下来了，但在特殊函数比如下载函数就需要另外编写。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>虽然新版脚本框架是为了 radioit 计划而写的代码，但是其中 <code>argparse</code> 模块的使用的代码也是能被借鉴在其他需要带参数运行的 python 脚本中。</p>\n<p>新版对比旧版，增加了功能，但是也增加了使用的复杂度和代码的长度。旧版还是可以保留下来，供日常快速使用。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Mon Mar 23 2015 20:27:02 GMT+0800 (China Standard Time)","title":"radioit 计划——动画广播辅助脚本 radioitScript","path":"radioit-plan-animate-radio-script-radioitscript/","eyeCatchImage":null,"excerpt":null,"date":"2015-03-23T12:25:53.000Z","pv":0,"totalPV":0,"categories":"技术 > 黑客 > 编程语言 > python","tags":["python","radioit"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1016},{"title":"segmentfault光棍节闯关攻略","id":"25","updated":"2014-04-15T07:39:31.000Z","date":"2014-01-22T19:32:59.000Z","_content":"\n### 第一关/第二关\n密码都在页面的源代码里面。\n\n### 第三关\n页面里面啥都没有，js和css文件也没有，还能藏东西的地方是cookie和localstorage什么的？最后发现http header里面有个the-key-is，好吧……\n\n### 第四关\n第三关的时候就发现get的k=值好像是加密的字符串，32位，猜测应该是md5，不过第三关的值去解密解不出来。这关解出来是4，那么将5加密后复制到地址栏就是啦。\n\n### 第五关\n二维码……这么显然，扫出来果然是个坑。又是什么都没有，唯一能用的资源就是那图片了，嘛以前玩过类似的游戏的都知道密码基本就在图片里面，下载回来用notepad差不多在文件末尾就看到了。\n\n### 第六关\nf4de502e58723e6252e8856d4dc8fc3b，扔去解密竟然要收钱，靠，直接Google之，找不到什么有用的，百度之，找到了……就是这一串：1573402aa6086d9ce42cfd5991027022，替换后下一关。\n\n### 第七关\n按照提示继续Google/百度，啥都没有，于是，直接将那串东西替换到地址栏，过关。\n\n### 第八关\n将get方法改成post方法提交……我的做法是直接用chrome改页面代码。\n\n### 第九关\n一大坨1和0，八个一组，有的有空缺，二进制嗯。大概看了一下，左边第一位都是0，可能是ascii码。应该能转出字符来，空缺的地方补1（这里比较坑，补0是不行的）。写段js搞出来看看。\n```javascript\nvar tag= document.getElementsByTagName('pre ')[0].innerText.replace(/_/g, '1 ').split(/\\n|\\s/g).forEach(function(ele){tag=tag+String.fromCharCode(parseInt(ele,2))})\n```\n\n最后tag是一串东西，注意到有+、/还有最后有一个=，哈哈哈，应该是base64了。\n\n上http://www.opinionatedgeek.com/dotnet/tools/base64decode/ 解出一个文件。\n\n接下来应该是判断文件类型了咯？估计也是gzip什么的压缩包，手头没工具，直接丢sublime text里面，搜索了一下文件开头的1f8b 0800，似乎真的是gzip的格式（以后要记住哈）。7zip打开后看见里面有图片，解压出来看知道下一关了。顺便说图片里面的似乎蒼井そら？\n","source":"_posts/segmentfault光棍节闯关攻略.md","raw":"---\ntitle: segmentfault光棍节闯关攻略\ncategories:\n  - [技术, 黑客]\n  - [编程语言, javascript]\ntags: [11.11, segmentfault, walkthrough, quiz]\npermalink: segmentfault-1111-quiz-walkthrough\nid: 25\nupdated: '2014-04-15 15:39:31'\ndate: 2014-01-23 03:32:59\n---\n\n### 第一关/第二关\n密码都在页面的源代码里面。\n\n### 第三关\n页面里面啥都没有，js和css文件也没有，还能藏东西的地方是cookie和localstorage什么的？最后发现http header里面有个the-key-is，好吧……\n\n### 第四关\n第三关的时候就发现get的k=值好像是加密的字符串，32位，猜测应该是md5，不过第三关的值去解密解不出来。这关解出来是4，那么将5加密后复制到地址栏就是啦。\n\n### 第五关\n二维码……这么显然，扫出来果然是个坑。又是什么都没有，唯一能用的资源就是那图片了，嘛以前玩过类似的游戏的都知道密码基本就在图片里面，下载回来用notepad差不多在文件末尾就看到了。\n\n### 第六关\nf4de502e58723e6252e8856d4dc8fc3b，扔去解密竟然要收钱，靠，直接Google之，找不到什么有用的，百度之，找到了……就是这一串：1573402aa6086d9ce42cfd5991027022，替换后下一关。\n\n### 第七关\n按照提示继续Google/百度，啥都没有，于是，直接将那串东西替换到地址栏，过关。\n\n### 第八关\n将get方法改成post方法提交……我的做法是直接用chrome改页面代码。\n\n### 第九关\n一大坨1和0，八个一组，有的有空缺，二进制嗯。大概看了一下，左边第一位都是0，可能是ascii码。应该能转出字符来，空缺的地方补1（这里比较坑，补0是不行的）。写段js搞出来看看。\n```javascript\nvar tag= document.getElementsByTagName('pre ')[0].innerText.replace(/_/g, '1 ').split(/\\n|\\s/g).forEach(function(ele){tag=tag+String.fromCharCode(parseInt(ele,2))})\n```\n\n最后tag是一串东西，注意到有+、/还有最后有一个=，哈哈哈，应该是base64了。\n\n上http://www.opinionatedgeek.com/dotnet/tools/base64decode/ 解出一个文件。\n\n接下来应该是判断文件类型了咯？估计也是gzip什么的压缩包，手头没工具，直接丢sublime text里面，搜索了一下文件开头的1f8b 0800，似乎真的是gzip的格式（以后要记住哈）。7zip打开后看见里面有图片，解压出来看知道下一关了。顺便说图片里面的似乎蒼井そら？\n","slug":"segmentfault-1111-quiz-walkthrough","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuog000an7t4o98366t0","content":"<h3 id=\"第一关-第二关\"><a href=\"#第一关-第二关\" class=\"headerlink\" title=\"第一关/第二关\"></a>第一关/第二关</h3><p>密码都在页面的源代码里面。</p>\n<h3 id=\"第三关\"><a href=\"#第三关\" class=\"headerlink\" title=\"第三关\"></a>第三关</h3><p>页面里面啥都没有，js和css文件也没有，还能藏东西的地方是cookie和localstorage什么的？最后发现http header里面有个the-key-is，好吧……</p>\n<h3 id=\"第四关\"><a href=\"#第四关\" class=\"headerlink\" title=\"第四关\"></a>第四关</h3><p>第三关的时候就发现get的k=值好像是加密的字符串，32位，猜测应该是md5，不过第三关的值去解密解不出来。这关解出来是4，那么将5加密后复制到地址栏就是啦。</p>\n<h3 id=\"第五关\"><a href=\"#第五关\" class=\"headerlink\" title=\"第五关\"></a>第五关</h3><p>二维码……这么显然，扫出来果然是个坑。又是什么都没有，唯一能用的资源就是那图片了，嘛以前玩过类似的游戏的都知道密码基本就在图片里面，下载回来用notepad差不多在文件末尾就看到了。</p>\n<h3 id=\"第六关\"><a href=\"#第六关\" class=\"headerlink\" title=\"第六关\"></a>第六关</h3><p>f4de502e58723e6252e8856d4dc8fc3b，扔去解密竟然要收钱，靠，直接Google之，找不到什么有用的，百度之，找到了……就是这一串：1573402aa6086d9ce42cfd5991027022，替换后下一关。</p>\n<h3 id=\"第七关\"><a href=\"#第七关\" class=\"headerlink\" title=\"第七关\"></a>第七关</h3><p>按照提示继续Google/百度，啥都没有，于是，直接将那串东西替换到地址栏，过关。</p>\n<h3 id=\"第八关\"><a href=\"#第八关\" class=\"headerlink\" title=\"第八关\"></a>第八关</h3><p>将get方法改成post方法提交……我的做法是直接用chrome改页面代码。</p>\n<h3 id=\"第九关\"><a href=\"#第九关\" class=\"headerlink\" title=\"第九关\"></a>第九关</h3><p>一大坨1和0，八个一组，有的有空缺，二进制嗯。大概看了一下，左边第一位都是0，可能是ascii码。应该能转出字符来，空缺的地方补1（这里比较坑，补0是不行的）。写段js搞出来看看。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tag= <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'pre '</span>)[<span class=\"number\">0</span>].innerText.replace(<span class=\"regexp\">/_/g</span>, <span class=\"string\">'1 '</span>).split(<span class=\"regexp\">/\\n|\\s/g</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele</span>)</span>&#123;tag=tag+<span class=\"built_in\">String</span>.fromCharCode(<span class=\"built_in\">parseInt</span>(ele,<span class=\"number\">2</span>))&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>最后tag是一串东西，注意到有+、/还有最后有一个=，哈哈哈，应该是base64了。</p>\n<p>上<a href=\"http://www.opinionatedgeek.com/dotnet/tools/base64decode/\" target=\"_blank\" rel=\"noopener\">http://www.opinionatedgeek.com/dotnet/tools/base64decode/</a> 解出一个文件。</p>\n<p>接下来应该是判断文件类型了咯？估计也是gzip什么的压缩包，手头没工具，直接丢sublime text里面，搜索了一下文件开头的1f8b 0800，似乎真的是gzip的格式（以后要记住哈）。7zip打开后看见里面有图片，解压出来看知道下一关了。顺便说图片里面的似乎蒼井そら？</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"第一关-第二关\"><a href=\"#第一关-第二关\" class=\"headerlink\" title=\"第一关/第二关\"></a>第一关/第二关</h3><p>密码都在页面的源代码里面。</p>\n<h3 id=\"第三关\"><a href=\"#第三关\" class=\"headerlink\" title=\"第三关\"></a>第三关</h3><p>页面里面啥都没有，js和css文件也没有，还能藏东西的地方是cookie和localstorage什么的？最后发现http header里面有个the-key-is，好吧……</p>\n<h3 id=\"第四关\"><a href=\"#第四关\" class=\"headerlink\" title=\"第四关\"></a>第四关</h3><p>第三关的时候就发现get的k=值好像是加密的字符串，32位，猜测应该是md5，不过第三关的值去解密解不出来。这关解出来是4，那么将5加密后复制到地址栏就是啦。</p>\n<h3 id=\"第五关\"><a href=\"#第五关\" class=\"headerlink\" title=\"第五关\"></a>第五关</h3><p>二维码……这么显然，扫出来果然是个坑。又是什么都没有，唯一能用的资源就是那图片了，嘛以前玩过类似的游戏的都知道密码基本就在图片里面，下载回来用notepad差不多在文件末尾就看到了。</p>\n<h3 id=\"第六关\"><a href=\"#第六关\" class=\"headerlink\" title=\"第六关\"></a>第六关</h3><p>f4de502e58723e6252e8856d4dc8fc3b，扔去解密竟然要收钱，靠，直接Google之，找不到什么有用的，百度之，找到了……就是这一串：1573402aa6086d9ce42cfd5991027022，替换后下一关。</p>\n<h3 id=\"第七关\"><a href=\"#第七关\" class=\"headerlink\" title=\"第七关\"></a>第七关</h3><p>按照提示继续Google/百度，啥都没有，于是，直接将那串东西替换到地址栏，过关。</p>\n<h3 id=\"第八关\"><a href=\"#第八关\" class=\"headerlink\" title=\"第八关\"></a>第八关</h3><p>将get方法改成post方法提交……我的做法是直接用chrome改页面代码。</p>\n<h3 id=\"第九关\"><a href=\"#第九关\" class=\"headerlink\" title=\"第九关\"></a>第九关</h3><p>一大坨1和0，八个一组，有的有空缺，二进制嗯。大概看了一下，左边第一位都是0，可能是ascii码。应该能转出字符来，空缺的地方补1（这里比较坑，补0是不行的）。写段js搞出来看看。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tag= <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'pre '</span>)[<span class=\"number\">0</span>].innerText.replace(<span class=\"regexp\">/_/g</span>, <span class=\"string\">'1 '</span>).split(<span class=\"regexp\">/\\n|\\s/g</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ele</span>)</span>&#123;tag=tag+<span class=\"built_in\">String</span>.fromCharCode(<span class=\"built_in\">parseInt</span>(ele,<span class=\"number\">2</span>))&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>最后tag是一串东西，注意到有+、/还有最后有一个=，哈哈哈，应该是base64了。</p>\n<p>上<a href=\"http://www.opinionatedgeek.com/dotnet/tools/base64decode/\" target=\"_blank\" rel=\"noopener\">http://www.opinionatedgeek.com/dotnet/tools/base64decode/</a> 解出一个文件。</p>\n<p>接下来应该是判断文件类型了咯？估计也是gzip什么的压缩包，手头没工具，直接丢sublime text里面，搜索了一下文件开头的1f8b 0800，似乎真的是gzip的格式（以后要记住哈）。7zip打开后看见里面有图片，解压出来看知道下一关了。顺便说图片里面的似乎蒼井そら？</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Apr 15 2014 15:39:31 GMT+0800 (China Standard Time)","title":"segmentfault光棍节闯关攻略","path":"segmentfault-1111-quiz-walkthrough/","eyeCatchImage":null,"excerpt":null,"date":"2014-01-22T19:32:59.000Z","pv":0,"totalPV":0,"categories":"技术 > 黑客 > 编程语言 > javascript","tags":["11.11","segmentfault","walkthrough","quiz"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":842},{"title":"simpleTemplate.js 中列表渲染的改进","id":"29","updated":"2014-11-11T11:57:27.000Z","date":"2014-11-11T11:55:13.000Z","_content":"\n## 无关痛痒的碎碎念\n\n在写上一篇博文的时候，我一边写文字一边看代码，同时将编写代码的思维写进博文。这个过程显然让我从跟编程时不同的角度来审视代码，由此也能发现代码中新的bug。由此可见，写博文对于重新理清思路，理解代码有非常大的帮助，是另一种意义上的“代码审查”。\n\n另外在解释一些代码的时候，本以为自己是明白为何这样写的，但是一旦将这个“为何”形成文字，再看一遍，顿时就觉得其实并不是真的“懂”了，而是只是脑子里觉得“啊差不多是那个样子”，手就自然出代码了。然而一旦要解释给别人，要不就错漏百出要不就哑口无言。\n\n也不知道现在搞技术的人有多少能写出详细的文章出来了，似乎很多理工科人都非常讨厌一直以来的语文教育，进而讨厌写文章，于是更不可能写出长篇幅、细致的文章来。\n\n## 开始正文吧\n\n在[上一篇文章]()中，simpleTemplate.js已经得到了极大的改造，能够识别和渲染标志位和列表。在文章的最后提到了实际上列表的渲染还没有完成，充其量只是实现了一个循环而已，于是本文就来继续完善。\n\n## 要解决什么问题\n\n如何在列表渲染中得到跟本次渲染相关的临时数据。\n\n在渲染，也就是执行`_render`函数的时候，可供渲染的数据源是指向固定但是内容未知的。数据源的指向取决于第一次执行`_render`时传入的参数（形参是`scope`），在函数内部递归调用的时候也是将这个数据传递给下一次调用执行。\n\n然而，当在渲染列表的时候，渲染函数是已经确切得到了数据源的某一个数组型数据的（不然就无法根据这个数组进行递归），因此是绝对有能力提供这个数组的临时数据的。\n\n> 什么是临时数据？这个名词是我自己编的。其实就是指遍历数组的过程中所产生的下标和下标所对应的数据。并不是什么很复杂的东西。\n\n很简单，举个例子。比如有这么一个数据：\n\n```javascript\n{\n    name: ['Ada', 'Brown', 'Cindy']\n}\n```\n\n配合这么一个模板：\n\n```markup\n<ul>\n{@name}\n    <li>\n\n    </li>\n{-name}\n</ul>\n```\n\n如果要求是输出数组`name`中的所有名字，那么`<li>`和`</li>`之间应该写什么？\n\n好吧实际上什么也写不了。\n\n注意到在列表渲染的过程中，调用函数进行递归的时候，传入的数据跟当前正在执行的函数被调用时传入的数据是一样的，临时产生的数据根本就不能传过去。这难道就是世界上最遥远的距离？\n\n怎么给原始的数据添加进临时数据呢？\n\n首先想到也是立刻抛弃的想法就是直接在原始数据源中添加，因为之前也说过了，原始数据源是未知的。无论新添加的数据取什么样的键值（原始数据源是一个对象），都有可能会覆盖原来已经存在的数据。\n\n将原始数据源和临时数据包装起来成一个新的数据，如何？\n\n且不论这样会大大增加渲染函数的复杂性，若是出现列表多层嵌套，这数据都成卷心菜了……\n\n## 作用域\n\n其实这个功能的实现的确有点像作用域。\n\n在循环的外部，是一个作用域，称为A；在循环的内部，是另一个作用域，称为B。B可以访问A内定义的变量（数据），而A不应该访问B内定义的变量（数据）。\n\n于是这里就是javascript中的原型链大显身手的时候了。（其实我也是借用了AngularJS中`$scope`的实现思路。）\n\n将A作用域中的变量（数据）作为B作用域中的变量（数据）的**原型**（prototype），那么B中建立的数据就不会实质改写A中的数据（注意，只是大部分情况下。有某些特殊情况还是可以改写的），而在B中也能够读取到A中的数据。\n\n> 强烈建议不明白原型链的人好好去了解一下。这个跟OOP中的继承是不同的概念，很多人可能会混淆了。\n\n如何构造这个关系？让我们来站在巨人的肩膀上，使用大师Douglas Crockford的代码。\n\n```javascript\n// Thank you, Douglas Crockford.\nif ( typeof Object.create !== 'function' ) {\n    Object.create = function ( o ) {\n        function F() {}\n        F.prototype = o;\n        return new F();\n    };\n}\n```\n\n经典的一段代码，出现在大师[这篇文章](http://javascript.crockford.com/prototypal.html)。\n\n简单来说，用法是这样的`A = Object.create( B )`，这样B就成为了A的原型。\n\n在代码中的顶层空间中添加上大师的代码后，在渲染函数内找到渲染列表的代码中加入两行：\n\n```javascript\ncase '@': // begin of list\nif ( Object.prototype.toString.call( data ) === '[object Array]' ) {\n    for ( var loopIndex = 0; loopIndex < data.length; loopIndex++ ) {\n        // expend scope\n        newScope = Object.create( scope );\n        newScope['*'] = data[loopIndex];\n\n        // recursively render\n        tempFragment.push( _render.call( this, newScope, i + 1, functions['loop'][i]) );\n    }\n}\n\n// reset index\ni = functions['loop'][i];\nbreak;\n```\n\n在新建的数据源`newScope`中，使用一个原则上不太可能会用来作为键值的`*`符号作为临时数据的键值。\n\n于是之前的模板写成这样就达到要求。\n\n```markup\n<ul>\n{@name}\n    <li>\n    {*}\n    </li>\n{-name}\n</ul>\n```\n\n别忘了修改用于识别的正则表达式！\n\n```markup\n/\\{\\s*([@|\\-|!]?)(([\\w\\d]+|\\*)(\\.[\\w\\d]+)*)\\s*\\}/gm\n```\n\n> 或许这里可能有人会吐槽说，如果原始的数据源中有一个键值是`*`的数据怎么办？这样不就被循环中的新数据源覆盖了吗？关于这点我想说的是如果产生原始数据源的程序员使用了这么奇怪无意义的键值，就真是脑残了。这个问题基本可以不讨论。","source":"_posts/simpleTemplate-js中列表渲染的改进.md","raw":"---\ntitle: simpleTemplate.js 中列表渲染的改进\ncategories:\n  - [技术, 前端]\n  - [编程语言, javascript]\ntags: [javascript, string-template]\npermalink: improve-list-feature-simpletemplatejs\nid: 29\nupdated: '2014-11-11 19:57:27'\ndate: 2014-11-11 19:55:13\n---\n\n## 无关痛痒的碎碎念\n\n在写上一篇博文的时候，我一边写文字一边看代码，同时将编写代码的思维写进博文。这个过程显然让我从跟编程时不同的角度来审视代码，由此也能发现代码中新的bug。由此可见，写博文对于重新理清思路，理解代码有非常大的帮助，是另一种意义上的“代码审查”。\n\n另外在解释一些代码的时候，本以为自己是明白为何这样写的，但是一旦将这个“为何”形成文字，再看一遍，顿时就觉得其实并不是真的“懂”了，而是只是脑子里觉得“啊差不多是那个样子”，手就自然出代码了。然而一旦要解释给别人，要不就错漏百出要不就哑口无言。\n\n也不知道现在搞技术的人有多少能写出详细的文章出来了，似乎很多理工科人都非常讨厌一直以来的语文教育，进而讨厌写文章，于是更不可能写出长篇幅、细致的文章来。\n\n## 开始正文吧\n\n在[上一篇文章]()中，simpleTemplate.js已经得到了极大的改造，能够识别和渲染标志位和列表。在文章的最后提到了实际上列表的渲染还没有完成，充其量只是实现了一个循环而已，于是本文就来继续完善。\n\n## 要解决什么问题\n\n如何在列表渲染中得到跟本次渲染相关的临时数据。\n\n在渲染，也就是执行`_render`函数的时候，可供渲染的数据源是指向固定但是内容未知的。数据源的指向取决于第一次执行`_render`时传入的参数（形参是`scope`），在函数内部递归调用的时候也是将这个数据传递给下一次调用执行。\n\n然而，当在渲染列表的时候，渲染函数是已经确切得到了数据源的某一个数组型数据的（不然就无法根据这个数组进行递归），因此是绝对有能力提供这个数组的临时数据的。\n\n> 什么是临时数据？这个名词是我自己编的。其实就是指遍历数组的过程中所产生的下标和下标所对应的数据。并不是什么很复杂的东西。\n\n很简单，举个例子。比如有这么一个数据：\n\n```javascript\n{\n    name: ['Ada', 'Brown', 'Cindy']\n}\n```\n\n配合这么一个模板：\n\n```markup\n<ul>\n{@name}\n    <li>\n\n    </li>\n{-name}\n</ul>\n```\n\n如果要求是输出数组`name`中的所有名字，那么`<li>`和`</li>`之间应该写什么？\n\n好吧实际上什么也写不了。\n\n注意到在列表渲染的过程中，调用函数进行递归的时候，传入的数据跟当前正在执行的函数被调用时传入的数据是一样的，临时产生的数据根本就不能传过去。这难道就是世界上最遥远的距离？\n\n怎么给原始的数据添加进临时数据呢？\n\n首先想到也是立刻抛弃的想法就是直接在原始数据源中添加，因为之前也说过了，原始数据源是未知的。无论新添加的数据取什么样的键值（原始数据源是一个对象），都有可能会覆盖原来已经存在的数据。\n\n将原始数据源和临时数据包装起来成一个新的数据，如何？\n\n且不论这样会大大增加渲染函数的复杂性，若是出现列表多层嵌套，这数据都成卷心菜了……\n\n## 作用域\n\n其实这个功能的实现的确有点像作用域。\n\n在循环的外部，是一个作用域，称为A；在循环的内部，是另一个作用域，称为B。B可以访问A内定义的变量（数据），而A不应该访问B内定义的变量（数据）。\n\n于是这里就是javascript中的原型链大显身手的时候了。（其实我也是借用了AngularJS中`$scope`的实现思路。）\n\n将A作用域中的变量（数据）作为B作用域中的变量（数据）的**原型**（prototype），那么B中建立的数据就不会实质改写A中的数据（注意，只是大部分情况下。有某些特殊情况还是可以改写的），而在B中也能够读取到A中的数据。\n\n> 强烈建议不明白原型链的人好好去了解一下。这个跟OOP中的继承是不同的概念，很多人可能会混淆了。\n\n如何构造这个关系？让我们来站在巨人的肩膀上，使用大师Douglas Crockford的代码。\n\n```javascript\n// Thank you, Douglas Crockford.\nif ( typeof Object.create !== 'function' ) {\n    Object.create = function ( o ) {\n        function F() {}\n        F.prototype = o;\n        return new F();\n    };\n}\n```\n\n经典的一段代码，出现在大师[这篇文章](http://javascript.crockford.com/prototypal.html)。\n\n简单来说，用法是这样的`A = Object.create( B )`，这样B就成为了A的原型。\n\n在代码中的顶层空间中添加上大师的代码后，在渲染函数内找到渲染列表的代码中加入两行：\n\n```javascript\ncase '@': // begin of list\nif ( Object.prototype.toString.call( data ) === '[object Array]' ) {\n    for ( var loopIndex = 0; loopIndex < data.length; loopIndex++ ) {\n        // expend scope\n        newScope = Object.create( scope );\n        newScope['*'] = data[loopIndex];\n\n        // recursively render\n        tempFragment.push( _render.call( this, newScope, i + 1, functions['loop'][i]) );\n    }\n}\n\n// reset index\ni = functions['loop'][i];\nbreak;\n```\n\n在新建的数据源`newScope`中，使用一个原则上不太可能会用来作为键值的`*`符号作为临时数据的键值。\n\n于是之前的模板写成这样就达到要求。\n\n```markup\n<ul>\n{@name}\n    <li>\n    {*}\n    </li>\n{-name}\n</ul>\n```\n\n别忘了修改用于识别的正则表达式！\n\n```markup\n/\\{\\s*([@|\\-|!]?)(([\\w\\d]+|\\*)(\\.[\\w\\d]+)*)\\s*\\}/gm\n```\n\n> 或许这里可能有人会吐槽说，如果原始的数据源中有一个键值是`*`的数据怎么办？这样不就被循环中的新数据源覆盖了吗？关于这点我想说的是如果产生原始数据源的程序员使用了这么奇怪无意义的键值，就真是脑残了。这个问题基本可以不讨论。","slug":"improve-list-feature-simpletemplatejs","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuoj000dn7t40pzk5xqm","content":"<h2 id=\"无关痛痒的碎碎念\"><a href=\"#无关痛痒的碎碎念\" class=\"headerlink\" title=\"无关痛痒的碎碎念\"></a>无关痛痒的碎碎念</h2><p>在写上一篇博文的时候，我一边写文字一边看代码，同时将编写代码的思维写进博文。这个过程显然让我从跟编程时不同的角度来审视代码，由此也能发现代码中新的bug。由此可见，写博文对于重新理清思路，理解代码有非常大的帮助，是另一种意义上的“代码审查”。</p>\n<p>另外在解释一些代码的时候，本以为自己是明白为何这样写的，但是一旦将这个“为何”形成文字，再看一遍，顿时就觉得其实并不是真的“懂”了，而是只是脑子里觉得“啊差不多是那个样子”，手就自然出代码了。然而一旦要解释给别人，要不就错漏百出要不就哑口无言。</p>\n<p>也不知道现在搞技术的人有多少能写出详细的文章出来了，似乎很多理工科人都非常讨厌一直以来的语文教育，进而讨厌写文章，于是更不可能写出长篇幅、细致的文章来。</p>\n<h2 id=\"开始正文吧\"><a href=\"#开始正文吧\" class=\"headerlink\" title=\"开始正文吧\"></a>开始正文吧</h2><p>在<a href>上一篇文章</a>中，simpleTemplate.js已经得到了极大的改造，能够识别和渲染标志位和列表。在文章的最后提到了实际上列表的渲染还没有完成，充其量只是实现了一个循环而已，于是本文就来继续完善。</p>\n<h2 id=\"要解决什么问题\"><a href=\"#要解决什么问题\" class=\"headerlink\" title=\"要解决什么问题\"></a>要解决什么问题</h2><p>如何在列表渲染中得到跟本次渲染相关的临时数据。</p>\n<p>在渲染，也就是执行<code>_render</code>函数的时候，可供渲染的数据源是指向固定但是内容未知的。数据源的指向取决于第一次执行<code>_render</code>时传入的参数（形参是<code>scope</code>），在函数内部递归调用的时候也是将这个数据传递给下一次调用执行。</p>\n<p>然而，当在渲染列表的时候，渲染函数是已经确切得到了数据源的某一个数组型数据的（不然就无法根据这个数组进行递归），因此是绝对有能力提供这个数组的临时数据的。</p>\n<blockquote>\n<p>什么是临时数据？这个名词是我自己编的。其实就是指遍历数组的过程中所产生的下标和下标所对应的数据。并不是什么很复杂的东西。</p>\n</blockquote>\n<p>很简单，举个例子。比如有这么一个数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    name: [<span class=\"string\">'Ada'</span>, <span class=\"string\">'Brown'</span>, <span class=\"string\">'Cindy'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配合这么一个模板：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">&#123;@name&#125;</span><br><span class=\"line\">    &lt;li&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">&#123;-name&#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<p>如果要求是输出数组<code>name</code>中的所有名字，那么<code>&lt;li&gt;</code>和<code>&lt;/li&gt;</code>之间应该写什么？</p>\n<p>好吧实际上什么也写不了。</p>\n<p>注意到在列表渲染的过程中，调用函数进行递归的时候，传入的数据跟当前正在执行的函数被调用时传入的数据是一样的，临时产生的数据根本就不能传过去。这难道就是世界上最遥远的距离？</p>\n<p>怎么给原始的数据添加进临时数据呢？</p>\n<p>首先想到也是立刻抛弃的想法就是直接在原始数据源中添加，因为之前也说过了，原始数据源是未知的。无论新添加的数据取什么样的键值（原始数据源是一个对象），都有可能会覆盖原来已经存在的数据。</p>\n<p>将原始数据源和临时数据包装起来成一个新的数据，如何？</p>\n<p>且不论这样会大大增加渲染函数的复杂性，若是出现列表多层嵌套，这数据都成卷心菜了……</p>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>其实这个功能的实现的确有点像作用域。</p>\n<p>在循环的外部，是一个作用域，称为A；在循环的内部，是另一个作用域，称为B。B可以访问A内定义的变量（数据），而A不应该访问B内定义的变量（数据）。</p>\n<p>于是这里就是javascript中的原型链大显身手的时候了。（其实我也是借用了AngularJS中<code>$scope</code>的实现思路。）</p>\n<p>将A作用域中的变量（数据）作为B作用域中的变量（数据）的<strong>原型</strong>（prototype），那么B中建立的数据就不会实质改写A中的数据（注意，只是大部分情况下。有某些特殊情况还是可以改写的），而在B中也能够读取到A中的数据。</p>\n<blockquote>\n<p>强烈建议不明白原型链的人好好去了解一下。这个跟OOP中的继承是不同的概念，很多人可能会混淆了。</p>\n</blockquote>\n<p>如何构造这个关系？让我们来站在巨人的肩膀上，使用大师Douglas Crockford的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Thank you, Douglas Crockford.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.create !== <span class=\"string\">'function'</span> ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> o </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">        F.prototype = o;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经典的一段代码，出现在大师<a href=\"http://javascript.crockford.com/prototypal.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。</p>\n<p>简单来说，用法是这样的<code>A = Object.create( B )</code>，这样B就成为了A的原型。</p>\n<p>在代码中的顶层空间中添加上大师的代码后，在渲染函数内找到渲染列表的代码中加入两行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'@'</span>: <span class=\"comment\">// begin of list</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"built_in\">Object</span>.prototype.toString.call( data ) === <span class=\"string\">'[object Array]'</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> loopIndex = <span class=\"number\">0</span>; loopIndex &lt; data.length; loopIndex++ ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// expend scope</span></span><br><span class=\"line\">        newScope = <span class=\"built_in\">Object</span>.create( scope );</span><br><span class=\"line\">        newScope[<span class=\"string\">'*'</span>] = data[loopIndex];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// recursively render</span></span><br><span class=\"line\">        tempFragment.push( _render.call( <span class=\"keyword\">this</span>, newScope, i + <span class=\"number\">1</span>, functions[<span class=\"string\">'loop'</span>][i]) );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reset index</span></span><br><span class=\"line\">i = functions[<span class=\"string\">'loop'</span>][i];</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>在新建的数据源<code>newScope</code>中，使用一个原则上不太可能会用来作为键值的<code>*</code>符号作为临时数据的键值。</p>\n<p>于是之前的模板写成这样就达到要求。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">&#123;@name&#125;</span><br><span class=\"line\">    &lt;li&gt;</span><br><span class=\"line\">    &#123;*&#125;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">&#123;-name&#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<p>别忘了修改用于识别的正则表达式！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\&#123;\\s*([@|\\-|!]?)(([\\w\\d]+|\\*)(\\.[\\w\\d]+)*)\\s*\\&#125;/gm</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>或许这里可能有人会吐槽说，如果原始的数据源中有一个键值是<code>*</code>的数据怎么办？这样不就被循环中的新数据源覆盖了吗？关于这点我想说的是如果产生原始数据源的程序员使用了这么奇怪无意义的键值，就真是脑残了。这个问题基本可以不讨论。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"无关痛痒的碎碎念\"><a href=\"#无关痛痒的碎碎念\" class=\"headerlink\" title=\"无关痛痒的碎碎念\"></a>无关痛痒的碎碎念</h2><p>在写上一篇博文的时候，我一边写文字一边看代码，同时将编写代码的思维写进博文。这个过程显然让我从跟编程时不同的角度来审视代码，由此也能发现代码中新的bug。由此可见，写博文对于重新理清思路，理解代码有非常大的帮助，是另一种意义上的“代码审查”。</p>\n<p>另外在解释一些代码的时候，本以为自己是明白为何这样写的，但是一旦将这个“为何”形成文字，再看一遍，顿时就觉得其实并不是真的“懂”了，而是只是脑子里觉得“啊差不多是那个样子”，手就自然出代码了。然而一旦要解释给别人，要不就错漏百出要不就哑口无言。</p>\n<p>也不知道现在搞技术的人有多少能写出详细的文章出来了，似乎很多理工科人都非常讨厌一直以来的语文教育，进而讨厌写文章，于是更不可能写出长篇幅、细致的文章来。</p>\n<h2 id=\"开始正文吧\"><a href=\"#开始正文吧\" class=\"headerlink\" title=\"开始正文吧\"></a>开始正文吧</h2><p>在<a href>上一篇文章</a>中，simpleTemplate.js已经得到了极大的改造，能够识别和渲染标志位和列表。在文章的最后提到了实际上列表的渲染还没有完成，充其量只是实现了一个循环而已，于是本文就来继续完善。</p>\n<h2 id=\"要解决什么问题\"><a href=\"#要解决什么问题\" class=\"headerlink\" title=\"要解决什么问题\"></a>要解决什么问题</h2><p>如何在列表渲染中得到跟本次渲染相关的临时数据。</p>\n<p>在渲染，也就是执行<code>_render</code>函数的时候，可供渲染的数据源是指向固定但是内容未知的。数据源的指向取决于第一次执行<code>_render</code>时传入的参数（形参是<code>scope</code>），在函数内部递归调用的时候也是将这个数据传递给下一次调用执行。</p>\n<p>然而，当在渲染列表的时候，渲染函数是已经确切得到了数据源的某一个数组型数据的（不然就无法根据这个数组进行递归），因此是绝对有能力提供这个数组的临时数据的。</p>\n<blockquote>\n<p>什么是临时数据？这个名词是我自己编的。其实就是指遍历数组的过程中所产生的下标和下标所对应的数据。并不是什么很复杂的东西。</p>\n</blockquote>\n<p>很简单，举个例子。比如有这么一个数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    name: [<span class=\"string\">'Ada'</span>, <span class=\"string\">'Brown'</span>, <span class=\"string\">'Cindy'</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配合这么一个模板：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">&#123;@name&#125;</span><br><span class=\"line\">    &lt;li&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">&#123;-name&#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<p>如果要求是输出数组<code>name</code>中的所有名字，那么<code>&lt;li&gt;</code>和<code>&lt;/li&gt;</code>之间应该写什么？</p>\n<p>好吧实际上什么也写不了。</p>\n<p>注意到在列表渲染的过程中，调用函数进行递归的时候，传入的数据跟当前正在执行的函数被调用时传入的数据是一样的，临时产生的数据根本就不能传过去。这难道就是世界上最遥远的距离？</p>\n<p>怎么给原始的数据添加进临时数据呢？</p>\n<p>首先想到也是立刻抛弃的想法就是直接在原始数据源中添加，因为之前也说过了，原始数据源是未知的。无论新添加的数据取什么样的键值（原始数据源是一个对象），都有可能会覆盖原来已经存在的数据。</p>\n<p>将原始数据源和临时数据包装起来成一个新的数据，如何？</p>\n<p>且不论这样会大大增加渲染函数的复杂性，若是出现列表多层嵌套，这数据都成卷心菜了……</p>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>其实这个功能的实现的确有点像作用域。</p>\n<p>在循环的外部，是一个作用域，称为A；在循环的内部，是另一个作用域，称为B。B可以访问A内定义的变量（数据），而A不应该访问B内定义的变量（数据）。</p>\n<p>于是这里就是javascript中的原型链大显身手的时候了。（其实我也是借用了AngularJS中<code>$scope</code>的实现思路。）</p>\n<p>将A作用域中的变量（数据）作为B作用域中的变量（数据）的<strong>原型</strong>（prototype），那么B中建立的数据就不会实质改写A中的数据（注意，只是大部分情况下。有某些特殊情况还是可以改写的），而在B中也能够读取到A中的数据。</p>\n<blockquote>\n<p>强烈建议不明白原型链的人好好去了解一下。这个跟OOP中的继承是不同的概念，很多人可能会混淆了。</p>\n</blockquote>\n<p>如何构造这个关系？让我们来站在巨人的肩膀上，使用大师Douglas Crockford的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Thank you, Douglas Crockford.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.create !== <span class=\"string\">'function'</span> ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> o </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">        F.prototype = o;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经典的一段代码，出现在大师<a href=\"http://javascript.crockford.com/prototypal.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>。</p>\n<p>简单来说，用法是这样的<code>A = Object.create( B )</code>，这样B就成为了A的原型。</p>\n<p>在代码中的顶层空间中添加上大师的代码后，在渲染函数内找到渲染列表的代码中加入两行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'@'</span>: <span class=\"comment\">// begin of list</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"built_in\">Object</span>.prototype.toString.call( data ) === <span class=\"string\">'[object Array]'</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> loopIndex = <span class=\"number\">0</span>; loopIndex &lt; data.length; loopIndex++ ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// expend scope</span></span><br><span class=\"line\">        newScope = <span class=\"built_in\">Object</span>.create( scope );</span><br><span class=\"line\">        newScope[<span class=\"string\">'*'</span>] = data[loopIndex];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// recursively render</span></span><br><span class=\"line\">        tempFragment.push( _render.call( <span class=\"keyword\">this</span>, newScope, i + <span class=\"number\">1</span>, functions[<span class=\"string\">'loop'</span>][i]) );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reset index</span></span><br><span class=\"line\">i = functions[<span class=\"string\">'loop'</span>][i];</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>在新建的数据源<code>newScope</code>中，使用一个原则上不太可能会用来作为键值的<code>*</code>符号作为临时数据的键值。</p>\n<p>于是之前的模板写成这样就达到要求。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">&#123;@name&#125;</span><br><span class=\"line\">    &lt;li&gt;</span><br><span class=\"line\">    &#123;*&#125;</span><br><span class=\"line\">    &lt;/li&gt;</span><br><span class=\"line\">&#123;-name&#125;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<p>别忘了修改用于识别的正则表达式！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\&#123;\\s*([@|\\-|!]?)(([\\w\\d]+|\\*)(\\.[\\w\\d]+)*)\\s*\\&#125;/gm</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>或许这里可能有人会吐槽说，如果原始的数据源中有一个键值是<code>*</code>的数据怎么办？这样不就被循环中的新数据源覆盖了吗？关于这点我想说的是如果产生原始数据源的程序员使用了这么奇怪无意义的键值，就真是脑残了。这个问题基本可以不讨论。</p>\n</blockquote>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Nov 11 2014 19:57:27 GMT+0800 (China Standard Time)","title":"simpleTemplate.js 中列表渲染的改进","path":"improve-list-feature-simpletemplatejs/","eyeCatchImage":null,"excerpt":null,"date":"2014-11-11T11:55:13.000Z","pv":0,"totalPV":0,"categories":"技术 > 前端 > 编程语言 > javascript","tags":["javascript","string-template"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1757},{"title":"simpleTemplate.js 的三版本分化和新功能编写","id":"33","updated":"2015-01-03T14:29:19.000Z","date":"2015-01-03T14:29:19.000Z","_content":"\n考研之后终于有时间将拖了很久的simpleTemplate.js给写完了。\n\n## 三版本和新功能\n\n写这篇文章的时间离同主题的[上一篇文章](http://blog.e10t.net/optimize-simpletemplatejs-by-myself/)已经太远了。距离上次大概实现了基本功能之后，又发生了很多事情，也对这个js库思考了不少，最后决定将这个库拆成三个版本，分别是bare版、regular版和advanced版。三个版本的功能是逐渐增加的，而各版本又在各自功能的要求上尽量做到完善和小型化。\n\n例如bare版只有数据输出的功能，被我用来在之前[某个chrome插件](http://blog.e10t.net/chrome-extension-test-page-and-report/)中使用。\n\n回看以前自己写下的文字和代码，总有种陌生的熟悉感。然而新旧代码看似已经不同，实际要表达的思想却是一脉相承的，新的代码并不是重写，而是继承、改进和发展旧的代码。没有以前写下的代码就没有现在写出的代码，没有以前思考的基础就没有现在思考的凭依。因此这添加的新功能其实在旧功能写成之时，便拥有了出现的需求和生长的土壤。\n\n然，新功能要出来，代码是会膨胀的，在某些用不上新功能的情况下，代码就成了冗余。故，分化出三个版本分别应付不同的情况。新功能就是出现三版本的原因。\n\n## 新功能一：过滤器\n\n此功能的想法是结合了对输出数据的二次处理和判断的拓展。\n\n在regular版中，数据输出只有纯输出功能，明显是不够的；判断只能判断数据域是否存在数据，或者数据是否为真，明显也是不够的。（代码中体现为简单的`if (!data)`）。\n\n那么数据域允许形如javascript语句的语法如何？判断使用形如`a > b`、`a == b`的语法如何？\n\n当然是可以的，但是这样实在没必要，那还不如直接eval罢？\n\n我思来想去，发现其本质其实都是对数据进行一连串的操作，每一个操作通过将上一个操作的输出作为输入而串起来，即使判断，例如大于判断，也可以理解成将上一个操作的结果作为左值传入进一个\"大于\"函数，输出了布尔值而已。\n\n于是这样一来所有存在数据域的地方都可以统一配套上过滤器们就解决问题了。\n\nok，梳理一下。原来整个流程是这样的：\n\n解析模板 -> 生成模板对象 -> 填充数据 -> 渲染\n\n现在需要增加一个执行过程：\n\n解析模板 -> 生成模板对象 -> 填充数据 -> 执行语句 -> 渲染\n\n另外解析模板也要改进以适合对新语法的解析。\n\n过滤器语法形如：`{=data | filter1 | filter2 1 | filter3 string \"string | \" }`\n\n### 解析\n\n语法变得太复杂，不考虑使用正则匹配了，尤其是需要分别识别引号内外的`|`和空格，太鬼畜了。\n\n于是很感谢在大学的时候选修了编译原理，不然真不知道如何解决了。凭着半桶水的记忆和知识，写了一个简单的词法分析函数，把整串字符串扔进去就切出数据域和过滤器们以及参数了。具体代码有点长，也写得烂，就不贴出来了，请移步github查看，在`parseStatement`函数中。\n\n但是仍然需要将需要解析的语句从最原始的模板文本中分离出来，这里就可以用正则了。离远一点看那个语法的形式，其实就是分成了有引号括住的字符和没有引号括住的字符，以及最开头有特定的符号。\n\n于是正则就成这样：`/\\{\\s*([>|<|!|@|=|#])(?:\"[^\"]*\"|[^\\{\\}\"]+)*\\s*\\}/g`\n\n### 执行\n\n执行写起来比解析容易多了，因为已经有既定的数据结构了。需要在这里稍微记录一下的就是串联执行过滤器的过程。\n\n以下是只为了展示思路的精简代码。\n\n```javascript\n/*\ndata structure：\n[\n    ['filter1'],\n    ['filter2', 'arg21'],\n    ['filter3', 'arg31', 'arg32']\n]\n*/\nfor ( i = 0; i < filterCount; i++ ) {\n    result = [result].concat( filters[i].slice( 1 ) );\n    result = func.apply( scope, result );\n}\n```\n\n## 新功能二：错误提示\n\n写这么一个函数：\n\n```javascript\nvar error = function ( level, type, location, message ) {\n    /*\n     * @param level int, {0:statement, 1:field, 2:runtime}\n     * @param type string\n     * @param location {string, int}\n     * @param message string\n    */\n    throw ( 'Error\\n'\n        + '[Level]\\n'\n        + ['statement', 'field', 'runtime'][level] + '\\n\\n'\n        + '[Type]\\n'\n        + type + '\\n\\n'\n        + '[Location]\\n'\n        + location + '\\n\\n'\n        + '[Message]\\n'\n        + message\n    );\n}\n```\n\n凡是在生成模板，渲染模板的时候遇到什么问题，直接调用这个函数。\n\n所以其实没什么好说的，只是约定好错误提示的一些格式就可以了。\n\nEnd.","source":"_posts/simpleTemplate-js的三版本分化和新功能编写.md","raw":"---\ntitle: simpleTemplate.js 的三版本分化和新功能编写\ncategories:\n  - [技术, 前端]\n  - [编程语言, javascript]\ntags: [javascript, string-template]\npermalink: simpletemplatejs-three-versions-and-new-features\nid: 33\nupdated: '2015-01-03 22:29:19'\ndate: 2015-01-03 22:29:19\n---\n\n考研之后终于有时间将拖了很久的simpleTemplate.js给写完了。\n\n## 三版本和新功能\n\n写这篇文章的时间离同主题的[上一篇文章](http://blog.e10t.net/optimize-simpletemplatejs-by-myself/)已经太远了。距离上次大概实现了基本功能之后，又发生了很多事情，也对这个js库思考了不少，最后决定将这个库拆成三个版本，分别是bare版、regular版和advanced版。三个版本的功能是逐渐增加的，而各版本又在各自功能的要求上尽量做到完善和小型化。\n\n例如bare版只有数据输出的功能，被我用来在之前[某个chrome插件](http://blog.e10t.net/chrome-extension-test-page-and-report/)中使用。\n\n回看以前自己写下的文字和代码，总有种陌生的熟悉感。然而新旧代码看似已经不同，实际要表达的思想却是一脉相承的，新的代码并不是重写，而是继承、改进和发展旧的代码。没有以前写下的代码就没有现在写出的代码，没有以前思考的基础就没有现在思考的凭依。因此这添加的新功能其实在旧功能写成之时，便拥有了出现的需求和生长的土壤。\n\n然，新功能要出来，代码是会膨胀的，在某些用不上新功能的情况下，代码就成了冗余。故，分化出三个版本分别应付不同的情况。新功能就是出现三版本的原因。\n\n## 新功能一：过滤器\n\n此功能的想法是结合了对输出数据的二次处理和判断的拓展。\n\n在regular版中，数据输出只有纯输出功能，明显是不够的；判断只能判断数据域是否存在数据，或者数据是否为真，明显也是不够的。（代码中体现为简单的`if (!data)`）。\n\n那么数据域允许形如javascript语句的语法如何？判断使用形如`a > b`、`a == b`的语法如何？\n\n当然是可以的，但是这样实在没必要，那还不如直接eval罢？\n\n我思来想去，发现其本质其实都是对数据进行一连串的操作，每一个操作通过将上一个操作的输出作为输入而串起来，即使判断，例如大于判断，也可以理解成将上一个操作的结果作为左值传入进一个\"大于\"函数，输出了布尔值而已。\n\n于是这样一来所有存在数据域的地方都可以统一配套上过滤器们就解决问题了。\n\nok，梳理一下。原来整个流程是这样的：\n\n解析模板 -> 生成模板对象 -> 填充数据 -> 渲染\n\n现在需要增加一个执行过程：\n\n解析模板 -> 生成模板对象 -> 填充数据 -> 执行语句 -> 渲染\n\n另外解析模板也要改进以适合对新语法的解析。\n\n过滤器语法形如：`{=data | filter1 | filter2 1 | filter3 string \"string | \" }`\n\n### 解析\n\n语法变得太复杂，不考虑使用正则匹配了，尤其是需要分别识别引号内外的`|`和空格，太鬼畜了。\n\n于是很感谢在大学的时候选修了编译原理，不然真不知道如何解决了。凭着半桶水的记忆和知识，写了一个简单的词法分析函数，把整串字符串扔进去就切出数据域和过滤器们以及参数了。具体代码有点长，也写得烂，就不贴出来了，请移步github查看，在`parseStatement`函数中。\n\n但是仍然需要将需要解析的语句从最原始的模板文本中分离出来，这里就可以用正则了。离远一点看那个语法的形式，其实就是分成了有引号括住的字符和没有引号括住的字符，以及最开头有特定的符号。\n\n于是正则就成这样：`/\\{\\s*([>|<|!|@|=|#])(?:\"[^\"]*\"|[^\\{\\}\"]+)*\\s*\\}/g`\n\n### 执行\n\n执行写起来比解析容易多了，因为已经有既定的数据结构了。需要在这里稍微记录一下的就是串联执行过滤器的过程。\n\n以下是只为了展示思路的精简代码。\n\n```javascript\n/*\ndata structure：\n[\n    ['filter1'],\n    ['filter2', 'arg21'],\n    ['filter3', 'arg31', 'arg32']\n]\n*/\nfor ( i = 0; i < filterCount; i++ ) {\n    result = [result].concat( filters[i].slice( 1 ) );\n    result = func.apply( scope, result );\n}\n```\n\n## 新功能二：错误提示\n\n写这么一个函数：\n\n```javascript\nvar error = function ( level, type, location, message ) {\n    /*\n     * @param level int, {0:statement, 1:field, 2:runtime}\n     * @param type string\n     * @param location {string, int}\n     * @param message string\n    */\n    throw ( 'Error\\n'\n        + '[Level]\\n'\n        + ['statement', 'field', 'runtime'][level] + '\\n\\n'\n        + '[Type]\\n'\n        + type + '\\n\\n'\n        + '[Location]\\n'\n        + location + '\\n\\n'\n        + '[Message]\\n'\n        + message\n    );\n}\n```\n\n凡是在生成模板，渲染模板的时候遇到什么问题，直接调用这个函数。\n\n所以其实没什么好说的，只是约定好错误提示的一些格式就可以了。\n\nEnd.","slug":"simpletemplatejs-three-versions-and-new-features","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuol000en7t4jqpzis59","content":"<p>考研之后终于有时间将拖了很久的simpleTemplate.js给写完了。</p>\n<h2 id=\"三版本和新功能\"><a href=\"#三版本和新功能\" class=\"headerlink\" title=\"三版本和新功能\"></a>三版本和新功能</h2><p>写这篇文章的时间离同主题的<a href=\"http://blog.e10t.net/optimize-simpletemplatejs-by-myself/\">上一篇文章</a>已经太远了。距离上次大概实现了基本功能之后，又发生了很多事情，也对这个js库思考了不少，最后决定将这个库拆成三个版本，分别是bare版、regular版和advanced版。三个版本的功能是逐渐增加的，而各版本又在各自功能的要求上尽量做到完善和小型化。</p>\n<p>例如bare版只有数据输出的功能，被我用来在之前<a href=\"http://blog.e10t.net/chrome-extension-test-page-and-report/\">某个chrome插件</a>中使用。</p>\n<p>回看以前自己写下的文字和代码，总有种陌生的熟悉感。然而新旧代码看似已经不同，实际要表达的思想却是一脉相承的，新的代码并不是重写，而是继承、改进和发展旧的代码。没有以前写下的代码就没有现在写出的代码，没有以前思考的基础就没有现在思考的凭依。因此这添加的新功能其实在旧功能写成之时，便拥有了出现的需求和生长的土壤。</p>\n<p>然，新功能要出来，代码是会膨胀的，在某些用不上新功能的情况下，代码就成了冗余。故，分化出三个版本分别应付不同的情况。新功能就是出现三版本的原因。</p>\n<h2 id=\"新功能一：过滤器\"><a href=\"#新功能一：过滤器\" class=\"headerlink\" title=\"新功能一：过滤器\"></a>新功能一：过滤器</h2><p>此功能的想法是结合了对输出数据的二次处理和判断的拓展。</p>\n<p>在regular版中，数据输出只有纯输出功能，明显是不够的；判断只能判断数据域是否存在数据，或者数据是否为真，明显也是不够的。（代码中体现为简单的<code>if (!data)</code>）。</p>\n<p>那么数据域允许形如javascript语句的语法如何？判断使用形如<code>a &gt; b</code>、<code>a == b</code>的语法如何？</p>\n<p>当然是可以的，但是这样实在没必要，那还不如直接eval罢？</p>\n<p>我思来想去，发现其本质其实都是对数据进行一连串的操作，每一个操作通过将上一个操作的输出作为输入而串起来，即使判断，例如大于判断，也可以理解成将上一个操作的结果作为左值传入进一个”大于”函数，输出了布尔值而已。</p>\n<p>于是这样一来所有存在数据域的地方都可以统一配套上过滤器们就解决问题了。</p>\n<p>ok，梳理一下。原来整个流程是这样的：</p>\n<p>解析模板 -&gt; 生成模板对象 -&gt; 填充数据 -&gt; 渲染</p>\n<p>现在需要增加一个执行过程：</p>\n<p>解析模板 -&gt; 生成模板对象 -&gt; 填充数据 -&gt; 执行语句 -&gt; 渲染</p>\n<p>另外解析模板也要改进以适合对新语法的解析。</p>\n<p>过滤器语法形如：<code>{=data | filter1 | filter2 1 | filter3 string &quot;string | &quot; }</code></p>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>语法变得太复杂，不考虑使用正则匹配了，尤其是需要分别识别引号内外的<code>|</code>和空格，太鬼畜了。</p>\n<p>于是很感谢在大学的时候选修了编译原理，不然真不知道如何解决了。凭着半桶水的记忆和知识，写了一个简单的词法分析函数，把整串字符串扔进去就切出数据域和过滤器们以及参数了。具体代码有点长，也写得烂，就不贴出来了，请移步github查看，在<code>parseStatement</code>函数中。</p>\n<p>但是仍然需要将需要解析的语句从最原始的模板文本中分离出来，这里就可以用正则了。离远一点看那个语法的形式，其实就是分成了有引号括住的字符和没有引号括住的字符，以及最开头有特定的符号。</p>\n<p>于是正则就成这样：<code>/\\{\\s*([&gt;|&lt;|!|@|=|#])(?:&quot;[^&quot;]*&quot;|[^\\{\\}&quot;]+)*\\s*\\}/g</code></p>\n<h3 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h3><p>执行写起来比解析容易多了，因为已经有既定的数据结构了。需要在这里稍微记录一下的就是串联执行过滤器的过程。</p>\n<p>以下是只为了展示思路的精简代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">data structure：</span></span><br><span class=\"line\"><span class=\"comment\">[</span></span><br><span class=\"line\"><span class=\"comment\">    ['filter1'],</span></span><br><span class=\"line\"><span class=\"comment\">    ['filter2', 'arg21'],</span></span><br><span class=\"line\"><span class=\"comment\">    ['filter3', 'arg31', 'arg32']</span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; filterCount; i++ ) &#123;</span><br><span class=\"line\">    result = [result].concat( filters[i].slice( <span class=\"number\">1</span> ) );</span><br><span class=\"line\">    result = func.apply( scope, result );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"新功能二：错误提示\"><a href=\"#新功能二：错误提示\" class=\"headerlink\" title=\"新功能二：错误提示\"></a>新功能二：错误提示</h2><p>写这么一个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> error = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> level, type, location, message </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @param level int, &#123;0:statement, 1:field, 2:runtime&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * @param type string</span></span><br><span class=\"line\"><span class=\"comment\">     * @param location &#123;string, int&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * @param message string</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> ( <span class=\"string\">'Error\\n'</span></span><br><span class=\"line\">        + <span class=\"string\">'[Level]\\n'</span></span><br><span class=\"line\">        + [<span class=\"string\">'statement'</span>, <span class=\"string\">'field'</span>, <span class=\"string\">'runtime'</span>][level] + <span class=\"string\">'\\n\\n'</span></span><br><span class=\"line\">        + <span class=\"string\">'[Type]\\n'</span></span><br><span class=\"line\">        + type + <span class=\"string\">'\\n\\n'</span></span><br><span class=\"line\">        + <span class=\"string\">'[Location]\\n'</span></span><br><span class=\"line\">        + location + <span class=\"string\">'\\n\\n'</span></span><br><span class=\"line\">        + <span class=\"string\">'[Message]\\n'</span></span><br><span class=\"line\">        + message</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>凡是在生成模板，渲染模板的时候遇到什么问题，直接调用这个函数。</p>\n<p>所以其实没什么好说的，只是约定好错误提示的一些格式就可以了。</p>\n<p>End.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>考研之后终于有时间将拖了很久的simpleTemplate.js给写完了。</p>\n<h2 id=\"三版本和新功能\"><a href=\"#三版本和新功能\" class=\"headerlink\" title=\"三版本和新功能\"></a>三版本和新功能</h2><p>写这篇文章的时间离同主题的<a href=\"http://blog.e10t.net/optimize-simpletemplatejs-by-myself/\">上一篇文章</a>已经太远了。距离上次大概实现了基本功能之后，又发生了很多事情，也对这个js库思考了不少，最后决定将这个库拆成三个版本，分别是bare版、regular版和advanced版。三个版本的功能是逐渐增加的，而各版本又在各自功能的要求上尽量做到完善和小型化。</p>\n<p>例如bare版只有数据输出的功能，被我用来在之前<a href=\"http://blog.e10t.net/chrome-extension-test-page-and-report/\">某个chrome插件</a>中使用。</p>\n<p>回看以前自己写下的文字和代码，总有种陌生的熟悉感。然而新旧代码看似已经不同，实际要表达的思想却是一脉相承的，新的代码并不是重写，而是继承、改进和发展旧的代码。没有以前写下的代码就没有现在写出的代码，没有以前思考的基础就没有现在思考的凭依。因此这添加的新功能其实在旧功能写成之时，便拥有了出现的需求和生长的土壤。</p>\n<p>然，新功能要出来，代码是会膨胀的，在某些用不上新功能的情况下，代码就成了冗余。故，分化出三个版本分别应付不同的情况。新功能就是出现三版本的原因。</p>\n<h2 id=\"新功能一：过滤器\"><a href=\"#新功能一：过滤器\" class=\"headerlink\" title=\"新功能一：过滤器\"></a>新功能一：过滤器</h2><p>此功能的想法是结合了对输出数据的二次处理和判断的拓展。</p>\n<p>在regular版中，数据输出只有纯输出功能，明显是不够的；判断只能判断数据域是否存在数据，或者数据是否为真，明显也是不够的。（代码中体现为简单的<code>if (!data)</code>）。</p>\n<p>那么数据域允许形如javascript语句的语法如何？判断使用形如<code>a &gt; b</code>、<code>a == b</code>的语法如何？</p>\n<p>当然是可以的，但是这样实在没必要，那还不如直接eval罢？</p>\n<p>我思来想去，发现其本质其实都是对数据进行一连串的操作，每一个操作通过将上一个操作的输出作为输入而串起来，即使判断，例如大于判断，也可以理解成将上一个操作的结果作为左值传入进一个”大于”函数，输出了布尔值而已。</p>\n<p>于是这样一来所有存在数据域的地方都可以统一配套上过滤器们就解决问题了。</p>\n<p>ok，梳理一下。原来整个流程是这样的：</p>\n<p>解析模板 -&gt; 生成模板对象 -&gt; 填充数据 -&gt; 渲染</p>\n<p>现在需要增加一个执行过程：</p>\n<p>解析模板 -&gt; 生成模板对象 -&gt; 填充数据 -&gt; 执行语句 -&gt; 渲染</p>\n<p>另外解析模板也要改进以适合对新语法的解析。</p>\n<p>过滤器语法形如：<code>{=data | filter1 | filter2 1 | filter3 string &quot;string | &quot; }</code></p>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><p>语法变得太复杂，不考虑使用正则匹配了，尤其是需要分别识别引号内外的<code>|</code>和空格，太鬼畜了。</p>\n<p>于是很感谢在大学的时候选修了编译原理，不然真不知道如何解决了。凭着半桶水的记忆和知识，写了一个简单的词法分析函数，把整串字符串扔进去就切出数据域和过滤器们以及参数了。具体代码有点长，也写得烂，就不贴出来了，请移步github查看，在<code>parseStatement</code>函数中。</p>\n<p>但是仍然需要将需要解析的语句从最原始的模板文本中分离出来，这里就可以用正则了。离远一点看那个语法的形式，其实就是分成了有引号括住的字符和没有引号括住的字符，以及最开头有特定的符号。</p>\n<p>于是正则就成这样：<code>/\\{\\s*([&gt;|&lt;|!|@|=|#])(?:&quot;[^&quot;]*&quot;|[^\\{\\}&quot;]+)*\\s*\\}/g</code></p>\n<h3 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h3><p>执行写起来比解析容易多了，因为已经有既定的数据结构了。需要在这里稍微记录一下的就是串联执行过滤器的过程。</p>\n<p>以下是只为了展示思路的精简代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">data structure：</span></span><br><span class=\"line\"><span class=\"comment\">[</span></span><br><span class=\"line\"><span class=\"comment\">    ['filter1'],</span></span><br><span class=\"line\"><span class=\"comment\">    ['filter2', 'arg21'],</span></span><br><span class=\"line\"><span class=\"comment\">    ['filter3', 'arg31', 'arg32']</span></span><br><span class=\"line\"><span class=\"comment\">]</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; filterCount; i++ ) &#123;</span><br><span class=\"line\">    result = [result].concat( filters[i].slice( <span class=\"number\">1</span> ) );</span><br><span class=\"line\">    result = func.apply( scope, result );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"新功能二：错误提示\"><a href=\"#新功能二：错误提示\" class=\"headerlink\" title=\"新功能二：错误提示\"></a>新功能二：错误提示</h2><p>写这么一个函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> error = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> level, type, location, message </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * @param level int, &#123;0:statement, 1:field, 2:runtime&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * @param type string</span></span><br><span class=\"line\"><span class=\"comment\">     * @param location &#123;string, int&#125;</span></span><br><span class=\"line\"><span class=\"comment\">     * @param message string</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> ( <span class=\"string\">'Error\\n'</span></span><br><span class=\"line\">        + <span class=\"string\">'[Level]\\n'</span></span><br><span class=\"line\">        + [<span class=\"string\">'statement'</span>, <span class=\"string\">'field'</span>, <span class=\"string\">'runtime'</span>][level] + <span class=\"string\">'\\n\\n'</span></span><br><span class=\"line\">        + <span class=\"string\">'[Type]\\n'</span></span><br><span class=\"line\">        + type + <span class=\"string\">'\\n\\n'</span></span><br><span class=\"line\">        + <span class=\"string\">'[Location]\\n'</span></span><br><span class=\"line\">        + location + <span class=\"string\">'\\n\\n'</span></span><br><span class=\"line\">        + <span class=\"string\">'[Message]\\n'</span></span><br><span class=\"line\">        + message</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>凡是在生成模板，渲染模板的时候遇到什么问题，直接调用这个函数。</p>\n<p>所以其实没什么好说的，只是约定好错误提示的一些格式就可以了。</p>\n<p>End.</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sat Jan 03 2015 22:29:19 GMT+0800 (China Standard Time)","title":"simpleTemplate.js 的三版本分化和新功能编写","path":"simpletemplatejs-three-versions-and-new-features/","eyeCatchImage":null,"excerpt":null,"date":"2015-01-03T14:29:19.000Z","pv":0,"totalPV":0,"categories":"技术 > 前端 > 编程语言 > javascript","tags":["javascript","string-template"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1545},{"title":"《来自风平浪静的明天》人物关系简单理清和个人简单分析","id":"4","updated":"2014-04-15T07:42:35.000Z","date":"2014-01-22T20:06:53.000Z","_content":"\n凪のあすから可能是10月番里面人物关系最乱的一个番？现在看来似乎还有一个季度可以给岡田麿里来玩，但是里面的人物关系发生了一些变化，各种CP的支持者都对自己支持的CP有所期待，我认为能做到这样这番就算是良作了。\n\n现在暂时更新到14集，刚刚是发生剧情转折的一集，从一期（1-13）的贵圈真乱要变成二期（14-）的贵圈更乱了。于是先来理清一下人物关系。\n\n世界简介：有两类人类，分别住在陆地上和大海里。大海人有“胞衣”保护可以在水里面生存，陆地人是很久以前上岸的人，“胞衣”已经消失。两类人之间总的来说关系不太好。 大海人如果跟大陆人联姻的话会被赶出大海，因为陆上人和大海人的孩子不能在大海里面生存。\n\n基本的5人贵圈（名字能简写就简写了，免得太复杂）：\n\n* 男一：光\n* 女一：爱花\n* 男二：纺\n* 女二：千\n* 男三：要\n\n5人中除了男二是陆上人，其他4个都是大海人并且是青梅竹马的关系。均是初中生（一期）。大海的4人因为大海里面的中学被废校而转学到陆上的中学。\n\n在一期里面，能看出来的5人基本关系是（->表示喜欢）：\n\n* 男三->女二->男一->女一?->男二\n* 要->千->光->爱花?->纺\n\n注意这里使用了->的都是符号前面的角色已经对符号后面的角色表白了，而爱花和纺之间使用了?->是因为动画里面暂时没有清楚表达爱花的意向，女二（爱花）似乎对男二有憧憬，但是又很在乎男一（光）。另外被表白的人都没有对表白做出正面的回应。正所谓“不表白就不会死”，为什么不明白。\n\nOK，到现在为止，人物关系其实还并不太复杂，跟另外一部《在盛夏等待》差不多。\n\n继续添加上其他人的关系。男一（光）有个姐姐叫明里， 喜欢一个叫至的陆上人。而这个叫至的陆上人，曾经跟一个现已去世了的叫美织的大海人结婚并生下一个叫美海的女孩子。明里和美织从初中开始关系就很好，因此跟至及美海关系也很好。然后美海（小学生）喜欢男一（光）。\n\n还能跟上吗？ 美海有一个经常在一起的朋友纱由（小学生），应该是喜欢男三（要）。\n\n再补上一些其他信息。男一的父亲（灯），不赞成明里（男一姐姐）的婚姻。男三有个非直属的爷爷，曾经是大海人。\n\n不要问为什么能够出现这样的关系，具体剧情请自行去补番。\n\n接下来就是一期（1-13）转二期（14-）的人物关系变化了，总的来说就是5人内贵圈，7人外贵圈。\n\n因为暂时还不明的天气转冷的原因，大海人决定冬眠来度过。13集中明里（男一姐姐）在举办祭奠（一个陆上人和大海人之间的传统祭奠）上顺便举办婚礼，由于海神(？)的干预，不慎落水，男一女一下海救人；男二落水，女二下海救人，男三也去帮忙。最后的结果是女一代替了明里被海神带走，明里被救，女二带着男二上岸，男一和男三消失在大海里面。 实际上可以这样理解，除了女二，其他大海人都冬眠了。\n\n 于是14集开始蛋疼了。根据我推测剧情大概是过了4-5年，女二被男二的爷爷（曾是大海人）收留，男二女二两人均上了大学，明里和至结婚（男一和美海成了舅甥/舅侄），美海和纱由成了初中生。至此大概就是开始7人贵圈了。而由于时间的流逝和物理上的阻隔，人物的心理和关系也有了变化。\n\n从14集可以明显看出三点信息。一、男二（陆上人，纺）明显喜欢女二（千）的，但是知道女二喜欢男一（因为之前两人谈论过相关的话题），一直没有表露。而女二由于一直跟男二及男二爷爷生活，对他们也是当家人看待（大概能从三处很明显的场景可以看出） ，对男二的态度还不明朗。二、美海还是喜欢男一（光），有同学跟她告白也是立即拒绝，并说“放弃什么的……不可能”。虽然这句话极有可能是最后成为苦逼的flag，但是暂时还不能断言。三、美纱（美海的朋友）很有可能还是喜欢着男三（要）。\n\n14集的最后，男一（光）由于幻月这个天文现象而从海里苏醒回来了，美海因为他刚回来的时候没有呼吸而做了人工呼吸。但是男一是能够生活在大海里面的怎么会溺水呢，所以我认为这里更多是情不自禁的意味。注意在日本动画里面，人工呼吸是比较特别的事件，因为涉及接吻。从出现了这个事件这一点来看，美海要加入贵圈是无疑的了。\n\n根据现有的剧情，大概推测一下之后的发展。我认为岡田非常狡猾地使用了时间这个大杀器，给乱糟糟的人物关系一个终结的推动力。时间上的错位，导致本来的同龄人变成了类似不同辈份的人，这里应该就打消了女二（千）和男一（光）的可能，加上女二对男一的表白本来就有放弃的意味，而男一的回归也极有可能让女二放下心结，最后从了喜欢她的男二（纺）；也导致本来不同龄的人变成了同龄人，男一男三还是保持着初中的时间，而喜欢男一的美海（男一的外甥女）和喜欢男三（要）的纱由刚好就是变成了初中生，从而出现凑成CP的可能性。然而我认为男一跟美海的可能性实在是极小，一是因为男一自此至终都显示出只喜欢女一（爱花），二是因为双方比较特殊的辈份，三是因为美海也有追求者并且在动画中会成为苦逼的flag相对比较明显（岡田就是喜欢和精通苦逼的感情戏）。男三和纱由的戏份实在很少，比较难预测。最后来说说被海神带走的女一的情况，无非就是回归与否。若回归，极其有可能跟男一组成一对，即使中途会和男二发生各种事件。因为基本上女一是个对感情比较迟钝的人，也不愿意伤害朋友，有可能看出男二喜欢女二而下定决心回应男一。若不回归，那就没什么可说了，和另一个爱花（绝园的暴风雨中的女主，CV同样是花泽香菜）一样了。\n\n总的来说，虽然过程会很乱，但是结局通常还会正常的。个人看好如下组合：男一（光）X女一（爱花）、男二（纺）X女二（千），最多加上一个男三（要）X纱由，最后是美海一个苦逼。\n\n正是：\n\n    多角恋爱\n    看岡田笔下结局\n    风平浪静\n\n最后附岡田麿里的一些信息：\n\n曾经是《true tears》、《龙与虎》、《花开物语》和《那朵花》的系列构成，难怪对写青春期男女感情纠结之类的非常在行。在访谈中曾经透露自己小时候经常会妄想故事，甚至会被自己的故事感动到哭，会以五十音的顺序来妄想跟班里的男生约会的场景和故事。\n","source":"_posts/《来自风平浪静的明天》人物关系简单理清和个人简单分析.md","raw":"---\ntitle: 《来自风平浪静的明天》人物关系简单理清和个人简单分析\ncategories:\n  - [ACGN, 动画]\ntags: [anime]\npermalink: nagiasu-relationship-between-charactors\nid: 4\nupdated: '2014-04-15 15:42:35'\ndate: 2014-01-23 04:06:53\n---\n\n凪のあすから可能是10月番里面人物关系最乱的一个番？现在看来似乎还有一个季度可以给岡田麿里来玩，但是里面的人物关系发生了一些变化，各种CP的支持者都对自己支持的CP有所期待，我认为能做到这样这番就算是良作了。\n\n现在暂时更新到14集，刚刚是发生剧情转折的一集，从一期（1-13）的贵圈真乱要变成二期（14-）的贵圈更乱了。于是先来理清一下人物关系。\n\n世界简介：有两类人类，分别住在陆地上和大海里。大海人有“胞衣”保护可以在水里面生存，陆地人是很久以前上岸的人，“胞衣”已经消失。两类人之间总的来说关系不太好。 大海人如果跟大陆人联姻的话会被赶出大海，因为陆上人和大海人的孩子不能在大海里面生存。\n\n基本的5人贵圈（名字能简写就简写了，免得太复杂）：\n\n* 男一：光\n* 女一：爱花\n* 男二：纺\n* 女二：千\n* 男三：要\n\n5人中除了男二是陆上人，其他4个都是大海人并且是青梅竹马的关系。均是初中生（一期）。大海的4人因为大海里面的中学被废校而转学到陆上的中学。\n\n在一期里面，能看出来的5人基本关系是（->表示喜欢）：\n\n* 男三->女二->男一->女一?->男二\n* 要->千->光->爱花?->纺\n\n注意这里使用了->的都是符号前面的角色已经对符号后面的角色表白了，而爱花和纺之间使用了?->是因为动画里面暂时没有清楚表达爱花的意向，女二（爱花）似乎对男二有憧憬，但是又很在乎男一（光）。另外被表白的人都没有对表白做出正面的回应。正所谓“不表白就不会死”，为什么不明白。\n\nOK，到现在为止，人物关系其实还并不太复杂，跟另外一部《在盛夏等待》差不多。\n\n继续添加上其他人的关系。男一（光）有个姐姐叫明里， 喜欢一个叫至的陆上人。而这个叫至的陆上人，曾经跟一个现已去世了的叫美织的大海人结婚并生下一个叫美海的女孩子。明里和美织从初中开始关系就很好，因此跟至及美海关系也很好。然后美海（小学生）喜欢男一（光）。\n\n还能跟上吗？ 美海有一个经常在一起的朋友纱由（小学生），应该是喜欢男三（要）。\n\n再补上一些其他信息。男一的父亲（灯），不赞成明里（男一姐姐）的婚姻。男三有个非直属的爷爷，曾经是大海人。\n\n不要问为什么能够出现这样的关系，具体剧情请自行去补番。\n\n接下来就是一期（1-13）转二期（14-）的人物关系变化了，总的来说就是5人内贵圈，7人外贵圈。\n\n因为暂时还不明的天气转冷的原因，大海人决定冬眠来度过。13集中明里（男一姐姐）在举办祭奠（一个陆上人和大海人之间的传统祭奠）上顺便举办婚礼，由于海神(？)的干预，不慎落水，男一女一下海救人；男二落水，女二下海救人，男三也去帮忙。最后的结果是女一代替了明里被海神带走，明里被救，女二带着男二上岸，男一和男三消失在大海里面。 实际上可以这样理解，除了女二，其他大海人都冬眠了。\n\n 于是14集开始蛋疼了。根据我推测剧情大概是过了4-5年，女二被男二的爷爷（曾是大海人）收留，男二女二两人均上了大学，明里和至结婚（男一和美海成了舅甥/舅侄），美海和纱由成了初中生。至此大概就是开始7人贵圈了。而由于时间的流逝和物理上的阻隔，人物的心理和关系也有了变化。\n\n从14集可以明显看出三点信息。一、男二（陆上人，纺）明显喜欢女二（千）的，但是知道女二喜欢男一（因为之前两人谈论过相关的话题），一直没有表露。而女二由于一直跟男二及男二爷爷生活，对他们也是当家人看待（大概能从三处很明显的场景可以看出） ，对男二的态度还不明朗。二、美海还是喜欢男一（光），有同学跟她告白也是立即拒绝，并说“放弃什么的……不可能”。虽然这句话极有可能是最后成为苦逼的flag，但是暂时还不能断言。三、美纱（美海的朋友）很有可能还是喜欢着男三（要）。\n\n14集的最后，男一（光）由于幻月这个天文现象而从海里苏醒回来了，美海因为他刚回来的时候没有呼吸而做了人工呼吸。但是男一是能够生活在大海里面的怎么会溺水呢，所以我认为这里更多是情不自禁的意味。注意在日本动画里面，人工呼吸是比较特别的事件，因为涉及接吻。从出现了这个事件这一点来看，美海要加入贵圈是无疑的了。\n\n根据现有的剧情，大概推测一下之后的发展。我认为岡田非常狡猾地使用了时间这个大杀器，给乱糟糟的人物关系一个终结的推动力。时间上的错位，导致本来的同龄人变成了类似不同辈份的人，这里应该就打消了女二（千）和男一（光）的可能，加上女二对男一的表白本来就有放弃的意味，而男一的回归也极有可能让女二放下心结，最后从了喜欢她的男二（纺）；也导致本来不同龄的人变成了同龄人，男一男三还是保持着初中的时间，而喜欢男一的美海（男一的外甥女）和喜欢男三（要）的纱由刚好就是变成了初中生，从而出现凑成CP的可能性。然而我认为男一跟美海的可能性实在是极小，一是因为男一自此至终都显示出只喜欢女一（爱花），二是因为双方比较特殊的辈份，三是因为美海也有追求者并且在动画中会成为苦逼的flag相对比较明显（岡田就是喜欢和精通苦逼的感情戏）。男三和纱由的戏份实在很少，比较难预测。最后来说说被海神带走的女一的情况，无非就是回归与否。若回归，极其有可能跟男一组成一对，即使中途会和男二发生各种事件。因为基本上女一是个对感情比较迟钝的人，也不愿意伤害朋友，有可能看出男二喜欢女二而下定决心回应男一。若不回归，那就没什么可说了，和另一个爱花（绝园的暴风雨中的女主，CV同样是花泽香菜）一样了。\n\n总的来说，虽然过程会很乱，但是结局通常还会正常的。个人看好如下组合：男一（光）X女一（爱花）、男二（纺）X女二（千），最多加上一个男三（要）X纱由，最后是美海一个苦逼。\n\n正是：\n\n    多角恋爱\n    看岡田笔下结局\n    风平浪静\n\n最后附岡田麿里的一些信息：\n\n曾经是《true tears》、《龙与虎》、《花开物语》和《那朵花》的系列构成，难怪对写青春期男女感情纠结之类的非常在行。在访谈中曾经透露自己小时候经常会妄想故事，甚至会被自己的故事感动到哭，会以五十音的顺序来妄想跟班里的男生约会的场景和故事。\n","slug":"nagiasu-relationship-between-charactors","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuon000hn7t4qy7wyuol","content":"<p>凪のあすから可能是10月番里面人物关系最乱的一个番？现在看来似乎还有一个季度可以给岡田麿里来玩，但是里面的人物关系发生了一些变化，各种CP的支持者都对自己支持的CP有所期待，我认为能做到这样这番就算是良作了。</p>\n<p>现在暂时更新到14集，刚刚是发生剧情转折的一集，从一期（1-13）的贵圈真乱要变成二期（14-）的贵圈更乱了。于是先来理清一下人物关系。</p>\n<p>世界简介：有两类人类，分别住在陆地上和大海里。大海人有“胞衣”保护可以在水里面生存，陆地人是很久以前上岸的人，“胞衣”已经消失。两类人之间总的来说关系不太好。 大海人如果跟大陆人联姻的话会被赶出大海，因为陆上人和大海人的孩子不能在大海里面生存。</p>\n<p>基本的5人贵圈（名字能简写就简写了，免得太复杂）：</p>\n<ul>\n<li>男一：光</li>\n<li>女一：爱花</li>\n<li>男二：纺</li>\n<li>女二：千</li>\n<li>男三：要</li>\n</ul>\n<p>5人中除了男二是陆上人，其他4个都是大海人并且是青梅竹马的关系。均是初中生（一期）。大海的4人因为大海里面的中学被废校而转学到陆上的中学。</p>\n<p>在一期里面，能看出来的5人基本关系是（-&gt;表示喜欢）：</p>\n<ul>\n<li>男三-&gt;女二-&gt;男一-&gt;女一?-&gt;男二</li>\n<li>要-&gt;千-&gt;光-&gt;爱花?-&gt;纺</li>\n</ul>\n<p>注意这里使用了-&gt;的都是符号前面的角色已经对符号后面的角色表白了，而爱花和纺之间使用了?-&gt;是因为动画里面暂时没有清楚表达爱花的意向，女二（爱花）似乎对男二有憧憬，但是又很在乎男一（光）。另外被表白的人都没有对表白做出正面的回应。正所谓“不表白就不会死”，为什么不明白。</p>\n<p>OK，到现在为止，人物关系其实还并不太复杂，跟另外一部《在盛夏等待》差不多。</p>\n<p>继续添加上其他人的关系。男一（光）有个姐姐叫明里， 喜欢一个叫至的陆上人。而这个叫至的陆上人，曾经跟一个现已去世了的叫美织的大海人结婚并生下一个叫美海的女孩子。明里和美织从初中开始关系就很好，因此跟至及美海关系也很好。然后美海（小学生）喜欢男一（光）。</p>\n<p>还能跟上吗？ 美海有一个经常在一起的朋友纱由（小学生），应该是喜欢男三（要）。</p>\n<p>再补上一些其他信息。男一的父亲（灯），不赞成明里（男一姐姐）的婚姻。男三有个非直属的爷爷，曾经是大海人。</p>\n<p>不要问为什么能够出现这样的关系，具体剧情请自行去补番。</p>\n<p>接下来就是一期（1-13）转二期（14-）的人物关系变化了，总的来说就是5人内贵圈，7人外贵圈。</p>\n<p>因为暂时还不明的天气转冷的原因，大海人决定冬眠来度过。13集中明里（男一姐姐）在举办祭奠（一个陆上人和大海人之间的传统祭奠）上顺便举办婚礼，由于海神(？)的干预，不慎落水，男一女一下海救人；男二落水，女二下海救人，男三也去帮忙。最后的结果是女一代替了明里被海神带走，明里被救，女二带着男二上岸，男一和男三消失在大海里面。 实际上可以这样理解，除了女二，其他大海人都冬眠了。</p>\n<p> 于是14集开始蛋疼了。根据我推测剧情大概是过了4-5年，女二被男二的爷爷（曾是大海人）收留，男二女二两人均上了大学，明里和至结婚（男一和美海成了舅甥/舅侄），美海和纱由成了初中生。至此大概就是开始7人贵圈了。而由于时间的流逝和物理上的阻隔，人物的心理和关系也有了变化。</p>\n<p>从14集可以明显看出三点信息。一、男二（陆上人，纺）明显喜欢女二（千）的，但是知道女二喜欢男一（因为之前两人谈论过相关的话题），一直没有表露。而女二由于一直跟男二及男二爷爷生活，对他们也是当家人看待（大概能从三处很明显的场景可以看出） ，对男二的态度还不明朗。二、美海还是喜欢男一（光），有同学跟她告白也是立即拒绝，并说“放弃什么的……不可能”。虽然这句话极有可能是最后成为苦逼的flag，但是暂时还不能断言。三、美纱（美海的朋友）很有可能还是喜欢着男三（要）。</p>\n<p>14集的最后，男一（光）由于幻月这个天文现象而从海里苏醒回来了，美海因为他刚回来的时候没有呼吸而做了人工呼吸。但是男一是能够生活在大海里面的怎么会溺水呢，所以我认为这里更多是情不自禁的意味。注意在日本动画里面，人工呼吸是比较特别的事件，因为涉及接吻。从出现了这个事件这一点来看，美海要加入贵圈是无疑的了。</p>\n<p>根据现有的剧情，大概推测一下之后的发展。我认为岡田非常狡猾地使用了时间这个大杀器，给乱糟糟的人物关系一个终结的推动力。时间上的错位，导致本来的同龄人变成了类似不同辈份的人，这里应该就打消了女二（千）和男一（光）的可能，加上女二对男一的表白本来就有放弃的意味，而男一的回归也极有可能让女二放下心结，最后从了喜欢她的男二（纺）；也导致本来不同龄的人变成了同龄人，男一男三还是保持着初中的时间，而喜欢男一的美海（男一的外甥女）和喜欢男三（要）的纱由刚好就是变成了初中生，从而出现凑成CP的可能性。然而我认为男一跟美海的可能性实在是极小，一是因为男一自此至终都显示出只喜欢女一（爱花），二是因为双方比较特殊的辈份，三是因为美海也有追求者并且在动画中会成为苦逼的flag相对比较明显（岡田就是喜欢和精通苦逼的感情戏）。男三和纱由的戏份实在很少，比较难预测。最后来说说被海神带走的女一的情况，无非就是回归与否。若回归，极其有可能跟男一组成一对，即使中途会和男二发生各种事件。因为基本上女一是个对感情比较迟钝的人，也不愿意伤害朋友，有可能看出男二喜欢女二而下定决心回应男一。若不回归，那就没什么可说了，和另一个爱花（绝园的暴风雨中的女主，CV同样是花泽香菜）一样了。</p>\n<p>总的来说，虽然过程会很乱，但是结局通常还会正常的。个人看好如下组合：男一（光）X女一（爱花）、男二（纺）X女二（千），最多加上一个男三（要）X纱由，最后是美海一个苦逼。</p>\n<p>正是：</p>\n<pre><code>多角恋爱\n看岡田笔下结局\n风平浪静\n</code></pre><p>最后附岡田麿里的一些信息：</p>\n<p>曾经是《true tears》、《龙与虎》、《花开物语》和《那朵花》的系列构成，难怪对写青春期男女感情纠结之类的非常在行。在访谈中曾经透露自己小时候经常会妄想故事，甚至会被自己的故事感动到哭，会以五十音的顺序来妄想跟班里的男生约会的场景和故事。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>凪のあすから可能是10月番里面人物关系最乱的一个番？现在看来似乎还有一个季度可以给岡田麿里来玩，但是里面的人物关系发生了一些变化，各种CP的支持者都对自己支持的CP有所期待，我认为能做到这样这番就算是良作了。</p>\n<p>现在暂时更新到14集，刚刚是发生剧情转折的一集，从一期（1-13）的贵圈真乱要变成二期（14-）的贵圈更乱了。于是先来理清一下人物关系。</p>\n<p>世界简介：有两类人类，分别住在陆地上和大海里。大海人有“胞衣”保护可以在水里面生存，陆地人是很久以前上岸的人，“胞衣”已经消失。两类人之间总的来说关系不太好。 大海人如果跟大陆人联姻的话会被赶出大海，因为陆上人和大海人的孩子不能在大海里面生存。</p>\n<p>基本的5人贵圈（名字能简写就简写了，免得太复杂）：</p>\n<ul>\n<li>男一：光</li>\n<li>女一：爱花</li>\n<li>男二：纺</li>\n<li>女二：千</li>\n<li>男三：要</li>\n</ul>\n<p>5人中除了男二是陆上人，其他4个都是大海人并且是青梅竹马的关系。均是初中生（一期）。大海的4人因为大海里面的中学被废校而转学到陆上的中学。</p>\n<p>在一期里面，能看出来的5人基本关系是（-&gt;表示喜欢）：</p>\n<ul>\n<li>男三-&gt;女二-&gt;男一-&gt;女一?-&gt;男二</li>\n<li>要-&gt;千-&gt;光-&gt;爱花?-&gt;纺</li>\n</ul>\n<p>注意这里使用了-&gt;的都是符号前面的角色已经对符号后面的角色表白了，而爱花和纺之间使用了?-&gt;是因为动画里面暂时没有清楚表达爱花的意向，女二（爱花）似乎对男二有憧憬，但是又很在乎男一（光）。另外被表白的人都没有对表白做出正面的回应。正所谓“不表白就不会死”，为什么不明白。</p>\n<p>OK，到现在为止，人物关系其实还并不太复杂，跟另外一部《在盛夏等待》差不多。</p>\n<p>继续添加上其他人的关系。男一（光）有个姐姐叫明里， 喜欢一个叫至的陆上人。而这个叫至的陆上人，曾经跟一个现已去世了的叫美织的大海人结婚并生下一个叫美海的女孩子。明里和美织从初中开始关系就很好，因此跟至及美海关系也很好。然后美海（小学生）喜欢男一（光）。</p>\n<p>还能跟上吗？ 美海有一个经常在一起的朋友纱由（小学生），应该是喜欢男三（要）。</p>\n<p>再补上一些其他信息。男一的父亲（灯），不赞成明里（男一姐姐）的婚姻。男三有个非直属的爷爷，曾经是大海人。</p>\n<p>不要问为什么能够出现这样的关系，具体剧情请自行去补番。</p>\n<p>接下来就是一期（1-13）转二期（14-）的人物关系变化了，总的来说就是5人内贵圈，7人外贵圈。</p>\n<p>因为暂时还不明的天气转冷的原因，大海人决定冬眠来度过。13集中明里（男一姐姐）在举办祭奠（一个陆上人和大海人之间的传统祭奠）上顺便举办婚礼，由于海神(？)的干预，不慎落水，男一女一下海救人；男二落水，女二下海救人，男三也去帮忙。最后的结果是女一代替了明里被海神带走，明里被救，女二带着男二上岸，男一和男三消失在大海里面。 实际上可以这样理解，除了女二，其他大海人都冬眠了。</p>\n<p> 于是14集开始蛋疼了。根据我推测剧情大概是过了4-5年，女二被男二的爷爷（曾是大海人）收留，男二女二两人均上了大学，明里和至结婚（男一和美海成了舅甥/舅侄），美海和纱由成了初中生。至此大概就是开始7人贵圈了。而由于时间的流逝和物理上的阻隔，人物的心理和关系也有了变化。</p>\n<p>从14集可以明显看出三点信息。一、男二（陆上人，纺）明显喜欢女二（千）的，但是知道女二喜欢男一（因为之前两人谈论过相关的话题），一直没有表露。而女二由于一直跟男二及男二爷爷生活，对他们也是当家人看待（大概能从三处很明显的场景可以看出） ，对男二的态度还不明朗。二、美海还是喜欢男一（光），有同学跟她告白也是立即拒绝，并说“放弃什么的……不可能”。虽然这句话极有可能是最后成为苦逼的flag，但是暂时还不能断言。三、美纱（美海的朋友）很有可能还是喜欢着男三（要）。</p>\n<p>14集的最后，男一（光）由于幻月这个天文现象而从海里苏醒回来了，美海因为他刚回来的时候没有呼吸而做了人工呼吸。但是男一是能够生活在大海里面的怎么会溺水呢，所以我认为这里更多是情不自禁的意味。注意在日本动画里面，人工呼吸是比较特别的事件，因为涉及接吻。从出现了这个事件这一点来看，美海要加入贵圈是无疑的了。</p>\n<p>根据现有的剧情，大概推测一下之后的发展。我认为岡田非常狡猾地使用了时间这个大杀器，给乱糟糟的人物关系一个终结的推动力。时间上的错位，导致本来的同龄人变成了类似不同辈份的人，这里应该就打消了女二（千）和男一（光）的可能，加上女二对男一的表白本来就有放弃的意味，而男一的回归也极有可能让女二放下心结，最后从了喜欢她的男二（纺）；也导致本来不同龄的人变成了同龄人，男一男三还是保持着初中的时间，而喜欢男一的美海（男一的外甥女）和喜欢男三（要）的纱由刚好就是变成了初中生，从而出现凑成CP的可能性。然而我认为男一跟美海的可能性实在是极小，一是因为男一自此至终都显示出只喜欢女一（爱花），二是因为双方比较特殊的辈份，三是因为美海也有追求者并且在动画中会成为苦逼的flag相对比较明显（岡田就是喜欢和精通苦逼的感情戏）。男三和纱由的戏份实在很少，比较难预测。最后来说说被海神带走的女一的情况，无非就是回归与否。若回归，极其有可能跟男一组成一对，即使中途会和男二发生各种事件。因为基本上女一是个对感情比较迟钝的人，也不愿意伤害朋友，有可能看出男二喜欢女二而下定决心回应男一。若不回归，那就没什么可说了，和另一个爱花（绝园的暴风雨中的女主，CV同样是花泽香菜）一样了。</p>\n<p>总的来说，虽然过程会很乱，但是结局通常还会正常的。个人看好如下组合：男一（光）X女一（爱花）、男二（纺）X女二（千），最多加上一个男三（要）X纱由，最后是美海一个苦逼。</p>\n<p>正是：</p>\n<pre><code>多角恋爱\n看岡田笔下结局\n风平浪静\n</code></pre><p>最后附岡田麿里的一些信息：</p>\n<p>曾经是《true tears》、《龙与虎》、《花开物语》和《那朵花》的系列构成，难怪对写青春期男女感情纠结之类的非常在行。在访谈中曾经透露自己小时候经常会妄想故事，甚至会被自己的故事感动到哭，会以五十音的顺序来妄想跟班里的男生约会的场景和故事。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Apr 15 2014 15:42:35 GMT+0800 (China Standard Time)","title":"《来自风平浪静的明天》人物关系简单理清和个人简单分析","path":"nagiasu-relationship-between-charactors/","eyeCatchImage":null,"excerpt":null,"date":"2014-01-22T20:06:53.000Z","pv":0,"totalPV":0,"categories":"ACGN > 动画","tags":["anime"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2471},{"title":"クリスマス？なにそれ？美味しいの？","id":"50","updated":"2015-12-25T09:02:32.000Z","date":"2015-12-25T09:02:32.000Z","_content":"\n一个妹子给我推荐了这个刷算法题换装的游戏。\n\n然而随着一道又一道的题目的通过，悲伤感越来越重却是怎么回事。\n\n在平安夜和圣诞节一个人对着电脑敲代码来给虚拟妹子解锁装扮也是够自虐的。\n![tu](https://ooo.0o0.ooo/2015/12/25/567d017589cbe.png)","source":"_posts/クリスマス？なにそれ？美味しいの？.md","raw":"---\ntitle: クリスマス？なにそれ？美味しいの？\ncategories:\n  - [技术, 算法]\npermalink: single-bell-2015\nid: 50\nupdated: '2015-12-25 17:02:32'\ndate: 2015-12-25 17:02:32\ntags:\n---\n\n一个妹子给我推荐了这个刷算法题换装的游戏。\n\n然而随着一道又一道的题目的通过，悲伤感越来越重却是怎么回事。\n\n在平安夜和圣诞节一个人对着电脑敲代码来给虚拟妹子解锁装扮也是够自虐的。\n![tu](https://ooo.0o0.ooo/2015/12/25/567d017589cbe.png)","slug":"single-bell-2015","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuoo000in7t42ptgmu1p","content":"<p>一个妹子给我推荐了这个刷算法题换装的游戏。</p>\n<p>然而随着一道又一道的题目的通过，悲伤感越来越重却是怎么回事。</p>\n<p>在平安夜和圣诞节一个人对着电脑敲代码来给虚拟妹子解锁装扮也是够自虐的。<br><img src=\"https://ooo.0o0.ooo/2015/12/25/567d017589cbe.png\" alt=\"tu\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一个妹子给我推荐了这个刷算法题换装的游戏。</p>\n<p>然而随着一道又一道的题目的通过，悲伤感越来越重却是怎么回事。</p>\n<p>在平安夜和圣诞节一个人对着电脑敲代码来给虚拟妹子解锁装扮也是够自虐的。<br><img src=\"https://ooo.0o0.ooo/2015/12/25/567d017589cbe.png\" alt=\"tu\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://ooo.0o0.ooo/2015/12/25/567d017589cbe.png","popularPost_tmp_gaData":{"updated":"Fri Dec 25 2015 17:02:32 GMT+0800 (China Standard Time)","title":"クリスマス？なにそれ？美味しいの？","path":"single-bell-2015/","eyeCatchImage":"https://ooo.0o0.ooo/2015/12/25/567d017589cbe.png","excerpt":null,"date":"2015-12-25T09:02:32.000Z","pv":0,"totalPV":0,"categories":"技术 > 算法","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":89},{"title":"为上一篇分析如何保存网络广播的博文追加一个脚本","id":"20","updated":"2014-07-21T16:09:25.000Z","date":"2014-07-21T15:28:48.000Z","_content":"\n\n在 [上一篇博文](http://blog.e10t.net/how-to-save-internet-radio/) 中，只是给出了提取“響”上的广播的 mms 协议地址的脚本，这些地址使用某雷来下载就可以了。但是其中有一节提到音泉上的广播是可以直接提取到 mp3 的地址的，这就意味着可以直接使用 http 协议来下载。\n\n于是我今天下午写了一个辅助的 python 脚本出来，方便自己用。\n\n直接上代码：\n\n```python\n#!/usr/bin/env python\n# _*_ coding: utf-8 _*_\n\nfrom bs4 import BeautifulSoup\nimport argparse\nimport urllib2\nimport sys\nimport json\n\n\ndef download_audio(name, proxy):\n\n    print(\"collecting information...\")\n    try:\n        respose = urllib2.urlopen(u\"http://www.onsen.ag/data/api/getMovieInfo/{name}\".format(name=name), timeout=60)\n        bangumi = json.loads((respose.read())[9:-3])\n    except Exception, e:\n        print(\"Error:{0}\".format(e))\n        return\n\n    path = bangumi[\"moviePath\"][\"pc\"]\n    filename = path[path.rindex(\"/\")+1:]\n\n    print(\"downloading...\")\n    if proxy is None:\n        import urllib\n        urllib.urlretrieve(path, filename=filename)\n    else:\n        if proxy[0] == \"http\":\n            # not sure whether this works...\n            import urllib\n            urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler({\"http\": proxy[1]})))\n            urllib.request.urlretrieve(path, filename=filename)\n        elif proxy[0] == \"socks\":\n            proxy_ip, proxy_port = proxy[1].split(\":\")\n            import socks\n            import socket\n            socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, proxy_ip, int(proxy_port))\n            socket.socket = socks.socksocket\n            import urllib\n            urllib.urlretrieve(path, filename=filename)\n\n\ndef download_images(name):\n    print(\"collecting information...\")\n    soup = BeautifulSoup(urllib2.urlopen(u\"http://www.onsen.ag/program/{name}/\".format(name=name), timeout=60))\n    print(\"downloading...\")\n    for pic in soup.select(\".newProgramLeft > img\"):\n        path = pic[\"src\"]\n        filename = path[path.rindex(\"/\")+1:]\n        import urllib\n        urllib.urlretrieve(u\"http://www.onsen.ag/program/{name}/\".format(name=name) + path, filename=filename)\n\n\ndef process(option, proxy):\n    print(\"processing...{0}\".format(option.name))\n\n    if option.image:\n        print(\"download images:\")\n        download_images(option.name)\n\n    if option.audio:\n        print(\"download audio:\")\n        download_audio(option.name, proxy)\n\n    print(\"Completed.\")\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(version=\"1.0\")\n\n    parser.add_argument(\"-i\", \"--image\", action=\"store_true\", dest=\"image\", help=\"download images\")\n    parser.add_argument(\"-a\", \"--audio\", action=\"store_true\", dest=\"audio\", help=\"download audio\")\n    proxy_group = parser.add_mutually_exclusive_group()\n    proxy_group.add_argument(\"--NOPROXY\", action=\"store_true\")\n    proxy_group.add_argument(\"-p\", \"--proxy\", nargs=2, action=\"store\", dest=\"proxy\", help=\"set the proxy address\", metavar=(\"http/socks\", \"PROXY_ADDRESS\"))\n    parser.add_argument(\"name\", action=\"store\", help=\"list of bangumi name, name\")\n\n    SUPPORT_PROXY = [\"http\", \"socks\"]\n\n    try:\n        args = parser.parse_args(sys.argv[1:])\n    except argparse.ArgumentError, e:\n        print(\"bad options: {0}\".format(e))\n    except argparse.ArgumentTypeError, e:\n        print(\"bad option value: {0}\".format(e))\n    else:\n        if args.NOPROXY:\n            process(args.name, None)\n        else:\n            if args.proxy[0] not in SUPPORT_PROXY:\n                print(\"proxy type {0} is not supported!\".format(args.proxy[0]))\n            else:\n                process(args, args.proxy)\n```\n\n脚本没什么好解释的，流程就是解析参数→执行 process 函数→调用图片下载函数 / 音频下载函数。其中的过程不过是上一篇文章中分析的结果而已。\n\n注意这个脚本需要配合 `SocksiPy` 来使用，就是一个 `socks.py` 的文件而已，点击[下载](http://sourceforge.net/projects/socksipy/files/latest/download)。\n\n为什么这么蛋疼，因为 urllib 不支持 socks 代理…… 而我使用的日本代理就是用 socks 的……\n\n我没有日本 ip 的 http 代理，所以无法测试 http 代理是否有效。如果有好心人测试一下，出问题的话请给我发邮件：draco.knight0#gmail.com\n\n最后再说说怎么用吧，方便那些连命令行都不会打的人。\n\n一般来说，如果你要下载一个广播，比如新番玻璃之唇的广播，那么你在访问这个广播在音泉上的主页，网址就是：http://www.onsen.ag/program/glasslip/\n\n看到 “program/” 后面的 “glasslip” 了吗？这个是广播的标识。\n\n那么你就在控制台运行：\n\n```bash\npython onsen.py -a -i --NOPROXY glasslip\n```\n\n* 参数 `-a` 代表下载音频，也可以用长参数 `--audio`\n* 参数 `-i` 代表下载图片，也可以用长参数 `--image`\n* 参数 `--NOPROXY` 表示不使用代理\n\n而因为音泉限制日本 ip，所以我花了大力气来支持代理的下载。\n\n比如你有一个使用 socks 协议的代理，本机开启的端点是 `127.0.0.1:8080`。\n\n那么就这样用：\n\n```bash\npython onsen.py -a -i -p socks 127.0.0.1:8080 glasslip\n```\n\n运行完之后大概会输出这么的东西：\n\n```bash\nprocessing...glasslip\ndownload images:\ncollecting information...\ndownloading...\ndownload audio:\ncollecting information...\ndownloading...\nCompleted.\n```\n\n就表示搞掂了，在脚本目录下找图片和 mp3 吧。\n\n一时忘了怎么用，直接加 `-h` 参数就可以了。\n\n```bash\npython onsen.py -h\n```","source":"_posts/为上一篇分析如何保存网络广播的博文追加一个脚本.md","raw":"---\ntitle: 为上一篇分析如何保存网络广播的博文追加一个脚本\ncategories:\n  - [技术, 黑客]\n  - [编程语言, python]\ntags: [python, script, spider, scraper]\npermalink: append-a-python-script-for-last-post-about-saving-internet-radio\nid: 20\nupdated: '2014-07-22 00:09:25'\ndate: 2014-07-21 23:28:48\n---\n\n\n在 [上一篇博文](http://blog.e10t.net/how-to-save-internet-radio/) 中，只是给出了提取“響”上的广播的 mms 协议地址的脚本，这些地址使用某雷来下载就可以了。但是其中有一节提到音泉上的广播是可以直接提取到 mp3 的地址的，这就意味着可以直接使用 http 协议来下载。\n\n于是我今天下午写了一个辅助的 python 脚本出来，方便自己用。\n\n直接上代码：\n\n```python\n#!/usr/bin/env python\n# _*_ coding: utf-8 _*_\n\nfrom bs4 import BeautifulSoup\nimport argparse\nimport urllib2\nimport sys\nimport json\n\n\ndef download_audio(name, proxy):\n\n    print(\"collecting information...\")\n    try:\n        respose = urllib2.urlopen(u\"http://www.onsen.ag/data/api/getMovieInfo/{name}\".format(name=name), timeout=60)\n        bangumi = json.loads((respose.read())[9:-3])\n    except Exception, e:\n        print(\"Error:{0}\".format(e))\n        return\n\n    path = bangumi[\"moviePath\"][\"pc\"]\n    filename = path[path.rindex(\"/\")+1:]\n\n    print(\"downloading...\")\n    if proxy is None:\n        import urllib\n        urllib.urlretrieve(path, filename=filename)\n    else:\n        if proxy[0] == \"http\":\n            # not sure whether this works...\n            import urllib\n            urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler({\"http\": proxy[1]})))\n            urllib.request.urlretrieve(path, filename=filename)\n        elif proxy[0] == \"socks\":\n            proxy_ip, proxy_port = proxy[1].split(\":\")\n            import socks\n            import socket\n            socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, proxy_ip, int(proxy_port))\n            socket.socket = socks.socksocket\n            import urllib\n            urllib.urlretrieve(path, filename=filename)\n\n\ndef download_images(name):\n    print(\"collecting information...\")\n    soup = BeautifulSoup(urllib2.urlopen(u\"http://www.onsen.ag/program/{name}/\".format(name=name), timeout=60))\n    print(\"downloading...\")\n    for pic in soup.select(\".newProgramLeft > img\"):\n        path = pic[\"src\"]\n        filename = path[path.rindex(\"/\")+1:]\n        import urllib\n        urllib.urlretrieve(u\"http://www.onsen.ag/program/{name}/\".format(name=name) + path, filename=filename)\n\n\ndef process(option, proxy):\n    print(\"processing...{0}\".format(option.name))\n\n    if option.image:\n        print(\"download images:\")\n        download_images(option.name)\n\n    if option.audio:\n        print(\"download audio:\")\n        download_audio(option.name, proxy)\n\n    print(\"Completed.\")\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(version=\"1.0\")\n\n    parser.add_argument(\"-i\", \"--image\", action=\"store_true\", dest=\"image\", help=\"download images\")\n    parser.add_argument(\"-a\", \"--audio\", action=\"store_true\", dest=\"audio\", help=\"download audio\")\n    proxy_group = parser.add_mutually_exclusive_group()\n    proxy_group.add_argument(\"--NOPROXY\", action=\"store_true\")\n    proxy_group.add_argument(\"-p\", \"--proxy\", nargs=2, action=\"store\", dest=\"proxy\", help=\"set the proxy address\", metavar=(\"http/socks\", \"PROXY_ADDRESS\"))\n    parser.add_argument(\"name\", action=\"store\", help=\"list of bangumi name, name\")\n\n    SUPPORT_PROXY = [\"http\", \"socks\"]\n\n    try:\n        args = parser.parse_args(sys.argv[1:])\n    except argparse.ArgumentError, e:\n        print(\"bad options: {0}\".format(e))\n    except argparse.ArgumentTypeError, e:\n        print(\"bad option value: {0}\".format(e))\n    else:\n        if args.NOPROXY:\n            process(args.name, None)\n        else:\n            if args.proxy[0] not in SUPPORT_PROXY:\n                print(\"proxy type {0} is not supported!\".format(args.proxy[0]))\n            else:\n                process(args, args.proxy)\n```\n\n脚本没什么好解释的，流程就是解析参数→执行 process 函数→调用图片下载函数 / 音频下载函数。其中的过程不过是上一篇文章中分析的结果而已。\n\n注意这个脚本需要配合 `SocksiPy` 来使用，就是一个 `socks.py` 的文件而已，点击[下载](http://sourceforge.net/projects/socksipy/files/latest/download)。\n\n为什么这么蛋疼，因为 urllib 不支持 socks 代理…… 而我使用的日本代理就是用 socks 的……\n\n我没有日本 ip 的 http 代理，所以无法测试 http 代理是否有效。如果有好心人测试一下，出问题的话请给我发邮件：draco.knight0#gmail.com\n\n最后再说说怎么用吧，方便那些连命令行都不会打的人。\n\n一般来说，如果你要下载一个广播，比如新番玻璃之唇的广播，那么你在访问这个广播在音泉上的主页，网址就是：http://www.onsen.ag/program/glasslip/\n\n看到 “program/” 后面的 “glasslip” 了吗？这个是广播的标识。\n\n那么你就在控制台运行：\n\n```bash\npython onsen.py -a -i --NOPROXY glasslip\n```\n\n* 参数 `-a` 代表下载音频，也可以用长参数 `--audio`\n* 参数 `-i` 代表下载图片，也可以用长参数 `--image`\n* 参数 `--NOPROXY` 表示不使用代理\n\n而因为音泉限制日本 ip，所以我花了大力气来支持代理的下载。\n\n比如你有一个使用 socks 协议的代理，本机开启的端点是 `127.0.0.1:8080`。\n\n那么就这样用：\n\n```bash\npython onsen.py -a -i -p socks 127.0.0.1:8080 glasslip\n```\n\n运行完之后大概会输出这么的东西：\n\n```bash\nprocessing...glasslip\ndownload images:\ncollecting information...\ndownloading...\ndownload audio:\ncollecting information...\ndownloading...\nCompleted.\n```\n\n就表示搞掂了，在脚本目录下找图片和 mp3 吧。\n\n一时忘了怎么用，直接加 `-h` 参数就可以了。\n\n```bash\npython onsen.py -h\n```","slug":"append-a-python-script-for-last-post-about-saving-internet-radio","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuoq000ln7t46bsmrtzj","content":"<p>在 <a href=\"http://blog.e10t.net/how-to-save-internet-radio/\">上一篇博文</a> 中，只是给出了提取“響”上的广播的 mms 协议地址的脚本，这些地址使用某雷来下载就可以了。但是其中有一节提到音泉上的广播是可以直接提取到 mp3 的地址的，这就意味着可以直接使用 http 协议来下载。</p>\n<p>于是我今天下午写了一个辅助的 python 脚本出来，方便自己用。</p>\n<p>直接上代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># _*_ coding: utf-8 _*_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib2</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download_audio</span><span class=\"params\">(name, proxy)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"collecting information...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        respose = urllib2.urlopen(<span class=\"string\">u\"http://www.onsen.ag/data/api/getMovieInfo/&#123;name&#125;\"</span>.format(name=name), timeout=<span class=\"number\">60</span>)</span><br><span class=\"line\">        bangumi = json.loads((respose.read())[<span class=\"number\">9</span>:<span class=\"number\">-3</span>])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception, e:</span><br><span class=\"line\">        print(<span class=\"string\">\"Error:&#123;0&#125;\"</span>.format(e))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    path = bangumi[<span class=\"string\">\"moviePath\"</span>][<span class=\"string\">\"pc\"</span>]</span><br><span class=\"line\">    filename = path[path.rindex(<span class=\"string\">\"/\"</span>)+<span class=\"number\">1</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"downloading...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> proxy <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">import</span> urllib</span><br><span class=\"line\">        urllib.urlretrieve(path, filename=filename)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> proxy[<span class=\"number\">0</span>] == <span class=\"string\">\"http\"</span>:</span><br><span class=\"line\">            <span class=\"comment\"># not sure whether this works...</span></span><br><span class=\"line\">            <span class=\"keyword\">import</span> urllib</span><br><span class=\"line\">            urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler(&#123;<span class=\"string\">\"http\"</span>: proxy[<span class=\"number\">1</span>]&#125;)))</span><br><span class=\"line\">            urllib.request.urlretrieve(path, filename=filename)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> proxy[<span class=\"number\">0</span>] == <span class=\"string\">\"socks\"</span>:</span><br><span class=\"line\">            proxy_ip, proxy_port = proxy[<span class=\"number\">1</span>].split(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">import</span> socks</span><br><span class=\"line\">            <span class=\"keyword\">import</span> socket</span><br><span class=\"line\">            socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, proxy_ip, int(proxy_port))</span><br><span class=\"line\">            socket.socket = socks.socksocket</span><br><span class=\"line\">            <span class=\"keyword\">import</span> urllib</span><br><span class=\"line\">            urllib.urlretrieve(path, filename=filename)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download_images</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"collecting information...\"</span>)</span><br><span class=\"line\">    soup = BeautifulSoup(urllib2.urlopen(<span class=\"string\">u\"http://www.onsen.ag/program/&#123;name&#125;/\"</span>.format(name=name), timeout=<span class=\"number\">60</span>))</span><br><span class=\"line\">    print(<span class=\"string\">\"downloading...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pic <span class=\"keyword\">in</span> soup.select(<span class=\"string\">\".newProgramLeft &gt; img\"</span>):</span><br><span class=\"line\">        path = pic[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">        filename = path[path.rindex(<span class=\"string\">\"/\"</span>)+<span class=\"number\">1</span>:]</span><br><span class=\"line\">        <span class=\"keyword\">import</span> urllib</span><br><span class=\"line\">        urllib.urlretrieve(<span class=\"string\">u\"http://www.onsen.ag/program/&#123;name&#125;/\"</span>.format(name=name) + path, filename=filename)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process</span><span class=\"params\">(option, proxy)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"processing...&#123;0&#125;\"</span>.format(option.name))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> option.image:</span><br><span class=\"line\">        print(<span class=\"string\">\"download images:\"</span>)</span><br><span class=\"line\">        download_images(option.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> option.audio:</span><br><span class=\"line\">        print(<span class=\"string\">\"download audio:\"</span>)</span><br><span class=\"line\">        download_audio(option.name, proxy)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"Completed.\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    parser = argparse.ArgumentParser(version=<span class=\"string\">\"1.0\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">\"-i\"</span>, <span class=\"string\">\"--image\"</span>, action=<span class=\"string\">\"store_true\"</span>, dest=<span class=\"string\">\"image\"</span>, help=<span class=\"string\">\"download images\"</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">\"-a\"</span>, <span class=\"string\">\"--audio\"</span>, action=<span class=\"string\">\"store_true\"</span>, dest=<span class=\"string\">\"audio\"</span>, help=<span class=\"string\">\"download audio\"</span>)</span><br><span class=\"line\">    proxy_group = parser.add_mutually_exclusive_group()</span><br><span class=\"line\">    proxy_group.add_argument(<span class=\"string\">\"--NOPROXY\"</span>, action=<span class=\"string\">\"store_true\"</span>)</span><br><span class=\"line\">    proxy_group.add_argument(<span class=\"string\">\"-p\"</span>, <span class=\"string\">\"--proxy\"</span>, nargs=<span class=\"number\">2</span>, action=<span class=\"string\">\"store\"</span>, dest=<span class=\"string\">\"proxy\"</span>, help=<span class=\"string\">\"set the proxy address\"</span>, metavar=(<span class=\"string\">\"http/socks\"</span>, <span class=\"string\">\"PROXY_ADDRESS\"</span>))</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">\"name\"</span>, action=<span class=\"string\">\"store\"</span>, help=<span class=\"string\">\"list of bangumi name, name\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    SUPPORT_PROXY = [<span class=\"string\">\"http\"</span>, <span class=\"string\">\"socks\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        args = parser.parse_args(sys.argv[<span class=\"number\">1</span>:])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> argparse.ArgumentError, e:</span><br><span class=\"line\">        print(<span class=\"string\">\"bad options: &#123;0&#125;\"</span>.format(e))</span><br><span class=\"line\">    <span class=\"keyword\">except</span> argparse.ArgumentTypeError, e:</span><br><span class=\"line\">        print(<span class=\"string\">\"bad option value: &#123;0&#125;\"</span>.format(e))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args.NOPROXY:</span><br><span class=\"line\">            process(args.name, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> args.proxy[<span class=\"number\">0</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> SUPPORT_PROXY:</span><br><span class=\"line\">                print(<span class=\"string\">\"proxy type &#123;0&#125; is not supported!\"</span>.format(args.proxy[<span class=\"number\">0</span>]))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                process(args, args.proxy)</span><br></pre></td></tr></table></figure>\n<p>脚本没什么好解释的，流程就是解析参数→执行 process 函数→调用图片下载函数 / 音频下载函数。其中的过程不过是上一篇文章中分析的结果而已。</p>\n<p>注意这个脚本需要配合 <code>SocksiPy</code> 来使用，就是一个 <code>socks.py</code> 的文件而已，点击<a href=\"http://sourceforge.net/projects/socksipy/files/latest/download\" target=\"_blank\" rel=\"noopener\">下载</a>。</p>\n<p>为什么这么蛋疼，因为 urllib 不支持 socks 代理…… 而我使用的日本代理就是用 socks 的……</p>\n<p>我没有日本 ip 的 http 代理，所以无法测试 http 代理是否有效。如果有好心人测试一下，出问题的话请给我发邮件：draco.knight0#gmail.com</p>\n<p>最后再说说怎么用吧，方便那些连命令行都不会打的人。</p>\n<p>一般来说，如果你要下载一个广播，比如新番玻璃之唇的广播，那么你在访问这个广播在音泉上的主页，网址就是：<a href=\"http://www.onsen.ag/program/glasslip/\" target=\"_blank\" rel=\"noopener\">http://www.onsen.ag/program/glasslip/</a></p>\n<p>看到 “program/” 后面的 “glasslip” 了吗？这个是广播的标识。</p>\n<p>那么你就在控制台运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python onsen.py -a -i --NOPROXY glasslip</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参数 <code>-a</code> 代表下载音频，也可以用长参数 <code>--audio</code></li>\n<li>参数 <code>-i</code> 代表下载图片，也可以用长参数 <code>--image</code></li>\n<li>参数 <code>--NOPROXY</code> 表示不使用代理</li>\n</ul>\n<p>而因为音泉限制日本 ip，所以我花了大力气来支持代理的下载。</p>\n<p>比如你有一个使用 socks 协议的代理，本机开启的端点是 <code>127.0.0.1:8080</code>。</p>\n<p>那么就这样用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python onsen.py -a -i -p socks 127.0.0.1:8080 glasslip</span><br></pre></td></tr></table></figure>\n<p>运行完之后大概会输出这么的东西：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processing...glasslip</span><br><span class=\"line\">download images:</span><br><span class=\"line\">collecting information...</span><br><span class=\"line\">downloading...</span><br><span class=\"line\">download audio:</span><br><span class=\"line\">collecting information...</span><br><span class=\"line\">downloading...</span><br><span class=\"line\">Completed.</span><br></pre></td></tr></table></figure>\n<p>就表示搞掂了，在脚本目录下找图片和 mp3 吧。</p>\n<p>一时忘了怎么用，直接加 <code>-h</code> 参数就可以了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python onsen.py -h</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>在 <a href=\"http://blog.e10t.net/how-to-save-internet-radio/\">上一篇博文</a> 中，只是给出了提取“響”上的广播的 mms 协议地址的脚本，这些地址使用某雷来下载就可以了。但是其中有一节提到音泉上的广播是可以直接提取到 mp3 的地址的，这就意味着可以直接使用 http 协议来下载。</p>\n<p>于是我今天下午写了一个辅助的 python 脚本出来，方便自己用。</p>\n<p>直接上代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># _*_ coding: utf-8 _*_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib2</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download_audio</span><span class=\"params\">(name, proxy)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"collecting information...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        respose = urllib2.urlopen(<span class=\"string\">u\"http://www.onsen.ag/data/api/getMovieInfo/&#123;name&#125;\"</span>.format(name=name), timeout=<span class=\"number\">60</span>)</span><br><span class=\"line\">        bangumi = json.loads((respose.read())[<span class=\"number\">9</span>:<span class=\"number\">-3</span>])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception, e:</span><br><span class=\"line\">        print(<span class=\"string\">\"Error:&#123;0&#125;\"</span>.format(e))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    path = bangumi[<span class=\"string\">\"moviePath\"</span>][<span class=\"string\">\"pc\"</span>]</span><br><span class=\"line\">    filename = path[path.rindex(<span class=\"string\">\"/\"</span>)+<span class=\"number\">1</span>:]</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"downloading...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> proxy <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">import</span> urllib</span><br><span class=\"line\">        urllib.urlretrieve(path, filename=filename)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> proxy[<span class=\"number\">0</span>] == <span class=\"string\">\"http\"</span>:</span><br><span class=\"line\">            <span class=\"comment\"># not sure whether this works...</span></span><br><span class=\"line\">            <span class=\"keyword\">import</span> urllib</span><br><span class=\"line\">            urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler(&#123;<span class=\"string\">\"http\"</span>: proxy[<span class=\"number\">1</span>]&#125;)))</span><br><span class=\"line\">            urllib.request.urlretrieve(path, filename=filename)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> proxy[<span class=\"number\">0</span>] == <span class=\"string\">\"socks\"</span>:</span><br><span class=\"line\">            proxy_ip, proxy_port = proxy[<span class=\"number\">1</span>].split(<span class=\"string\">\":\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">import</span> socks</span><br><span class=\"line\">            <span class=\"keyword\">import</span> socket</span><br><span class=\"line\">            socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, proxy_ip, int(proxy_port))</span><br><span class=\"line\">            socket.socket = socks.socksocket</span><br><span class=\"line\">            <span class=\"keyword\">import</span> urllib</span><br><span class=\"line\">            urllib.urlretrieve(path, filename=filename)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">download_images</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"collecting information...\"</span>)</span><br><span class=\"line\">    soup = BeautifulSoup(urllib2.urlopen(<span class=\"string\">u\"http://www.onsen.ag/program/&#123;name&#125;/\"</span>.format(name=name), timeout=<span class=\"number\">60</span>))</span><br><span class=\"line\">    print(<span class=\"string\">\"downloading...\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> pic <span class=\"keyword\">in</span> soup.select(<span class=\"string\">\".newProgramLeft &gt; img\"</span>):</span><br><span class=\"line\">        path = pic[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">        filename = path[path.rindex(<span class=\"string\">\"/\"</span>)+<span class=\"number\">1</span>:]</span><br><span class=\"line\">        <span class=\"keyword\">import</span> urllib</span><br><span class=\"line\">        urllib.urlretrieve(<span class=\"string\">u\"http://www.onsen.ag/program/&#123;name&#125;/\"</span>.format(name=name) + path, filename=filename)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process</span><span class=\"params\">(option, proxy)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">\"processing...&#123;0&#125;\"</span>.format(option.name))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> option.image:</span><br><span class=\"line\">        print(<span class=\"string\">\"download images:\"</span>)</span><br><span class=\"line\">        download_images(option.name)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> option.audio:</span><br><span class=\"line\">        print(<span class=\"string\">\"download audio:\"</span>)</span><br><span class=\"line\">        download_audio(option.name, proxy)</span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">\"Completed.\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    parser = argparse.ArgumentParser(version=<span class=\"string\">\"1.0\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">\"-i\"</span>, <span class=\"string\">\"--image\"</span>, action=<span class=\"string\">\"store_true\"</span>, dest=<span class=\"string\">\"image\"</span>, help=<span class=\"string\">\"download images\"</span>)</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">\"-a\"</span>, <span class=\"string\">\"--audio\"</span>, action=<span class=\"string\">\"store_true\"</span>, dest=<span class=\"string\">\"audio\"</span>, help=<span class=\"string\">\"download audio\"</span>)</span><br><span class=\"line\">    proxy_group = parser.add_mutually_exclusive_group()</span><br><span class=\"line\">    proxy_group.add_argument(<span class=\"string\">\"--NOPROXY\"</span>, action=<span class=\"string\">\"store_true\"</span>)</span><br><span class=\"line\">    proxy_group.add_argument(<span class=\"string\">\"-p\"</span>, <span class=\"string\">\"--proxy\"</span>, nargs=<span class=\"number\">2</span>, action=<span class=\"string\">\"store\"</span>, dest=<span class=\"string\">\"proxy\"</span>, help=<span class=\"string\">\"set the proxy address\"</span>, metavar=(<span class=\"string\">\"http/socks\"</span>, <span class=\"string\">\"PROXY_ADDRESS\"</span>))</span><br><span class=\"line\">    parser.add_argument(<span class=\"string\">\"name\"</span>, action=<span class=\"string\">\"store\"</span>, help=<span class=\"string\">\"list of bangumi name, name\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    SUPPORT_PROXY = [<span class=\"string\">\"http\"</span>, <span class=\"string\">\"socks\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        args = parser.parse_args(sys.argv[<span class=\"number\">1</span>:])</span><br><span class=\"line\">    <span class=\"keyword\">except</span> argparse.ArgumentError, e:</span><br><span class=\"line\">        print(<span class=\"string\">\"bad options: &#123;0&#125;\"</span>.format(e))</span><br><span class=\"line\">    <span class=\"keyword\">except</span> argparse.ArgumentTypeError, e:</span><br><span class=\"line\">        print(<span class=\"string\">\"bad option value: &#123;0&#125;\"</span>.format(e))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> args.NOPROXY:</span><br><span class=\"line\">            process(args.name, <span class=\"literal\">None</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> args.proxy[<span class=\"number\">0</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> SUPPORT_PROXY:</span><br><span class=\"line\">                print(<span class=\"string\">\"proxy type &#123;0&#125; is not supported!\"</span>.format(args.proxy[<span class=\"number\">0</span>]))</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                process(args, args.proxy)</span><br></pre></td></tr></table></figure>\n<p>脚本没什么好解释的，流程就是解析参数→执行 process 函数→调用图片下载函数 / 音频下载函数。其中的过程不过是上一篇文章中分析的结果而已。</p>\n<p>注意这个脚本需要配合 <code>SocksiPy</code> 来使用，就是一个 <code>socks.py</code> 的文件而已，点击<a href=\"http://sourceforge.net/projects/socksipy/files/latest/download\" target=\"_blank\" rel=\"noopener\">下载</a>。</p>\n<p>为什么这么蛋疼，因为 urllib 不支持 socks 代理…… 而我使用的日本代理就是用 socks 的……</p>\n<p>我没有日本 ip 的 http 代理，所以无法测试 http 代理是否有效。如果有好心人测试一下，出问题的话请给我发邮件：draco.knight0#gmail.com</p>\n<p>最后再说说怎么用吧，方便那些连命令行都不会打的人。</p>\n<p>一般来说，如果你要下载一个广播，比如新番玻璃之唇的广播，那么你在访问这个广播在音泉上的主页，网址就是：<a href=\"http://www.onsen.ag/program/glasslip/\" target=\"_blank\" rel=\"noopener\">http://www.onsen.ag/program/glasslip/</a></p>\n<p>看到 “program/” 后面的 “glasslip” 了吗？这个是广播的标识。</p>\n<p>那么你就在控制台运行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python onsen.py -a -i --NOPROXY glasslip</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参数 <code>-a</code> 代表下载音频，也可以用长参数 <code>--audio</code></li>\n<li>参数 <code>-i</code> 代表下载图片，也可以用长参数 <code>--image</code></li>\n<li>参数 <code>--NOPROXY</code> 表示不使用代理</li>\n</ul>\n<p>而因为音泉限制日本 ip，所以我花了大力气来支持代理的下载。</p>\n<p>比如你有一个使用 socks 协议的代理，本机开启的端点是 <code>127.0.0.1:8080</code>。</p>\n<p>那么就这样用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python onsen.py -a -i -p socks 127.0.0.1:8080 glasslip</span><br></pre></td></tr></table></figure>\n<p>运行完之后大概会输出这么的东西：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">processing...glasslip</span><br><span class=\"line\">download images:</span><br><span class=\"line\">collecting information...</span><br><span class=\"line\">downloading...</span><br><span class=\"line\">download audio:</span><br><span class=\"line\">collecting information...</span><br><span class=\"line\">downloading...</span><br><span class=\"line\">Completed.</span><br></pre></td></tr></table></figure>\n<p>就表示搞掂了，在脚本目录下找图片和 mp3 吧。</p>\n<p>一时忘了怎么用，直接加 <code>-h</code> 参数就可以了。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python onsen.py -h</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Jul 22 2014 00:09:25 GMT+0800 (China Standard Time)","title":"为上一篇分析如何保存网络广播的博文追加一个脚本","path":"append-a-python-script-for-last-post-about-saving-internet-radio/","eyeCatchImage":null,"excerpt":null,"date":"2014-07-21T15:28:48.000Z","pv":0,"totalPV":0,"categories":"技术 > 黑客 > 编程语言 > python","tags":["python","script","spider","scraper"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":821},{"title":"四川实训遗诗一首","id":"27","updated":"2014-07-08T15:18:48.000Z","date":"2014-07-08T15:11:23.000Z","_content":"\n癸巳年六月，入蜀实训，郁郁而周游。登青城、峨嵋，过乐山，临都江堰，拜杜甫草堂。然最是安逸处，除乐山大佛旁无人游览之东坡楼外无他。\n\n入蜀\n\n皇令今入蜀，至秋不得归。\n\n万里马前尘，三更枕上泪。\n\n乐山风花瘦，金顶日月亏。\n\n独上东坡楼，公与吾与谁？\n\n![苏轼](http://i.imgur.com/KdXgYn9.jpg)","source":"_posts/四川实训遗诗一首.md","raw":"---\ntitle: 四川实训遗诗一首\ncategories:\n  - [生活, 诗]\ntags: [poem]\npermalink: a-poem-after-the-train-in-sichuan\nid: 27\nupdated: '2014-07-08 23:18:48'\ndate: 2014-07-08 23:11:23\n---\n\n癸巳年六月，入蜀实训，郁郁而周游。登青城、峨嵋，过乐山，临都江堰，拜杜甫草堂。然最是安逸处，除乐山大佛旁无人游览之东坡楼外无他。\n\n入蜀\n\n皇令今入蜀，至秋不得归。\n\n万里马前尘，三更枕上泪。\n\n乐山风花瘦，金顶日月亏。\n\n独上东坡楼，公与吾与谁？\n\n![苏轼](http://i.imgur.com/KdXgYn9.jpg)","slug":"a-poem-after-the-train-in-sichuan","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuor000mn7t4l8wqcjlf","content":"<p>癸巳年六月，入蜀实训，郁郁而周游。登青城、峨嵋，过乐山，临都江堰，拜杜甫草堂。然最是安逸处，除乐山大佛旁无人游览之东坡楼外无他。</p>\n<p>入蜀</p>\n<p>皇令今入蜀，至秋不得归。</p>\n<p>万里马前尘，三更枕上泪。</p>\n<p>乐山风花瘦，金顶日月亏。</p>\n<p>独上东坡楼，公与吾与谁？</p>\n<p><img src=\"http://i.imgur.com/KdXgYn9.jpg\" alt=\"苏轼\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>癸巳年六月，入蜀实训，郁郁而周游。登青城、峨嵋，过乐山，临都江堰，拜杜甫草堂。然最是安逸处，除乐山大佛旁无人游览之东坡楼外无他。</p>\n<p>入蜀</p>\n<p>皇令今入蜀，至秋不得归。</p>\n<p>万里马前尘，三更枕上泪。</p>\n<p>乐山风花瘦，金顶日月亏。</p>\n<p>独上东坡楼，公与吾与谁？</p>\n<p><img src=\"http://i.imgur.com/KdXgYn9.jpg\" alt=\"苏轼\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"http://i.imgur.com/KdXgYn9.jpg","popularPost_tmp_gaData":{"updated":"Tue Jul 08 2014 23:18:48 GMT+0800 (China Standard Time)","title":"四川实训遗诗一首","path":"a-poem-after-the-train-in-sichuan/","eyeCatchImage":"http://i.imgur.com/KdXgYn9.jpg","excerpt":null,"date":"2014-07-08T15:11:23.000Z","pv":0,"totalPV":0,"categories":"生活 > 诗","tags":["poem"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":121},{"title":"拔牙","id":"23","updated":"2014-08-08T05:39:55.000Z","date":"2014-08-08T05:39:25.000Z","_content":"\n身体放平躺在手术台，双手交叉轻放小腹，闭上双眼，缓慢呼吸两次，眉头难得地放松，往事便像歌剧一般在眼前上演。\n\n“痛？”\n\n“嗯。”\n\n“给你打多点麻醉。”\n\n对于习惯性麻醉自己的人，麻醉剂是不够的。\n\n“开始拔了。”\n\n器械在里面费力的扭动。我好像感受到什么但什么感觉都没有。\n\n“好，拔完。”\n\n当。\n\n哪里传来清脆的金属撞击声，昭示着身体的一些东西被剥离了出来。\n\n“咬紧。”\n\n尽力让自己咬牙切齿，但似乎很难，不习惯做这种愤怒的表情。真是个善良的可怜虫。\n\n然后以棉花代替了的那个部位开始清晰而又稳定地传来无法以想像来减轻的疼痛信号——如果脱了真能损伤智慧，那么原因一定是这噬心吮骨的失恋般的幽痛。\n\n习惯性摸出手机打算拍一下那颗石头一般粘着血的东西，转念一想还是算了，往日之日不可留。\n\n而且——\n\n还有三次。","source":"_posts/拔牙.md","raw":"---\ntitle: 拔牙\ncategories:\n  - [生活, 杂]\ntags: [life]\npermalink: dental-extraction\nid: 23\nupdated: '2014-08-08 13:39:55'\ndate: 2014-08-08 13:39:25\n---\n\n身体放平躺在手术台，双手交叉轻放小腹，闭上双眼，缓慢呼吸两次，眉头难得地放松，往事便像歌剧一般在眼前上演。\n\n“痛？”\n\n“嗯。”\n\n“给你打多点麻醉。”\n\n对于习惯性麻醉自己的人，麻醉剂是不够的。\n\n“开始拔了。”\n\n器械在里面费力的扭动。我好像感受到什么但什么感觉都没有。\n\n“好，拔完。”\n\n当。\n\n哪里传来清脆的金属撞击声，昭示着身体的一些东西被剥离了出来。\n\n“咬紧。”\n\n尽力让自己咬牙切齿，但似乎很难，不习惯做这种愤怒的表情。真是个善良的可怜虫。\n\n然后以棉花代替了的那个部位开始清晰而又稳定地传来无法以想像来减轻的疼痛信号——如果脱了真能损伤智慧，那么原因一定是这噬心吮骨的失恋般的幽痛。\n\n习惯性摸出手机打算拍一下那颗石头一般粘着血的东西，转念一想还是算了，往日之日不可留。\n\n而且——\n\n还有三次。","slug":"dental-extraction","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuos000pn7t47ae2wgh3","content":"<p>身体放平躺在手术台，双手交叉轻放小腹，闭上双眼，缓慢呼吸两次，眉头难得地放松，往事便像歌剧一般在眼前上演。</p>\n<p>“痛？”</p>\n<p>“嗯。”</p>\n<p>“给你打多点麻醉。”</p>\n<p>对于习惯性麻醉自己的人，麻醉剂是不够的。</p>\n<p>“开始拔了。”</p>\n<p>器械在里面费力的扭动。我好像感受到什么但什么感觉都没有。</p>\n<p>“好，拔完。”</p>\n<p>当。</p>\n<p>哪里传来清脆的金属撞击声，昭示着身体的一些东西被剥离了出来。</p>\n<p>“咬紧。”</p>\n<p>尽力让自己咬牙切齿，但似乎很难，不习惯做这种愤怒的表情。真是个善良的可怜虫。</p>\n<p>然后以棉花代替了的那个部位开始清晰而又稳定地传来无法以想像来减轻的疼痛信号——如果脱了真能损伤智慧，那么原因一定是这噬心吮骨的失恋般的幽痛。</p>\n<p>习惯性摸出手机打算拍一下那颗石头一般粘着血的东西，转念一想还是算了，往日之日不可留。</p>\n<p>而且——</p>\n<p>还有三次。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>身体放平躺在手术台，双手交叉轻放小腹，闭上双眼，缓慢呼吸两次，眉头难得地放松，往事便像歌剧一般在眼前上演。</p>\n<p>“痛？”</p>\n<p>“嗯。”</p>\n<p>“给你打多点麻醉。”</p>\n<p>对于习惯性麻醉自己的人，麻醉剂是不够的。</p>\n<p>“开始拔了。”</p>\n<p>器械在里面费力的扭动。我好像感受到什么但什么感觉都没有。</p>\n<p>“好，拔完。”</p>\n<p>当。</p>\n<p>哪里传来清脆的金属撞击声，昭示着身体的一些东西被剥离了出来。</p>\n<p>“咬紧。”</p>\n<p>尽力让自己咬牙切齿，但似乎很难，不习惯做这种愤怒的表情。真是个善良的可怜虫。</p>\n<p>然后以棉花代替了的那个部位开始清晰而又稳定地传来无法以想像来减轻的疼痛信号——如果脱了真能损伤智慧，那么原因一定是这噬心吮骨的失恋般的幽痛。</p>\n<p>习惯性摸出手机打算拍一下那颗石头一般粘着血的东西，转念一想还是算了，往日之日不可留。</p>\n<p>而且——</p>\n<p>还有三次。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri Aug 08 2014 13:39:55 GMT+0800 (China Standard Time)","title":"拔牙","path":"dental-extraction/","eyeCatchImage":null,"excerpt":null,"date":"2014-08-08T05:39:25.000Z","pv":0,"totalPV":0,"categories":"生活 > 杂","tags":["life"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":345},{"title":"深圳 EVA EXPO 2.0 相片选 [97p]","id":"31","updated":"2014-12-30T17:09:36.000Z","date":"2014-12-30T17:07:34.000Z","_content":"\n这个展在深圳举办，持续一个月到 1.3。刚好我考研结束，于是就去咯。\n\n由于我又不是宅男，所以没有加入什么宅的 QQ 群啊豆瓣小组什么的，于是只能自己盘算怎么去。最后是我爸和我一起去了。\n\n本来深圳并不远，想去的话难度并不大，实际上我只是想顺便熟悉一下新买的 SONY RX100 的操作，刚好也觉得 EVA 这作品不错……\n\n废话不多说，下面基本都是图了。本来照了近二百六十张，就选了 97p 出来，再缩小了一下方便大家看。\n\n不知道是不是因为非节假日，会场门可罗雀。\n\n![会场门可罗雀](https://i.imgur.com/vvIdSVH.jpg)\n\n门口标志性的初号机头。\n\n![初号机头](https://i.imgur.com/gZfxVpy.jpg)\n\n![expo](https://i.imgur.com/1NxEn0C.jpg)\n\n可爱的灯饰？\n\n![灯饰 1](https://i.imgur.com/Qv9OjLi.jpg)\n\n![灯饰 2](https://i.imgur.com/asz6OeR.jpg)\n\n![灯饰 3](https://i.imgur.com/6FcEtFc.jpg)\n\n![灯饰 4](https://i.imgur.com/x0vZxG5.jpg)\n\n进场内了。\n\n展示的一些原画。\n\n![原画 1](https://i.imgur.com/DI9hKcW.jpg)\n\n![原画 2](https://i.imgur.com/GVHc4wr.jpg)\n\n![原画 3](https://i.imgur.com/Di4H1wx.jpg)\n\n![进去](https://i.imgur.com/v3JRVvZ.jpg)\n\n女神叫你喝，不喝还是人？！喝喝喝！\n\n![喝喝喝](https://i.imgur.com/dY9nAOW.jpg)\n\n书柜，丽战斗服 ver，手办\n\n![书柜 1](https://i.imgur.com/MbJCfU0.jpg)\n\n![书柜 2](https://i.imgur.com/p9WgXJl.jpg)\n\n![丽战斗服 ver](https://i.imgur.com/1PlL5Nd.jpg)\n\n![还原手办 1](https://i.imgur.com/mwM3y1y.jpg)\n\n![还原手办 2](https://i.imgur.com/SALzMpR.jpg)\n\n分镜～\n\n![分镜 1](https://i.imgur.com/4r2trQ0.jpg)\n\n![分镜 2](https://i.imgur.com/8kCpEWN.jpg)\n\n![分镜 3](https://i.imgur.com/FuETQ6K.jpg)\n\n香香叫你买，不买还是人？！买买买！\n\n![买买买](https://i.imgur.com/ClvPxrp.jpg)\n\n上二楼\n\n![上楼](https://i.imgur.com/l1BwAIq.jpg)\n\n<del > 实际上最后我什么都没有买 </del>\n\n初号机和第三使徒水天使\n\n![初号机和第三使徒水天使 1](https://i.imgur.com/sDsn5KH.jpg)\n\n![初号机和第三使徒水天使 2](https://i.imgur.com/1ykr4GF.jpg)\n\n![初号机和第三使徒水天使 3](https://i.imgur.com/sBud8C3.jpg)\n\n![初号机和第三使徒水天使 4](https://i.imgur.com/JGZXuXE.jpg)\n\n![初号机和第三使徒水天使 5](https://i.imgur.com/WAQWMjM.jpg)\n\n游客的…… 寄语？\n\n![寄语 1](https://i.imgur.com/tUrMOJ1.jpg)\n\n![寄语 2](https://i.imgur.com/HMP8i0P.jpg)\n\n![寄语 3](https://i.imgur.com/PMpF8gT.jpg)\n\n各种奇怪海报\n\n![海报 1](https://i.imgur.com/n673pDw.jpg)\n\n![海报 2](https://i.imgur.com/n1RThef.jpg)\n\n![海报 3](https://i.imgur.com/lLO5l29.jpg)\n\n二楼的中间地方都是放手办和周边，多到离谱。\n\n![手办和周边 1](https://i.imgur.com/pW6tcKh.jpg)\n\n![手办和周边 2](https://i.imgur.com/kyfQorS.jpg)\n\n![手办和周边 3](https://i.imgur.com/RR8UGmv.jpg)\n\n亚当？\n\n![亚当](https://i.imgur.com/rIo4ix4.jpg)\n\n![手办和周边 4](https://i.imgur.com/gWu4kkb.jpg)\n\n![手办和周边 5](https://i.imgur.com/VY6wyN0.jpg)\n\n![手办和周边 6](https://i.imgur.com/fll6aTp.jpg)\n\n![手办和周边 7](https://i.imgur.com/IFTU5sQ.jpg)\n\n妹子也来照。\n\n![妹子](https://i.imgur.com/HuVRFMo.jpg)\n\n![手办和周边 8](https://i.imgur.com/idzfVb5.jpg)\n\n![手办和周边 9](https://i.imgur.com/uswvjNh.jpg)\n\n![手办和周边 10](https://i.imgur.com/1B7pEnS.jpg)\n\n极其罕见的裸渚薰。\n\n![裸薰](https://i.imgur.com/mhmVBhU.jpg)\n\n![手办和周边 11](https://i.imgur.com/CzccMlr.jpg)\n\n![手办和周边 12](https://i.imgur.com/aJhiBA6.jpg)\n\n可爱系。\n\n![可爱系 1](https://i.imgur.com/sJmVHEC.jpg)\n\n![可爱系 2](https://i.imgur.com/1ZOWeIp.jpg)\n\n![可爱系 3](https://i.imgur.com/1VEUGR7.jpg)\n\n可爱的 penpen！\n\n![可爱的 penpen](https://i.imgur.com/jA1EYwy.jpg)\n\n继续无穷无尽的手办。\n\n![手办和周边 13](https://i.imgur.com/8wyPQpu.jpg)\n\n![手办和周边 14](https://i.imgur.com/wrvDOoX.jpg)\n\n![手办和周边 15](https://i.imgur.com/FdfcMJU.jpg)\n\n插入栓。\n\n![插入栓](https://i.imgur.com/KARE7nx.jpg)\n\n其实 EVA 里面我最喜欢的角色是明日香。\n\n![内衣明日香](https://i.imgur.com/IFaPsze.jpg)\n\n![手办和周边 16](https://i.imgur.com/BZl67y7.jpg)\n\n![手办和周边 17](https://i.imgur.com/jlhmMBR.jpg)\n\n![手办和周边 18](https://i.imgur.com/s3s1mJO.jpg)\n\n这 EVA 是哪个？\n\n![不知名 eva](https://i.imgur.com/YgkDRDa.jpg)\n\n看这可怜的小眼神。\n\n![可怜的小眼神](https://i.imgur.com/XTyPQX1.jpg)\n\nLCL 咖啡……\n\n![LCL 咖啡](https://i.imgur.com/vcJ4yq5.jpg)\n\n乱七八糟的周边。\n\n![周边 1](https://i.imgur.com/mzbJ5RT.jpg)\n\n![周边 2](https://i.imgur.com/slHJ319.jpg)\n\n![周边 3](https://i.imgur.com/15HSTau.jpg)\n\n![周边 4](https://i.imgur.com/98bNTB4.jpg)\n\n![周边 5](https://i.imgur.com/QhFiWiZ.jpg)\n\n![周边 6](https://i.imgur.com/SZmksdM.jpg)\n\n![周边 7](https://i.imgur.com/JABGbfS.jpg)\n\n![周边 8](https://i.imgur.com/U9psrCl.jpg)\n\n![周边 9](https://i.imgur.com/RdcanO8.jpg)\n\n![周边 10](https://i.imgur.com/rB8wdpD.jpg)\n\n![周边 11](https://i.imgur.com/YmVvdXx.jpg)\n\n下面六张女神照满足你们。\n\n![女神照 1](https://i.imgur.com/QyqonJ7.jpg)\n\n![女神照 2](https://i.imgur.com/Y68mBvC.jpg)\n\n![女神照 3](https://i.imgur.com/9bkDaW2.jpg)\n\n![女神照 4](https://i.imgur.com/lHzAdtr.jpg)\n\n![女神照 5](https://i.imgur.com/JU0o4Q6.jpg)\n\n![女神照 6](https://i.imgur.com/bozHHyM.jpg)\n\n4 张二号机。\n\n![二号机 1](https://i.imgur.com/bcrqd5t.jpg)\n\n![二号机 2](https://i.imgur.com/f7uZcr9.jpg)\n\n![二号机 3](https://i.imgur.com/7Wp3FLd.jpg)\n\n![二号机 4](https://i.imgur.com/e3pMux6.jpg)\n\n其他。\n\n![单车](https://i.imgur.com/Z8VBrF1.jpg)\n\n![二楼](https://i.imgur.com/lbEOrDc.jpg)\n\n腐女都喜欢的渚薰。\n\n![渚薰 1](https://i.imgur.com/pg2yGeG.jpg)\n\n![渚薰 2](https://i.imgur.com/uh4i09H.jpg)\n\n三楼有点比较大型的东西。\n\n![seele1](https://i.imgur.com/7JLOtI6.jpg)\n\n![seele2](https://i.imgur.com/RfDqY5Z.jpg)\n\n![司令](https://i.imgur.com/yPOf4l2.jpg)\n\n<del > 司令模特是我爸 XD</del>\n\n<del > 诶那我不就变成真嗣了？！</del>\n\n![大插入栓](https://i.imgur.com/8y83wqE.jpg)\n\n![体重计](https://i.imgur.com/5HWaEcC.jpg)\n\n真希波人像。\n\n![真希波人像](https://i.imgur.com/3sMoUAs.jpg)\n\n明日香人像。\n\n![明日香人像](https://i.imgur.com/auywHSJ.jpg)\n\n![剧中情景](https://i.imgur.com/jNLw0hi.jpg)\n\n三楼有一个什么 3D 投影，其实没什么意思，就是将破中 3EVA 机对付空天使的奔跑的片段播放一遍。\n\n然后是直接从三楼下去负一层看电影，其实就是将序播放一次，音效很差，我看了一会就走了。\n\n出口。\n\n![出口](https://i.imgur.com/RhnMbCf.jpg)\n\n总的来说还是不错的。","source":"_posts/深圳EVA-EXPO-2-0-相片选-97p.md","raw":"---\ntitle: '深圳 EVA EXPO 2.0 相片选 [97p]'\ncategories:\n  - [摄影, 展览]\ntags: [photograph, exhibition]\npermalink: eva-expo-2-photos\nid: 31\nupdated: '2014-12-31 01:09:36'\ndate: 2014-12-31 01:07:34\n---\n\n这个展在深圳举办，持续一个月到 1.3。刚好我考研结束，于是就去咯。\n\n由于我又不是宅男，所以没有加入什么宅的 QQ 群啊豆瓣小组什么的，于是只能自己盘算怎么去。最后是我爸和我一起去了。\n\n本来深圳并不远，想去的话难度并不大，实际上我只是想顺便熟悉一下新买的 SONY RX100 的操作，刚好也觉得 EVA 这作品不错……\n\n废话不多说，下面基本都是图了。本来照了近二百六十张，就选了 97p 出来，再缩小了一下方便大家看。\n\n不知道是不是因为非节假日，会场门可罗雀。\n\n![会场门可罗雀](https://i.imgur.com/vvIdSVH.jpg)\n\n门口标志性的初号机头。\n\n![初号机头](https://i.imgur.com/gZfxVpy.jpg)\n\n![expo](https://i.imgur.com/1NxEn0C.jpg)\n\n可爱的灯饰？\n\n![灯饰 1](https://i.imgur.com/Qv9OjLi.jpg)\n\n![灯饰 2](https://i.imgur.com/asz6OeR.jpg)\n\n![灯饰 3](https://i.imgur.com/6FcEtFc.jpg)\n\n![灯饰 4](https://i.imgur.com/x0vZxG5.jpg)\n\n进场内了。\n\n展示的一些原画。\n\n![原画 1](https://i.imgur.com/DI9hKcW.jpg)\n\n![原画 2](https://i.imgur.com/GVHc4wr.jpg)\n\n![原画 3](https://i.imgur.com/Di4H1wx.jpg)\n\n![进去](https://i.imgur.com/v3JRVvZ.jpg)\n\n女神叫你喝，不喝还是人？！喝喝喝！\n\n![喝喝喝](https://i.imgur.com/dY9nAOW.jpg)\n\n书柜，丽战斗服 ver，手办\n\n![书柜 1](https://i.imgur.com/MbJCfU0.jpg)\n\n![书柜 2](https://i.imgur.com/p9WgXJl.jpg)\n\n![丽战斗服 ver](https://i.imgur.com/1PlL5Nd.jpg)\n\n![还原手办 1](https://i.imgur.com/mwM3y1y.jpg)\n\n![还原手办 2](https://i.imgur.com/SALzMpR.jpg)\n\n分镜～\n\n![分镜 1](https://i.imgur.com/4r2trQ0.jpg)\n\n![分镜 2](https://i.imgur.com/8kCpEWN.jpg)\n\n![分镜 3](https://i.imgur.com/FuETQ6K.jpg)\n\n香香叫你买，不买还是人？！买买买！\n\n![买买买](https://i.imgur.com/ClvPxrp.jpg)\n\n上二楼\n\n![上楼](https://i.imgur.com/l1BwAIq.jpg)\n\n<del > 实际上最后我什么都没有买 </del>\n\n初号机和第三使徒水天使\n\n![初号机和第三使徒水天使 1](https://i.imgur.com/sDsn5KH.jpg)\n\n![初号机和第三使徒水天使 2](https://i.imgur.com/1ykr4GF.jpg)\n\n![初号机和第三使徒水天使 3](https://i.imgur.com/sBud8C3.jpg)\n\n![初号机和第三使徒水天使 4](https://i.imgur.com/JGZXuXE.jpg)\n\n![初号机和第三使徒水天使 5](https://i.imgur.com/WAQWMjM.jpg)\n\n游客的…… 寄语？\n\n![寄语 1](https://i.imgur.com/tUrMOJ1.jpg)\n\n![寄语 2](https://i.imgur.com/HMP8i0P.jpg)\n\n![寄语 3](https://i.imgur.com/PMpF8gT.jpg)\n\n各种奇怪海报\n\n![海报 1](https://i.imgur.com/n673pDw.jpg)\n\n![海报 2](https://i.imgur.com/n1RThef.jpg)\n\n![海报 3](https://i.imgur.com/lLO5l29.jpg)\n\n二楼的中间地方都是放手办和周边，多到离谱。\n\n![手办和周边 1](https://i.imgur.com/pW6tcKh.jpg)\n\n![手办和周边 2](https://i.imgur.com/kyfQorS.jpg)\n\n![手办和周边 3](https://i.imgur.com/RR8UGmv.jpg)\n\n亚当？\n\n![亚当](https://i.imgur.com/rIo4ix4.jpg)\n\n![手办和周边 4](https://i.imgur.com/gWu4kkb.jpg)\n\n![手办和周边 5](https://i.imgur.com/VY6wyN0.jpg)\n\n![手办和周边 6](https://i.imgur.com/fll6aTp.jpg)\n\n![手办和周边 7](https://i.imgur.com/IFTU5sQ.jpg)\n\n妹子也来照。\n\n![妹子](https://i.imgur.com/HuVRFMo.jpg)\n\n![手办和周边 8](https://i.imgur.com/idzfVb5.jpg)\n\n![手办和周边 9](https://i.imgur.com/uswvjNh.jpg)\n\n![手办和周边 10](https://i.imgur.com/1B7pEnS.jpg)\n\n极其罕见的裸渚薰。\n\n![裸薰](https://i.imgur.com/mhmVBhU.jpg)\n\n![手办和周边 11](https://i.imgur.com/CzccMlr.jpg)\n\n![手办和周边 12](https://i.imgur.com/aJhiBA6.jpg)\n\n可爱系。\n\n![可爱系 1](https://i.imgur.com/sJmVHEC.jpg)\n\n![可爱系 2](https://i.imgur.com/1ZOWeIp.jpg)\n\n![可爱系 3](https://i.imgur.com/1VEUGR7.jpg)\n\n可爱的 penpen！\n\n![可爱的 penpen](https://i.imgur.com/jA1EYwy.jpg)\n\n继续无穷无尽的手办。\n\n![手办和周边 13](https://i.imgur.com/8wyPQpu.jpg)\n\n![手办和周边 14](https://i.imgur.com/wrvDOoX.jpg)\n\n![手办和周边 15](https://i.imgur.com/FdfcMJU.jpg)\n\n插入栓。\n\n![插入栓](https://i.imgur.com/KARE7nx.jpg)\n\n其实 EVA 里面我最喜欢的角色是明日香。\n\n![内衣明日香](https://i.imgur.com/IFaPsze.jpg)\n\n![手办和周边 16](https://i.imgur.com/BZl67y7.jpg)\n\n![手办和周边 17](https://i.imgur.com/jlhmMBR.jpg)\n\n![手办和周边 18](https://i.imgur.com/s3s1mJO.jpg)\n\n这 EVA 是哪个？\n\n![不知名 eva](https://i.imgur.com/YgkDRDa.jpg)\n\n看这可怜的小眼神。\n\n![可怜的小眼神](https://i.imgur.com/XTyPQX1.jpg)\n\nLCL 咖啡……\n\n![LCL 咖啡](https://i.imgur.com/vcJ4yq5.jpg)\n\n乱七八糟的周边。\n\n![周边 1](https://i.imgur.com/mzbJ5RT.jpg)\n\n![周边 2](https://i.imgur.com/slHJ319.jpg)\n\n![周边 3](https://i.imgur.com/15HSTau.jpg)\n\n![周边 4](https://i.imgur.com/98bNTB4.jpg)\n\n![周边 5](https://i.imgur.com/QhFiWiZ.jpg)\n\n![周边 6](https://i.imgur.com/SZmksdM.jpg)\n\n![周边 7](https://i.imgur.com/JABGbfS.jpg)\n\n![周边 8](https://i.imgur.com/U9psrCl.jpg)\n\n![周边 9](https://i.imgur.com/RdcanO8.jpg)\n\n![周边 10](https://i.imgur.com/rB8wdpD.jpg)\n\n![周边 11](https://i.imgur.com/YmVvdXx.jpg)\n\n下面六张女神照满足你们。\n\n![女神照 1](https://i.imgur.com/QyqonJ7.jpg)\n\n![女神照 2](https://i.imgur.com/Y68mBvC.jpg)\n\n![女神照 3](https://i.imgur.com/9bkDaW2.jpg)\n\n![女神照 4](https://i.imgur.com/lHzAdtr.jpg)\n\n![女神照 5](https://i.imgur.com/JU0o4Q6.jpg)\n\n![女神照 6](https://i.imgur.com/bozHHyM.jpg)\n\n4 张二号机。\n\n![二号机 1](https://i.imgur.com/bcrqd5t.jpg)\n\n![二号机 2](https://i.imgur.com/f7uZcr9.jpg)\n\n![二号机 3](https://i.imgur.com/7Wp3FLd.jpg)\n\n![二号机 4](https://i.imgur.com/e3pMux6.jpg)\n\n其他。\n\n![单车](https://i.imgur.com/Z8VBrF1.jpg)\n\n![二楼](https://i.imgur.com/lbEOrDc.jpg)\n\n腐女都喜欢的渚薰。\n\n![渚薰 1](https://i.imgur.com/pg2yGeG.jpg)\n\n![渚薰 2](https://i.imgur.com/uh4i09H.jpg)\n\n三楼有点比较大型的东西。\n\n![seele1](https://i.imgur.com/7JLOtI6.jpg)\n\n![seele2](https://i.imgur.com/RfDqY5Z.jpg)\n\n![司令](https://i.imgur.com/yPOf4l2.jpg)\n\n<del > 司令模特是我爸 XD</del>\n\n<del > 诶那我不就变成真嗣了？！</del>\n\n![大插入栓](https://i.imgur.com/8y83wqE.jpg)\n\n![体重计](https://i.imgur.com/5HWaEcC.jpg)\n\n真希波人像。\n\n![真希波人像](https://i.imgur.com/3sMoUAs.jpg)\n\n明日香人像。\n\n![明日香人像](https://i.imgur.com/auywHSJ.jpg)\n\n![剧中情景](https://i.imgur.com/jNLw0hi.jpg)\n\n三楼有一个什么 3D 投影，其实没什么意思，就是将破中 3EVA 机对付空天使的奔跑的片段播放一遍。\n\n然后是直接从三楼下去负一层看电影，其实就是将序播放一次，音效很差，我看了一会就走了。\n\n出口。\n\n![出口](https://i.imgur.com/RhnMbCf.jpg)\n\n总的来说还是不错的。","slug":"eva-expo-2-photos","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuot000qn7t4dibtlp4g","content":"<p>这个展在深圳举办，持续一个月到 1.3。刚好我考研结束，于是就去咯。</p>\n<p>由于我又不是宅男，所以没有加入什么宅的 QQ 群啊豆瓣小组什么的，于是只能自己盘算怎么去。最后是我爸和我一起去了。</p>\n<p>本来深圳并不远，想去的话难度并不大，实际上我只是想顺便熟悉一下新买的 SONY RX100 的操作，刚好也觉得 EVA 这作品不错……</p>\n<p>废话不多说，下面基本都是图了。本来照了近二百六十张，就选了 97p 出来，再缩小了一下方便大家看。</p>\n<p>不知道是不是因为非节假日，会场门可罗雀。</p>\n<p><img src=\"https://i.imgur.com/vvIdSVH.jpg\" alt=\"会场门可罗雀\"></p>\n<p>门口标志性的初号机头。</p>\n<p><img src=\"https://i.imgur.com/gZfxVpy.jpg\" alt=\"初号机头\"></p>\n<p><img src=\"https://i.imgur.com/1NxEn0C.jpg\" alt=\"expo\"></p>\n<p>可爱的灯饰？</p>\n<p><img src=\"https://i.imgur.com/Qv9OjLi.jpg\" alt=\"灯饰 1\"></p>\n<p><img src=\"https://i.imgur.com/asz6OeR.jpg\" alt=\"灯饰 2\"></p>\n<p><img src=\"https://i.imgur.com/6FcEtFc.jpg\" alt=\"灯饰 3\"></p>\n<p><img src=\"https://i.imgur.com/x0vZxG5.jpg\" alt=\"灯饰 4\"></p>\n<p>进场内了。</p>\n<p>展示的一些原画。</p>\n<p><img src=\"https://i.imgur.com/DI9hKcW.jpg\" alt=\"原画 1\"></p>\n<p><img src=\"https://i.imgur.com/GVHc4wr.jpg\" alt=\"原画 2\"></p>\n<p><img src=\"https://i.imgur.com/Di4H1wx.jpg\" alt=\"原画 3\"></p>\n<p><img src=\"https://i.imgur.com/v3JRVvZ.jpg\" alt=\"进去\"></p>\n<p>女神叫你喝，不喝还是人？！喝喝喝！</p>\n<p><img src=\"https://i.imgur.com/dY9nAOW.jpg\" alt=\"喝喝喝\"></p>\n<p>书柜，丽战斗服 ver，手办</p>\n<p><img src=\"https://i.imgur.com/MbJCfU0.jpg\" alt=\"书柜 1\"></p>\n<p><img src=\"https://i.imgur.com/p9WgXJl.jpg\" alt=\"书柜 2\"></p>\n<p><img src=\"https://i.imgur.com/1PlL5Nd.jpg\" alt=\"丽战斗服 ver\"></p>\n<p><img src=\"https://i.imgur.com/mwM3y1y.jpg\" alt=\"还原手办 1\"></p>\n<p><img src=\"https://i.imgur.com/SALzMpR.jpg\" alt=\"还原手办 2\"></p>\n<p>分镜～</p>\n<p><img src=\"https://i.imgur.com/4r2trQ0.jpg\" alt=\"分镜 1\"></p>\n<p><img src=\"https://i.imgur.com/8kCpEWN.jpg\" alt=\"分镜 2\"></p>\n<p><img src=\"https://i.imgur.com/FuETQ6K.jpg\" alt=\"分镜 3\"></p>\n<p>香香叫你买，不买还是人？！买买买！</p>\n<p><img src=\"https://i.imgur.com/ClvPxrp.jpg\" alt=\"买买买\"></p>\n<p>上二楼</p>\n<p><img src=\"https://i.imgur.com/l1BwAIq.jpg\" alt=\"上楼\"></p>\n<p><del> 实际上最后我什么都没有买 </del></p>\n<p>初号机和第三使徒水天使</p>\n<p><img src=\"https://i.imgur.com/sDsn5KH.jpg\" alt=\"初号机和第三使徒水天使 1\"></p>\n<p><img src=\"https://i.imgur.com/1ykr4GF.jpg\" alt=\"初号机和第三使徒水天使 2\"></p>\n<p><img src=\"https://i.imgur.com/sBud8C3.jpg\" alt=\"初号机和第三使徒水天使 3\"></p>\n<p><img src=\"https://i.imgur.com/JGZXuXE.jpg\" alt=\"初号机和第三使徒水天使 4\"></p>\n<p><img src=\"https://i.imgur.com/WAQWMjM.jpg\" alt=\"初号机和第三使徒水天使 5\"></p>\n<p>游客的…… 寄语？</p>\n<p><img src=\"https://i.imgur.com/tUrMOJ1.jpg\" alt=\"寄语 1\"></p>\n<p><img src=\"https://i.imgur.com/HMP8i0P.jpg\" alt=\"寄语 2\"></p>\n<p><img src=\"https://i.imgur.com/PMpF8gT.jpg\" alt=\"寄语 3\"></p>\n<p>各种奇怪海报</p>\n<p><img src=\"https://i.imgur.com/n673pDw.jpg\" alt=\"海报 1\"></p>\n<p><img src=\"https://i.imgur.com/n1RThef.jpg\" alt=\"海报 2\"></p>\n<p><img src=\"https://i.imgur.com/lLO5l29.jpg\" alt=\"海报 3\"></p>\n<p>二楼的中间地方都是放手办和周边，多到离谱。</p>\n<p><img src=\"https://i.imgur.com/pW6tcKh.jpg\" alt=\"手办和周边 1\"></p>\n<p><img src=\"https://i.imgur.com/kyfQorS.jpg\" alt=\"手办和周边 2\"></p>\n<p><img src=\"https://i.imgur.com/RR8UGmv.jpg\" alt=\"手办和周边 3\"></p>\n<p>亚当？</p>\n<p><img src=\"https://i.imgur.com/rIo4ix4.jpg\" alt=\"亚当\"></p>\n<p><img src=\"https://i.imgur.com/gWu4kkb.jpg\" alt=\"手办和周边 4\"></p>\n<p><img src=\"https://i.imgur.com/VY6wyN0.jpg\" alt=\"手办和周边 5\"></p>\n<p><img src=\"https://i.imgur.com/fll6aTp.jpg\" alt=\"手办和周边 6\"></p>\n<p><img src=\"https://i.imgur.com/IFTU5sQ.jpg\" alt=\"手办和周边 7\"></p>\n<p>妹子也来照。</p>\n<p><img src=\"https://i.imgur.com/HuVRFMo.jpg\" alt=\"妹子\"></p>\n<p><img src=\"https://i.imgur.com/idzfVb5.jpg\" alt=\"手办和周边 8\"></p>\n<p><img src=\"https://i.imgur.com/uswvjNh.jpg\" alt=\"手办和周边 9\"></p>\n<p><img src=\"https://i.imgur.com/1B7pEnS.jpg\" alt=\"手办和周边 10\"></p>\n<p>极其罕见的裸渚薰。</p>\n<p><img src=\"https://i.imgur.com/mhmVBhU.jpg\" alt=\"裸薰\"></p>\n<p><img src=\"https://i.imgur.com/CzccMlr.jpg\" alt=\"手办和周边 11\"></p>\n<p><img src=\"https://i.imgur.com/aJhiBA6.jpg\" alt=\"手办和周边 12\"></p>\n<p>可爱系。</p>\n<p><img src=\"https://i.imgur.com/sJmVHEC.jpg\" alt=\"可爱系 1\"></p>\n<p><img src=\"https://i.imgur.com/1ZOWeIp.jpg\" alt=\"可爱系 2\"></p>\n<p><img src=\"https://i.imgur.com/1VEUGR7.jpg\" alt=\"可爱系 3\"></p>\n<p>可爱的 penpen！</p>\n<p><img src=\"https://i.imgur.com/jA1EYwy.jpg\" alt=\"可爱的 penpen\"></p>\n<p>继续无穷无尽的手办。</p>\n<p><img src=\"https://i.imgur.com/8wyPQpu.jpg\" alt=\"手办和周边 13\"></p>\n<p><img src=\"https://i.imgur.com/wrvDOoX.jpg\" alt=\"手办和周边 14\"></p>\n<p><img src=\"https://i.imgur.com/FdfcMJU.jpg\" alt=\"手办和周边 15\"></p>\n<p>插入栓。</p>\n<p><img src=\"https://i.imgur.com/KARE7nx.jpg\" alt=\"插入栓\"></p>\n<p>其实 EVA 里面我最喜欢的角色是明日香。</p>\n<p><img src=\"https://i.imgur.com/IFaPsze.jpg\" alt=\"内衣明日香\"></p>\n<p><img src=\"https://i.imgur.com/BZl67y7.jpg\" alt=\"手办和周边 16\"></p>\n<p><img src=\"https://i.imgur.com/jlhmMBR.jpg\" alt=\"手办和周边 17\"></p>\n<p><img src=\"https://i.imgur.com/s3s1mJO.jpg\" alt=\"手办和周边 18\"></p>\n<p>这 EVA 是哪个？</p>\n<p><img src=\"https://i.imgur.com/YgkDRDa.jpg\" alt=\"不知名 eva\"></p>\n<p>看这可怜的小眼神。</p>\n<p><img src=\"https://i.imgur.com/XTyPQX1.jpg\" alt=\"可怜的小眼神\"></p>\n<p>LCL 咖啡……</p>\n<p><img src=\"https://i.imgur.com/vcJ4yq5.jpg\" alt=\"LCL 咖啡\"></p>\n<p>乱七八糟的周边。</p>\n<p><img src=\"https://i.imgur.com/mzbJ5RT.jpg\" alt=\"周边 1\"></p>\n<p><img src=\"https://i.imgur.com/slHJ319.jpg\" alt=\"周边 2\"></p>\n<p><img src=\"https://i.imgur.com/15HSTau.jpg\" alt=\"周边 3\"></p>\n<p><img src=\"https://i.imgur.com/98bNTB4.jpg\" alt=\"周边 4\"></p>\n<p><img src=\"https://i.imgur.com/QhFiWiZ.jpg\" alt=\"周边 5\"></p>\n<p><img src=\"https://i.imgur.com/SZmksdM.jpg\" alt=\"周边 6\"></p>\n<p><img src=\"https://i.imgur.com/JABGbfS.jpg\" alt=\"周边 7\"></p>\n<p><img src=\"https://i.imgur.com/U9psrCl.jpg\" alt=\"周边 8\"></p>\n<p><img src=\"https://i.imgur.com/RdcanO8.jpg\" alt=\"周边 9\"></p>\n<p><img src=\"https://i.imgur.com/rB8wdpD.jpg\" alt=\"周边 10\"></p>\n<p><img src=\"https://i.imgur.com/YmVvdXx.jpg\" alt=\"周边 11\"></p>\n<p>下面六张女神照满足你们。</p>\n<p><img src=\"https://i.imgur.com/QyqonJ7.jpg\" alt=\"女神照 1\"></p>\n<p><img src=\"https://i.imgur.com/Y68mBvC.jpg\" alt=\"女神照 2\"></p>\n<p><img src=\"https://i.imgur.com/9bkDaW2.jpg\" alt=\"女神照 3\"></p>\n<p><img src=\"https://i.imgur.com/lHzAdtr.jpg\" alt=\"女神照 4\"></p>\n<p><img src=\"https://i.imgur.com/JU0o4Q6.jpg\" alt=\"女神照 5\"></p>\n<p><img src=\"https://i.imgur.com/bozHHyM.jpg\" alt=\"女神照 6\"></p>\n<p>4 张二号机。</p>\n<p><img src=\"https://i.imgur.com/bcrqd5t.jpg\" alt=\"二号机 1\"></p>\n<p><img src=\"https://i.imgur.com/f7uZcr9.jpg\" alt=\"二号机 2\"></p>\n<p><img src=\"https://i.imgur.com/7Wp3FLd.jpg\" alt=\"二号机 3\"></p>\n<p><img src=\"https://i.imgur.com/e3pMux6.jpg\" alt=\"二号机 4\"></p>\n<p>其他。</p>\n<p><img src=\"https://i.imgur.com/Z8VBrF1.jpg\" alt=\"单车\"></p>\n<p><img src=\"https://i.imgur.com/lbEOrDc.jpg\" alt=\"二楼\"></p>\n<p>腐女都喜欢的渚薰。</p>\n<p><img src=\"https://i.imgur.com/pg2yGeG.jpg\" alt=\"渚薰 1\"></p>\n<p><img src=\"https://i.imgur.com/uh4i09H.jpg\" alt=\"渚薰 2\"></p>\n<p>三楼有点比较大型的东西。</p>\n<p><img src=\"https://i.imgur.com/7JLOtI6.jpg\" alt=\"seele1\"></p>\n<p><img src=\"https://i.imgur.com/RfDqY5Z.jpg\" alt=\"seele2\"></p>\n<p><img src=\"https://i.imgur.com/yPOf4l2.jpg\" alt=\"司令\"></p>\n<p><del> 司令模特是我爸 XD</del></p>\n<p><del> 诶那我不就变成真嗣了？！</del></p>\n<p><img src=\"https://i.imgur.com/8y83wqE.jpg\" alt=\"大插入栓\"></p>\n<p><img src=\"https://i.imgur.com/5HWaEcC.jpg\" alt=\"体重计\"></p>\n<p>真希波人像。</p>\n<p><img src=\"https://i.imgur.com/3sMoUAs.jpg\" alt=\"真希波人像\"></p>\n<p>明日香人像。</p>\n<p><img src=\"https://i.imgur.com/auywHSJ.jpg\" alt=\"明日香人像\"></p>\n<p><img src=\"https://i.imgur.com/jNLw0hi.jpg\" alt=\"剧中情景\"></p>\n<p>三楼有一个什么 3D 投影，其实没什么意思，就是将破中 3EVA 机对付空天使的奔跑的片段播放一遍。</p>\n<p>然后是直接从三楼下去负一层看电影，其实就是将序播放一次，音效很差，我看了一会就走了。</p>\n<p>出口。</p>\n<p><img src=\"https://i.imgur.com/RhnMbCf.jpg\" alt=\"出口\"></p>\n<p>总的来说还是不错的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这个展在深圳举办，持续一个月到 1.3。刚好我考研结束，于是就去咯。</p>\n<p>由于我又不是宅男，所以没有加入什么宅的 QQ 群啊豆瓣小组什么的，于是只能自己盘算怎么去。最后是我爸和我一起去了。</p>\n<p>本来深圳并不远，想去的话难度并不大，实际上我只是想顺便熟悉一下新买的 SONY RX100 的操作，刚好也觉得 EVA 这作品不错……</p>\n<p>废话不多说，下面基本都是图了。本来照了近二百六十张，就选了 97p 出来，再缩小了一下方便大家看。</p>\n<p>不知道是不是因为非节假日，会场门可罗雀。</p>\n<p><img src=\"https://i.imgur.com/vvIdSVH.jpg\" alt=\"会场门可罗雀\"></p>\n<p>门口标志性的初号机头。</p>\n<p><img src=\"https://i.imgur.com/gZfxVpy.jpg\" alt=\"初号机头\"></p>\n<p><img src=\"https://i.imgur.com/1NxEn0C.jpg\" alt=\"expo\"></p>\n<p>可爱的灯饰？</p>\n<p><img src=\"https://i.imgur.com/Qv9OjLi.jpg\" alt=\"灯饰 1\"></p>\n<p><img src=\"https://i.imgur.com/asz6OeR.jpg\" alt=\"灯饰 2\"></p>\n<p><img src=\"https://i.imgur.com/6FcEtFc.jpg\" alt=\"灯饰 3\"></p>\n<p><img src=\"https://i.imgur.com/x0vZxG5.jpg\" alt=\"灯饰 4\"></p>\n<p>进场内了。</p>\n<p>展示的一些原画。</p>\n<p><img src=\"https://i.imgur.com/DI9hKcW.jpg\" alt=\"原画 1\"></p>\n<p><img src=\"https://i.imgur.com/GVHc4wr.jpg\" alt=\"原画 2\"></p>\n<p><img src=\"https://i.imgur.com/Di4H1wx.jpg\" alt=\"原画 3\"></p>\n<p><img src=\"https://i.imgur.com/v3JRVvZ.jpg\" alt=\"进去\"></p>\n<p>女神叫你喝，不喝还是人？！喝喝喝！</p>\n<p><img src=\"https://i.imgur.com/dY9nAOW.jpg\" alt=\"喝喝喝\"></p>\n<p>书柜，丽战斗服 ver，手办</p>\n<p><img src=\"https://i.imgur.com/MbJCfU0.jpg\" alt=\"书柜 1\"></p>\n<p><img src=\"https://i.imgur.com/p9WgXJl.jpg\" alt=\"书柜 2\"></p>\n<p><img src=\"https://i.imgur.com/1PlL5Nd.jpg\" alt=\"丽战斗服 ver\"></p>\n<p><img src=\"https://i.imgur.com/mwM3y1y.jpg\" alt=\"还原手办 1\"></p>\n<p><img src=\"https://i.imgur.com/SALzMpR.jpg\" alt=\"还原手办 2\"></p>\n<p>分镜～</p>\n<p><img src=\"https://i.imgur.com/4r2trQ0.jpg\" alt=\"分镜 1\"></p>\n<p><img src=\"https://i.imgur.com/8kCpEWN.jpg\" alt=\"分镜 2\"></p>\n<p><img src=\"https://i.imgur.com/FuETQ6K.jpg\" alt=\"分镜 3\"></p>\n<p>香香叫你买，不买还是人？！买买买！</p>\n<p><img src=\"https://i.imgur.com/ClvPxrp.jpg\" alt=\"买买买\"></p>\n<p>上二楼</p>\n<p><img src=\"https://i.imgur.com/l1BwAIq.jpg\" alt=\"上楼\"></p>\n<p><del> 实际上最后我什么都没有买 </del></p>\n<p>初号机和第三使徒水天使</p>\n<p><img src=\"https://i.imgur.com/sDsn5KH.jpg\" alt=\"初号机和第三使徒水天使 1\"></p>\n<p><img src=\"https://i.imgur.com/1ykr4GF.jpg\" alt=\"初号机和第三使徒水天使 2\"></p>\n<p><img src=\"https://i.imgur.com/sBud8C3.jpg\" alt=\"初号机和第三使徒水天使 3\"></p>\n<p><img src=\"https://i.imgur.com/JGZXuXE.jpg\" alt=\"初号机和第三使徒水天使 4\"></p>\n<p><img src=\"https://i.imgur.com/WAQWMjM.jpg\" alt=\"初号机和第三使徒水天使 5\"></p>\n<p>游客的…… 寄语？</p>\n<p><img src=\"https://i.imgur.com/tUrMOJ1.jpg\" alt=\"寄语 1\"></p>\n<p><img src=\"https://i.imgur.com/HMP8i0P.jpg\" alt=\"寄语 2\"></p>\n<p><img src=\"https://i.imgur.com/PMpF8gT.jpg\" alt=\"寄语 3\"></p>\n<p>各种奇怪海报</p>\n<p><img src=\"https://i.imgur.com/n673pDw.jpg\" alt=\"海报 1\"></p>\n<p><img src=\"https://i.imgur.com/n1RThef.jpg\" alt=\"海报 2\"></p>\n<p><img src=\"https://i.imgur.com/lLO5l29.jpg\" alt=\"海报 3\"></p>\n<p>二楼的中间地方都是放手办和周边，多到离谱。</p>\n<p><img src=\"https://i.imgur.com/pW6tcKh.jpg\" alt=\"手办和周边 1\"></p>\n<p><img src=\"https://i.imgur.com/kyfQorS.jpg\" alt=\"手办和周边 2\"></p>\n<p><img src=\"https://i.imgur.com/RR8UGmv.jpg\" alt=\"手办和周边 3\"></p>\n<p>亚当？</p>\n<p><img src=\"https://i.imgur.com/rIo4ix4.jpg\" alt=\"亚当\"></p>\n<p><img src=\"https://i.imgur.com/gWu4kkb.jpg\" alt=\"手办和周边 4\"></p>\n<p><img src=\"https://i.imgur.com/VY6wyN0.jpg\" alt=\"手办和周边 5\"></p>\n<p><img src=\"https://i.imgur.com/fll6aTp.jpg\" alt=\"手办和周边 6\"></p>\n<p><img src=\"https://i.imgur.com/IFTU5sQ.jpg\" alt=\"手办和周边 7\"></p>\n<p>妹子也来照。</p>\n<p><img src=\"https://i.imgur.com/HuVRFMo.jpg\" alt=\"妹子\"></p>\n<p><img src=\"https://i.imgur.com/idzfVb5.jpg\" alt=\"手办和周边 8\"></p>\n<p><img src=\"https://i.imgur.com/uswvjNh.jpg\" alt=\"手办和周边 9\"></p>\n<p><img src=\"https://i.imgur.com/1B7pEnS.jpg\" alt=\"手办和周边 10\"></p>\n<p>极其罕见的裸渚薰。</p>\n<p><img src=\"https://i.imgur.com/mhmVBhU.jpg\" alt=\"裸薰\"></p>\n<p><img src=\"https://i.imgur.com/CzccMlr.jpg\" alt=\"手办和周边 11\"></p>\n<p><img src=\"https://i.imgur.com/aJhiBA6.jpg\" alt=\"手办和周边 12\"></p>\n<p>可爱系。</p>\n<p><img src=\"https://i.imgur.com/sJmVHEC.jpg\" alt=\"可爱系 1\"></p>\n<p><img src=\"https://i.imgur.com/1ZOWeIp.jpg\" alt=\"可爱系 2\"></p>\n<p><img src=\"https://i.imgur.com/1VEUGR7.jpg\" alt=\"可爱系 3\"></p>\n<p>可爱的 penpen！</p>\n<p><img src=\"https://i.imgur.com/jA1EYwy.jpg\" alt=\"可爱的 penpen\"></p>\n<p>继续无穷无尽的手办。</p>\n<p><img src=\"https://i.imgur.com/8wyPQpu.jpg\" alt=\"手办和周边 13\"></p>\n<p><img src=\"https://i.imgur.com/wrvDOoX.jpg\" alt=\"手办和周边 14\"></p>\n<p><img src=\"https://i.imgur.com/FdfcMJU.jpg\" alt=\"手办和周边 15\"></p>\n<p>插入栓。</p>\n<p><img src=\"https://i.imgur.com/KARE7nx.jpg\" alt=\"插入栓\"></p>\n<p>其实 EVA 里面我最喜欢的角色是明日香。</p>\n<p><img src=\"https://i.imgur.com/IFaPsze.jpg\" alt=\"内衣明日香\"></p>\n<p><img src=\"https://i.imgur.com/BZl67y7.jpg\" alt=\"手办和周边 16\"></p>\n<p><img src=\"https://i.imgur.com/jlhmMBR.jpg\" alt=\"手办和周边 17\"></p>\n<p><img src=\"https://i.imgur.com/s3s1mJO.jpg\" alt=\"手办和周边 18\"></p>\n<p>这 EVA 是哪个？</p>\n<p><img src=\"https://i.imgur.com/YgkDRDa.jpg\" alt=\"不知名 eva\"></p>\n<p>看这可怜的小眼神。</p>\n<p><img src=\"https://i.imgur.com/XTyPQX1.jpg\" alt=\"可怜的小眼神\"></p>\n<p>LCL 咖啡……</p>\n<p><img src=\"https://i.imgur.com/vcJ4yq5.jpg\" alt=\"LCL 咖啡\"></p>\n<p>乱七八糟的周边。</p>\n<p><img src=\"https://i.imgur.com/mzbJ5RT.jpg\" alt=\"周边 1\"></p>\n<p><img src=\"https://i.imgur.com/slHJ319.jpg\" alt=\"周边 2\"></p>\n<p><img src=\"https://i.imgur.com/15HSTau.jpg\" alt=\"周边 3\"></p>\n<p><img src=\"https://i.imgur.com/98bNTB4.jpg\" alt=\"周边 4\"></p>\n<p><img src=\"https://i.imgur.com/QhFiWiZ.jpg\" alt=\"周边 5\"></p>\n<p><img src=\"https://i.imgur.com/SZmksdM.jpg\" alt=\"周边 6\"></p>\n<p><img src=\"https://i.imgur.com/JABGbfS.jpg\" alt=\"周边 7\"></p>\n<p><img src=\"https://i.imgur.com/U9psrCl.jpg\" alt=\"周边 8\"></p>\n<p><img src=\"https://i.imgur.com/RdcanO8.jpg\" alt=\"周边 9\"></p>\n<p><img src=\"https://i.imgur.com/rB8wdpD.jpg\" alt=\"周边 10\"></p>\n<p><img src=\"https://i.imgur.com/YmVvdXx.jpg\" alt=\"周边 11\"></p>\n<p>下面六张女神照满足你们。</p>\n<p><img src=\"https://i.imgur.com/QyqonJ7.jpg\" alt=\"女神照 1\"></p>\n<p><img src=\"https://i.imgur.com/Y68mBvC.jpg\" alt=\"女神照 2\"></p>\n<p><img src=\"https://i.imgur.com/9bkDaW2.jpg\" alt=\"女神照 3\"></p>\n<p><img src=\"https://i.imgur.com/lHzAdtr.jpg\" alt=\"女神照 4\"></p>\n<p><img src=\"https://i.imgur.com/JU0o4Q6.jpg\" alt=\"女神照 5\"></p>\n<p><img src=\"https://i.imgur.com/bozHHyM.jpg\" alt=\"女神照 6\"></p>\n<p>4 张二号机。</p>\n<p><img src=\"https://i.imgur.com/bcrqd5t.jpg\" alt=\"二号机 1\"></p>\n<p><img src=\"https://i.imgur.com/f7uZcr9.jpg\" alt=\"二号机 2\"></p>\n<p><img src=\"https://i.imgur.com/7Wp3FLd.jpg\" alt=\"二号机 3\"></p>\n<p><img src=\"https://i.imgur.com/e3pMux6.jpg\" alt=\"二号机 4\"></p>\n<p>其他。</p>\n<p><img src=\"https://i.imgur.com/Z8VBrF1.jpg\" alt=\"单车\"></p>\n<p><img src=\"https://i.imgur.com/lbEOrDc.jpg\" alt=\"二楼\"></p>\n<p>腐女都喜欢的渚薰。</p>\n<p><img src=\"https://i.imgur.com/pg2yGeG.jpg\" alt=\"渚薰 1\"></p>\n<p><img src=\"https://i.imgur.com/uh4i09H.jpg\" alt=\"渚薰 2\"></p>\n<p>三楼有点比较大型的东西。</p>\n<p><img src=\"https://i.imgur.com/7JLOtI6.jpg\" alt=\"seele1\"></p>\n<p><img src=\"https://i.imgur.com/RfDqY5Z.jpg\" alt=\"seele2\"></p>\n<p><img src=\"https://i.imgur.com/yPOf4l2.jpg\" alt=\"司令\"></p>\n<p><del> 司令模特是我爸 XD</del></p>\n<p><del> 诶那我不就变成真嗣了？！</del></p>\n<p><img src=\"https://i.imgur.com/8y83wqE.jpg\" alt=\"大插入栓\"></p>\n<p><img src=\"https://i.imgur.com/5HWaEcC.jpg\" alt=\"体重计\"></p>\n<p>真希波人像。</p>\n<p><img src=\"https://i.imgur.com/3sMoUAs.jpg\" alt=\"真希波人像\"></p>\n<p>明日香人像。</p>\n<p><img src=\"https://i.imgur.com/auywHSJ.jpg\" alt=\"明日香人像\"></p>\n<p><img src=\"https://i.imgur.com/jNLw0hi.jpg\" alt=\"剧中情景\"></p>\n<p>三楼有一个什么 3D 投影，其实没什么意思，就是将破中 3EVA 机对付空天使的奔跑的片段播放一遍。</p>\n<p>然后是直接从三楼下去负一层看电影，其实就是将序播放一次，音效很差，我看了一会就走了。</p>\n<p>出口。</p>\n<p><img src=\"https://i.imgur.com/RhnMbCf.jpg\" alt=\"出口\"></p>\n<p>总的来说还是不错的。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://i.imgur.com/vvIdSVH.jpg","popularPost_tmp_gaData":{"updated":"Wed Dec 31 2014 01:09:36 GMT+0800 (China Standard Time)","title":"深圳 EVA EXPO 2.0 相片选 [97p]","path":"eva-expo-2-photos/","eyeCatchImage":"https://i.imgur.com/vvIdSVH.jpg","excerpt":null,"date":"2014-12-30T17:07:34.000Z","pv":0,"totalPV":0,"categories":"摄影 > 展览","tags":["photograph","exhibition"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":800},{"title":"看《Sherlock: The Abominable Bride》","id":"51","updated":"2016-01-05T11:49:41.000Z","date":"2016-01-05T11:48:23.000Z","_content":"\n看完新出的夏洛克，想必大家都会很茫然。刚好今晚也看了，就说说我看了电影和影评后的总结吧。\n\nPS: 有剧透才能更好地看电影。\n\nPS: 如果你是想看好莱坞大片，还像和我同一片场的人那样带着爆米花和泡椒凤爪来看的，可以退票了。\n\n简单来说，整部电影的剧情几乎都是在嗑了药的夏洛克进入多层梦境中发生的。他要解决上一季结尾中莫里亚蒂的 “回归” 的问题，于是在脑内——或者说是思维迷宫内——解决一百年前的另外一个 “死而复活的新娘” 的问题。而解决这个问题的方法，就是将自己带入到那个维多利亚时代中，思考自己会如何行动，剧情如何发展。这也就是为什么差不多通篇都是维多利亚时代风格的由来。案情重组，简而言之。不过，有一个问题，就是实际上根据设定，电影中福尔摩斯并不是十九世纪的人物，如此一来就对原来的案情进行了干涉，出现矛盾，这个后面再谈。\n\n令来看福华 CP 的，卖腐的，相爱相杀的女性，啊不，观众大失所望，恐怕是悬疑色彩的浓重，剧情的多段跳跃和突然切换，以及似乎毫无卖腐的情节。然而我等从第一季就只对其具备推理性质和现代化改编产生强烈爱好的人却是大欢喜：这才是正剧的风格，第三季给某些群体派太多显而易见的糖了。\n\n然而电影中的推理很好吗？电影没有派糖吗？非也。\n\n先说推理。电影中的诡计归结成一句话就是：死了的新娘为何能复活并杀死其丈夫？答案是一开始就没死，是在姐妹们的帮助下演戏，之后再当街杀丈夫并给大众一种复活的假象再高明地自杀，不留下破绽，并且还继续利用这种牺牲换来了死而复生继而复活的恐怖现象来帮助姐妹完成对姐妹的丈夫的复仇。卧槽竟然吞枪自杀只是演戏？乍一看似乎有点敷衍，但是和朋友讨论后认为，如果考虑到十九世纪科技水平的低下和侦查手段的匮乏，加上法医的暗中帮助，实际上完全是可能发生的。所以说推理虽然并不出彩或者惊世骇俗，然而还是有意思的。只是编剧没有给解答过程一个酷炫的表现，所以观众就有不爽、硬了不射的憋屈。那为什么不表现得很光很亮很油还很 duang 呢？同样后面再谈。\n\n再说派糖，电影中最明显的就是瀑布旁莫里亚蒂说的 “你们不如私奔吧” 的吧？原著可是福尔摩斯和教授一起掉下瀑布失踪的，电影里面华生来救福尔摩斯了啊。麦考夫在飞机里面对夏洛克嗑药的担心和毫不掩饰的 be there for you 你们无视了吗？午夜夏洛克和华生的深入交谈你们没触动吗？只能说糖派得有点晦涩了，伪粉抖一抖就掉了，真粉还是会粘着。\n\n另外纵观整个案件，诡计的实施涉及到已经患绝症的新娘，女仆，为了证明自己和男性一样能胜任工作而不得不女扮男装的女法医（电影此处对 man 的翻译应该有问题）以及一众的女性秘密组织，换句话说，这其实标志着女性的反抗。电影中已有多处暗示：玛丽说她希望跟华生一样能做事，并且参加女性选举权的争取；麦考夫说有一个眼皮底下的 enemy，undetected, and unstoppable，还说 we will lose，because they are right we are wrong；玛丽从十九世纪的被晾在一边到二十世纪终于能和丈夫一起参与事情；华生家庭的情况；通通都是编剧支持女性争取权利的暗示。这也是跟随了近年电影频繁地使用女性作为主角，将女性塑造出不同形象的大流（我是从冰雪奇缘开始察觉近来电影有这样的趋势的）。这才是给女性派的最好的糖不是吗？\n\n最后来说说电影对夏洛克这个人物的思考，顺便也把前面两个 “后面再谈” 解决了。原著中福尔摩斯基本上被塑造成理性思考和推理的机器，然而比较 tricky 的一点是根据设定，小说是道尔笔下的华生写的，小说中福尔摩斯的形象是道尔笔下的华生给大众塑造的，真实 (?) 的夏洛克到底是怎样的人无从得知。电影中也有反复地强调华生将夏洛克的案件写成文章发表。在午夜华生反复质问夏洛克关于感情和过去的问题，夏洛克没有说出来。这是编剧对夏洛克这个人物感情的探讨，没什么清晰的结论。之后没能保护受害人，夏洛克把自己关在房间里又磕药。然后莫里亚蒂就出现了在房间又吞枪了一次，没死，夏洛克觉得想不通怎么死不了的时候飞机着陆了把他震醒了。醒过来的二十一世纪是现实。一番交流后他又睡了，在梦里十九世纪醒来，开始了找玛丽和到在教堂里面解谜。最后指认凶手的时候他突然想到，凶手为什么要找他来破案呢？因为历史上新娘案就没被侦破，他作为侦探加入进案件了就产生了干涉，造成了奇怪的悖论。接着莫里亚蒂又出来了，场景就又切换到二十一世纪了，但是是更深一层梦里的二十一世纪，因为最后死尸活过来了，在现实里是不可能的。紧接着场景转到了著名的瀑布，这个估计就是夏洛克心里近乎最深层的地方了。可以看到，每当梦里有不寻常的事情发生，莫里亚蒂就会出来，试图让夏洛克偏离方向，只是第一次被飞机降落打断了。于是也就解释了为何解谜过程不酷炫，第一解谜发生在夏洛克脑内，显然不需要 “炫” 给自己看；第二，解谜会引出悖论从而引出教授，太酷炫会让观众大脑当机无法思考莫里亚蒂出现的原因。看到这你是不是忘记了这一段说的是夏洛克人物的探讨了？前面说了一大段剧情其实就是论证了在这个系列中，编剧认为莫里亚蒂就是夏洛克的心结和过去，或者说他脑中的魔鬼，会让夏洛克的思考出现问题。这是编剧对夏洛克过去的探讨。在原著中两人双双跌下瀑布，电影中是华生出来救场，并且表现得完全不像非梦境的华生。这 “夏洛克被心魔莫里亚蒂殴打，华生赶来将教授一脚踹下” 的场景表明夏洛克不再纠结莫里亚蒂 “复活” 了，而明白是他 “回来” 了。\n\n于是正如新娘最终还是死了，莫里亚蒂大约的确已经死了。正如复仇是秘密组织干的，无责任猜测一下下一季的剧情大概就是教授的同伙来复仇了。\n\n最后来看看编剧在电影里融合了什么呢？电视剧中的人物的重新运用，合格的推理，女性主义，对夏洛克的人物心理探讨，还有两季之间的承前启后。或许把这么多的东西融于一炉是有点用力过猛了，我刚看完的时候也是有点懵了，但是走回家的路上却越想越有意思。\n\n我给这电影三个评价：\n\n* 女性主义的胜利\n* 原著党的胜利\n* 伪粉的处刑","source":"_posts/看《Sherlock-The-Abominable-Bride》.md","raw":"---\ntitle: '看《Sherlock: The Abominable Bride》'\ncategories:\n  - [生活, 电影]\ntags: [movie, bytalk]\npermalink: watch-sherlock-the-abominable-bride\nid: 51\nupdated: '2016-01-05 19:49:41'\ndate: 2016-01-05 19:48:23\n---\n\n看完新出的夏洛克，想必大家都会很茫然。刚好今晚也看了，就说说我看了电影和影评后的总结吧。\n\nPS: 有剧透才能更好地看电影。\n\nPS: 如果你是想看好莱坞大片，还像和我同一片场的人那样带着爆米花和泡椒凤爪来看的，可以退票了。\n\n简单来说，整部电影的剧情几乎都是在嗑了药的夏洛克进入多层梦境中发生的。他要解决上一季结尾中莫里亚蒂的 “回归” 的问题，于是在脑内——或者说是思维迷宫内——解决一百年前的另外一个 “死而复活的新娘” 的问题。而解决这个问题的方法，就是将自己带入到那个维多利亚时代中，思考自己会如何行动，剧情如何发展。这也就是为什么差不多通篇都是维多利亚时代风格的由来。案情重组，简而言之。不过，有一个问题，就是实际上根据设定，电影中福尔摩斯并不是十九世纪的人物，如此一来就对原来的案情进行了干涉，出现矛盾，这个后面再谈。\n\n令来看福华 CP 的，卖腐的，相爱相杀的女性，啊不，观众大失所望，恐怕是悬疑色彩的浓重，剧情的多段跳跃和突然切换，以及似乎毫无卖腐的情节。然而我等从第一季就只对其具备推理性质和现代化改编产生强烈爱好的人却是大欢喜：这才是正剧的风格，第三季给某些群体派太多显而易见的糖了。\n\n然而电影中的推理很好吗？电影没有派糖吗？非也。\n\n先说推理。电影中的诡计归结成一句话就是：死了的新娘为何能复活并杀死其丈夫？答案是一开始就没死，是在姐妹们的帮助下演戏，之后再当街杀丈夫并给大众一种复活的假象再高明地自杀，不留下破绽，并且还继续利用这种牺牲换来了死而复生继而复活的恐怖现象来帮助姐妹完成对姐妹的丈夫的复仇。卧槽竟然吞枪自杀只是演戏？乍一看似乎有点敷衍，但是和朋友讨论后认为，如果考虑到十九世纪科技水平的低下和侦查手段的匮乏，加上法医的暗中帮助，实际上完全是可能发生的。所以说推理虽然并不出彩或者惊世骇俗，然而还是有意思的。只是编剧没有给解答过程一个酷炫的表现，所以观众就有不爽、硬了不射的憋屈。那为什么不表现得很光很亮很油还很 duang 呢？同样后面再谈。\n\n再说派糖，电影中最明显的就是瀑布旁莫里亚蒂说的 “你们不如私奔吧” 的吧？原著可是福尔摩斯和教授一起掉下瀑布失踪的，电影里面华生来救福尔摩斯了啊。麦考夫在飞机里面对夏洛克嗑药的担心和毫不掩饰的 be there for you 你们无视了吗？午夜夏洛克和华生的深入交谈你们没触动吗？只能说糖派得有点晦涩了，伪粉抖一抖就掉了，真粉还是会粘着。\n\n另外纵观整个案件，诡计的实施涉及到已经患绝症的新娘，女仆，为了证明自己和男性一样能胜任工作而不得不女扮男装的女法医（电影此处对 man 的翻译应该有问题）以及一众的女性秘密组织，换句话说，这其实标志着女性的反抗。电影中已有多处暗示：玛丽说她希望跟华生一样能做事，并且参加女性选举权的争取；麦考夫说有一个眼皮底下的 enemy，undetected, and unstoppable，还说 we will lose，because they are right we are wrong；玛丽从十九世纪的被晾在一边到二十世纪终于能和丈夫一起参与事情；华生家庭的情况；通通都是编剧支持女性争取权利的暗示。这也是跟随了近年电影频繁地使用女性作为主角，将女性塑造出不同形象的大流（我是从冰雪奇缘开始察觉近来电影有这样的趋势的）。这才是给女性派的最好的糖不是吗？\n\n最后来说说电影对夏洛克这个人物的思考，顺便也把前面两个 “后面再谈” 解决了。原著中福尔摩斯基本上被塑造成理性思考和推理的机器，然而比较 tricky 的一点是根据设定，小说是道尔笔下的华生写的，小说中福尔摩斯的形象是道尔笔下的华生给大众塑造的，真实 (?) 的夏洛克到底是怎样的人无从得知。电影中也有反复地强调华生将夏洛克的案件写成文章发表。在午夜华生反复质问夏洛克关于感情和过去的问题，夏洛克没有说出来。这是编剧对夏洛克这个人物感情的探讨，没什么清晰的结论。之后没能保护受害人，夏洛克把自己关在房间里又磕药。然后莫里亚蒂就出现了在房间又吞枪了一次，没死，夏洛克觉得想不通怎么死不了的时候飞机着陆了把他震醒了。醒过来的二十一世纪是现实。一番交流后他又睡了，在梦里十九世纪醒来，开始了找玛丽和到在教堂里面解谜。最后指认凶手的时候他突然想到，凶手为什么要找他来破案呢？因为历史上新娘案就没被侦破，他作为侦探加入进案件了就产生了干涉，造成了奇怪的悖论。接着莫里亚蒂又出来了，场景就又切换到二十一世纪了，但是是更深一层梦里的二十一世纪，因为最后死尸活过来了，在现实里是不可能的。紧接着场景转到了著名的瀑布，这个估计就是夏洛克心里近乎最深层的地方了。可以看到，每当梦里有不寻常的事情发生，莫里亚蒂就会出来，试图让夏洛克偏离方向，只是第一次被飞机降落打断了。于是也就解释了为何解谜过程不酷炫，第一解谜发生在夏洛克脑内，显然不需要 “炫” 给自己看；第二，解谜会引出悖论从而引出教授，太酷炫会让观众大脑当机无法思考莫里亚蒂出现的原因。看到这你是不是忘记了这一段说的是夏洛克人物的探讨了？前面说了一大段剧情其实就是论证了在这个系列中，编剧认为莫里亚蒂就是夏洛克的心结和过去，或者说他脑中的魔鬼，会让夏洛克的思考出现问题。这是编剧对夏洛克过去的探讨。在原著中两人双双跌下瀑布，电影中是华生出来救场，并且表现得完全不像非梦境的华生。这 “夏洛克被心魔莫里亚蒂殴打，华生赶来将教授一脚踹下” 的场景表明夏洛克不再纠结莫里亚蒂 “复活” 了，而明白是他 “回来” 了。\n\n于是正如新娘最终还是死了，莫里亚蒂大约的确已经死了。正如复仇是秘密组织干的，无责任猜测一下下一季的剧情大概就是教授的同伙来复仇了。\n\n最后来看看编剧在电影里融合了什么呢？电视剧中的人物的重新运用，合格的推理，女性主义，对夏洛克的人物心理探讨，还有两季之间的承前启后。或许把这么多的东西融于一炉是有点用力过猛了，我刚看完的时候也是有点懵了，但是走回家的路上却越想越有意思。\n\n我给这电影三个评价：\n\n* 女性主义的胜利\n* 原著党的胜利\n* 伪粉的处刑","slug":"watch-sherlock-the-abominable-bride","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuou000sn7t4rs0fzhdc","content":"<p>看完新出的夏洛克，想必大家都会很茫然。刚好今晚也看了，就说说我看了电影和影评后的总结吧。</p>\n<p>PS: 有剧透才能更好地看电影。</p>\n<p>PS: 如果你是想看好莱坞大片，还像和我同一片场的人那样带着爆米花和泡椒凤爪来看的，可以退票了。</p>\n<p>简单来说，整部电影的剧情几乎都是在嗑了药的夏洛克进入多层梦境中发生的。他要解决上一季结尾中莫里亚蒂的 “回归” 的问题，于是在脑内——或者说是思维迷宫内——解决一百年前的另外一个 “死而复活的新娘” 的问题。而解决这个问题的方法，就是将自己带入到那个维多利亚时代中，思考自己会如何行动，剧情如何发展。这也就是为什么差不多通篇都是维多利亚时代风格的由来。案情重组，简而言之。不过，有一个问题，就是实际上根据设定，电影中福尔摩斯并不是十九世纪的人物，如此一来就对原来的案情进行了干涉，出现矛盾，这个后面再谈。</p>\n<p>令来看福华 CP 的，卖腐的，相爱相杀的女性，啊不，观众大失所望，恐怕是悬疑色彩的浓重，剧情的多段跳跃和突然切换，以及似乎毫无卖腐的情节。然而我等从第一季就只对其具备推理性质和现代化改编产生强烈爱好的人却是大欢喜：这才是正剧的风格，第三季给某些群体派太多显而易见的糖了。</p>\n<p>然而电影中的推理很好吗？电影没有派糖吗？非也。</p>\n<p>先说推理。电影中的诡计归结成一句话就是：死了的新娘为何能复活并杀死其丈夫？答案是一开始就没死，是在姐妹们的帮助下演戏，之后再当街杀丈夫并给大众一种复活的假象再高明地自杀，不留下破绽，并且还继续利用这种牺牲换来了死而复生继而复活的恐怖现象来帮助姐妹完成对姐妹的丈夫的复仇。卧槽竟然吞枪自杀只是演戏？乍一看似乎有点敷衍，但是和朋友讨论后认为，如果考虑到十九世纪科技水平的低下和侦查手段的匮乏，加上法医的暗中帮助，实际上完全是可能发生的。所以说推理虽然并不出彩或者惊世骇俗，然而还是有意思的。只是编剧没有给解答过程一个酷炫的表现，所以观众就有不爽、硬了不射的憋屈。那为什么不表现得很光很亮很油还很 duang 呢？同样后面再谈。</p>\n<p>再说派糖，电影中最明显的就是瀑布旁莫里亚蒂说的 “你们不如私奔吧” 的吧？原著可是福尔摩斯和教授一起掉下瀑布失踪的，电影里面华生来救福尔摩斯了啊。麦考夫在飞机里面对夏洛克嗑药的担心和毫不掩饰的 be there for you 你们无视了吗？午夜夏洛克和华生的深入交谈你们没触动吗？只能说糖派得有点晦涩了，伪粉抖一抖就掉了，真粉还是会粘着。</p>\n<p>另外纵观整个案件，诡计的实施涉及到已经患绝症的新娘，女仆，为了证明自己和男性一样能胜任工作而不得不女扮男装的女法医（电影此处对 man 的翻译应该有问题）以及一众的女性秘密组织，换句话说，这其实标志着女性的反抗。电影中已有多处暗示：玛丽说她希望跟华生一样能做事，并且参加女性选举权的争取；麦考夫说有一个眼皮底下的 enemy，undetected, and unstoppable，还说 we will lose，because they are right we are wrong；玛丽从十九世纪的被晾在一边到二十世纪终于能和丈夫一起参与事情；华生家庭的情况；通通都是编剧支持女性争取权利的暗示。这也是跟随了近年电影频繁地使用女性作为主角，将女性塑造出不同形象的大流（我是从冰雪奇缘开始察觉近来电影有这样的趋势的）。这才是给女性派的最好的糖不是吗？</p>\n<p>最后来说说电影对夏洛克这个人物的思考，顺便也把前面两个 “后面再谈” 解决了。原著中福尔摩斯基本上被塑造成理性思考和推理的机器，然而比较 tricky 的一点是根据设定，小说是道尔笔下的华生写的，小说中福尔摩斯的形象是道尔笔下的华生给大众塑造的，真实 (?) 的夏洛克到底是怎样的人无从得知。电影中也有反复地强调华生将夏洛克的案件写成文章发表。在午夜华生反复质问夏洛克关于感情和过去的问题，夏洛克没有说出来。这是编剧对夏洛克这个人物感情的探讨，没什么清晰的结论。之后没能保护受害人，夏洛克把自己关在房间里又磕药。然后莫里亚蒂就出现了在房间又吞枪了一次，没死，夏洛克觉得想不通怎么死不了的时候飞机着陆了把他震醒了。醒过来的二十一世纪是现实。一番交流后他又睡了，在梦里十九世纪醒来，开始了找玛丽和到在教堂里面解谜。最后指认凶手的时候他突然想到，凶手为什么要找他来破案呢？因为历史上新娘案就没被侦破，他作为侦探加入进案件了就产生了干涉，造成了奇怪的悖论。接着莫里亚蒂又出来了，场景就又切换到二十一世纪了，但是是更深一层梦里的二十一世纪，因为最后死尸活过来了，在现实里是不可能的。紧接着场景转到了著名的瀑布，这个估计就是夏洛克心里近乎最深层的地方了。可以看到，每当梦里有不寻常的事情发生，莫里亚蒂就会出来，试图让夏洛克偏离方向，只是第一次被飞机降落打断了。于是也就解释了为何解谜过程不酷炫，第一解谜发生在夏洛克脑内，显然不需要 “炫” 给自己看；第二，解谜会引出悖论从而引出教授，太酷炫会让观众大脑当机无法思考莫里亚蒂出现的原因。看到这你是不是忘记了这一段说的是夏洛克人物的探讨了？前面说了一大段剧情其实就是论证了在这个系列中，编剧认为莫里亚蒂就是夏洛克的心结和过去，或者说他脑中的魔鬼，会让夏洛克的思考出现问题。这是编剧对夏洛克过去的探讨。在原著中两人双双跌下瀑布，电影中是华生出来救场，并且表现得完全不像非梦境的华生。这 “夏洛克被心魔莫里亚蒂殴打，华生赶来将教授一脚踹下” 的场景表明夏洛克不再纠结莫里亚蒂 “复活” 了，而明白是他 “回来” 了。</p>\n<p>于是正如新娘最终还是死了，莫里亚蒂大约的确已经死了。正如复仇是秘密组织干的，无责任猜测一下下一季的剧情大概就是教授的同伙来复仇了。</p>\n<p>最后来看看编剧在电影里融合了什么呢？电视剧中的人物的重新运用，合格的推理，女性主义，对夏洛克的人物心理探讨，还有两季之间的承前启后。或许把这么多的东西融于一炉是有点用力过猛了，我刚看完的时候也是有点懵了，但是走回家的路上却越想越有意思。</p>\n<p>我给这电影三个评价：</p>\n<ul>\n<li>女性主义的胜利</li>\n<li>原著党的胜利</li>\n<li>伪粉的处刑</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>看完新出的夏洛克，想必大家都会很茫然。刚好今晚也看了，就说说我看了电影和影评后的总结吧。</p>\n<p>PS: 有剧透才能更好地看电影。</p>\n<p>PS: 如果你是想看好莱坞大片，还像和我同一片场的人那样带着爆米花和泡椒凤爪来看的，可以退票了。</p>\n<p>简单来说，整部电影的剧情几乎都是在嗑了药的夏洛克进入多层梦境中发生的。他要解决上一季结尾中莫里亚蒂的 “回归” 的问题，于是在脑内——或者说是思维迷宫内——解决一百年前的另外一个 “死而复活的新娘” 的问题。而解决这个问题的方法，就是将自己带入到那个维多利亚时代中，思考自己会如何行动，剧情如何发展。这也就是为什么差不多通篇都是维多利亚时代风格的由来。案情重组，简而言之。不过，有一个问题，就是实际上根据设定，电影中福尔摩斯并不是十九世纪的人物，如此一来就对原来的案情进行了干涉，出现矛盾，这个后面再谈。</p>\n<p>令来看福华 CP 的，卖腐的，相爱相杀的女性，啊不，观众大失所望，恐怕是悬疑色彩的浓重，剧情的多段跳跃和突然切换，以及似乎毫无卖腐的情节。然而我等从第一季就只对其具备推理性质和现代化改编产生强烈爱好的人却是大欢喜：这才是正剧的风格，第三季给某些群体派太多显而易见的糖了。</p>\n<p>然而电影中的推理很好吗？电影没有派糖吗？非也。</p>\n<p>先说推理。电影中的诡计归结成一句话就是：死了的新娘为何能复活并杀死其丈夫？答案是一开始就没死，是在姐妹们的帮助下演戏，之后再当街杀丈夫并给大众一种复活的假象再高明地自杀，不留下破绽，并且还继续利用这种牺牲换来了死而复生继而复活的恐怖现象来帮助姐妹完成对姐妹的丈夫的复仇。卧槽竟然吞枪自杀只是演戏？乍一看似乎有点敷衍，但是和朋友讨论后认为，如果考虑到十九世纪科技水平的低下和侦查手段的匮乏，加上法医的暗中帮助，实际上完全是可能发生的。所以说推理虽然并不出彩或者惊世骇俗，然而还是有意思的。只是编剧没有给解答过程一个酷炫的表现，所以观众就有不爽、硬了不射的憋屈。那为什么不表现得很光很亮很油还很 duang 呢？同样后面再谈。</p>\n<p>再说派糖，电影中最明显的就是瀑布旁莫里亚蒂说的 “你们不如私奔吧” 的吧？原著可是福尔摩斯和教授一起掉下瀑布失踪的，电影里面华生来救福尔摩斯了啊。麦考夫在飞机里面对夏洛克嗑药的担心和毫不掩饰的 be there for you 你们无视了吗？午夜夏洛克和华生的深入交谈你们没触动吗？只能说糖派得有点晦涩了，伪粉抖一抖就掉了，真粉还是会粘着。</p>\n<p>另外纵观整个案件，诡计的实施涉及到已经患绝症的新娘，女仆，为了证明自己和男性一样能胜任工作而不得不女扮男装的女法医（电影此处对 man 的翻译应该有问题）以及一众的女性秘密组织，换句话说，这其实标志着女性的反抗。电影中已有多处暗示：玛丽说她希望跟华生一样能做事，并且参加女性选举权的争取；麦考夫说有一个眼皮底下的 enemy，undetected, and unstoppable，还说 we will lose，because they are right we are wrong；玛丽从十九世纪的被晾在一边到二十世纪终于能和丈夫一起参与事情；华生家庭的情况；通通都是编剧支持女性争取权利的暗示。这也是跟随了近年电影频繁地使用女性作为主角，将女性塑造出不同形象的大流（我是从冰雪奇缘开始察觉近来电影有这样的趋势的）。这才是给女性派的最好的糖不是吗？</p>\n<p>最后来说说电影对夏洛克这个人物的思考，顺便也把前面两个 “后面再谈” 解决了。原著中福尔摩斯基本上被塑造成理性思考和推理的机器，然而比较 tricky 的一点是根据设定，小说是道尔笔下的华生写的，小说中福尔摩斯的形象是道尔笔下的华生给大众塑造的，真实 (?) 的夏洛克到底是怎样的人无从得知。电影中也有反复地强调华生将夏洛克的案件写成文章发表。在午夜华生反复质问夏洛克关于感情和过去的问题，夏洛克没有说出来。这是编剧对夏洛克这个人物感情的探讨，没什么清晰的结论。之后没能保护受害人，夏洛克把自己关在房间里又磕药。然后莫里亚蒂就出现了在房间又吞枪了一次，没死，夏洛克觉得想不通怎么死不了的时候飞机着陆了把他震醒了。醒过来的二十一世纪是现实。一番交流后他又睡了，在梦里十九世纪醒来，开始了找玛丽和到在教堂里面解谜。最后指认凶手的时候他突然想到，凶手为什么要找他来破案呢？因为历史上新娘案就没被侦破，他作为侦探加入进案件了就产生了干涉，造成了奇怪的悖论。接着莫里亚蒂又出来了，场景就又切换到二十一世纪了，但是是更深一层梦里的二十一世纪，因为最后死尸活过来了，在现实里是不可能的。紧接着场景转到了著名的瀑布，这个估计就是夏洛克心里近乎最深层的地方了。可以看到，每当梦里有不寻常的事情发生，莫里亚蒂就会出来，试图让夏洛克偏离方向，只是第一次被飞机降落打断了。于是也就解释了为何解谜过程不酷炫，第一解谜发生在夏洛克脑内，显然不需要 “炫” 给自己看；第二，解谜会引出悖论从而引出教授，太酷炫会让观众大脑当机无法思考莫里亚蒂出现的原因。看到这你是不是忘记了这一段说的是夏洛克人物的探讨了？前面说了一大段剧情其实就是论证了在这个系列中，编剧认为莫里亚蒂就是夏洛克的心结和过去，或者说他脑中的魔鬼，会让夏洛克的思考出现问题。这是编剧对夏洛克过去的探讨。在原著中两人双双跌下瀑布，电影中是华生出来救场，并且表现得完全不像非梦境的华生。这 “夏洛克被心魔莫里亚蒂殴打，华生赶来将教授一脚踹下” 的场景表明夏洛克不再纠结莫里亚蒂 “复活” 了，而明白是他 “回来” 了。</p>\n<p>于是正如新娘最终还是死了，莫里亚蒂大约的确已经死了。正如复仇是秘密组织干的，无责任猜测一下下一季的剧情大概就是教授的同伙来复仇了。</p>\n<p>最后来看看编剧在电影里融合了什么呢？电视剧中的人物的重新运用，合格的推理，女性主义，对夏洛克的人物心理探讨，还有两季之间的承前启后。或许把这么多的东西融于一炉是有点用力过猛了，我刚看完的时候也是有点懵了，但是走回家的路上却越想越有意思。</p>\n<p>我给这电影三个评价：</p>\n<ul>\n<li>女性主义的胜利</li>\n<li>原著党的胜利</li>\n<li>伪粉的处刑</li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Jan 05 2016 19:49:41 GMT+0800 (China Standard Time)","title":"看《Sherlock: The Abominable Bride》","path":"watch-sherlock-the-abominable-bride/","eyeCatchImage":null,"excerpt":null,"date":"2016-01-05T11:48:23.000Z","pv":0,"totalPV":0,"categories":"生活 > 电影","tags":["movie","bytalk"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2477},{"title":"自顾自地对 simpleTemplate.js 进行优化","id":"30","updated":"2014-11-12T12:05:34.000Z","date":"2014-11-12T12:05:08.000Z","_content":"\n[simpleTemplate.js](https://github.com/exoticknight/jswarehouse/tree/master/simpleTemplate) 的功能已经实现得差不多了，看能不能给它做一点优化。\n\n## 测试框架\n\n随手写一个记录运行前后时间的。\n\n```markup\n<script id=\"t_1\" type=\"x-tmpl-simpleTemplate\">\n{@list}<p>{*}</p>{-list}\n</script>\n<script>\nvar template = simpleTemplate( document.getElementById( 't_1' ).innerHTML );\n\nvar startTime,\n    endTime,\n    text,\n    loop,\n    loopLength,\n    times,\n    totalCount;\n\ntotalCount = 0;\n\nfor ( times = 0; times < 10; times++ ) {\n    startTime = new Date().getTime();\n\n    // test\nfor ( loop = 0, loopLength = 10/*100/1000*/; loop < loopLength; loop++ ) {\n    text = template.fill({\n        // data\n    }).render();\n}\n\n    // end test\n\n    endTime = new Date().getTime();\n    totalCount += ( endTime - startTime );\n} // end tests for\n\nconsole.log( totalCount / 10/*100/1000*/ );\n</script>\n```\n\n## 缓存数组长度\n\n说的是将以下代码：\n\n```javascript\nfor ( var i = 0; i < arr.length; i++ )\n```\n\n改成：\n\n```javascript\nfor ( var i = 0, length = arr.length; i < length; i++ )\n```\n\n从查阅网上的资料来看，这样改是有效的。[这里](http://jsperf.com/array-length-in-loop)\n\n我用上面自己写的代码来测试。用一个随便生成的 1000 个元素的随机数数组来填充，然后渲染 100 次。以此作为一次测试，进行十次，再取平均数。\n\n从测试来看，效果都不怎么样，没有多大提升的感觉。\n\n## 字符串拼接\n\n老生常谈了。在写代码的时候我觉得使用数组的 `push` 最后 `join` 会比较快，但是网上说现代浏览器下用 `+=` 更快，真是神奇了，通常感觉 `+=` 都会比较慢的。\n\n于是我去试了试，结果让人惊讶。在 chrome/IE78910 下都有性能提高，尤其是 chrome。\n\n> IE6789 的测试我是用 IE10 里面的开发人员工具切换模式来测试的，文档模式都是用 \"标准\"。\n\n看图。1000 个数组数据，渲染 100 次，测试 10 次取平均。\n\n![对比](https://i.imgur.com/VJTv9d0.png)\n\n## IE 下的字符串\n\n之前为了绕开 IE8 以下的 split 函数 bug，我已经将代码重写了一次，利用了 lastIndex 属性。没想到这个 lastIndex 属性在 IE 下还是跟其他浏览器不一样，测试了一下似乎是在处理换行上有点问题，简直神烦。\n\n于是我就将模板中所有的回车换行统统搞掉算了。\n\n```javascript\nreturn new Template( templateStr.replace( /[\\r\\n]/gm, '' ) );\n```","source":"_posts/自顾自地对simpleTemplate-js进行优化.md","raw":"---\ntitle: 自顾自地对 simpleTemplate.js 进行优化\ncategories:\n  - [技术, 前端]\n  - [编程语言, javascript]\ntags: [javascript, string-template]\npermalink: optimize-simpletemplatejs-by-myself\nid: 30\nupdated: '2014-11-12 20:05:34'\ndate: 2014-11-12 20:05:08\n---\n\n[simpleTemplate.js](https://github.com/exoticknight/jswarehouse/tree/master/simpleTemplate) 的功能已经实现得差不多了，看能不能给它做一点优化。\n\n## 测试框架\n\n随手写一个记录运行前后时间的。\n\n```markup\n<script id=\"t_1\" type=\"x-tmpl-simpleTemplate\">\n{@list}<p>{*}</p>{-list}\n</script>\n<script>\nvar template = simpleTemplate( document.getElementById( 't_1' ).innerHTML );\n\nvar startTime,\n    endTime,\n    text,\n    loop,\n    loopLength,\n    times,\n    totalCount;\n\ntotalCount = 0;\n\nfor ( times = 0; times < 10; times++ ) {\n    startTime = new Date().getTime();\n\n    // test\nfor ( loop = 0, loopLength = 10/*100/1000*/; loop < loopLength; loop++ ) {\n    text = template.fill({\n        // data\n    }).render();\n}\n\n    // end test\n\n    endTime = new Date().getTime();\n    totalCount += ( endTime - startTime );\n} // end tests for\n\nconsole.log( totalCount / 10/*100/1000*/ );\n</script>\n```\n\n## 缓存数组长度\n\n说的是将以下代码：\n\n```javascript\nfor ( var i = 0; i < arr.length; i++ )\n```\n\n改成：\n\n```javascript\nfor ( var i = 0, length = arr.length; i < length; i++ )\n```\n\n从查阅网上的资料来看，这样改是有效的。[这里](http://jsperf.com/array-length-in-loop)\n\n我用上面自己写的代码来测试。用一个随便生成的 1000 个元素的随机数数组来填充，然后渲染 100 次。以此作为一次测试，进行十次，再取平均数。\n\n从测试来看，效果都不怎么样，没有多大提升的感觉。\n\n## 字符串拼接\n\n老生常谈了。在写代码的时候我觉得使用数组的 `push` 最后 `join` 会比较快，但是网上说现代浏览器下用 `+=` 更快，真是神奇了，通常感觉 `+=` 都会比较慢的。\n\n于是我去试了试，结果让人惊讶。在 chrome/IE78910 下都有性能提高，尤其是 chrome。\n\n> IE6789 的测试我是用 IE10 里面的开发人员工具切换模式来测试的，文档模式都是用 \"标准\"。\n\n看图。1000 个数组数据，渲染 100 次，测试 10 次取平均。\n\n![对比](https://i.imgur.com/VJTv9d0.png)\n\n## IE 下的字符串\n\n之前为了绕开 IE8 以下的 split 函数 bug，我已经将代码重写了一次，利用了 lastIndex 属性。没想到这个 lastIndex 属性在 IE 下还是跟其他浏览器不一样，测试了一下似乎是在处理换行上有点问题，简直神烦。\n\n于是我就将模板中所有的回车换行统统搞掉算了。\n\n```javascript\nreturn new Template( templateStr.replace( /[\\r\\n]/gm, '' ) );\n```","slug":"optimize-simpletemplatejs-by-myself","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuov000vn7t4srtjlcry","content":"<p><a href=\"https://github.com/exoticknight/jswarehouse/tree/master/simpleTemplate\" target=\"_blank\" rel=\"noopener\">simpleTemplate.js</a> 的功能已经实现得差不多了，看能不能给它做一点优化。</p>\n<h2 id=\"测试框架\"><a href=\"#测试框架\" class=\"headerlink\" title=\"测试框架\"></a>测试框架</h2><p>随手写一个记录运行前后时间的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script id=&quot;t_1&quot; type=&quot;x-tmpl-simpleTemplate&quot;&gt;</span><br><span class=\"line\">&#123;@list&#125;&lt;p&gt;&#123;*&#125;&lt;/p&gt;&#123;-list&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var template = simpleTemplate( document.getElementById( &apos;t_1&apos; ).innerHTML );</span><br><span class=\"line\"></span><br><span class=\"line\">var startTime,</span><br><span class=\"line\">    endTime,</span><br><span class=\"line\">    text,</span><br><span class=\"line\">    loop,</span><br><span class=\"line\">    loopLength,</span><br><span class=\"line\">    times,</span><br><span class=\"line\">    totalCount;</span><br><span class=\"line\"></span><br><span class=\"line\">totalCount = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">for ( times = 0; times &lt; 10; times++ ) &#123;</span><br><span class=\"line\">    startTime = new Date().getTime();</span><br><span class=\"line\"></span><br><span class=\"line\">    // test</span><br><span class=\"line\">for ( loop = 0, loopLength = 10/*100/1000*/; loop &lt; loopLength; loop++ ) &#123;</span><br><span class=\"line\">    text = template.fill(&#123;</span><br><span class=\"line\">        // data</span><br><span class=\"line\">    &#125;).render();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // end test</span><br><span class=\"line\"></span><br><span class=\"line\">    endTime = new Date().getTime();</span><br><span class=\"line\">    totalCount += ( endTime - startTime );</span><br><span class=\"line\">&#125; // end tests for</span><br><span class=\"line\"></span><br><span class=\"line\">console.log( totalCount / 10/*100/1000*/ );</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"缓存数组长度\"><a href=\"#缓存数组长度\" class=\"headerlink\" title=\"缓存数组长度\"></a>缓存数组长度</h2><p>说的是将以下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++ )</span><br></pre></td></tr></table></figure>\n<p>改成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = arr.length; i &lt; length; i++ )</span><br></pre></td></tr></table></figure>\n<p>从查阅网上的资料来看，这样改是有效的。<a href=\"http://jsperf.com/array-length-in-loop\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>我用上面自己写的代码来测试。用一个随便生成的 1000 个元素的随机数数组来填充，然后渲染 100 次。以此作为一次测试，进行十次，再取平均数。</p>\n<p>从测试来看，效果都不怎么样，没有多大提升的感觉。</p>\n<h2 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h2><p>老生常谈了。在写代码的时候我觉得使用数组的 <code>push</code> 最后 <code>join</code> 会比较快，但是网上说现代浏览器下用 <code>+=</code> 更快，真是神奇了，通常感觉 <code>+=</code> 都会比较慢的。</p>\n<p>于是我去试了试，结果让人惊讶。在 chrome/IE78910 下都有性能提高，尤其是 chrome。</p>\n<blockquote>\n<p>IE6789 的测试我是用 IE10 里面的开发人员工具切换模式来测试的，文档模式都是用 “标准”。</p>\n</blockquote>\n<p>看图。1000 个数组数据，渲染 100 次，测试 10 次取平均。</p>\n<p><img src=\"https://i.imgur.com/VJTv9d0.png\" alt=\"对比\"></p>\n<h2 id=\"IE-下的字符串\"><a href=\"#IE-下的字符串\" class=\"headerlink\" title=\"IE 下的字符串\"></a>IE 下的字符串</h2><p>之前为了绕开 IE8 以下的 split 函数 bug，我已经将代码重写了一次，利用了 lastIndex 属性。没想到这个 lastIndex 属性在 IE 下还是跟其他浏览器不一样，测试了一下似乎是在处理换行上有点问题，简直神烦。</p>\n<p>于是我就将模板中所有的回车换行统统搞掉算了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Template( templateStr.replace( <span class=\"regexp\">/[\\r\\n]/gm</span>, <span class=\"string\">''</span> ) );</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/exoticknight/jswarehouse/tree/master/simpleTemplate\" target=\"_blank\" rel=\"noopener\">simpleTemplate.js</a> 的功能已经实现得差不多了，看能不能给它做一点优化。</p>\n<h2 id=\"测试框架\"><a href=\"#测试框架\" class=\"headerlink\" title=\"测试框架\"></a>测试框架</h2><p>随手写一个记录运行前后时间的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script id=&quot;t_1&quot; type=&quot;x-tmpl-simpleTemplate&quot;&gt;</span><br><span class=\"line\">&#123;@list&#125;&lt;p&gt;&#123;*&#125;&lt;/p&gt;&#123;-list&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var template = simpleTemplate( document.getElementById( &apos;t_1&apos; ).innerHTML );</span><br><span class=\"line\"></span><br><span class=\"line\">var startTime,</span><br><span class=\"line\">    endTime,</span><br><span class=\"line\">    text,</span><br><span class=\"line\">    loop,</span><br><span class=\"line\">    loopLength,</span><br><span class=\"line\">    times,</span><br><span class=\"line\">    totalCount;</span><br><span class=\"line\"></span><br><span class=\"line\">totalCount = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">for ( times = 0; times &lt; 10; times++ ) &#123;</span><br><span class=\"line\">    startTime = new Date().getTime();</span><br><span class=\"line\"></span><br><span class=\"line\">    // test</span><br><span class=\"line\">for ( loop = 0, loopLength = 10/*100/1000*/; loop &lt; loopLength; loop++ ) &#123;</span><br><span class=\"line\">    text = template.fill(&#123;</span><br><span class=\"line\">        // data</span><br><span class=\"line\">    &#125;).render();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // end test</span><br><span class=\"line\"></span><br><span class=\"line\">    endTime = new Date().getTime();</span><br><span class=\"line\">    totalCount += ( endTime - startTime );</span><br><span class=\"line\">&#125; // end tests for</span><br><span class=\"line\"></span><br><span class=\"line\">console.log( totalCount / 10/*100/1000*/ );</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"缓存数组长度\"><a href=\"#缓存数组长度\" class=\"headerlink\" title=\"缓存数组长度\"></a>缓存数组长度</h2><p>说的是将以下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++ )</span><br></pre></td></tr></table></figure>\n<p>改成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = arr.length; i &lt; length; i++ )</span><br></pre></td></tr></table></figure>\n<p>从查阅网上的资料来看，这样改是有效的。<a href=\"http://jsperf.com/array-length-in-loop\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>我用上面自己写的代码来测试。用一个随便生成的 1000 个元素的随机数数组来填充，然后渲染 100 次。以此作为一次测试，进行十次，再取平均数。</p>\n<p>从测试来看，效果都不怎么样，没有多大提升的感觉。</p>\n<h2 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h2><p>老生常谈了。在写代码的时候我觉得使用数组的 <code>push</code> 最后 <code>join</code> 会比较快，但是网上说现代浏览器下用 <code>+=</code> 更快，真是神奇了，通常感觉 <code>+=</code> 都会比较慢的。</p>\n<p>于是我去试了试，结果让人惊讶。在 chrome/IE78910 下都有性能提高，尤其是 chrome。</p>\n<blockquote>\n<p>IE6789 的测试我是用 IE10 里面的开发人员工具切换模式来测试的，文档模式都是用 “标准”。</p>\n</blockquote>\n<p>看图。1000 个数组数据，渲染 100 次，测试 10 次取平均。</p>\n<p><img src=\"https://i.imgur.com/VJTv9d0.png\" alt=\"对比\"></p>\n<h2 id=\"IE-下的字符串\"><a href=\"#IE-下的字符串\" class=\"headerlink\" title=\"IE 下的字符串\"></a>IE 下的字符串</h2><p>之前为了绕开 IE8 以下的 split 函数 bug，我已经将代码重写了一次，利用了 lastIndex 属性。没想到这个 lastIndex 属性在 IE 下还是跟其他浏览器不一样，测试了一下似乎是在处理换行上有点问题，简直神烦。</p>\n<p>于是我就将模板中所有的回车换行统统搞掉算了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Template( templateStr.replace( <span class=\"regexp\">/[\\r\\n]/gm</span>, <span class=\"string\">''</span> ) );</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://i.imgur.com/VJTv9d0.png","popularPost_tmp_gaData":{"updated":"Wed Nov 12 2014 20:05:34 GMT+0800 (China Standard Time)","title":"自顾自地对 simpleTemplate.js 进行优化","path":"optimize-simpletemplatejs-by-myself/","eyeCatchImage":"https://i.imgur.com/VJTv9d0.png","excerpt":null,"date":"2014-11-12T12:05:08.000Z","pv":0,"totalPV":0,"categories":"技术 > 前端 > 编程语言 > javascript","tags":["javascript","string-template"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":583},{"title":"记一次奇怪的爬虫经历","id":"45","updated":"2015-07-01T15:16:30.000Z","date":"2015-07-01T15:16:30.000Z","_content":"\n## 前言\n\n由于某些原因，我需要去<del>爬</del>获取一些国家旅游景点的信息。\n\n找到国家旅游局的网站，然后找到一个 5A 风景区目录。\n\n网址：http://www.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx?catalogType=view&resultType=5A\n\n于是去 pyspider 的 [demo][pyspider demo] 页新建一个项目：[5stat][5stat]，就去爬了。\n\n[pyspider demo]: http://demo.pyspider.org/\n[5stat]: http://demo.pyspider.org/debug/5stat\n\n## 分析页面\n\n网页比较特殊，看起来是用 dotnet 写的，翻页是按钮调用 js 代码实现的。跳转后还是同一个网址。\n\n这里就要用到 pyspider 支持的页面载入后运行 js 脚本的功能。\n\n先分析翻页按钮干了什么。\n\n如下图，调用一个名为 `__doPostBack` 的函数。\n\n![__doPostBack](https://i.imgur.com/dMRNDZz.png)\n\n在页面上寻找这个函数，看到函数体如下：\n\n```javascript\nvar theForm = document.forms['form1'];\nif (!theForm) {\n    theForm = document.form1;\n}\nfunction __doPostBack(eventTarget, eventArgument) {\n    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {\n        theForm.__EVENTTARGET.value = eventTarget;\n        theForm.__EVENTARGUMENT.value = eventArgument;\n        theForm.submit();\n    }\n}\n```\n\n函数将 `theForm` 里面的 `__EVENTTARGET` 值设置为 `PageNavigator1$LnkBtnNext` 之后就提交了。\n\n找到 `theForm` 对应的元素，看见有三个隐藏域， `__EVENTTARGET`、`__EVENTARGUMENT` 和 `__VIEWSTATE`。\n\n![theForm](https://i.imgur.com/4Bl389k.png)\n\n附近还有一个隐藏域 `__EVENTVALIDATION`。看名字就觉得要提交。\n\n于是试试只提交这三个值看看会不会报错。\n\n在 chrome 上安装 postman 这个应用，打开。\n\n![postman](https://i.imgur.com/CwPvFET.png)\n\n修改方式为 POST，填上地址和三个域的值，send。\n\n![postman result](https://i.imgur.com/7G2dgUC.png)\n\nOK，返回了正确的页面，也就是可行了。\n\n## 爬虫脚本\n\n嗯 pyspider 的爬虫脚本怎么写就不详述了，不会的看文档。\n\n着重列出爬虫执行的 js 脚本的功能。\n\n```javascript\nfunction() {\n    var flag = 'y';\n    if ( document.querySelector('#PageNavigator1_LnkBtnNext').getAttribute('disabled') ) {\n        flag = 'n';\n    }\n    return document.form1.__VIEWSTATE.value + '~' + document.form1.__EVENTVALIDATION.value + '~' + flag;\n}\n```\n\n如此一来在回到爬虫脚本中的时候就能得到下一页跳转的参数了。\n\n## 奇怪的地方来了\n\n因为 pyspider 的文档说明对于每个项目内的相同网址会忽略，于是按照教学提示给网址加了个 `#`。很明显这样的网址不会改变请求的参数（使用一些其他技术的情况下除外）。\n\n> 之后不再使用这个方法，因为 pyspider 判断是否同网址实质上是简单地将网址 md5 一下生成任务 id，以此来判断是否同一个爬虫任务。后来用的方法是直接重写任务 id 的生成。\n\n然而在爬下来的数据中却发现有除了旅游地点外的酒店信息。\n\n原来同一个页面也有五星级饭店的信息。如下图，注意最后有一个 `#`。\n\n![五星级饭店链接](https://i.imgur.com/I0saHSE.png)\n\n点击后跳转到一个网址：http://www.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx?catalogType=hotel&resultType=%u4E94 的页面。\n\n![五星级饭店](https://i.imgur.com/RUe1IIX.png)\n\n看起来跟旅游地点差不多，新建一个项目 [5hotel][5hotel]，直接复制粘贴之前的代码，就是改了一下网址。\n\n期间还将任务 id 的生成重写了一下，这样即使请求同一个网址也没问题了。\n\n然而运行的结果却失败了。\n\n![failed](https://i.imgur.com/x8w8QsA.png)\n\n在 content 中很明显看出页面获取不全，然而代码是直接复制的，页面也是相同结构的，为什么会出现这个问题呢？\n\n然后我就被困扰了两天，接着就没在去管，盘算以后自己实现个爬虫再爬好了。\n\n[5hotel]: http://demo.pyspider.org/debug/5hotel\n\n## 转机\n\n今天我再上去看，爬 5A 风景区的项目一直稳定运行。\n\n五星级饭店的却还是无法抓取全部页面。\n\n然后我鬼使神差地给网址加了一个 `#`。网址从：\n\nwww.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx?catalogType=hotel&resultType=%u4E94\n\n变成\n\nwww.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx#?catalogType=hotel&resultType=%u4E94\n\n然后就能爬了！！！\n\nshenmegui？？？！！！\n\n![success](https://i.imgur.com/nRP3znG.png)\n\n我也搞不清楚究竟是 pyspider 的问题还是 phantomjs 的问题还是 dotnet 的问题了。","source":"_posts/记一次奇怪的爬虫经历.md","raw":"---\ntitle: 记一次奇怪的爬虫经历\ncategories:\n  - [技术, 黑客]\n  - [技术, 杂谈]\n  - [编程语言, python]\ntags: [python, script, spider, scraper, pyspider]\npermalink: a-weird-experience-while-using-pyspider\nid: 45\nupdated: '2015-07-01 23:16:30'\ndate: 2015-07-01 23:16:30\n---\n\n## 前言\n\n由于某些原因，我需要去<del>爬</del>获取一些国家旅游景点的信息。\n\n找到国家旅游局的网站，然后找到一个 5A 风景区目录。\n\n网址：http://www.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx?catalogType=view&resultType=5A\n\n于是去 pyspider 的 [demo][pyspider demo] 页新建一个项目：[5stat][5stat]，就去爬了。\n\n[pyspider demo]: http://demo.pyspider.org/\n[5stat]: http://demo.pyspider.org/debug/5stat\n\n## 分析页面\n\n网页比较特殊，看起来是用 dotnet 写的，翻页是按钮调用 js 代码实现的。跳转后还是同一个网址。\n\n这里就要用到 pyspider 支持的页面载入后运行 js 脚本的功能。\n\n先分析翻页按钮干了什么。\n\n如下图，调用一个名为 `__doPostBack` 的函数。\n\n![__doPostBack](https://i.imgur.com/dMRNDZz.png)\n\n在页面上寻找这个函数，看到函数体如下：\n\n```javascript\nvar theForm = document.forms['form1'];\nif (!theForm) {\n    theForm = document.form1;\n}\nfunction __doPostBack(eventTarget, eventArgument) {\n    if (!theForm.onsubmit || (theForm.onsubmit() != false)) {\n        theForm.__EVENTTARGET.value = eventTarget;\n        theForm.__EVENTARGUMENT.value = eventArgument;\n        theForm.submit();\n    }\n}\n```\n\n函数将 `theForm` 里面的 `__EVENTTARGET` 值设置为 `PageNavigator1$LnkBtnNext` 之后就提交了。\n\n找到 `theForm` 对应的元素，看见有三个隐藏域， `__EVENTTARGET`、`__EVENTARGUMENT` 和 `__VIEWSTATE`。\n\n![theForm](https://i.imgur.com/4Bl389k.png)\n\n附近还有一个隐藏域 `__EVENTVALIDATION`。看名字就觉得要提交。\n\n于是试试只提交这三个值看看会不会报错。\n\n在 chrome 上安装 postman 这个应用，打开。\n\n![postman](https://i.imgur.com/CwPvFET.png)\n\n修改方式为 POST，填上地址和三个域的值，send。\n\n![postman result](https://i.imgur.com/7G2dgUC.png)\n\nOK，返回了正确的页面，也就是可行了。\n\n## 爬虫脚本\n\n嗯 pyspider 的爬虫脚本怎么写就不详述了，不会的看文档。\n\n着重列出爬虫执行的 js 脚本的功能。\n\n```javascript\nfunction() {\n    var flag = 'y';\n    if ( document.querySelector('#PageNavigator1_LnkBtnNext').getAttribute('disabled') ) {\n        flag = 'n';\n    }\n    return document.form1.__VIEWSTATE.value + '~' + document.form1.__EVENTVALIDATION.value + '~' + flag;\n}\n```\n\n如此一来在回到爬虫脚本中的时候就能得到下一页跳转的参数了。\n\n## 奇怪的地方来了\n\n因为 pyspider 的文档说明对于每个项目内的相同网址会忽略，于是按照教学提示给网址加了个 `#`。很明显这样的网址不会改变请求的参数（使用一些其他技术的情况下除外）。\n\n> 之后不再使用这个方法，因为 pyspider 判断是否同网址实质上是简单地将网址 md5 一下生成任务 id，以此来判断是否同一个爬虫任务。后来用的方法是直接重写任务 id 的生成。\n\n然而在爬下来的数据中却发现有除了旅游地点外的酒店信息。\n\n原来同一个页面也有五星级饭店的信息。如下图，注意最后有一个 `#`。\n\n![五星级饭店链接](https://i.imgur.com/I0saHSE.png)\n\n点击后跳转到一个网址：http://www.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx?catalogType=hotel&resultType=%u4E94 的页面。\n\n![五星级饭店](https://i.imgur.com/RUe1IIX.png)\n\n看起来跟旅游地点差不多，新建一个项目 [5hotel][5hotel]，直接复制粘贴之前的代码，就是改了一下网址。\n\n期间还将任务 id 的生成重写了一下，这样即使请求同一个网址也没问题了。\n\n然而运行的结果却失败了。\n\n![failed](https://i.imgur.com/x8w8QsA.png)\n\n在 content 中很明显看出页面获取不全，然而代码是直接复制的，页面也是相同结构的，为什么会出现这个问题呢？\n\n然后我就被困扰了两天，接着就没在去管，盘算以后自己实现个爬虫再爬好了。\n\n[5hotel]: http://demo.pyspider.org/debug/5hotel\n\n## 转机\n\n今天我再上去看，爬 5A 风景区的项目一直稳定运行。\n\n五星级饭店的却还是无法抓取全部页面。\n\n然后我鬼使神差地给网址加了一个 `#`。网址从：\n\nwww.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx?catalogType=hotel&resultType=%u4E94\n\n变成\n\nwww.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx#?catalogType=hotel&resultType=%u4E94\n\n然后就能爬了！！！\n\nshenmegui？？？！！！\n\n![success](https://i.imgur.com/nRP3znG.png)\n\n我也搞不清楚究竟是 pyspider 的问题还是 phantomjs 的问题还是 dotnet 的问题了。","slug":"a-weird-experience-while-using-pyspider","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuow000yn7t45yujj46a","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由于某些原因，我需要去<del>爬</del>获取一些国家旅游景点的信息。</p>\n<p>找到国家旅游局的网站，然后找到一个 5A 风景区目录。</p>\n<p>网址：<a href=\"http://www.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx?catalogType=view&amp;resultType=5A\" target=\"_blank\" rel=\"noopener\">http://www.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx?catalogType=view&amp;resultType=5A</a></p>\n<p>于是去 pyspider 的 <a href=\"http://demo.pyspider.org/\" target=\"_blank\" rel=\"noopener\">demo</a> 页新建一个项目：<a href=\"http://demo.pyspider.org/debug/5stat\" target=\"_blank\" rel=\"noopener\">5stat</a>，就去爬了。</p>\n<h2 id=\"分析页面\"><a href=\"#分析页面\" class=\"headerlink\" title=\"分析页面\"></a>分析页面</h2><p>网页比较特殊，看起来是用 dotnet 写的，翻页是按钮调用 js 代码实现的。跳转后还是同一个网址。</p>\n<p>这里就要用到 pyspider 支持的页面载入后运行 js 脚本的功能。</p>\n<p>先分析翻页按钮干了什么。</p>\n<p>如下图，调用一个名为 <code>__doPostBack</code> 的函数。</p>\n<p><img src=\"https://i.imgur.com/dMRNDZz.png\" alt=\"__doPostBack\"></p>\n<p>在页面上寻找这个函数，看到函数体如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> theForm = <span class=\"built_in\">document</span>.forms[<span class=\"string\">'form1'</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!theForm) &#123;</span><br><span class=\"line\">    theForm = <span class=\"built_in\">document</span>.form1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__doPostBack</span>(<span class=\"params\">eventTarget, eventArgument</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!theForm.onsubmit || (theForm.onsubmit() != <span class=\"literal\">false</span>)) &#123;</span><br><span class=\"line\">        theForm.__EVENTTARGET.value = eventTarget;</span><br><span class=\"line\">        theForm.__EVENTARGUMENT.value = eventArgument;</span><br><span class=\"line\">        theForm.submit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数将 <code>theForm</code> 里面的 <code>__EVENTTARGET</code> 值设置为 <code>PageNavigator1$LnkBtnNext</code> 之后就提交了。</p>\n<p>找到 <code>theForm</code> 对应的元素，看见有三个隐藏域， <code>__EVENTTARGET</code>、<code>__EVENTARGUMENT</code> 和 <code>__VIEWSTATE</code>。</p>\n<p><img src=\"https://i.imgur.com/4Bl389k.png\" alt=\"theForm\"></p>\n<p>附近还有一个隐藏域 <code>__EVENTVALIDATION</code>。看名字就觉得要提交。</p>\n<p>于是试试只提交这三个值看看会不会报错。</p>\n<p>在 chrome 上安装 postman 这个应用，打开。</p>\n<p><img src=\"https://i.imgur.com/CwPvFET.png\" alt=\"postman\"></p>\n<p>修改方式为 POST，填上地址和三个域的值，send。</p>\n<p><img src=\"https://i.imgur.com/7G2dgUC.png\" alt=\"postman result\"></p>\n<p>OK，返回了正确的页面，也就是可行了。</p>\n<h2 id=\"爬虫脚本\"><a href=\"#爬虫脚本\" class=\"headerlink\" title=\"爬虫脚本\"></a>爬虫脚本</h2><p>嗯 pyspider 的爬虫脚本怎么写就不详述了，不会的看文档。</p>\n<p>着重列出爬虫执行的 js 脚本的功能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> flag = <span class=\"string\">'y'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#PageNavigator1_LnkBtnNext'</span>).getAttribute(<span class=\"string\">'disabled'</span>) ) &#123;</span><br><span class=\"line\">        flag = <span class=\"string\">'n'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.form1.__VIEWSTATE.value + <span class=\"string\">'~'</span> + <span class=\"built_in\">document</span>.form1.__EVENTVALIDATION.value + <span class=\"string\">'~'</span> + flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如此一来在回到爬虫脚本中的时候就能得到下一页跳转的参数了。</p>\n<h2 id=\"奇怪的地方来了\"><a href=\"#奇怪的地方来了\" class=\"headerlink\" title=\"奇怪的地方来了\"></a>奇怪的地方来了</h2><p>因为 pyspider 的文档说明对于每个项目内的相同网址会忽略，于是按照教学提示给网址加了个 <code>#</code>。很明显这样的网址不会改变请求的参数（使用一些其他技术的情况下除外）。</p>\n<blockquote>\n<p>之后不再使用这个方法，因为 pyspider 判断是否同网址实质上是简单地将网址 md5 一下生成任务 id，以此来判断是否同一个爬虫任务。后来用的方法是直接重写任务 id 的生成。</p>\n</blockquote>\n<p>然而在爬下来的数据中却发现有除了旅游地点外的酒店信息。</p>\n<p>原来同一个页面也有五星级饭店的信息。如下图，注意最后有一个 <code>#</code>。</p>\n<p><img src=\"https://i.imgur.com/I0saHSE.png\" alt=\"五星级饭店链接\"></p>\n<p>点击后跳转到一个网址：<a href=\"http://www.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx?catalogType=hotel&amp;resultType=%u4E94\" target=\"_blank\" rel=\"noopener\">http://www.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx?catalogType=hotel&amp;resultType=%u4E94</a> 的页面。</p>\n<p><img src=\"https://i.imgur.com/RUe1IIX.png\" alt=\"五星级饭店\"></p>\n<p>看起来跟旅游地点差不多，新建一个项目 <a href=\"http://demo.pyspider.org/debug/5hotel\" target=\"_blank\" rel=\"noopener\">5hotel</a>，直接复制粘贴之前的代码，就是改了一下网址。</p>\n<p>期间还将任务 id 的生成重写了一下，这样即使请求同一个网址也没问题了。</p>\n<p>然而运行的结果却失败了。</p>\n<p><img src=\"https://i.imgur.com/x8w8QsA.png\" alt=\"failed\"></p>\n<p>在 content 中很明显看出页面获取不全，然而代码是直接复制的，页面也是相同结构的，为什么会出现这个问题呢？</p>\n<p>然后我就被困扰了两天，接着就没在去管，盘算以后自己实现个爬虫再爬好了。</p>\n<h2 id=\"转机\"><a href=\"#转机\" class=\"headerlink\" title=\"转机\"></a>转机</h2><p>今天我再上去看，爬 5A 风景区的项目一直稳定运行。</p>\n<p>五星级饭店的却还是无法抓取全部页面。</p>\n<p>然后我鬼使神差地给网址加了一个 <code>#</code>。网址从：</p>\n<p>www.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx?catalogType=hotel&amp;resultType=%u4E94</p>\n<p>变成</p>\n<p>www.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx#?catalogType=hotel&amp;resultType=%u4E94</p>\n<p>然后就能爬了！！！</p>\n<p>shenmegui？？？！！！</p>\n<p><img src=\"https://i.imgur.com/nRP3znG.png\" alt=\"success\"></p>\n<p>我也搞不清楚究竟是 pyspider 的问题还是 phantomjs 的问题还是 dotnet 的问题了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>由于某些原因，我需要去<del>爬</del>获取一些国家旅游景点的信息。</p>\n<p>找到国家旅游局的网站，然后找到一个 5A 风景区目录。</p>\n<p>网址：<a href=\"http://www.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx?catalogType=view&amp;resultType=5A\" target=\"_blank\" rel=\"noopener\">http://www.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx?catalogType=view&amp;resultType=5A</a></p>\n<p>于是去 pyspider 的 <a href=\"http://demo.pyspider.org/\" target=\"_blank\" rel=\"noopener\">demo</a> 页新建一个项目：<a href=\"http://demo.pyspider.org/debug/5stat\" target=\"_blank\" rel=\"noopener\">5stat</a>，就去爬了。</p>\n<h2 id=\"分析页面\"><a href=\"#分析页面\" class=\"headerlink\" title=\"分析页面\"></a>分析页面</h2><p>网页比较特殊，看起来是用 dotnet 写的，翻页是按钮调用 js 代码实现的。跳转后还是同一个网址。</p>\n<p>这里就要用到 pyspider 支持的页面载入后运行 js 脚本的功能。</p>\n<p>先分析翻页按钮干了什么。</p>\n<p>如下图，调用一个名为 <code>__doPostBack</code> 的函数。</p>\n<p><img src=\"https://i.imgur.com/dMRNDZz.png\" alt=\"__doPostBack\"></p>\n<p>在页面上寻找这个函数，看到函数体如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> theForm = <span class=\"built_in\">document</span>.forms[<span class=\"string\">'form1'</span>];</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!theForm) &#123;</span><br><span class=\"line\">    theForm = <span class=\"built_in\">document</span>.form1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__doPostBack</span>(<span class=\"params\">eventTarget, eventArgument</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!theForm.onsubmit || (theForm.onsubmit() != <span class=\"literal\">false</span>)) &#123;</span><br><span class=\"line\">        theForm.__EVENTTARGET.value = eventTarget;</span><br><span class=\"line\">        theForm.__EVENTARGUMENT.value = eventArgument;</span><br><span class=\"line\">        theForm.submit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数将 <code>theForm</code> 里面的 <code>__EVENTTARGET</code> 值设置为 <code>PageNavigator1$LnkBtnNext</code> 之后就提交了。</p>\n<p>找到 <code>theForm</code> 对应的元素，看见有三个隐藏域， <code>__EVENTTARGET</code>、<code>__EVENTARGUMENT</code> 和 <code>__VIEWSTATE</code>。</p>\n<p><img src=\"https://i.imgur.com/4Bl389k.png\" alt=\"theForm\"></p>\n<p>附近还有一个隐藏域 <code>__EVENTVALIDATION</code>。看名字就觉得要提交。</p>\n<p>于是试试只提交这三个值看看会不会报错。</p>\n<p>在 chrome 上安装 postman 这个应用，打开。</p>\n<p><img src=\"https://i.imgur.com/CwPvFET.png\" alt=\"postman\"></p>\n<p>修改方式为 POST，填上地址和三个域的值，send。</p>\n<p><img src=\"https://i.imgur.com/7G2dgUC.png\" alt=\"postman result\"></p>\n<p>OK，返回了正确的页面，也就是可行了。</p>\n<h2 id=\"爬虫脚本\"><a href=\"#爬虫脚本\" class=\"headerlink\" title=\"爬虫脚本\"></a>爬虫脚本</h2><p>嗯 pyspider 的爬虫脚本怎么写就不详述了，不会的看文档。</p>\n<p>着重列出爬虫执行的 js 脚本的功能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> flag = <span class=\"string\">'y'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#PageNavigator1_LnkBtnNext'</span>).getAttribute(<span class=\"string\">'disabled'</span>) ) &#123;</span><br><span class=\"line\">        flag = <span class=\"string\">'n'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">document</span>.form1.__VIEWSTATE.value + <span class=\"string\">'~'</span> + <span class=\"built_in\">document</span>.form1.__EVENTVALIDATION.value + <span class=\"string\">'~'</span> + flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如此一来在回到爬虫脚本中的时候就能得到下一页跳转的参数了。</p>\n<h2 id=\"奇怪的地方来了\"><a href=\"#奇怪的地方来了\" class=\"headerlink\" title=\"奇怪的地方来了\"></a>奇怪的地方来了</h2><p>因为 pyspider 的文档说明对于每个项目内的相同网址会忽略，于是按照教学提示给网址加了个 <code>#</code>。很明显这样的网址不会改变请求的参数（使用一些其他技术的情况下除外）。</p>\n<blockquote>\n<p>之后不再使用这个方法，因为 pyspider 判断是否同网址实质上是简单地将网址 md5 一下生成任务 id，以此来判断是否同一个爬虫任务。后来用的方法是直接重写任务 id 的生成。</p>\n</blockquote>\n<p>然而在爬下来的数据中却发现有除了旅游地点外的酒店信息。</p>\n<p>原来同一个页面也有五星级饭店的信息。如下图，注意最后有一个 <code>#</code>。</p>\n<p><img src=\"https://i.imgur.com/I0saHSE.png\" alt=\"五星级饭店链接\"></p>\n<p>点击后跳转到一个网址：<a href=\"http://www.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx?catalogType=hotel&amp;resultType=%u4E94\" target=\"_blank\" rel=\"noopener\">http://www.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx?catalogType=hotel&amp;resultType=%u4E94</a> 的页面。</p>\n<p><img src=\"https://i.imgur.com/RUe1IIX.png\" alt=\"五星级饭店\"></p>\n<p>看起来跟旅游地点差不多，新建一个项目 <a href=\"http://demo.pyspider.org/debug/5hotel\" target=\"_blank\" rel=\"noopener\">5hotel</a>，直接复制粘贴之前的代码，就是改了一下网址。</p>\n<p>期间还将任务 id 的生成重写了一下，这样即使请求同一个网址也没问题了。</p>\n<p>然而运行的结果却失败了。</p>\n<p><img src=\"https://i.imgur.com/x8w8QsA.png\" alt=\"failed\"></p>\n<p>在 content 中很明显看出页面获取不全，然而代码是直接复制的，页面也是相同结构的，为什么会出现这个问题呢？</p>\n<p>然后我就被困扰了两天，接着就没在去管，盘算以后自己实现个爬虫再爬好了。</p>\n<h2 id=\"转机\"><a href=\"#转机\" class=\"headerlink\" title=\"转机\"></a>转机</h2><p>今天我再上去看，爬 5A 风景区的项目一直稳定运行。</p>\n<p>五星级饭店的却还是无法抓取全部页面。</p>\n<p>然后我鬼使神差地给网址加了一个 <code>#</code>。网址从：</p>\n<p>www.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx?catalogType=hotel&amp;resultType=%u4E94</p>\n<p>变成</p>\n<p>www.cnta.gov.cn:8000/Forms/TravelCatalog/TravelCatalogList.aspx#?catalogType=hotel&amp;resultType=%u4E94</p>\n<p>然后就能爬了！！！</p>\n<p>shenmegui？？？！！！</p>\n<p><img src=\"https://i.imgur.com/nRP3znG.png\" alt=\"success\"></p>\n<p>我也搞不清楚究竟是 pyspider 的问题还是 phantomjs 的问题还是 dotnet 的问题了。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://i.imgur.com/dMRNDZz.png","popularPost_tmp_gaData":{"updated":"Wed Jul 01 2015 23:16:30 GMT+0800 (China Standard Time)","title":"记一次奇怪的爬虫经历","path":"a-weird-experience-while-using-pyspider/","eyeCatchImage":"https://i.imgur.com/dMRNDZz.png","excerpt":null,"date":"2015-07-01T15:16:30.000Z","pv":0,"totalPV":0,"categories":"技术 > 黑客 > 杂谈 > 编程语言 > python","tags":["python","script","spider","scraper","pyspider"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1664},{"title":"说说牛客上的一道 JavaScript 题目","id":"53","updated":"2016-12-13T12:48:11.000Z","date":"2016-12-13T12:48:11.000Z","_content":"\n牛客上有这么一道 JavaScript 的 [题目][1]。\n\n```javascript\n// 填写内容让下面代码支持 a.name = “name1”; b.name = “name2”;\nfunction obj(name){\n    【1】\n}\nobj.【2】 = \"name2\";\nvar a = obj(\"name1\");\nvar b = new obj;\n```\n\n【1】和【2】是填写的内容，【2】的答案是 `prototype.name`，没争议。\n\n问题是【1】，参考答案居然是 `if(name){ this.name = name;}return this;`，这么随便地玩弄 `this` 不就是明摆着污染全局变量吗？暴力赋值不可取。\n\n下面的一些高票讨论还说了一大堆解释的废话，连他自己都说自己好罗嗦。对，你不但罗嗦，而且还没有改错。注释里都说了给 window 的属性赋值，还不自知出问题，真是误人子弟。\n\n先来分析一下题目，a 和 b 都从 obj 来，为什么同名的属性值不一样？可以看出，是对 obj 这个函数的调用方式不一样，a 是 obj 函数的调用结果，而 b 则是 obj 作为 * 构造函数 * 调用的结果。所以这题的重点应该是如何区分_函数调用_和_构造函数调用_。\n\n一个关键字 `new` 决定了不同。`new` 的作用是什么呢？[MDN][2] 上说了，面试也会考你的，简单来说是三步，`new foo`：\n\n1. 生成一个继承于 foo.prototype 的对象\n2. foo 会被调用，其中的 `this` 值会被绑定为 1 中的对象\n3. 如果 foo 没有返回一个对象（注意是对象！），则返回 1 的对象\n\n从 2 就可以看出 `this` 值会被 `new` 绑定为一个确定的对象，而不是像普通函数调用中那样自己不可预料，要看上下文的进程。\n\n于是就可以在这里做文章。先来判断 `this` 的值。\n\n```javascript\nif (this instanceof obj) {}\n```\n\n`instanceof` 会检查 `this` 的原型链上是否存在 `foo.prototype`。也就是说能判断是否满足第 1 条，确保了对象能从 `prototype` 中读取到 `name` 属性。（毕竟代码中并没有给 b 的赋值中传入）\n\n>`instanceof` 并不是完美的判断方法，但是在这里足够了，后面会谈到这个问题。\n\n```javascript\nif (this instanceof obj) {\n    // new 调用\n} else {\n    // 非 new 调用\n    return {\n        name: name\n    }\n}\n```\n\n非 new 调用的情况下，直接返回一个新对象就 OK 了。\n\n而在 new 调用的情况下，可以看到 `function obj(name)` 定义的时候是有参数的，调用的时候却没参数，这就要小心了，为了安全起见，还是判断一下为妙。\n\n```javascript\nif (this instanceof obj) {\n    // new 调用\n    if (name !== undefined) {\n        this.name = name\n    }\n} else {\n    // 非 new 调用\n    return {\n        name: name\n    }\n}\n```\n\n一般来说，判断会写成 `if (name)`，但是碰到 `null`、`0`、`false` 就 GG 了，所以还是谨慎点吧。\n\n问题到这里就可以比较完美地解答了。\n\n## bonus: instanceof 的问题\n『`instanceof` 会检查 `this` 的原型链上是否存在 `foo.prototype`』，为什么说得这么拗口，是因为需要表达出 `instanceof` 本来就不是真的用来检测是否调用 `new` 的方法。\n\n在题目里面，要求的是 a 需要从原型链上读取到特定的属性值，所以 `instanceof` 的作用刚好在这里能符合要求而已。\n\n函数调用除了题目中的方法还有第三种方法，那就是 `foo.call`、`foo.apply`，而且也能为函数指定 `this` 的值（所以还有 `bind`）。因此是存在方法调戏 `instanceof` 的。\n\n```javascript\nfoo.prototype.name = 'foo'\nvar midman = new foo('fake foo')\nvar a = foo.call(midman)\nvar b = foo.call(midman, 'b')\na  // undefined, WTF?!\nb  // undefined, WTF?!\n```\n\n这里的 `foo` 调用的方式是作为函数来调用，但是为 `this` 绑定的值是从 `foo` 上 `new` 出来的，换句话说，其原型链上存在 `foo.prototype`，于是就骗过了 `instanceof`。\n\n于是 ES2015 来搭救你了，新增了一个 `new.target`。于是修改成：\n\n```javascript\nif (new.target !== undefined) {\n    // new 调用\n    if (name !== undefined) {\n        this.name = name\n    }\n} else {\n    // 非 new 调用\n    return {\n        name: name\n    }\n}\n```\n\n[1]: https://www.nowcoder.com/questionTerminal/9c76e58c2ce94eb9b8168b43adef4f50\n[2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new","source":"_posts/说说牛客上的一道-JavaScript-题目.md","raw":"---\ntitle: 说说牛客上的一道 JavaScript 题目\ncategories:\n  - [技术, 黑客]\n  - [编程语言, javascript]\ntags: [javascript]\npermalink: talk-about-a-question-in-nowcoder\nid: 53\nupdated: '2016-12-13 20:48:11'\ndate: 2016-12-13 20:48:11\n---\n\n牛客上有这么一道 JavaScript 的 [题目][1]。\n\n```javascript\n// 填写内容让下面代码支持 a.name = “name1”; b.name = “name2”;\nfunction obj(name){\n    【1】\n}\nobj.【2】 = \"name2\";\nvar a = obj(\"name1\");\nvar b = new obj;\n```\n\n【1】和【2】是填写的内容，【2】的答案是 `prototype.name`，没争议。\n\n问题是【1】，参考答案居然是 `if(name){ this.name = name;}return this;`，这么随便地玩弄 `this` 不就是明摆着污染全局变量吗？暴力赋值不可取。\n\n下面的一些高票讨论还说了一大堆解释的废话，连他自己都说自己好罗嗦。对，你不但罗嗦，而且还没有改错。注释里都说了给 window 的属性赋值，还不自知出问题，真是误人子弟。\n\n先来分析一下题目，a 和 b 都从 obj 来，为什么同名的属性值不一样？可以看出，是对 obj 这个函数的调用方式不一样，a 是 obj 函数的调用结果，而 b 则是 obj 作为 * 构造函数 * 调用的结果。所以这题的重点应该是如何区分_函数调用_和_构造函数调用_。\n\n一个关键字 `new` 决定了不同。`new` 的作用是什么呢？[MDN][2] 上说了，面试也会考你的，简单来说是三步，`new foo`：\n\n1. 生成一个继承于 foo.prototype 的对象\n2. foo 会被调用，其中的 `this` 值会被绑定为 1 中的对象\n3. 如果 foo 没有返回一个对象（注意是对象！），则返回 1 的对象\n\n从 2 就可以看出 `this` 值会被 `new` 绑定为一个确定的对象，而不是像普通函数调用中那样自己不可预料，要看上下文的进程。\n\n于是就可以在这里做文章。先来判断 `this` 的值。\n\n```javascript\nif (this instanceof obj) {}\n```\n\n`instanceof` 会检查 `this` 的原型链上是否存在 `foo.prototype`。也就是说能判断是否满足第 1 条，确保了对象能从 `prototype` 中读取到 `name` 属性。（毕竟代码中并没有给 b 的赋值中传入）\n\n>`instanceof` 并不是完美的判断方法，但是在这里足够了，后面会谈到这个问题。\n\n```javascript\nif (this instanceof obj) {\n    // new 调用\n} else {\n    // 非 new 调用\n    return {\n        name: name\n    }\n}\n```\n\n非 new 调用的情况下，直接返回一个新对象就 OK 了。\n\n而在 new 调用的情况下，可以看到 `function obj(name)` 定义的时候是有参数的，调用的时候却没参数，这就要小心了，为了安全起见，还是判断一下为妙。\n\n```javascript\nif (this instanceof obj) {\n    // new 调用\n    if (name !== undefined) {\n        this.name = name\n    }\n} else {\n    // 非 new 调用\n    return {\n        name: name\n    }\n}\n```\n\n一般来说，判断会写成 `if (name)`，但是碰到 `null`、`0`、`false` 就 GG 了，所以还是谨慎点吧。\n\n问题到这里就可以比较完美地解答了。\n\n## bonus: instanceof 的问题\n『`instanceof` 会检查 `this` 的原型链上是否存在 `foo.prototype`』，为什么说得这么拗口，是因为需要表达出 `instanceof` 本来就不是真的用来检测是否调用 `new` 的方法。\n\n在题目里面，要求的是 a 需要从原型链上读取到特定的属性值，所以 `instanceof` 的作用刚好在这里能符合要求而已。\n\n函数调用除了题目中的方法还有第三种方法，那就是 `foo.call`、`foo.apply`，而且也能为函数指定 `this` 的值（所以还有 `bind`）。因此是存在方法调戏 `instanceof` 的。\n\n```javascript\nfoo.prototype.name = 'foo'\nvar midman = new foo('fake foo')\nvar a = foo.call(midman)\nvar b = foo.call(midman, 'b')\na  // undefined, WTF?!\nb  // undefined, WTF?!\n```\n\n这里的 `foo` 调用的方式是作为函数来调用，但是为 `this` 绑定的值是从 `foo` 上 `new` 出来的，换句话说，其原型链上存在 `foo.prototype`，于是就骗过了 `instanceof`。\n\n于是 ES2015 来搭救你了，新增了一个 `new.target`。于是修改成：\n\n```javascript\nif (new.target !== undefined) {\n    // new 调用\n    if (name !== undefined) {\n        this.name = name\n    }\n} else {\n    // 非 new 调用\n    return {\n        name: name\n    }\n}\n```\n\n[1]: https://www.nowcoder.com/questionTerminal/9c76e58c2ce94eb9b8168b43adef4f50\n[2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new","slug":"talk-about-a-question-in-nowcoder","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuoy0011n7t4jtg6xjlm","content":"<p>牛客上有这么一道 JavaScript 的 <a href=\"https://www.nowcoder.com/questionTerminal/9c76e58c2ce94eb9b8168b43adef4f50\" target=\"_blank\" rel=\"noopener\">题目</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 填写内容让下面代码支持 a.name = “name1”; b.name = “name2”;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">obj</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    【<span class=\"number\">1</span>】</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.【<span class=\"number\">2</span>】 = <span class=\"string\">\"name2\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = obj(<span class=\"string\">\"name1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> obj;</span><br></pre></td></tr></table></figure>\n<p>【1】和【2】是填写的内容，【2】的答案是 <code>prototype.name</code>，没争议。</p>\n<p>问题是【1】，参考答案居然是 <code>if(name){ this.name = name;}return this;</code>，这么随便地玩弄 <code>this</code> 不就是明摆着污染全局变量吗？暴力赋值不可取。</p>\n<p>下面的一些高票讨论还说了一大堆解释的废话，连他自己都说自己好罗嗦。对，你不但罗嗦，而且还没有改错。注释里都说了给 window 的属性赋值，还不自知出问题，真是误人子弟。</p>\n<p>先来分析一下题目，a 和 b 都从 obj 来，为什么同名的属性值不一样？可以看出，是对 obj 这个函数的调用方式不一样，a 是 obj 函数的调用结果，而 b 则是 obj 作为 <em> 构造函数 </em> 调用的结果。所以这题的重点应该是如何区分<em>函数调用</em>和<em>构造函数调用</em>。</p>\n<p>一个关键字 <code>new</code> 决定了不同。<code>new</code> 的作用是什么呢？<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\" target=\"_blank\" rel=\"noopener\">MDN</a> 上说了，面试也会考你的，简单来说是三步，<code>new foo</code>：</p>\n<ol>\n<li>生成一个继承于 foo.prototype 的对象</li>\n<li>foo 会被调用，其中的 <code>this</code> 值会被绑定为 1 中的对象</li>\n<li>如果 foo 没有返回一个对象（注意是对象！），则返回 1 的对象</li>\n</ol>\n<p>从 2 就可以看出 <code>this</code> 值会被 <code>new</code> 绑定为一个确定的对象，而不是像普通函数调用中那样自己不可预料，要看上下文的进程。</p>\n<p>于是就可以在这里做文章。先来判断 <code>this</code> 的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> obj) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p><code>instanceof</code> 会检查 <code>this</code> 的原型链上是否存在 <code>foo.prototype</code>。也就是说能判断是否满足第 1 条，确保了对象能从 <code>prototype</code> 中读取到 <code>name</code> 属性。（毕竟代码中并没有给 b 的赋值中传入）</p>\n<blockquote>\n<p><code>instanceof</code> 并不是完美的判断方法，但是在这里足够了，后面会谈到这个问题。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// new 调用</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 非 new 调用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        name: name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>非 new 调用的情况下，直接返回一个新对象就 OK 了。</p>\n<p>而在 new 调用的情况下，可以看到 <code>function obj(name)</code> 定义的时候是有参数的，调用的时候却没参数，这就要小心了，为了安全起见，还是判断一下为妙。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// new 调用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 非 new 调用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        name: name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般来说，判断会写成 <code>if (name)</code>，但是碰到 <code>null</code>、<code>0</code>、<code>false</code> 就 GG 了，所以还是谨慎点吧。</p>\n<p>问题到这里就可以比较完美地解答了。</p>\n<h2 id=\"bonus-instanceof-的问题\"><a href=\"#bonus-instanceof-的问题\" class=\"headerlink\" title=\"bonus: instanceof 的问题\"></a>bonus: instanceof 的问题</h2><p>『<code>instanceof</code> 会检查 <code>this</code> 的原型链上是否存在 <code>foo.prototype</code>』，为什么说得这么拗口，是因为需要表达出 <code>instanceof</code> 本来就不是真的用来检测是否调用 <code>new</code> 的方法。</p>\n<p>在题目里面，要求的是 a 需要从原型链上读取到特定的属性值，所以 <code>instanceof</code> 的作用刚好在这里能符合要求而已。</p>\n<p>函数调用除了题目中的方法还有第三种方法，那就是 <code>foo.call</code>、<code>foo.apply</code>，而且也能为函数指定 <code>this</code> 的值（所以还有 <code>bind</code>）。因此是存在方法调戏 <code>instanceof</code> 的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.prototype.name = <span class=\"string\">'foo'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> midman = <span class=\"keyword\">new</span> foo(<span class=\"string\">'fake foo'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = foo.call(midman)</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = foo.call(midman, <span class=\"string\">'b'</span>)</span><br><span class=\"line\">a  <span class=\"comment\">// undefined, WTF?!</span></span><br><span class=\"line\">b  <span class=\"comment\">// undefined, WTF?!</span></span><br></pre></td></tr></table></figure>\n<p>这里的 <code>foo</code> 调用的方式是作为函数来调用，但是为 <code>this</code> 绑定的值是从 <code>foo</code> 上 <code>new</code> 出来的，换句话说，其原型链上存在 <code>foo.prototype</code>，于是就骗过了 <code>instanceof</code>。</p>\n<p>于是 ES2015 来搭救你了，新增了一个 <code>new.target</code>。于是修改成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">new</span>.target !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// new 调用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 非 new 调用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        name: name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>牛客上有这么一道 JavaScript 的 <a href=\"https://www.nowcoder.com/questionTerminal/9c76e58c2ce94eb9b8168b43adef4f50\" target=\"_blank\" rel=\"noopener\">题目</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 填写内容让下面代码支持 a.name = “name1”; b.name = “name2”;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">obj</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    【<span class=\"number\">1</span>】</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.【<span class=\"number\">2</span>】 = <span class=\"string\">\"name2\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = obj(<span class=\"string\">\"name1\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> obj;</span><br></pre></td></tr></table></figure>\n<p>【1】和【2】是填写的内容，【2】的答案是 <code>prototype.name</code>，没争议。</p>\n<p>问题是【1】，参考答案居然是 <code>if(name){ this.name = name;}return this;</code>，这么随便地玩弄 <code>this</code> 不就是明摆着污染全局变量吗？暴力赋值不可取。</p>\n<p>下面的一些高票讨论还说了一大堆解释的废话，连他自己都说自己好罗嗦。对，你不但罗嗦，而且还没有改错。注释里都说了给 window 的属性赋值，还不自知出问题，真是误人子弟。</p>\n<p>先来分析一下题目，a 和 b 都从 obj 来，为什么同名的属性值不一样？可以看出，是对 obj 这个函数的调用方式不一样，a 是 obj 函数的调用结果，而 b 则是 obj 作为 <em> 构造函数 </em> 调用的结果。所以这题的重点应该是如何区分<em>函数调用</em>和<em>构造函数调用</em>。</p>\n<p>一个关键字 <code>new</code> 决定了不同。<code>new</code> 的作用是什么呢？<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\" target=\"_blank\" rel=\"noopener\">MDN</a> 上说了，面试也会考你的，简单来说是三步，<code>new foo</code>：</p>\n<ol>\n<li>生成一个继承于 foo.prototype 的对象</li>\n<li>foo 会被调用，其中的 <code>this</code> 值会被绑定为 1 中的对象</li>\n<li>如果 foo 没有返回一个对象（注意是对象！），则返回 1 的对象</li>\n</ol>\n<p>从 2 就可以看出 <code>this</code> 值会被 <code>new</code> 绑定为一个确定的对象，而不是像普通函数调用中那样自己不可预料，要看上下文的进程。</p>\n<p>于是就可以在这里做文章。先来判断 <code>this</code> 的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> obj) &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p><code>instanceof</code> 会检查 <code>this</code> 的原型链上是否存在 <code>foo.prototype</code>。也就是说能判断是否满足第 1 条，确保了对象能从 <code>prototype</code> 中读取到 <code>name</code> 属性。（毕竟代码中并没有给 b 的赋值中传入）</p>\n<blockquote>\n<p><code>instanceof</code> 并不是完美的判断方法，但是在这里足够了，后面会谈到这个问题。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// new 调用</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 非 new 调用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        name: name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>非 new 调用的情况下，直接返回一个新对象就 OK 了。</p>\n<p>而在 new 调用的情况下，可以看到 <code>function obj(name)</code> 定义的时候是有参数的，调用的时候却没参数，这就要小心了，为了安全起见，还是判断一下为妙。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// new 调用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 非 new 调用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        name: name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一般来说，判断会写成 <code>if (name)</code>，但是碰到 <code>null</code>、<code>0</code>、<code>false</code> 就 GG 了，所以还是谨慎点吧。</p>\n<p>问题到这里就可以比较完美地解答了。</p>\n<h2 id=\"bonus-instanceof-的问题\"><a href=\"#bonus-instanceof-的问题\" class=\"headerlink\" title=\"bonus: instanceof 的问题\"></a>bonus: instanceof 的问题</h2><p>『<code>instanceof</code> 会检查 <code>this</code> 的原型链上是否存在 <code>foo.prototype</code>』，为什么说得这么拗口，是因为需要表达出 <code>instanceof</code> 本来就不是真的用来检测是否调用 <code>new</code> 的方法。</p>\n<p>在题目里面，要求的是 a 需要从原型链上读取到特定的属性值，所以 <code>instanceof</code> 的作用刚好在这里能符合要求而已。</p>\n<p>函数调用除了题目中的方法还有第三种方法，那就是 <code>foo.call</code>、<code>foo.apply</code>，而且也能为函数指定 <code>this</code> 的值（所以还有 <code>bind</code>）。因此是存在方法调戏 <code>instanceof</code> 的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo.prototype.name = <span class=\"string\">'foo'</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> midman = <span class=\"keyword\">new</span> foo(<span class=\"string\">'fake foo'</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = foo.call(midman)</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = foo.call(midman, <span class=\"string\">'b'</span>)</span><br><span class=\"line\">a  <span class=\"comment\">// undefined, WTF?!</span></span><br><span class=\"line\">b  <span class=\"comment\">// undefined, WTF?!</span></span><br></pre></td></tr></table></figure>\n<p>这里的 <code>foo</code> 调用的方式是作为函数来调用，但是为 <code>this</code> 绑定的值是从 <code>foo</code> 上 <code>new</code> 出来的，换句话说，其原型链上存在 <code>foo.prototype</code>，于是就骗过了 <code>instanceof</code>。</p>\n<p>于是 ES2015 来搭救你了，新增了一个 <code>new.target</code>。于是修改成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">new</span>.target !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// new 调用</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 非 new 调用</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        name: name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Dec 13 2016 20:48:11 GMT+0800 (China Standard Time)","title":"说说牛客上的一道 JavaScript 题目","path":"talk-about-a-question-in-nowcoder/","eyeCatchImage":null,"excerpt":null,"date":"2016-12-13T12:48:11.000Z","pv":0,"totalPV":0,"categories":"技术 > 黑客 > 编程语言 > javascript","tags":["javascript"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1390},{"title":"阿里智勇大闯关第三季答案","id":"3","updated":"2014-04-15T07:38:22.000Z","date":"2014-01-22T19:21:28.000Z","_content":"\n几个星期之前在 v2ex 上看到有人发帖说有有关前端的网页游戏玩，于是去看了看，发现挺有趣的，打算通关之后就发一下答案。无奈公司网络不行，宿舍没有网络，所以拖到现在。\n\n### 第一关\n看控制台提示要调用 xxx，不过追踪了一下调用的函数发现似乎疑似是显示指纹的代码被注释掉。于是看了一下前后的代码，发现有一段判断密码是否相等的代码，显然就不需要折腾了，直接将相等时执行的代码复制到控制台运行就可以了。不过要注意 decode 中的字符串要在页面的 #page 元素中的 data-t 属性的值取出来。\n\n答案（location = 后的字符串视你自己的 data-t 属性值为准）：\n```javascript\nwindow.location=Base64.decode('L3F1aXozL2luZGV4LnBocD90PU9UY3lNMkUwTUdSRGFuVXhNVzlCUVZWR1ZrRlJSMEZSTlZKVlFtZEI=')\n```\n\n### 第二关\n意思是要你将那两个灰色的所谓的 “镜子” 通过移位和旋转将红色光线反射过黑色的点。需要用到 CSS3 的属性，先用审查元素找到镜子的 css 属性，直接将我修改过的属性复制进去。\n\n答案：\n\n\\#mirror1\n>top: 560px;\n\n>-webkit-transform: rotate(-82deg);\n\n\\#mirror2\n>top: 430px;\n\n>-webkit-transform: rotate(172deg);\n\n### 第三关\n一看显然就是二维码了。控制台中的一大坨数字其实是二维码中黑点的位置信息。结合 canvas 这个 html5 标签元素，意思就是要我们把位置信息解析出来，操纵 canvas 画出二维码。直接上代码吧，复制到控制台运行就 ok 了。\n\n答案：\n```javascript\nstrr='0,0,12,12 12,0,12,12 24,0,12,12 36,0,12,12 48,0,12,12 60,0,12,12 72,0,12,12 120,0,12,12 132,0,12,12 144,0,12,12 168,0,12,12 180,0,12,12 192,0,12,12 204,0,12,12 216,0,12,12 228,0,12,12 240,0,12,12 0,12,12,12 72,12,12,12 96,12,12,12 108,12,12,12 120,12,12,12 144,12,12,12 168,12,12,12 240,12,12,12 0,24,12,12 24,24,12,12 36,24,12,12 48,24,12,12 72,24,12,12 120,24,12,12 132,24,12,12 144,24,12,12 168,24,12,12 192,24,12,12 204,24,12,12 216,24,12,12 240,24,12,12 0,36,12,12 24,36,12,12 36,36,12,12 48,36,12,12 72,36,12,12 96,36,12,12 108,36,12,12 144,36,12,12 168,36,12,12 192,36,12,12 204,36,12,12 216,36,12,12 240,36,12,12 0,48,12,12 24,48,12,12 36,48,12,12 48,48,12,12 72,48,12,12 108,48,12,12 144,48,12,12 168,48,12,12 192,48,12,12 204,48,12,12 216,48,12,12 240,48,12,12 0,60,12,12 72,60,12,12 96,60,12,12 132,60,12,12 168,60,12,12 240,60,12,12 0,72,12,12 12,72,12,12 24,72,12,12 36,72,12,12 48,72,12,12 60,72,12,12 72,72,12,12 96,72,12,12 120,72,12,12 144,72,12,12 168,72,12,12 180,72,12,12 192,72,12,12 204,72,12,12 216,72,12,12 228,72,12,12 240,72,12,12 108,84,12,12 0,96,12,12 12,96,12,12 24,96,12,12 36,96,12,12 48,96,12,12 72,96,12,12 84,96,12,12 96,96,12,12 132,96,12,12 156,96,12,12 180,96,12,12 204,96,12,12 228,96,12,12 0,108,12,12 24,108,12,12 36,108,12,12 60,108,12,12 120,108,12,12 132,108,12,12 144,108,12,12 156,108,12,12 168,108,12,12 216,108,12,12 240,108,12,12 12,120,12,12 36,120,12,12 48,120,12,12 60,120,12,12 72,120,12,12 84,120,12,12 108,120,12,12 120,120,12,12 144,120,12,12 168,120,12,12 180,120,12,12 228,120,12,12 24,132,12,12 36,132,12,12 60,132,12,12 84,132,12,12 96,132,12,12 108,132,12,12 120,132,12,12 132,132,12,12 144,132,12,12 156,132,12,12 168,132,12,12 204,132,12,12 216,132,12,12 0,144,12,12 12,144,12,12 24,144,12,12 48,144,12,12 72,144,12,12 84,144,12,12 96,144,12,12 108,144,12,12 144,144,12,12 180,144,12,12 204,144,12,12 228,144,12,12 96,156,12,12 108,156,12,12 120,156,12,12 144,156,12,12 180,156,12,12 204,156,12,12 216,156,12,12 228,156,12,12 240,156,12,12 0,168,12,12 12,168,12,12 24,168,12,12 36,168,12,12 48,168,12,12 60,168,12,12 72,168,12,12 96,168,12,12 108,168,12,12 120,168,12,12 132,168,12,12 156,168,12,12 192,168,12,12 204,168,12,12 216,168,12,12 228,168,12,12 0,180,12,12 72,180,12,12 108,180,12,12 180,180,12,12 192,180,12,12 204,180,12,12 216,180,12,12 228,180,12,12 0,192,12,12 24,192,12,12 36,192,12,12 48,192,12,12 72,192,12,12 96,192,12,12 108,192,12,12 120,192,12,12 132,192,12,12 156,192,12,12 192,192,12,12 228,192,12,12 0,204,12,12 24,204,12,12 36,204,12,12 48,204,12,12 72,204,12,12 96,204,12,12 120,204,12,12 132,204,12,12 144,204,12,12 156,204,12,12 168,204,12,12 180,204,12,12 204,204,12,12 216,204,12,12 0,216,12,12 24,216,12,12 36,216,12,12 48,216,12,12 72,216,12,12 96,216,12,12 144,216,12,12 168,216,12,12 180,216,12,12 204,216,12,12 216,216,12,12 0,228,12,12 72,228,12,12 96,228,12,12 132,228,12,12 144,228,12,12 156,228,12,12 168,228,12,12 180,228,12,12 204,228,12,12 216,228,12,12 0,240,12,12 12,240,12,12 24,240,12,12 36,240,12,12 48,240,12,12 60,240,12,12 72,240,12,12 96,240,12,12 108,240,12,12 120,240,12,12 144,240,12,12 228,240,12,12'\narr=strr.split(' ');\nnewarr=[];\narr.map(function(n){newarr.push(n.split(','))});\nvar c=document.getElementById(\"qr-canvas\");\nvar ctx=c.getContext(\"2d\");\nctx.fillStyle=\"#000\";\nnewarr.map(function(n){ctx.fillRect(n[0],n[1],n[2],n[3])});\n```\n\n### 第四关\n看图猜字。比较坑爹的一关，我有一次卡在一幅不太认识的图上了。这个看运气吧。\n自己多次做刷出来的部分答案列表：\n\n>grunt-contrib-cssmin\nwww.stackoverflow.com\nsublime text\nv\nwww.github.com\nwordpress\nCSS Sprites\njade\nless\nunderscore.js\n\n### 第五关\n做过其他网页游戏例如 python 的话对这关就不陌生了，就是要你不断地请求 url 而已，控制台也提示提供 jQuery 了。\n答案：\n先运行如下代码，第一行代码 “index.php?t=” 和“&room=”中间的那串字符串换成自己地址栏同样位置的字符串，第二行代码的 “24” 也是：\n```javascript\nurl='index.php?t=OTk1ZDJjYjhyMzRsRldWd2NDVlF4UkRRNWNCRTlW&room=';\nurlreal=url+'24';\nstrr='';\n$.get(urlreal, function(data){\n\tvar mess=$(data).find('#message').text();\n\tvar number=$(data).find('#next-room').text();\n\tstrr=strr+mess;\n\turlreal=url+number;\n\tconsole.log(strr);\n})\n```\n\n可以看到控制台会输出一些字，接着不断执行如下代码：\n```javascript\n$.get(urlreal, function(data){\n\tvar mess=$(data).find('#message').text();\n\tvar number=$(data).find('#next-room').text();\n\tstrr=strr+mess;\n\turlreal=url+number;\n\tconsole.log(strr);\n})\n```\n\n直到控制台输出的文字没有再变化了，你也就看到了下一关的网址了。\n为什么我做得这么麻烦是因为懒，不想写判断和循环了，况且手动复制粘贴运行也很快。而且过关时间是有限制的。\n\n### 最后一关\n我是直接看了一下 html 和 js 源代码，发现其实要过关就一个跳转而已，于是直接复制网址过的。其实是要提交 script 代码利用 xss 将那个图片移走来过关的。\n我的答案：\n将 #page 的 data-p 属性值复制到地址栏替换类似字符串跳转过关。\n\n### 最后\n审查元素发现比基尼美女的下身是可以点击的，就是链接到邮箱了，恶趣味。\n","source":"_posts/阿里智勇大闯关第三季答案.md","raw":"---\ntitle: 阿里智勇大闯关第三季答案\ncategories:\n  - [技术, 黑客]\n  - [编程语言, javascript]\ntags: [javascript, alibaba, walkthrough, quiz]\npermalink: answers-for-alibaba-quiz3\nid: 3\nupdated: '2014-04-15 15:38:22'\ndate: 2014-01-23 03:21:28\n---\n\n几个星期之前在 v2ex 上看到有人发帖说有有关前端的网页游戏玩，于是去看了看，发现挺有趣的，打算通关之后就发一下答案。无奈公司网络不行，宿舍没有网络，所以拖到现在。\n\n### 第一关\n看控制台提示要调用 xxx，不过追踪了一下调用的函数发现似乎疑似是显示指纹的代码被注释掉。于是看了一下前后的代码，发现有一段判断密码是否相等的代码，显然就不需要折腾了，直接将相等时执行的代码复制到控制台运行就可以了。不过要注意 decode 中的字符串要在页面的 #page 元素中的 data-t 属性的值取出来。\n\n答案（location = 后的字符串视你自己的 data-t 属性值为准）：\n```javascript\nwindow.location=Base64.decode('L3F1aXozL2luZGV4LnBocD90PU9UY3lNMkUwTUdSRGFuVXhNVzlCUVZWR1ZrRlJSMEZSTlZKVlFtZEI=')\n```\n\n### 第二关\n意思是要你将那两个灰色的所谓的 “镜子” 通过移位和旋转将红色光线反射过黑色的点。需要用到 CSS3 的属性，先用审查元素找到镜子的 css 属性，直接将我修改过的属性复制进去。\n\n答案：\n\n\\#mirror1\n>top: 560px;\n\n>-webkit-transform: rotate(-82deg);\n\n\\#mirror2\n>top: 430px;\n\n>-webkit-transform: rotate(172deg);\n\n### 第三关\n一看显然就是二维码了。控制台中的一大坨数字其实是二维码中黑点的位置信息。结合 canvas 这个 html5 标签元素，意思就是要我们把位置信息解析出来，操纵 canvas 画出二维码。直接上代码吧，复制到控制台运行就 ok 了。\n\n答案：\n```javascript\nstrr='0,0,12,12 12,0,12,12 24,0,12,12 36,0,12,12 48,0,12,12 60,0,12,12 72,0,12,12 120,0,12,12 132,0,12,12 144,0,12,12 168,0,12,12 180,0,12,12 192,0,12,12 204,0,12,12 216,0,12,12 228,0,12,12 240,0,12,12 0,12,12,12 72,12,12,12 96,12,12,12 108,12,12,12 120,12,12,12 144,12,12,12 168,12,12,12 240,12,12,12 0,24,12,12 24,24,12,12 36,24,12,12 48,24,12,12 72,24,12,12 120,24,12,12 132,24,12,12 144,24,12,12 168,24,12,12 192,24,12,12 204,24,12,12 216,24,12,12 240,24,12,12 0,36,12,12 24,36,12,12 36,36,12,12 48,36,12,12 72,36,12,12 96,36,12,12 108,36,12,12 144,36,12,12 168,36,12,12 192,36,12,12 204,36,12,12 216,36,12,12 240,36,12,12 0,48,12,12 24,48,12,12 36,48,12,12 48,48,12,12 72,48,12,12 108,48,12,12 144,48,12,12 168,48,12,12 192,48,12,12 204,48,12,12 216,48,12,12 240,48,12,12 0,60,12,12 72,60,12,12 96,60,12,12 132,60,12,12 168,60,12,12 240,60,12,12 0,72,12,12 12,72,12,12 24,72,12,12 36,72,12,12 48,72,12,12 60,72,12,12 72,72,12,12 96,72,12,12 120,72,12,12 144,72,12,12 168,72,12,12 180,72,12,12 192,72,12,12 204,72,12,12 216,72,12,12 228,72,12,12 240,72,12,12 108,84,12,12 0,96,12,12 12,96,12,12 24,96,12,12 36,96,12,12 48,96,12,12 72,96,12,12 84,96,12,12 96,96,12,12 132,96,12,12 156,96,12,12 180,96,12,12 204,96,12,12 228,96,12,12 0,108,12,12 24,108,12,12 36,108,12,12 60,108,12,12 120,108,12,12 132,108,12,12 144,108,12,12 156,108,12,12 168,108,12,12 216,108,12,12 240,108,12,12 12,120,12,12 36,120,12,12 48,120,12,12 60,120,12,12 72,120,12,12 84,120,12,12 108,120,12,12 120,120,12,12 144,120,12,12 168,120,12,12 180,120,12,12 228,120,12,12 24,132,12,12 36,132,12,12 60,132,12,12 84,132,12,12 96,132,12,12 108,132,12,12 120,132,12,12 132,132,12,12 144,132,12,12 156,132,12,12 168,132,12,12 204,132,12,12 216,132,12,12 0,144,12,12 12,144,12,12 24,144,12,12 48,144,12,12 72,144,12,12 84,144,12,12 96,144,12,12 108,144,12,12 144,144,12,12 180,144,12,12 204,144,12,12 228,144,12,12 96,156,12,12 108,156,12,12 120,156,12,12 144,156,12,12 180,156,12,12 204,156,12,12 216,156,12,12 228,156,12,12 240,156,12,12 0,168,12,12 12,168,12,12 24,168,12,12 36,168,12,12 48,168,12,12 60,168,12,12 72,168,12,12 96,168,12,12 108,168,12,12 120,168,12,12 132,168,12,12 156,168,12,12 192,168,12,12 204,168,12,12 216,168,12,12 228,168,12,12 0,180,12,12 72,180,12,12 108,180,12,12 180,180,12,12 192,180,12,12 204,180,12,12 216,180,12,12 228,180,12,12 0,192,12,12 24,192,12,12 36,192,12,12 48,192,12,12 72,192,12,12 96,192,12,12 108,192,12,12 120,192,12,12 132,192,12,12 156,192,12,12 192,192,12,12 228,192,12,12 0,204,12,12 24,204,12,12 36,204,12,12 48,204,12,12 72,204,12,12 96,204,12,12 120,204,12,12 132,204,12,12 144,204,12,12 156,204,12,12 168,204,12,12 180,204,12,12 204,204,12,12 216,204,12,12 0,216,12,12 24,216,12,12 36,216,12,12 48,216,12,12 72,216,12,12 96,216,12,12 144,216,12,12 168,216,12,12 180,216,12,12 204,216,12,12 216,216,12,12 0,228,12,12 72,228,12,12 96,228,12,12 132,228,12,12 144,228,12,12 156,228,12,12 168,228,12,12 180,228,12,12 204,228,12,12 216,228,12,12 0,240,12,12 12,240,12,12 24,240,12,12 36,240,12,12 48,240,12,12 60,240,12,12 72,240,12,12 96,240,12,12 108,240,12,12 120,240,12,12 144,240,12,12 228,240,12,12'\narr=strr.split(' ');\nnewarr=[];\narr.map(function(n){newarr.push(n.split(','))});\nvar c=document.getElementById(\"qr-canvas\");\nvar ctx=c.getContext(\"2d\");\nctx.fillStyle=\"#000\";\nnewarr.map(function(n){ctx.fillRect(n[0],n[1],n[2],n[3])});\n```\n\n### 第四关\n看图猜字。比较坑爹的一关，我有一次卡在一幅不太认识的图上了。这个看运气吧。\n自己多次做刷出来的部分答案列表：\n\n>grunt-contrib-cssmin\nwww.stackoverflow.com\nsublime text\nv\nwww.github.com\nwordpress\nCSS Sprites\njade\nless\nunderscore.js\n\n### 第五关\n做过其他网页游戏例如 python 的话对这关就不陌生了，就是要你不断地请求 url 而已，控制台也提示提供 jQuery 了。\n答案：\n先运行如下代码，第一行代码 “index.php?t=” 和“&room=”中间的那串字符串换成自己地址栏同样位置的字符串，第二行代码的 “24” 也是：\n```javascript\nurl='index.php?t=OTk1ZDJjYjhyMzRsRldWd2NDVlF4UkRRNWNCRTlW&room=';\nurlreal=url+'24';\nstrr='';\n$.get(urlreal, function(data){\n\tvar mess=$(data).find('#message').text();\n\tvar number=$(data).find('#next-room').text();\n\tstrr=strr+mess;\n\turlreal=url+number;\n\tconsole.log(strr);\n})\n```\n\n可以看到控制台会输出一些字，接着不断执行如下代码：\n```javascript\n$.get(urlreal, function(data){\n\tvar mess=$(data).find('#message').text();\n\tvar number=$(data).find('#next-room').text();\n\tstrr=strr+mess;\n\turlreal=url+number;\n\tconsole.log(strr);\n})\n```\n\n直到控制台输出的文字没有再变化了，你也就看到了下一关的网址了。\n为什么我做得这么麻烦是因为懒，不想写判断和循环了，况且手动复制粘贴运行也很快。而且过关时间是有限制的。\n\n### 最后一关\n我是直接看了一下 html 和 js 源代码，发现其实要过关就一个跳转而已，于是直接复制网址过的。其实是要提交 script 代码利用 xss 将那个图片移走来过关的。\n我的答案：\n将 #page 的 data-p 属性值复制到地址栏替换类似字符串跳转过关。\n\n### 最后\n审查元素发现比基尼美女的下身是可以点击的，就是链接到邮箱了，恶趣味。\n","slug":"answers-for-alibaba-quiz3","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuoz0014n7t4hg4oajx9","content":"<p>几个星期之前在 v2ex 上看到有人发帖说有有关前端的网页游戏玩，于是去看了看，发现挺有趣的，打算通关之后就发一下答案。无奈公司网络不行，宿舍没有网络，所以拖到现在。</p>\n<h3 id=\"第一关\"><a href=\"#第一关\" class=\"headerlink\" title=\"第一关\"></a>第一关</h3><p>看控制台提示要调用 xxx，不过追踪了一下调用的函数发现似乎疑似是显示指纹的代码被注释掉。于是看了一下前后的代码，发现有一段判断密码是否相等的代码，显然就不需要折腾了，直接将相等时执行的代码复制到控制台运行就可以了。不过要注意 decode 中的字符串要在页面的 #page 元素中的 data-t 属性的值取出来。</p>\n<p>答案（location = 后的字符串视你自己的 data-t 属性值为准）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.location=Base64.decode(<span class=\"string\">'L3F1aXozL2luZGV4LnBocD90PU9UY3lNMkUwTUdSRGFuVXhNVzlCUVZWR1ZrRlJSMEZSTlZKVlFtZEI='</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"第二关\"><a href=\"#第二关\" class=\"headerlink\" title=\"第二关\"></a>第二关</h3><p>意思是要你将那两个灰色的所谓的 “镜子” 通过移位和旋转将红色光线反射过黑色的点。需要用到 CSS3 的属性，先用审查元素找到镜子的 css 属性，直接将我修改过的属性复制进去。</p>\n<p>答案：</p>\n<p>#mirror1</p>\n<blockquote>\n<p>top: 560px;</p>\n<p>-webkit-transform: rotate(-82deg);</p>\n</blockquote>\n<p>#mirror2</p>\n<blockquote>\n<p>top: 430px;</p>\n<p>-webkit-transform: rotate(172deg);</p>\n</blockquote>\n<h3 id=\"第三关\"><a href=\"#第三关\" class=\"headerlink\" title=\"第三关\"></a>第三关</h3><p>一看显然就是二维码了。控制台中的一大坨数字其实是二维码中黑点的位置信息。结合 canvas 这个 html5 标签元素，意思就是要我们把位置信息解析出来，操纵 canvas 画出二维码。直接上代码吧，复制到控制台运行就 ok 了。</p>\n<p>答案：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strr=<span class=\"string\">'0,0,12,12 12,0,12,12 24,0,12,12 36,0,12,12 48,0,12,12 60,0,12,12 72,0,12,12 120,0,12,12 132,0,12,12 144,0,12,12 168,0,12,12 180,0,12,12 192,0,12,12 204,0,12,12 216,0,12,12 228,0,12,12 240,0,12,12 0,12,12,12 72,12,12,12 96,12,12,12 108,12,12,12 120,12,12,12 144,12,12,12 168,12,12,12 240,12,12,12 0,24,12,12 24,24,12,12 36,24,12,12 48,24,12,12 72,24,12,12 120,24,12,12 132,24,12,12 144,24,12,12 168,24,12,12 192,24,12,12 204,24,12,12 216,24,12,12 240,24,12,12 0,36,12,12 24,36,12,12 36,36,12,12 48,36,12,12 72,36,12,12 96,36,12,12 108,36,12,12 144,36,12,12 168,36,12,12 192,36,12,12 204,36,12,12 216,36,12,12 240,36,12,12 0,48,12,12 24,48,12,12 36,48,12,12 48,48,12,12 72,48,12,12 108,48,12,12 144,48,12,12 168,48,12,12 192,48,12,12 204,48,12,12 216,48,12,12 240,48,12,12 0,60,12,12 72,60,12,12 96,60,12,12 132,60,12,12 168,60,12,12 240,60,12,12 0,72,12,12 12,72,12,12 24,72,12,12 36,72,12,12 48,72,12,12 60,72,12,12 72,72,12,12 96,72,12,12 120,72,12,12 144,72,12,12 168,72,12,12 180,72,12,12 192,72,12,12 204,72,12,12 216,72,12,12 228,72,12,12 240,72,12,12 108,84,12,12 0,96,12,12 12,96,12,12 24,96,12,12 36,96,12,12 48,96,12,12 72,96,12,12 84,96,12,12 96,96,12,12 132,96,12,12 156,96,12,12 180,96,12,12 204,96,12,12 228,96,12,12 0,108,12,12 24,108,12,12 36,108,12,12 60,108,12,12 120,108,12,12 132,108,12,12 144,108,12,12 156,108,12,12 168,108,12,12 216,108,12,12 240,108,12,12 12,120,12,12 36,120,12,12 48,120,12,12 60,120,12,12 72,120,12,12 84,120,12,12 108,120,12,12 120,120,12,12 144,120,12,12 168,120,12,12 180,120,12,12 228,120,12,12 24,132,12,12 36,132,12,12 60,132,12,12 84,132,12,12 96,132,12,12 108,132,12,12 120,132,12,12 132,132,12,12 144,132,12,12 156,132,12,12 168,132,12,12 204,132,12,12 216,132,12,12 0,144,12,12 12,144,12,12 24,144,12,12 48,144,12,12 72,144,12,12 84,144,12,12 96,144,12,12 108,144,12,12 144,144,12,12 180,144,12,12 204,144,12,12 228,144,12,12 96,156,12,12 108,156,12,12 120,156,12,12 144,156,12,12 180,156,12,12 204,156,12,12 216,156,12,12 228,156,12,12 240,156,12,12 0,168,12,12 12,168,12,12 24,168,12,12 36,168,12,12 48,168,12,12 60,168,12,12 72,168,12,12 96,168,12,12 108,168,12,12 120,168,12,12 132,168,12,12 156,168,12,12 192,168,12,12 204,168,12,12 216,168,12,12 228,168,12,12 0,180,12,12 72,180,12,12 108,180,12,12 180,180,12,12 192,180,12,12 204,180,12,12 216,180,12,12 228,180,12,12 0,192,12,12 24,192,12,12 36,192,12,12 48,192,12,12 72,192,12,12 96,192,12,12 108,192,12,12 120,192,12,12 132,192,12,12 156,192,12,12 192,192,12,12 228,192,12,12 0,204,12,12 24,204,12,12 36,204,12,12 48,204,12,12 72,204,12,12 96,204,12,12 120,204,12,12 132,204,12,12 144,204,12,12 156,204,12,12 168,204,12,12 180,204,12,12 204,204,12,12 216,204,12,12 0,216,12,12 24,216,12,12 36,216,12,12 48,216,12,12 72,216,12,12 96,216,12,12 144,216,12,12 168,216,12,12 180,216,12,12 204,216,12,12 216,216,12,12 0,228,12,12 72,228,12,12 96,228,12,12 132,228,12,12 144,228,12,12 156,228,12,12 168,228,12,12 180,228,12,12 204,228,12,12 216,228,12,12 0,240,12,12 12,240,12,12 24,240,12,12 36,240,12,12 48,240,12,12 60,240,12,12 72,240,12,12 96,240,12,12 108,240,12,12 120,240,12,12 144,240,12,12 228,240,12,12'</span></span><br><span class=\"line\">arr=strr.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">newarr=[];</span><br><span class=\"line\">arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;newarr.push(n.split(<span class=\"string\">','</span>))&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> c=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"qr-canvas\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx=c.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">ctx.fillStyle=<span class=\"string\">\"#000\"</span>;</span><br><span class=\"line\">newarr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;ctx.fillRect(n[<span class=\"number\">0</span>],n[<span class=\"number\">1</span>],n[<span class=\"number\">2</span>],n[<span class=\"number\">3</span>])&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"第四关\"><a href=\"#第四关\" class=\"headerlink\" title=\"第四关\"></a>第四关</h3><p>看图猜字。比较坑爹的一关，我有一次卡在一幅不太认识的图上了。这个看运气吧。<br>自己多次做刷出来的部分答案列表：</p>\n<blockquote>\n<p>grunt-contrib-cssmin<br>www.stackoverflow.com<br>sublime text<br>v<br>www.github.com<br>wordpress<br>CSS Sprites<br>jade<br>less<br>underscore.js</p>\n</blockquote>\n<h3 id=\"第五关\"><a href=\"#第五关\" class=\"headerlink\" title=\"第五关\"></a>第五关</h3><p>做过其他网页游戏例如 python 的话对这关就不陌生了，就是要你不断地请求 url 而已，控制台也提示提供 jQuery 了。<br>答案：<br>先运行如下代码，第一行代码 “index.php?t=” 和“&amp;room=”中间的那串字符串换成自己地址栏同样位置的字符串，第二行代码的 “24” 也是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url=<span class=\"string\">'index.php?t=OTk1ZDJjYjhyMzRsRldWd2NDVlF4UkRRNWNCRTlW&amp;room='</span>;</span><br><span class=\"line\">urlreal=url+<span class=\"string\">'24'</span>;</span><br><span class=\"line\">strr=<span class=\"string\">''</span>;</span><br><span class=\"line\">$.<span class=\"keyword\">get</span>(urlreal, function(data)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mess=$(data).find(<span class=\"string\">'#message'</span>).text();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> number=$(data).find(<span class=\"string\">'#next-room'</span>).text();</span><br><span class=\"line\">\tstrr=strr+mess;</span><br><span class=\"line\">\turlreal=url+number;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(strr);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>可以看到控制台会输出一些字，接着不断执行如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"keyword\">get</span>(urlreal, function(data)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mess=$(data).find(<span class=\"string\">'#message'</span>).text();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> number=$(data).find(<span class=\"string\">'#next-room'</span>).text();</span><br><span class=\"line\">\tstrr=strr+mess;</span><br><span class=\"line\">\turlreal=url+number;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(strr);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>直到控制台输出的文字没有再变化了，你也就看到了下一关的网址了。<br>为什么我做得这么麻烦是因为懒，不想写判断和循环了，况且手动复制粘贴运行也很快。而且过关时间是有限制的。</p>\n<h3 id=\"最后一关\"><a href=\"#最后一关\" class=\"headerlink\" title=\"最后一关\"></a>最后一关</h3><p>我是直接看了一下 html 和 js 源代码，发现其实要过关就一个跳转而已，于是直接复制网址过的。其实是要提交 script 代码利用 xss 将那个图片移走来过关的。<br>我的答案：<br>将 #page 的 data-p 属性值复制到地址栏替换类似字符串跳转过关。</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>审查元素发现比基尼美女的下身是可以点击的，就是链接到邮箱了，恶趣味。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>几个星期之前在 v2ex 上看到有人发帖说有有关前端的网页游戏玩，于是去看了看，发现挺有趣的，打算通关之后就发一下答案。无奈公司网络不行，宿舍没有网络，所以拖到现在。</p>\n<h3 id=\"第一关\"><a href=\"#第一关\" class=\"headerlink\" title=\"第一关\"></a>第一关</h3><p>看控制台提示要调用 xxx，不过追踪了一下调用的函数发现似乎疑似是显示指纹的代码被注释掉。于是看了一下前后的代码，发现有一段判断密码是否相等的代码，显然就不需要折腾了，直接将相等时执行的代码复制到控制台运行就可以了。不过要注意 decode 中的字符串要在页面的 #page 元素中的 data-t 属性的值取出来。</p>\n<p>答案（location = 后的字符串视你自己的 data-t 属性值为准）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.location=Base64.decode(<span class=\"string\">'L3F1aXozL2luZGV4LnBocD90PU9UY3lNMkUwTUdSRGFuVXhNVzlCUVZWR1ZrRlJSMEZSTlZKVlFtZEI='</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"第二关\"><a href=\"#第二关\" class=\"headerlink\" title=\"第二关\"></a>第二关</h3><p>意思是要你将那两个灰色的所谓的 “镜子” 通过移位和旋转将红色光线反射过黑色的点。需要用到 CSS3 的属性，先用审查元素找到镜子的 css 属性，直接将我修改过的属性复制进去。</p>\n<p>答案：</p>\n<p>#mirror1</p>\n<blockquote>\n<p>top: 560px;</p>\n<p>-webkit-transform: rotate(-82deg);</p>\n</blockquote>\n<p>#mirror2</p>\n<blockquote>\n<p>top: 430px;</p>\n<p>-webkit-transform: rotate(172deg);</p>\n</blockquote>\n<h3 id=\"第三关\"><a href=\"#第三关\" class=\"headerlink\" title=\"第三关\"></a>第三关</h3><p>一看显然就是二维码了。控制台中的一大坨数字其实是二维码中黑点的位置信息。结合 canvas 这个 html5 标签元素，意思就是要我们把位置信息解析出来，操纵 canvas 画出二维码。直接上代码吧，复制到控制台运行就 ok 了。</p>\n<p>答案：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">strr=<span class=\"string\">'0,0,12,12 12,0,12,12 24,0,12,12 36,0,12,12 48,0,12,12 60,0,12,12 72,0,12,12 120,0,12,12 132,0,12,12 144,0,12,12 168,0,12,12 180,0,12,12 192,0,12,12 204,0,12,12 216,0,12,12 228,0,12,12 240,0,12,12 0,12,12,12 72,12,12,12 96,12,12,12 108,12,12,12 120,12,12,12 144,12,12,12 168,12,12,12 240,12,12,12 0,24,12,12 24,24,12,12 36,24,12,12 48,24,12,12 72,24,12,12 120,24,12,12 132,24,12,12 144,24,12,12 168,24,12,12 192,24,12,12 204,24,12,12 216,24,12,12 240,24,12,12 0,36,12,12 24,36,12,12 36,36,12,12 48,36,12,12 72,36,12,12 96,36,12,12 108,36,12,12 144,36,12,12 168,36,12,12 192,36,12,12 204,36,12,12 216,36,12,12 240,36,12,12 0,48,12,12 24,48,12,12 36,48,12,12 48,48,12,12 72,48,12,12 108,48,12,12 144,48,12,12 168,48,12,12 192,48,12,12 204,48,12,12 216,48,12,12 240,48,12,12 0,60,12,12 72,60,12,12 96,60,12,12 132,60,12,12 168,60,12,12 240,60,12,12 0,72,12,12 12,72,12,12 24,72,12,12 36,72,12,12 48,72,12,12 60,72,12,12 72,72,12,12 96,72,12,12 120,72,12,12 144,72,12,12 168,72,12,12 180,72,12,12 192,72,12,12 204,72,12,12 216,72,12,12 228,72,12,12 240,72,12,12 108,84,12,12 0,96,12,12 12,96,12,12 24,96,12,12 36,96,12,12 48,96,12,12 72,96,12,12 84,96,12,12 96,96,12,12 132,96,12,12 156,96,12,12 180,96,12,12 204,96,12,12 228,96,12,12 0,108,12,12 24,108,12,12 36,108,12,12 60,108,12,12 120,108,12,12 132,108,12,12 144,108,12,12 156,108,12,12 168,108,12,12 216,108,12,12 240,108,12,12 12,120,12,12 36,120,12,12 48,120,12,12 60,120,12,12 72,120,12,12 84,120,12,12 108,120,12,12 120,120,12,12 144,120,12,12 168,120,12,12 180,120,12,12 228,120,12,12 24,132,12,12 36,132,12,12 60,132,12,12 84,132,12,12 96,132,12,12 108,132,12,12 120,132,12,12 132,132,12,12 144,132,12,12 156,132,12,12 168,132,12,12 204,132,12,12 216,132,12,12 0,144,12,12 12,144,12,12 24,144,12,12 48,144,12,12 72,144,12,12 84,144,12,12 96,144,12,12 108,144,12,12 144,144,12,12 180,144,12,12 204,144,12,12 228,144,12,12 96,156,12,12 108,156,12,12 120,156,12,12 144,156,12,12 180,156,12,12 204,156,12,12 216,156,12,12 228,156,12,12 240,156,12,12 0,168,12,12 12,168,12,12 24,168,12,12 36,168,12,12 48,168,12,12 60,168,12,12 72,168,12,12 96,168,12,12 108,168,12,12 120,168,12,12 132,168,12,12 156,168,12,12 192,168,12,12 204,168,12,12 216,168,12,12 228,168,12,12 0,180,12,12 72,180,12,12 108,180,12,12 180,180,12,12 192,180,12,12 204,180,12,12 216,180,12,12 228,180,12,12 0,192,12,12 24,192,12,12 36,192,12,12 48,192,12,12 72,192,12,12 96,192,12,12 108,192,12,12 120,192,12,12 132,192,12,12 156,192,12,12 192,192,12,12 228,192,12,12 0,204,12,12 24,204,12,12 36,204,12,12 48,204,12,12 72,204,12,12 96,204,12,12 120,204,12,12 132,204,12,12 144,204,12,12 156,204,12,12 168,204,12,12 180,204,12,12 204,204,12,12 216,204,12,12 0,216,12,12 24,216,12,12 36,216,12,12 48,216,12,12 72,216,12,12 96,216,12,12 144,216,12,12 168,216,12,12 180,216,12,12 204,216,12,12 216,216,12,12 0,228,12,12 72,228,12,12 96,228,12,12 132,228,12,12 144,228,12,12 156,228,12,12 168,228,12,12 180,228,12,12 204,228,12,12 216,228,12,12 0,240,12,12 12,240,12,12 24,240,12,12 36,240,12,12 48,240,12,12 60,240,12,12 72,240,12,12 96,240,12,12 108,240,12,12 120,240,12,12 144,240,12,12 228,240,12,12'</span></span><br><span class=\"line\">arr=strr.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">newarr=[];</span><br><span class=\"line\">arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;newarr.push(n.split(<span class=\"string\">','</span>))&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> c=<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"qr-canvas\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> ctx=c.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">ctx.fillStyle=<span class=\"string\">\"#000\"</span>;</span><br><span class=\"line\">newarr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;ctx.fillRect(n[<span class=\"number\">0</span>],n[<span class=\"number\">1</span>],n[<span class=\"number\">2</span>],n[<span class=\"number\">3</span>])&#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"第四关\"><a href=\"#第四关\" class=\"headerlink\" title=\"第四关\"></a>第四关</h3><p>看图猜字。比较坑爹的一关，我有一次卡在一幅不太认识的图上了。这个看运气吧。<br>自己多次做刷出来的部分答案列表：</p>\n<blockquote>\n<p>grunt-contrib-cssmin<br>www.stackoverflow.com<br>sublime text<br>v<br>www.github.com<br>wordpress<br>CSS Sprites<br>jade<br>less<br>underscore.js</p>\n</blockquote>\n<h3 id=\"第五关\"><a href=\"#第五关\" class=\"headerlink\" title=\"第五关\"></a>第五关</h3><p>做过其他网页游戏例如 python 的话对这关就不陌生了，就是要你不断地请求 url 而已，控制台也提示提供 jQuery 了。<br>答案：<br>先运行如下代码，第一行代码 “index.php?t=” 和“&amp;room=”中间的那串字符串换成自己地址栏同样位置的字符串，第二行代码的 “24” 也是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url=<span class=\"string\">'index.php?t=OTk1ZDJjYjhyMzRsRldWd2NDVlF4UkRRNWNCRTlW&amp;room='</span>;</span><br><span class=\"line\">urlreal=url+<span class=\"string\">'24'</span>;</span><br><span class=\"line\">strr=<span class=\"string\">''</span>;</span><br><span class=\"line\">$.<span class=\"keyword\">get</span>(urlreal, function(data)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mess=$(data).find(<span class=\"string\">'#message'</span>).text();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> number=$(data).find(<span class=\"string\">'#next-room'</span>).text();</span><br><span class=\"line\">\tstrr=strr+mess;</span><br><span class=\"line\">\turlreal=url+number;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(strr);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>可以看到控制台会输出一些字，接着不断执行如下代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"keyword\">get</span>(urlreal, function(data)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mess=$(data).find(<span class=\"string\">'#message'</span>).text();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> number=$(data).find(<span class=\"string\">'#next-room'</span>).text();</span><br><span class=\"line\">\tstrr=strr+mess;</span><br><span class=\"line\">\turlreal=url+number;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(strr);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>直到控制台输出的文字没有再变化了，你也就看到了下一关的网址了。<br>为什么我做得这么麻烦是因为懒，不想写判断和循环了，况且手动复制粘贴运行也很快。而且过关时间是有限制的。</p>\n<h3 id=\"最后一关\"><a href=\"#最后一关\" class=\"headerlink\" title=\"最后一关\"></a>最后一关</h3><p>我是直接看了一下 html 和 js 源代码，发现其实要过关就一个跳转而已，于是直接复制网址过的。其实是要提交 script 代码利用 xss 将那个图片移走来过关的。<br>我的答案：<br>将 #page 的 data-p 属性值复制到地址栏替换类似字符串跳转过关。</p>\n<h3 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h3><p>审查元素发现比基尼美女的下身是可以点击的，就是链接到邮箱了，恶趣味。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Apr 15 2014 15:38:22 GMT+0800 (China Standard Time)","title":"阿里智勇大闯关第三季答案","path":"answers-for-alibaba-quiz3/","eyeCatchImage":null,"excerpt":null,"date":"2014-01-22T19:21:28.000Z","pv":0,"totalPV":0,"categories":"技术 > 黑客 > 编程语言 > javascript","tags":["javascript","walkthrough","quiz","alibaba"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1221},{"title":"C#实现简单的控件动画","id":"2","updated":"2014-04-15T07:37:21.000Z","date":"2014-01-22T19:01:34.000Z","_content":"\n在学习.net编程的时候，做作业经常要求有一个界面。而在做局域网五子棋游戏这个作业的时候，客户端的界面既有登录界面又有用户列表界面，做一个动画来切换就再好不过了。不过翻查了一下MSDN和一些资料，对于C#怎么实现控件的动画效果都没怎么提及，于是参考了一下javascript在网页上实现动画的原理，自己尝试着写了。\n\n动画原理什么的不详细解释了，大家都知道是每一张静态的图片在同等时间间隔内快速地播放，利用视觉停留现象造成一系列视觉印象，从而出现会动的感觉。\n\n而应用到控件的动画上又是如何呢？从最简单的直线匀速移动开始考虑吧。比如，需要将实现一个标签从距离窗体左方30px移动到距离左方300px，在500毫秒内完成，那么，就需要具体计算出每一个时间间隔需要将这个标签移动多少距离，然后在每经过这样的一段时间之后，通过改变控件的距离左边的属性的值来实现控件的微小移动。只要在500毫秒内移动的次数足够的多，那么控件看起来就是在连续地移动。\n\nOK，其中重要的概念有几个。1、将那最小的一小段时间叫做一帧，也就是说整体的移动是通过一帧一帧的小移动叠加出来。2、时间控制。需要一个函数，在每一帧将控件的属性重新设置。这里可以通过使用计时器来实现。3、动画状态。需要将当前动画进行的状态记录下来，以便下一帧到达的时候被更改到下一个帧的状态。\n\n了解了基本原理之后，下面开始编写代码。\n\n首先定义一个存储动画状态的类AnimationStatus，其中：_attribute是控件的属性名称，_initValue是控件动画前的值，_endValue是控件动画后的最终值，_totalValue是整个动画变化的值，_totalFrames是动画所有帧的数量，_currentFrames是代表动画进行到多少帧。将字段封装好，能从外面修改的只有_currentFrames。构造函数没什么好说的，就是初始赋值，注意_totalValue是正数而_currentFrames默认是1。\n```csharp\n/// <summary>\n/// A class that store a set of animation of the control\n/// </summary>\nclass AnimationStatus\n{\n\tAnimationType _animationType;\n\tstring _attribute;\n\tint _initValue;\n\tint _endValue;\n\tint _totalValue;\n\tint _totalFrames;\n\tint _currentFrames;\n\n\t/// <summary>\n\t/// type of the animation, such as liner, Ease...\n\t/// </summary>\n\tpublic AnimationType AnimationType\n\t{\n\t\tget { return _animationType; }\n\t}\n\t/// <summary>\n\t/// attribute of control that the contrl will change\n\t/// </summary>\n\tpublic string Attribute\n\t{\n\t\tget { return _attribute; }\n\t}\n\t/// <summary>\n\t/// current value of the attribute that is ready to change\n\t/// </summary>\n\tpublic int InitValue\n\t{\n\t\tget { return _initValue; }\n\t}\n\t/// <summary>\n\t/// final value of the attribute that is ready to change\n\t/// </summary>\n\tpublic int EndValue\n\t{\n\t\tget { return _endValue; }\n\t}\n\t/// <summary>\n\t/// total value that changed\n\t/// </summary>\n\tpublic int TotalValue\n\t{\n\t\tget { return _totalValue; }\n\t}\n\t/// <summary>\n\t/// total frames the animation should play, READONLY\n\t/// </summary>\n\tpublic int TotalFrames\n\t{\n\t\tget { return _totalFrames; }\n\t}\n\t/// <summary>\n\t/// current frames the animation has played\n\t/// </summary>\n\tpublic int CurrentFrames\n\t{\n\t\tget { return _currentFrames; }\n\t\tset { _currentFrames = value; }\n\t}\n\n\t// contructor\n\tpublic AnimationStatus(string attribute, int initValue, int endValue, int totalFrames, AnimationType animationType)\n\t{\n\t\tthis._attribute = attribute;\n\t\tthis._animationType = animationType;\n\t\tthis._initValue = initValue;\n\t\tthis._endValue = endValue;\n\t\tthis._totalValue = Math.Abs(this._endValue - this._initValue);\n\t\tthis._totalFrames = totalFrames;\n\t\tthis._currentFrames = 1;\n\t}\n}\n```\n\n接下来写的是处理每一帧的通用动画函数。\n```csharp\n/// <summary>\n/// common function of moving control\n/// </summary>\n/// <param name=\"contorl\">the control to be moved</param>\n/// <param name=\"timer\">the timer that control the time of animation</param>\n/// <param name=\"animationStatue\">current statue of animation</param>\nprivate static void Animate(\n\tSystem.Windows.Forms.Control contorl,\n\tSystem.Windows.Forms.Timer timer,\n\tAnimationStatus animationStatue)\n{\n\tif (contorl == null\n\t\t|| contorl.IsDisposed\n\t\t|| animationStatue.CurrentFrames > animationStatue.TotalFrames)\n\t{\n\t\ttimer.Enabled = false;\n\t\treturn;\n\t}\n\t// perform animation\n\tType _tp = contorl.GetType();\n\tSystem.Reflection.PropertyInfo _pi = _tp.GetProperty(animationStatue.Attribute);\n\tif (_pi != null)\n\t{\n\t\tdouble _progress = (double)animationStatue.CurrentFrames / (double)animationStatue.TotalFrames;\n\t\tint _newValue =\n\t\t\tanimationStatue.InitValue < animationStatue.EndValue ?\n\t\t\tanimationStatue.InitValue + Convert.ToInt32(Math.Round(animationStatue.TotalValue * CalculateValue(animationStatue.AnimationType, _progress))) :\n\t\t\tanimationStatue.InitValue - Convert.ToInt32(Math.Round(animationStatue.TotalValue * CalculateValue(animationStatue.AnimationType, _progress)));\n\t\t_pi.SetValue(contorl, _newValue, null);\n\t}\n\telse\n\t{\n\t\ttimer.Enabled = false;\n\t\treturn;\n\t}\n\tanimationStatue.CurrentFrames++;\n}\n```\n\n一开始的判断是防止被操作的控件已经销毁了，并且在动画已经播完了的时候将定时器暂停并返回。从”// perform animation”这个注释之后的代码应用到C#的反射机制。为什么？简单来说就是因为要写出一个通用的动画函数，所以不能在函数里面事先规定要修改的Control对象的属性，但是在实际运行的时候还是需要得到Control对象的具体属性才能修改其中的值，于是使用反射来得到这个对象的某个属性，进而修改这个属性的值。\n\n那么这个“值”如何计算出来呢？首先需要得知动画现在的进度，于是就用当前的动画进度（animationStatue.CurrentFrames）除以总进度（animationStatue.TotalFrames）。然后是利用这个进度（一个百分比）计算出在此进度下属性的值，只要在这里稍微调整计算的方程y=f(x)，就能实现各种各样的效果了，例如最常见的线性和回弹效果。这里的函数CalculateValue就是做这样的事情，它根据传入的AnimationType决定使用什么方程，而进度_progress作为方程的x值，然后返回计算后的y值，这个y值同样是一个百分比，要和动画总变化值（totalValue）相乘，最后加上属性初始值就是当前进度的动画变化值。注意这里设定的方程定义域应该是(0,1]，而值域则最好是从零开始，最后当x=1时，y=1，这样动画效果才不会奇奇怪怪。还有就是属性值的变化不一定是从小到大的所以要做判断决定是加还是减。\n\nCalculateValue函数：\n```csharp\nprivate static double CalculateValue(AnimationType animationType, double x)\n{\n\tdouble _y = 1;\n\tswitch (animationType)\n\t{\n\t\tcase AnimationType.Liner:\n\t\t\t_y = x;\n\t\t\tbreak;\n\t\tcase AnimationType.Ease:\n\t\t\t_y = Math.Sqrt(x);\n\t\t\tbreak;\n\t\tcase AnimationType.Ball:\n\t\t\t_y = Math.Sqrt(1.0 - Math.Pow(x - 1, 2));\n\t\t\tbreak;\n\t\tcase AnimationType.Resilience:\n\t\t\t_y = -10.0 / 6.0 * x * (x - 1.6);\n\t\t\tbreak;\n\t}\n\treturn _y;\n}\n```\n\nOK，现在可以写实际动画的函数了。以下是水平移动的例子：\n```csharp\npublic static void HorizontalMove(\n\tSystem.Windows.Forms.Control control,\n\tint endLeft,\n\tint lastTime,\n\tAnimationType animationType)\n{\n\tSystem.Windows.Forms.Timer _timer = new System.Windows.Forms.Timer();\n\t_timer.Interval = 15; // CAUSION, this value may not work for you\n\tint _frames = lastTime % _timer.Interval > 0 ? lastTime / _timer.Interval + 1 : lastTime / _timer.Interval;\n\tAnimationStatus animationStatue = new AnimationStatus(\"Left\", control.Left, endLeft, _frames, animationType);\n\t_timer.Tick += delegate { Animate(control, _timer, animationStatue); };\n\t_timer.Enabled = true;\n\t_timer.Start();\n}\n```\n\n做的事情就是初始化定时器、动画状态，然后将通用动画函数和参数作为一个委托绑定到定时器上，打开定时器。\n\n时间控制使用System.Windows.Forms.Timer这个定时器。C#中有三种定时器，这个是唯一一个单线程执行的定时器，也就是说会在UI主线程上执行绑定触发事件，而且它的精度是55ms，也就是说不能很精确地控制动画的进度。最重要的一点，因为是在UI主线程上执行的关系，如果绑定的触发事件执行时间过长，会造成UI假死。但是这里做的控件动画是应用在界面切换或者为控件增加小型动态效果上，动画量少而且持续时间不长，途中的假死是可以无视的。\n\n最后来看一下效果吧。\nGUI：\n![GUI图](http://i.imgur.com/yvLJGnP.jpg)\n\n按钮事件：\n```csharp\nprivate void button1_Click(object sender, EventArgs e)\n{\n  ControlAnimation.HorizontalMove(label1, 300, 500, AnimationType.Resilience);\n}\n```\n\n动画效果：\n![动画效果](http://i.imgur.com/YKoP3CJ.gif)\n","source":"_posts/C-实现简单的控件动画.md","raw":"---\ntitle: 'C#实现简单的控件动画'\ncategories:\n  - [编程语言, C#]\ntags: [C#]\npermalink: csharp-simple-animation-component\nid: 2\nupdated: '2014-04-15 15:37:21'\ndate: 2014-01-23 03:01:34\n---\n\n在学习.net编程的时候，做作业经常要求有一个界面。而在做局域网五子棋游戏这个作业的时候，客户端的界面既有登录界面又有用户列表界面，做一个动画来切换就再好不过了。不过翻查了一下MSDN和一些资料，对于C#怎么实现控件的动画效果都没怎么提及，于是参考了一下javascript在网页上实现动画的原理，自己尝试着写了。\n\n动画原理什么的不详细解释了，大家都知道是每一张静态的图片在同等时间间隔内快速地播放，利用视觉停留现象造成一系列视觉印象，从而出现会动的感觉。\n\n而应用到控件的动画上又是如何呢？从最简单的直线匀速移动开始考虑吧。比如，需要将实现一个标签从距离窗体左方30px移动到距离左方300px，在500毫秒内完成，那么，就需要具体计算出每一个时间间隔需要将这个标签移动多少距离，然后在每经过这样的一段时间之后，通过改变控件的距离左边的属性的值来实现控件的微小移动。只要在500毫秒内移动的次数足够的多，那么控件看起来就是在连续地移动。\n\nOK，其中重要的概念有几个。1、将那最小的一小段时间叫做一帧，也就是说整体的移动是通过一帧一帧的小移动叠加出来。2、时间控制。需要一个函数，在每一帧将控件的属性重新设置。这里可以通过使用计时器来实现。3、动画状态。需要将当前动画进行的状态记录下来，以便下一帧到达的时候被更改到下一个帧的状态。\n\n了解了基本原理之后，下面开始编写代码。\n\n首先定义一个存储动画状态的类AnimationStatus，其中：_attribute是控件的属性名称，_initValue是控件动画前的值，_endValue是控件动画后的最终值，_totalValue是整个动画变化的值，_totalFrames是动画所有帧的数量，_currentFrames是代表动画进行到多少帧。将字段封装好，能从外面修改的只有_currentFrames。构造函数没什么好说的，就是初始赋值，注意_totalValue是正数而_currentFrames默认是1。\n```csharp\n/// <summary>\n/// A class that store a set of animation of the control\n/// </summary>\nclass AnimationStatus\n{\n\tAnimationType _animationType;\n\tstring _attribute;\n\tint _initValue;\n\tint _endValue;\n\tint _totalValue;\n\tint _totalFrames;\n\tint _currentFrames;\n\n\t/// <summary>\n\t/// type of the animation, such as liner, Ease...\n\t/// </summary>\n\tpublic AnimationType AnimationType\n\t{\n\t\tget { return _animationType; }\n\t}\n\t/// <summary>\n\t/// attribute of control that the contrl will change\n\t/// </summary>\n\tpublic string Attribute\n\t{\n\t\tget { return _attribute; }\n\t}\n\t/// <summary>\n\t/// current value of the attribute that is ready to change\n\t/// </summary>\n\tpublic int InitValue\n\t{\n\t\tget { return _initValue; }\n\t}\n\t/// <summary>\n\t/// final value of the attribute that is ready to change\n\t/// </summary>\n\tpublic int EndValue\n\t{\n\t\tget { return _endValue; }\n\t}\n\t/// <summary>\n\t/// total value that changed\n\t/// </summary>\n\tpublic int TotalValue\n\t{\n\t\tget { return _totalValue; }\n\t}\n\t/// <summary>\n\t/// total frames the animation should play, READONLY\n\t/// </summary>\n\tpublic int TotalFrames\n\t{\n\t\tget { return _totalFrames; }\n\t}\n\t/// <summary>\n\t/// current frames the animation has played\n\t/// </summary>\n\tpublic int CurrentFrames\n\t{\n\t\tget { return _currentFrames; }\n\t\tset { _currentFrames = value; }\n\t}\n\n\t// contructor\n\tpublic AnimationStatus(string attribute, int initValue, int endValue, int totalFrames, AnimationType animationType)\n\t{\n\t\tthis._attribute = attribute;\n\t\tthis._animationType = animationType;\n\t\tthis._initValue = initValue;\n\t\tthis._endValue = endValue;\n\t\tthis._totalValue = Math.Abs(this._endValue - this._initValue);\n\t\tthis._totalFrames = totalFrames;\n\t\tthis._currentFrames = 1;\n\t}\n}\n```\n\n接下来写的是处理每一帧的通用动画函数。\n```csharp\n/// <summary>\n/// common function of moving control\n/// </summary>\n/// <param name=\"contorl\">the control to be moved</param>\n/// <param name=\"timer\">the timer that control the time of animation</param>\n/// <param name=\"animationStatue\">current statue of animation</param>\nprivate static void Animate(\n\tSystem.Windows.Forms.Control contorl,\n\tSystem.Windows.Forms.Timer timer,\n\tAnimationStatus animationStatue)\n{\n\tif (contorl == null\n\t\t|| contorl.IsDisposed\n\t\t|| animationStatue.CurrentFrames > animationStatue.TotalFrames)\n\t{\n\t\ttimer.Enabled = false;\n\t\treturn;\n\t}\n\t// perform animation\n\tType _tp = contorl.GetType();\n\tSystem.Reflection.PropertyInfo _pi = _tp.GetProperty(animationStatue.Attribute);\n\tif (_pi != null)\n\t{\n\t\tdouble _progress = (double)animationStatue.CurrentFrames / (double)animationStatue.TotalFrames;\n\t\tint _newValue =\n\t\t\tanimationStatue.InitValue < animationStatue.EndValue ?\n\t\t\tanimationStatue.InitValue + Convert.ToInt32(Math.Round(animationStatue.TotalValue * CalculateValue(animationStatue.AnimationType, _progress))) :\n\t\t\tanimationStatue.InitValue - Convert.ToInt32(Math.Round(animationStatue.TotalValue * CalculateValue(animationStatue.AnimationType, _progress)));\n\t\t_pi.SetValue(contorl, _newValue, null);\n\t}\n\telse\n\t{\n\t\ttimer.Enabled = false;\n\t\treturn;\n\t}\n\tanimationStatue.CurrentFrames++;\n}\n```\n\n一开始的判断是防止被操作的控件已经销毁了，并且在动画已经播完了的时候将定时器暂停并返回。从”// perform animation”这个注释之后的代码应用到C#的反射机制。为什么？简单来说就是因为要写出一个通用的动画函数，所以不能在函数里面事先规定要修改的Control对象的属性，但是在实际运行的时候还是需要得到Control对象的具体属性才能修改其中的值，于是使用反射来得到这个对象的某个属性，进而修改这个属性的值。\n\n那么这个“值”如何计算出来呢？首先需要得知动画现在的进度，于是就用当前的动画进度（animationStatue.CurrentFrames）除以总进度（animationStatue.TotalFrames）。然后是利用这个进度（一个百分比）计算出在此进度下属性的值，只要在这里稍微调整计算的方程y=f(x)，就能实现各种各样的效果了，例如最常见的线性和回弹效果。这里的函数CalculateValue就是做这样的事情，它根据传入的AnimationType决定使用什么方程，而进度_progress作为方程的x值，然后返回计算后的y值，这个y值同样是一个百分比，要和动画总变化值（totalValue）相乘，最后加上属性初始值就是当前进度的动画变化值。注意这里设定的方程定义域应该是(0,1]，而值域则最好是从零开始，最后当x=1时，y=1，这样动画效果才不会奇奇怪怪。还有就是属性值的变化不一定是从小到大的所以要做判断决定是加还是减。\n\nCalculateValue函数：\n```csharp\nprivate static double CalculateValue(AnimationType animationType, double x)\n{\n\tdouble _y = 1;\n\tswitch (animationType)\n\t{\n\t\tcase AnimationType.Liner:\n\t\t\t_y = x;\n\t\t\tbreak;\n\t\tcase AnimationType.Ease:\n\t\t\t_y = Math.Sqrt(x);\n\t\t\tbreak;\n\t\tcase AnimationType.Ball:\n\t\t\t_y = Math.Sqrt(1.0 - Math.Pow(x - 1, 2));\n\t\t\tbreak;\n\t\tcase AnimationType.Resilience:\n\t\t\t_y = -10.0 / 6.0 * x * (x - 1.6);\n\t\t\tbreak;\n\t}\n\treturn _y;\n}\n```\n\nOK，现在可以写实际动画的函数了。以下是水平移动的例子：\n```csharp\npublic static void HorizontalMove(\n\tSystem.Windows.Forms.Control control,\n\tint endLeft,\n\tint lastTime,\n\tAnimationType animationType)\n{\n\tSystem.Windows.Forms.Timer _timer = new System.Windows.Forms.Timer();\n\t_timer.Interval = 15; // CAUSION, this value may not work for you\n\tint _frames = lastTime % _timer.Interval > 0 ? lastTime / _timer.Interval + 1 : lastTime / _timer.Interval;\n\tAnimationStatus animationStatue = new AnimationStatus(\"Left\", control.Left, endLeft, _frames, animationType);\n\t_timer.Tick += delegate { Animate(control, _timer, animationStatue); };\n\t_timer.Enabled = true;\n\t_timer.Start();\n}\n```\n\n做的事情就是初始化定时器、动画状态，然后将通用动画函数和参数作为一个委托绑定到定时器上，打开定时器。\n\n时间控制使用System.Windows.Forms.Timer这个定时器。C#中有三种定时器，这个是唯一一个单线程执行的定时器，也就是说会在UI主线程上执行绑定触发事件，而且它的精度是55ms，也就是说不能很精确地控制动画的进度。最重要的一点，因为是在UI主线程上执行的关系，如果绑定的触发事件执行时间过长，会造成UI假死。但是这里做的控件动画是应用在界面切换或者为控件增加小型动态效果上，动画量少而且持续时间不长，途中的假死是可以无视的。\n\n最后来看一下效果吧。\nGUI：\n![GUI图](http://i.imgur.com/yvLJGnP.jpg)\n\n按钮事件：\n```csharp\nprivate void button1_Click(object sender, EventArgs e)\n{\n  ControlAnimation.HorizontalMove(label1, 300, 500, AnimationType.Resilience);\n}\n```\n\n动画效果：\n![动画效果](http://i.imgur.com/YKoP3CJ.gif)\n","slug":"csharp-simple-animation-component","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyurq0060n7t4kc8g6jxr","content":"<p>在学习.net编程的时候，做作业经常要求有一个界面。而在做局域网五子棋游戏这个作业的时候，客户端的界面既有登录界面又有用户列表界面，做一个动画来切换就再好不过了。不过翻查了一下MSDN和一些资料，对于C#怎么实现控件的动画效果都没怎么提及，于是参考了一下javascript在网页上实现动画的原理，自己尝试着写了。</p>\n<p>动画原理什么的不详细解释了，大家都知道是每一张静态的图片在同等时间间隔内快速地播放，利用视觉停留现象造成一系列视觉印象，从而出现会动的感觉。</p>\n<p>而应用到控件的动画上又是如何呢？从最简单的直线匀速移动开始考虑吧。比如，需要将实现一个标签从距离窗体左方30px移动到距离左方300px，在500毫秒内完成，那么，就需要具体计算出每一个时间间隔需要将这个标签移动多少距离，然后在每经过这样的一段时间之后，通过改变控件的距离左边的属性的值来实现控件的微小移动。只要在500毫秒内移动的次数足够的多，那么控件看起来就是在连续地移动。</p>\n<p>OK，其中重要的概念有几个。1、将那最小的一小段时间叫做一帧，也就是说整体的移动是通过一帧一帧的小移动叠加出来。2、时间控制。需要一个函数，在每一帧将控件的属性重新设置。这里可以通过使用计时器来实现。3、动画状态。需要将当前动画进行的状态记录下来，以便下一帧到达的时候被更改到下一个帧的状态。</p>\n<p>了解了基本原理之后，下面开始编写代码。</p>\n<p>首先定义一个存储动画状态的类AnimationStatus，其中：_attribute是控件的属性名称，_initValue是控件动画前的值，_endValue是控件动画后的最终值，_totalValue是整个动画变化的值，_totalFrames是动画所有帧的数量，_currentFrames是代表动画进行到多少帧。将字段封装好，能从外面修改的只有_currentFrames。构造函数没什么好说的，就是初始赋值，注意_totalValue是正数而_currentFrames默认是1。<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> A class that store a set of animation of the control</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">AnimationStatus</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tAnimationType _animationType;</span><br><span class=\"line\">\t<span class=\"keyword\">string</span> _attribute;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> _initValue;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> _endValue;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> _totalValue;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> _totalFrames;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> _currentFrames;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> type of the animation, such as liner, Ease...</span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> AnimationType AnimationType</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _animationType; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> attribute of control that the contrl will change</span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Attribute</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _attribute; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> current value of the attribute that is ready to change</span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> InitValue</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _initValue; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> final value of the attribute that is ready to change</span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> EndValue</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _endValue; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> total value that changed</span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> TotalValue</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _totalValue; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> total frames the animation should play, READONLY</span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> TotalFrames</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _totalFrames; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> current frames the animation has played</span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CurrentFrames</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _currentFrames; &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">set</span> &#123; _currentFrames = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// contructor</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AnimationStatus</span>(<span class=\"params\"><span class=\"keyword\">string</span> attribute, <span class=\"keyword\">int</span> initValue, <span class=\"keyword\">int</span> endValue, <span class=\"keyword\">int</span> totalFrames, AnimationType animationType</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>._attribute = attribute;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>._animationType = animationType;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>._initValue = initValue;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>._endValue = endValue;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>._totalValue = Math.Abs(<span class=\"keyword\">this</span>._endValue - <span class=\"keyword\">this</span>._initValue);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>._totalFrames = totalFrames;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>._currentFrames = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来写的是处理每一帧的通用动画函数。<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> common function of moving control</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"contorl\"&gt;</span>the control to be moved<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"timer\"&gt;</span>the timer that control the time of animation<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"animationStatue\"&gt;</span>current statue of animation<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Animate</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tSystem.Windows.Forms.Control contorl,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tSystem.Windows.Forms.Timer timer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tAnimationStatus animationStatue</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (contorl == <span class=\"literal\">null</span></span><br><span class=\"line\">\t\t|| contorl.IsDisposed</span><br><span class=\"line\">\t\t|| animationStatue.CurrentFrames &gt; animationStatue.TotalFrames)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttimer.Enabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// perform animation</span></span><br><span class=\"line\">\tType _tp = contorl.GetType();</span><br><span class=\"line\">\tSystem.Reflection.PropertyInfo _pi = _tp.GetProperty(animationStatue.Attribute);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_pi != <span class=\"literal\">null</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> _progress = (<span class=\"keyword\">double</span>)animationStatue.CurrentFrames / (<span class=\"keyword\">double</span>)animationStatue.TotalFrames;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> _newValue =</span><br><span class=\"line\">\t\t\tanimationStatue.InitValue &lt; animationStatue.EndValue ?</span><br><span class=\"line\">\t\t\tanimationStatue.InitValue + Convert.ToInt32(Math.Round(animationStatue.TotalValue * CalculateValue(animationStatue.AnimationType, _progress))) :</span><br><span class=\"line\">\t\t\tanimationStatue.InitValue - Convert.ToInt32(Math.Round(animationStatue.TotalValue * CalculateValue(animationStatue.AnimationType, _progress)));</span><br><span class=\"line\">\t\t_pi.SetValue(contorl, _newValue, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttimer.Enabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tanimationStatue.CurrentFrames++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一开始的判断是防止被操作的控件已经销毁了，并且在动画已经播完了的时候将定时器暂停并返回。从”// perform animation”这个注释之后的代码应用到C#的反射机制。为什么？简单来说就是因为要写出一个通用的动画函数，所以不能在函数里面事先规定要修改的Control对象的属性，但是在实际运行的时候还是需要得到Control对象的具体属性才能修改其中的值，于是使用反射来得到这个对象的某个属性，进而修改这个属性的值。</p>\n<p>那么这个“值”如何计算出来呢？首先需要得知动画现在的进度，于是就用当前的动画进度（animationStatue.CurrentFrames）除以总进度（animationStatue.TotalFrames）。然后是利用这个进度（一个百分比）计算出在此进度下属性的值，只要在这里稍微调整计算的方程y=f(x)，就能实现各种各样的效果了，例如最常见的线性和回弹效果。这里的函数CalculateValue就是做这样的事情，它根据传入的AnimationType决定使用什么方程，而进度_progress作为方程的x值，然后返回计算后的y值，这个y值同样是一个百分比，要和动画总变化值（totalValue）相乘，最后加上属性初始值就是当前进度的动画变化值。注意这里设定的方程定义域应该是(0,1]，而值域则最好是从零开始，最后当x=1时，y=1，这样动画效果才不会奇奇怪怪。还有就是属性值的变化不一定是从小到大的所以要做判断决定是加还是减。</p>\n<p>CalculateValue函数：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">CalculateValue</span>(<span class=\"params\">AnimationType animationType, <span class=\"keyword\">double</span> x</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> _y = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (animationType)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> AnimationType.Liner:</span><br><span class=\"line\">\t\t\t_y = x;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> AnimationType.Ease:</span><br><span class=\"line\">\t\t\t_y = Math.Sqrt(x);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> AnimationType.Ball:</span><br><span class=\"line\">\t\t\t_y = Math.Sqrt(<span class=\"number\">1.0</span> - Math.Pow(x - <span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> AnimationType.Resilience:</span><br><span class=\"line\">\t\t\t_y = <span class=\"number\">-10.0</span> / <span class=\"number\">6.0</span> * x * (x - <span class=\"number\">1.6</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> _y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>OK，现在可以写实际动画的函数了。以下是水平移动的例子：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">HorizontalMove</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tSystem.Windows.Forms.Control control,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t<span class=\"keyword\">int</span> endLeft,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t<span class=\"keyword\">int</span> lastTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tAnimationType animationType</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSystem.Windows.Forms.Timer _timer = <span class=\"keyword\">new</span> System.Windows.Forms.Timer();</span><br><span class=\"line\">\t_timer.Interval = <span class=\"number\">15</span>; <span class=\"comment\">// CAUSION, this value may not work for you</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> _frames = lastTime % _timer.Interval &gt; <span class=\"number\">0</span> ? lastTime / _timer.Interval + <span class=\"number\">1</span> : lastTime / _timer.Interval;</span><br><span class=\"line\">\tAnimationStatus animationStatue = <span class=\"keyword\">new</span> AnimationStatus(<span class=\"string\">\"Left\"</span>, control.Left, endLeft, _frames, animationType);</span><br><span class=\"line\">\t_timer.Tick += <span class=\"keyword\">delegate</span> &#123; Animate(control, _timer, animationStatue); &#125;;</span><br><span class=\"line\">\t_timer.Enabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t_timer.Start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>做的事情就是初始化定时器、动画状态，然后将通用动画函数和参数作为一个委托绑定到定时器上，打开定时器。</p>\n<p>时间控制使用System.Windows.Forms.Timer这个定时器。C#中有三种定时器，这个是唯一一个单线程执行的定时器，也就是说会在UI主线程上执行绑定触发事件，而且它的精度是55ms，也就是说不能很精确地控制动画的进度。最重要的一点，因为是在UI主线程上执行的关系，如果绑定的触发事件执行时间过长，会造成UI假死。但是这里做的控件动画是应用在界面切换或者为控件增加小型动态效果上，动画量少而且持续时间不长，途中的假死是可以无视的。</p>\n<p>最后来看一下效果吧。<br>GUI：<br><img src=\"http://i.imgur.com/yvLJGnP.jpg\" alt=\"GUI图\"></p>\n<p>按钮事件：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">button1_Click</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ControlAnimation.HorizontalMove(label1, <span class=\"number\">300</span>, <span class=\"number\">500</span>, AnimationType.Resilience);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>动画效果：<br><img src=\"http://i.imgur.com/YKoP3CJ.gif\" alt=\"动画效果\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在学习.net编程的时候，做作业经常要求有一个界面。而在做局域网五子棋游戏这个作业的时候，客户端的界面既有登录界面又有用户列表界面，做一个动画来切换就再好不过了。不过翻查了一下MSDN和一些资料，对于C#怎么实现控件的动画效果都没怎么提及，于是参考了一下javascript在网页上实现动画的原理，自己尝试着写了。</p>\n<p>动画原理什么的不详细解释了，大家都知道是每一张静态的图片在同等时间间隔内快速地播放，利用视觉停留现象造成一系列视觉印象，从而出现会动的感觉。</p>\n<p>而应用到控件的动画上又是如何呢？从最简单的直线匀速移动开始考虑吧。比如，需要将实现一个标签从距离窗体左方30px移动到距离左方300px，在500毫秒内完成，那么，就需要具体计算出每一个时间间隔需要将这个标签移动多少距离，然后在每经过这样的一段时间之后，通过改变控件的距离左边的属性的值来实现控件的微小移动。只要在500毫秒内移动的次数足够的多，那么控件看起来就是在连续地移动。</p>\n<p>OK，其中重要的概念有几个。1、将那最小的一小段时间叫做一帧，也就是说整体的移动是通过一帧一帧的小移动叠加出来。2、时间控制。需要一个函数，在每一帧将控件的属性重新设置。这里可以通过使用计时器来实现。3、动画状态。需要将当前动画进行的状态记录下来，以便下一帧到达的时候被更改到下一个帧的状态。</p>\n<p>了解了基本原理之后，下面开始编写代码。</p>\n<p>首先定义一个存储动画状态的类AnimationStatus，其中：_attribute是控件的属性名称，_initValue是控件动画前的值，_endValue是控件动画后的最终值，_totalValue是整个动画变化的值，_totalFrames是动画所有帧的数量，_currentFrames是代表动画进行到多少帧。将字段封装好，能从外面修改的只有_currentFrames。构造函数没什么好说的，就是初始赋值，注意_totalValue是正数而_currentFrames默认是1。<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> A class that store a set of animation of the control</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">AnimationStatus</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tAnimationType _animationType;</span><br><span class=\"line\">\t<span class=\"keyword\">string</span> _attribute;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> _initValue;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> _endValue;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> _totalValue;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> _totalFrames;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> _currentFrames;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> type of the animation, such as liner, Ease...</span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> AnimationType AnimationType</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _animationType; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> attribute of control that the contrl will change</span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">string</span> Attribute</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _attribute; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> current value of the attribute that is ready to change</span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> InitValue</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _initValue; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> final value of the attribute that is ready to change</span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> EndValue</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _endValue; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> total value that changed</span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> TotalValue</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _totalValue; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> total frames the animation should play, READONLY</span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> TotalFrames</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _totalFrames; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> current frames the animation has played</span></span><br><span class=\"line\">\t<span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">int</span> CurrentFrames</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">get</span> &#123; <span class=\"keyword\">return</span> _currentFrames; &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">set</span> &#123; _currentFrames = <span class=\"keyword\">value</span>; &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// contructor</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AnimationStatus</span>(<span class=\"params\"><span class=\"keyword\">string</span> attribute, <span class=\"keyword\">int</span> initValue, <span class=\"keyword\">int</span> endValue, <span class=\"keyword\">int</span> totalFrames, AnimationType animationType</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>._attribute = attribute;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>._animationType = animationType;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>._initValue = initValue;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>._endValue = endValue;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>._totalValue = Math.Abs(<span class=\"keyword\">this</span>._endValue - <span class=\"keyword\">this</span>._initValue);</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>._totalFrames = totalFrames;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>._currentFrames = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接下来写的是处理每一帧的通用动画函数。<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> common function of moving control</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"contorl\"&gt;</span>the control to be moved<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"timer\"&gt;</span>the timer that control the time of animation<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=\"animationStatue\"&gt;</span>current statue of animation<span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Animate</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tSystem.Windows.Forms.Control contorl,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tSystem.Windows.Forms.Timer timer,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tAnimationStatus animationStatue</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (contorl == <span class=\"literal\">null</span></span><br><span class=\"line\">\t\t|| contorl.IsDisposed</span><br><span class=\"line\">\t\t|| animationStatue.CurrentFrames &gt; animationStatue.TotalFrames)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttimer.Enabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// perform animation</span></span><br><span class=\"line\">\tType _tp = contorl.GetType();</span><br><span class=\"line\">\tSystem.Reflection.PropertyInfo _pi = _tp.GetProperty(animationStatue.Attribute);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_pi != <span class=\"literal\">null</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> _progress = (<span class=\"keyword\">double</span>)animationStatue.CurrentFrames / (<span class=\"keyword\">double</span>)animationStatue.TotalFrames;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> _newValue =</span><br><span class=\"line\">\t\t\tanimationStatue.InitValue &lt; animationStatue.EndValue ?</span><br><span class=\"line\">\t\t\tanimationStatue.InitValue + Convert.ToInt32(Math.Round(animationStatue.TotalValue * CalculateValue(animationStatue.AnimationType, _progress))) :</span><br><span class=\"line\">\t\t\tanimationStatue.InitValue - Convert.ToInt32(Math.Round(animationStatue.TotalValue * CalculateValue(animationStatue.AnimationType, _progress)));</span><br><span class=\"line\">\t\t_pi.SetValue(contorl, _newValue, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttimer.Enabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tanimationStatue.CurrentFrames++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>一开始的判断是防止被操作的控件已经销毁了，并且在动画已经播完了的时候将定时器暂停并返回。从”// perform animation”这个注释之后的代码应用到C#的反射机制。为什么？简单来说就是因为要写出一个通用的动画函数，所以不能在函数里面事先规定要修改的Control对象的属性，但是在实际运行的时候还是需要得到Control对象的具体属性才能修改其中的值，于是使用反射来得到这个对象的某个属性，进而修改这个属性的值。</p>\n<p>那么这个“值”如何计算出来呢？首先需要得知动画现在的进度，于是就用当前的动画进度（animationStatue.CurrentFrames）除以总进度（animationStatue.TotalFrames）。然后是利用这个进度（一个百分比）计算出在此进度下属性的值，只要在这里稍微调整计算的方程y=f(x)，就能实现各种各样的效果了，例如最常见的线性和回弹效果。这里的函数CalculateValue就是做这样的事情，它根据传入的AnimationType决定使用什么方程，而进度_progress作为方程的x值，然后返回计算后的y值，这个y值同样是一个百分比，要和动画总变化值（totalValue）相乘，最后加上属性初始值就是当前进度的动画变化值。注意这里设定的方程定义域应该是(0,1]，而值域则最好是从零开始，最后当x=1时，y=1，这样动画效果才不会奇奇怪怪。还有就是属性值的变化不一定是从小到大的所以要做判断决定是加还是减。</p>\n<p>CalculateValue函数：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> <span class=\"title\">CalculateValue</span>(<span class=\"params\">AnimationType animationType, <span class=\"keyword\">double</span> x</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">double</span> _y = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> (animationType)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> AnimationType.Liner:</span><br><span class=\"line\">\t\t\t_y = x;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> AnimationType.Ease:</span><br><span class=\"line\">\t\t\t_y = Math.Sqrt(x);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> AnimationType.Ball:</span><br><span class=\"line\">\t\t\t_y = Math.Sqrt(<span class=\"number\">1.0</span> - Math.Pow(x - <span class=\"number\">1</span>, <span class=\"number\">2</span>));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> AnimationType.Resilience:</span><br><span class=\"line\">\t\t\t_y = <span class=\"number\">-10.0</span> / <span class=\"number\">6.0</span> * x * (x - <span class=\"number\">1.6</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> _y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>OK，现在可以写实际动画的函数了。以下是水平移动的例子：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">HorizontalMove</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tSystem.Windows.Forms.Control control,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t<span class=\"keyword\">int</span> endLeft,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t<span class=\"keyword\">int</span> lastTime,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\tAnimationType animationType</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tSystem.Windows.Forms.Timer _timer = <span class=\"keyword\">new</span> System.Windows.Forms.Timer();</span><br><span class=\"line\">\t_timer.Interval = <span class=\"number\">15</span>; <span class=\"comment\">// CAUSION, this value may not work for you</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> _frames = lastTime % _timer.Interval &gt; <span class=\"number\">0</span> ? lastTime / _timer.Interval + <span class=\"number\">1</span> : lastTime / _timer.Interval;</span><br><span class=\"line\">\tAnimationStatus animationStatue = <span class=\"keyword\">new</span> AnimationStatus(<span class=\"string\">\"Left\"</span>, control.Left, endLeft, _frames, animationType);</span><br><span class=\"line\">\t_timer.Tick += <span class=\"keyword\">delegate</span> &#123; Animate(control, _timer, animationStatue); &#125;;</span><br><span class=\"line\">\t_timer.Enabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t_timer.Start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>做的事情就是初始化定时器、动画状态，然后将通用动画函数和参数作为一个委托绑定到定时器上，打开定时器。</p>\n<p>时间控制使用System.Windows.Forms.Timer这个定时器。C#中有三种定时器，这个是唯一一个单线程执行的定时器，也就是说会在UI主线程上执行绑定触发事件，而且它的精度是55ms，也就是说不能很精确地控制动画的进度。最重要的一点，因为是在UI主线程上执行的关系，如果绑定的触发事件执行时间过长，会造成UI假死。但是这里做的控件动画是应用在界面切换或者为控件增加小型动态效果上，动画量少而且持续时间不长，途中的假死是可以无视的。</p>\n<p>最后来看一下效果吧。<br>GUI：<br><img src=\"http://i.imgur.com/yvLJGnP.jpg\" alt=\"GUI图\"></p>\n<p>按钮事件：<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">button1_Click</span>(<span class=\"params\"><span class=\"keyword\">object</span> sender, EventArgs e</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ControlAnimation.HorizontalMove(label1, <span class=\"number\">300</span>, <span class=\"number\">500</span>, AnimationType.Resilience);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>动画效果：<br><img src=\"http://i.imgur.com/YKoP3CJ.gif\" alt=\"动画效果\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"http://i.imgur.com/yvLJGnP.jpg","popularPost_tmp_gaData":{"updated":"Tue Apr 15 2014 15:37:21 GMT+0800 (China Standard Time)","title":"C#实现简单的控件动画","path":"csharp-simple-animation-component/","eyeCatchImage":"http://i.imgur.com/yvLJGnP.jpg","excerpt":null,"date":"2014-01-22T19:01:34.000Z","pv":0,"totalPV":0,"categories":"编程语言 > C#","tags":["C#"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1832},{"title":"5 分钟速成古埃及神明","author":"exoticknight","_content":"\n古埃及的宗教是多神教，他们认为自然现象、客观事物甚至动物，都存在神明。在新王国时期法老阿肯那顿将阿顿作为唯一神，古埃及曾短暂地存在一神教时期。这部分详细可以阅读[30 分钟速成古埃及历史][30 分钟速成古埃及历史]。\n\n[30 分钟速成古埃及历史]: /learn-ancient-egyptian-history-in-30-minutes\n\n三千年的存在时间和政权的多次更迭造成古埃及神明种类繁多，系统复杂，甚至可能互相矛盾，但总的来说有三个神话系统。\n\n## 九柱神\n\n九柱神是古埃及宗教中一般都采用的神话系统。\n\n### 拉（Ra）\n\n太阳神，埃及神话中的最高神。生舒和泰芙努特。九柱神之一。\n\n<img alt=\"拉 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Re-Horakhty.svg/218px-Re-Horakhty.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/Re-Horakhty.svg\" />\n\n### 舒（Shu）\n\n风神，拉的儿子，与泰芙努特生盖布和努特。九柱神之一。\n\n<img alt=\"舒 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/Shu_with_feather.svg/224px-Shu_with_feather.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/e1/Shu_with_feather.svg\" />\n\n### 泰芙努特（Tefnut）\n\n雨神，拉的女儿，舒的妻子。九柱神之一。\n\n<img alt=\"泰芙努特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8b/Tefnut.png/273px-Tefnut.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/8/8b/Tefnut.png\" />\n\n### 盖布（Geb）\n\n大地之神，与努特生欧西里斯、赛特、艾西斯、奈芙蒂斯。九柱神之一。\n\n<img alt=\"盖布 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Geb.svg/219px-Geb.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Geb.svg\" />\n\n### 努特（Nut）\n\n天神，盖布的妻子。九柱神之一。\n\n<img alt=\"努特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Nut.svg/236px-Nut.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/d/df/Nut.svg\" />\n\n### 奥西里斯（Osiris）\n\n冥王，也是农业之神。九柱神之一。\n\n<img alt=\"奥西里斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Standing_Osiris_edit1.svg/221px-Standing_Osiris_edit1.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/c/cc/Standing_Osiris_edit1.svg\" />\n\n### 伊西斯（Isis）\n\n死者的守护神，也是生育之神，奥西里斯的妻子。九柱神之一。\n\n<img alt=\"伊西斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Isis.svg/218px-Isis.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/ec/Isis.svg\" />\n\n### 赛特（Seth）\n\n干旱之神，风暴之神。有时也被认为是战神。九柱神之一。\n\n<img alt=\"赛特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/7a/Set.svg/231px-Set.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/7/7a/Set.svg\" />\n\n### 奈芙蒂斯（Nephthys）\n\n死者的守护神，赛特的妻子。九柱神之一。\n\n<img alt=\"奈芙蒂斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Nepthys.svg/218px-Nepthys.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/a7/Nepthys.svg\" />\n\n### 阿努比斯（Anubis）\n\n赛特和奈芙蒂斯，负责制作木乃伊和评判死去的人该不该永生。\n\n<img alt=\"阿努比斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Anubis_standing.svg/224px-Anubis_standing.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/6/6d/Anubis_standing.svg\" />\n\n### 荷鲁斯（Horus）\n\n奥西里斯和伊西斯的儿子，一般是代表法老的权威。\n\n<img alt=\"荷鲁斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c2/Horus_standing.svg/210px-Horus_standing.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/c/c2/Horus_standing.svg\" />\n\n### 哈索尔（Hathor）\n\n爱神、美神，荷鲁斯妻子。\n\n<img alt=\"哈索尔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/Hathor.svg/203px-Hathor.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/4/47/Hathor.svg\" />\n\n### 荷鲁斯的四个儿子\n\n为木乃伊保存四个内脏。伊姆塞特保护肝脏，哈庇保护肺，杜阿木忒弗保护胃，克贝克塞努弗保护肠。\n\n<img alt=\"荷鲁斯的四个儿子 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Four_sons_of_Horus.svg/535px-Four_sons_of_Horus.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/2/29/Four_sons_of_Horus.svg\" />\n\n### 神明之间的关系\n\n拉是众神之始，生出舒和泰芙努特。\n\n舒与泰芙努特生盖布和努特。\n\n盖布在下为地，努特在上为天，舒在中间撑着。\n\n<img alt=\"舒，盖布和努特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Geb%2C_Nut%2C_Shu.jpg/640px-Geb%2C_Nut%2C_Shu.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Geb%2C_Nut%2C_Shu.jpg\" />\n\n盖布与努特生奥西里斯、赛特、伊西斯、奈芙蒂斯。奥西里斯和伊西斯成夫妻，赛特和奈芙蒂斯成夫妻。\n\n赛特嫉妒哥哥奥西里斯，举办了一个宴会，做一个刚好哥哥能躺进去的棺材，让别人躺进去试试。奥西里斯躺进去就封上扔进尼罗河溺死他。\n\n伊西斯和奈芙蒂斯找回尸体复活，但赛特又一次杀死了奥西里斯并分尸十四块，藏在世界各地。伊西斯找了很久，除了下体凑足了尸体，负责做木乃伊的阿努比斯帮助她复活奥西里斯。伊西斯之后生下荷鲁斯，然后奥西里斯成了冥界之主。有些文献说是因为他的下体被鱼吃了，伊西斯使用木头代替导致复活不完全。\n\n奥西里斯的经典造型是绿脸，双手握权杖交叉胸前，经常出现在法老为自己建造的陵墓门口。\n\n荷鲁斯被秘密抚养长大之后，向赛特复仇并打败了他，过程中扯下了他的一颗睾丸，自己则失去一只眼睛。那只眼睛就被视为著名的「荷鲁斯之眼」。\n\n<img alt=\"荷鲁斯之眼 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/Eye_of_Horus_Right.svg/624px-Eye_of_Horus_Right.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/Eye_of_Horus_Right.svg/624px-Eye_of_Horus_Right.svg.png\" />\n\n## 八元神\n\n八元神其实是四对分雌雄的神。关于八元神的故事并不多。\n\n代表自然水，纳乌涅特（Naunet）和 努恩（Nu）、\n代表空气或隐蔽或虚无，阿玛乌涅特（Amaunet）和 阿蒙（Amun）、\n代表黑暗，卡乌凯特（Kauket）和 库克（Kuk）、\n代表永恒或无限空间，哈乌赫特（Hauhet）和 胡（Huh）。\n\n在这个体系中，拉是在四对神的相互作用下诞生的。\n\n## 底比斯诸神\n\n底比斯经常作为古埃及的首都，其当地的神话和神明在古埃及宗教上占有很重的地位，甚至排挤其他神明的地位。\n\n### 阿蒙（Amun）\n\n本身只是地方神祇，但是十八王朝开始随着王室的崇拜和古埃及版图扩张而逐渐成为到了主神的地步。\n\n有时又会和拉结合，成为众神之王。\n\n<img alt=\"阿蒙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/Amun.svg/181px-Amun.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/5/57/Amun.svg\" />\n\n### 姆特（Mut）\n\n阿蒙之妻，生下孔斯，一起成为底比斯三柱神。\n\n<img alt=\"姆特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Mut.svg/214px-Mut.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/9/9d/Mut.svg\" />\n\n### 孔斯（Khonsu）\n\n阿蒙和姆特之子，一代月神。\n\n<img alt=\"孔斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/bf/Khonsu_as_falcon.svg/218px-Khonsu_as_falcon.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/b/bf/Khonsu_as_falcon.svg\" />\n\n### 麦里特塞盖尔（Meretseger）\n\n不是太重要的神，负责守卫帝王谷。\n\n<img alt=\"麦里特塞盖尔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Meretseger.svg/236px-Meretseger.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/04/Meretseger.svg\" />\n\n### 托特（Thoth）\n\n智慧之神。二代月神同时也是数学、医药之神，负责守护文艺和书记的工作。相传他是古埃及文字的发明者。\n\n<img alt=\"托特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Thoth.svg/249px-Thoth.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/c/c3/Thoth.svg\" />\n\n## 参考资料\n\n[Egyptian mythology](https://en.wikipedia.org/wiki/Egyptian_mythology)\n[Ennead](https://en.wikipedia.org/wiki/Ennead)\n[Ogdoad_(Egyptian)](https://en.wikipedia.org/wiki/Ogdoad_(Egyptian))\n[埃及神话](埃及神话)\n[九柱神](https://zh.wikipedia.org/wiki/九柱神)\n[八元神](https://zh.wikipedia.org/wiki/八元神)\n[埃及旅遊｜一起認識複雜的埃及神祇吧！九柱神與重要神祇們](http://travelm.tw/egypt-god)\n[古埃及主要神話體系簡介](https://myancientegyptpractice.wordpress.com/2015/07/18/神話簡介)\n","source":"_posts/5 分钟速成古埃及神明.md","raw":"---\ntitle: 5 分钟速成古埃及神明\nauthor: exoticknight\ncategories:\n  - [知识, 古埃及]\ntags: [ancient-egypt, god]\npermalink: learn-ancient-egyptian-gods-in-5-minutes\n---\n\n古埃及的宗教是多神教，他们认为自然现象、客观事物甚至动物，都存在神明。在新王国时期法老阿肯那顿将阿顿作为唯一神，古埃及曾短暂地存在一神教时期。这部分详细可以阅读[30 分钟速成古埃及历史][30 分钟速成古埃及历史]。\n\n[30 分钟速成古埃及历史]: /learn-ancient-egyptian-history-in-30-minutes\n\n三千年的存在时间和政权的多次更迭造成古埃及神明种类繁多，系统复杂，甚至可能互相矛盾，但总的来说有三个神话系统。\n\n## 九柱神\n\n九柱神是古埃及宗教中一般都采用的神话系统。\n\n### 拉（Ra）\n\n太阳神，埃及神话中的最高神。生舒和泰芙努特。九柱神之一。\n\n<img alt=\"拉 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Re-Horakhty.svg/218px-Re-Horakhty.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/Re-Horakhty.svg\" />\n\n### 舒（Shu）\n\n风神，拉的儿子，与泰芙努特生盖布和努特。九柱神之一。\n\n<img alt=\"舒 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/Shu_with_feather.svg/224px-Shu_with_feather.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/e1/Shu_with_feather.svg\" />\n\n### 泰芙努特（Tefnut）\n\n雨神，拉的女儿，舒的妻子。九柱神之一。\n\n<img alt=\"泰芙努特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8b/Tefnut.png/273px-Tefnut.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/8/8b/Tefnut.png\" />\n\n### 盖布（Geb）\n\n大地之神，与努特生欧西里斯、赛特、艾西斯、奈芙蒂斯。九柱神之一。\n\n<img alt=\"盖布 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Geb.svg/219px-Geb.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Geb.svg\" />\n\n### 努特（Nut）\n\n天神，盖布的妻子。九柱神之一。\n\n<img alt=\"努特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Nut.svg/236px-Nut.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/d/df/Nut.svg\" />\n\n### 奥西里斯（Osiris）\n\n冥王，也是农业之神。九柱神之一。\n\n<img alt=\"奥西里斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Standing_Osiris_edit1.svg/221px-Standing_Osiris_edit1.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/c/cc/Standing_Osiris_edit1.svg\" />\n\n### 伊西斯（Isis）\n\n死者的守护神，也是生育之神，奥西里斯的妻子。九柱神之一。\n\n<img alt=\"伊西斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Isis.svg/218px-Isis.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/ec/Isis.svg\" />\n\n### 赛特（Seth）\n\n干旱之神，风暴之神。有时也被认为是战神。九柱神之一。\n\n<img alt=\"赛特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/7a/Set.svg/231px-Set.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/7/7a/Set.svg\" />\n\n### 奈芙蒂斯（Nephthys）\n\n死者的守护神，赛特的妻子。九柱神之一。\n\n<img alt=\"奈芙蒂斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Nepthys.svg/218px-Nepthys.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/a7/Nepthys.svg\" />\n\n### 阿努比斯（Anubis）\n\n赛特和奈芙蒂斯，负责制作木乃伊和评判死去的人该不该永生。\n\n<img alt=\"阿努比斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Anubis_standing.svg/224px-Anubis_standing.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/6/6d/Anubis_standing.svg\" />\n\n### 荷鲁斯（Horus）\n\n奥西里斯和伊西斯的儿子，一般是代表法老的权威。\n\n<img alt=\"荷鲁斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c2/Horus_standing.svg/210px-Horus_standing.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/c/c2/Horus_standing.svg\" />\n\n### 哈索尔（Hathor）\n\n爱神、美神，荷鲁斯妻子。\n\n<img alt=\"哈索尔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/Hathor.svg/203px-Hathor.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/4/47/Hathor.svg\" />\n\n### 荷鲁斯的四个儿子\n\n为木乃伊保存四个内脏。伊姆塞特保护肝脏，哈庇保护肺，杜阿木忒弗保护胃，克贝克塞努弗保护肠。\n\n<img alt=\"荷鲁斯的四个儿子 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Four_sons_of_Horus.svg/535px-Four_sons_of_Horus.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/2/29/Four_sons_of_Horus.svg\" />\n\n### 神明之间的关系\n\n拉是众神之始，生出舒和泰芙努特。\n\n舒与泰芙努特生盖布和努特。\n\n盖布在下为地，努特在上为天，舒在中间撑着。\n\n<img alt=\"舒，盖布和努特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Geb%2C_Nut%2C_Shu.jpg/640px-Geb%2C_Nut%2C_Shu.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Geb%2C_Nut%2C_Shu.jpg\" />\n\n盖布与努特生奥西里斯、赛特、伊西斯、奈芙蒂斯。奥西里斯和伊西斯成夫妻，赛特和奈芙蒂斯成夫妻。\n\n赛特嫉妒哥哥奥西里斯，举办了一个宴会，做一个刚好哥哥能躺进去的棺材，让别人躺进去试试。奥西里斯躺进去就封上扔进尼罗河溺死他。\n\n伊西斯和奈芙蒂斯找回尸体复活，但赛特又一次杀死了奥西里斯并分尸十四块，藏在世界各地。伊西斯找了很久，除了下体凑足了尸体，负责做木乃伊的阿努比斯帮助她复活奥西里斯。伊西斯之后生下荷鲁斯，然后奥西里斯成了冥界之主。有些文献说是因为他的下体被鱼吃了，伊西斯使用木头代替导致复活不完全。\n\n奥西里斯的经典造型是绿脸，双手握权杖交叉胸前，经常出现在法老为自己建造的陵墓门口。\n\n荷鲁斯被秘密抚养长大之后，向赛特复仇并打败了他，过程中扯下了他的一颗睾丸，自己则失去一只眼睛。那只眼睛就被视为著名的「荷鲁斯之眼」。\n\n<img alt=\"荷鲁斯之眼 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/Eye_of_Horus_Right.svg/624px-Eye_of_Horus_Right.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/Eye_of_Horus_Right.svg/624px-Eye_of_Horus_Right.svg.png\" />\n\n## 八元神\n\n八元神其实是四对分雌雄的神。关于八元神的故事并不多。\n\n代表自然水，纳乌涅特（Naunet）和 努恩（Nu）、\n代表空气或隐蔽或虚无，阿玛乌涅特（Amaunet）和 阿蒙（Amun）、\n代表黑暗，卡乌凯特（Kauket）和 库克（Kuk）、\n代表永恒或无限空间，哈乌赫特（Hauhet）和 胡（Huh）。\n\n在这个体系中，拉是在四对神的相互作用下诞生的。\n\n## 底比斯诸神\n\n底比斯经常作为古埃及的首都，其当地的神话和神明在古埃及宗教上占有很重的地位，甚至排挤其他神明的地位。\n\n### 阿蒙（Amun）\n\n本身只是地方神祇，但是十八王朝开始随着王室的崇拜和古埃及版图扩张而逐渐成为到了主神的地步。\n\n有时又会和拉结合，成为众神之王。\n\n<img alt=\"阿蒙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/Amun.svg/181px-Amun.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/5/57/Amun.svg\" />\n\n### 姆特（Mut）\n\n阿蒙之妻，生下孔斯，一起成为底比斯三柱神。\n\n<img alt=\"姆特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Mut.svg/214px-Mut.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/9/9d/Mut.svg\" />\n\n### 孔斯（Khonsu）\n\n阿蒙和姆特之子，一代月神。\n\n<img alt=\"孔斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/bf/Khonsu_as_falcon.svg/218px-Khonsu_as_falcon.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/b/bf/Khonsu_as_falcon.svg\" />\n\n### 麦里特塞盖尔（Meretseger）\n\n不是太重要的神，负责守卫帝王谷。\n\n<img alt=\"麦里特塞盖尔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Meretseger.svg/236px-Meretseger.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/04/Meretseger.svg\" />\n\n### 托特（Thoth）\n\n智慧之神。二代月神同时也是数学、医药之神，负责守护文艺和书记的工作。相传他是古埃及文字的发明者。\n\n<img alt=\"托特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Thoth.svg/249px-Thoth.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/c/c3/Thoth.svg\" />\n\n## 参考资料\n\n[Egyptian mythology](https://en.wikipedia.org/wiki/Egyptian_mythology)\n[Ennead](https://en.wikipedia.org/wiki/Ennead)\n[Ogdoad_(Egyptian)](https://en.wikipedia.org/wiki/Ogdoad_(Egyptian))\n[埃及神话](埃及神话)\n[九柱神](https://zh.wikipedia.org/wiki/九柱神)\n[八元神](https://zh.wikipedia.org/wiki/八元神)\n[埃及旅遊｜一起認識複雜的埃及神祇吧！九柱神與重要神祇們](http://travelm.tw/egypt-god)\n[古埃及主要神話體系簡介](https://myancientegyptpractice.wordpress.com/2015/07/18/神話簡介)\n","slug":"learn-ancient-egyptian-gods-in-5-minutes","published":1,"date":"2019-05-21T14:18:29.025Z","updated":"2019-05-24T01:58:24.123Z","_id":"cjw0oyurs0061n7t4ltt032gh","comments":1,"layout":"post","photos":[],"link":"","content":"<p>古埃及的宗教是多神教，他们认为自然现象、客观事物甚至动物，都存在神明。在新王国时期法老阿肯那顿将阿顿作为唯一神，古埃及曾短暂地存在一神教时期。这部分详细可以阅读<a href=\"/learn-ancient-egyptian-history-in-30-minutes\">30 分钟速成古埃及历史</a>。</p>\n<p>三千年的存在时间和政权的多次更迭造成古埃及神明种类繁多，系统复杂，甚至可能互相矛盾，但总的来说有三个神话系统。</p>\n<h2 id=\"九柱神\"><a href=\"#九柱神\" class=\"headerlink\" title=\"九柱神\"></a>九柱神</h2><p>九柱神是古埃及宗教中一般都采用的神话系统。</p>\n<h3 id=\"拉（Ra）\"><a href=\"#拉（Ra）\" class=\"headerlink\" title=\"拉（Ra）\"></a>拉（Ra）</h3><p>太阳神，埃及神话中的最高神。生舒和泰芙努特。九柱神之一。</p>\n<p><img alt=\"拉 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Re-Horakhty.svg/218px-Re-Horakhty.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/Re-Horakhty.svg\"></p>\n<h3 id=\"舒（Shu）\"><a href=\"#舒（Shu）\" class=\"headerlink\" title=\"舒（Shu）\"></a>舒（Shu）</h3><p>风神，拉的儿子，与泰芙努特生盖布和努特。九柱神之一。</p>\n<p><img alt=\"舒 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/Shu_with_feather.svg/224px-Shu_with_feather.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/e1/Shu_with_feather.svg\"></p>\n<h3 id=\"泰芙努特（Tefnut）\"><a href=\"#泰芙努特（Tefnut）\" class=\"headerlink\" title=\"泰芙努特（Tefnut）\"></a>泰芙努特（Tefnut）</h3><p>雨神，拉的女儿，舒的妻子。九柱神之一。</p>\n<p><img alt=\"泰芙努特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8b/Tefnut.png/273px-Tefnut.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/8/8b/Tefnut.png\"></p>\n<h3 id=\"盖布（Geb）\"><a href=\"#盖布（Geb）\" class=\"headerlink\" title=\"盖布（Geb）\"></a>盖布（Geb）</h3><p>大地之神，与努特生欧西里斯、赛特、艾西斯、奈芙蒂斯。九柱神之一。</p>\n<p><img alt=\"盖布 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Geb.svg/219px-Geb.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Geb.svg\"></p>\n<h3 id=\"努特（Nut）\"><a href=\"#努特（Nut）\" class=\"headerlink\" title=\"努特（Nut）\"></a>努特（Nut）</h3><p>天神，盖布的妻子。九柱神之一。</p>\n<p><img alt=\"努特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Nut.svg/236px-Nut.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/d/df/Nut.svg\"></p>\n<h3 id=\"奥西里斯（Osiris）\"><a href=\"#奥西里斯（Osiris）\" class=\"headerlink\" title=\"奥西里斯（Osiris）\"></a>奥西里斯（Osiris）</h3><p>冥王，也是农业之神。九柱神之一。</p>\n<p><img alt=\"奥西里斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Standing_Osiris_edit1.svg/221px-Standing_Osiris_edit1.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/c/cc/Standing_Osiris_edit1.svg\"></p>\n<h3 id=\"伊西斯（Isis）\"><a href=\"#伊西斯（Isis）\" class=\"headerlink\" title=\"伊西斯（Isis）\"></a>伊西斯（Isis）</h3><p>死者的守护神，也是生育之神，奥西里斯的妻子。九柱神之一。</p>\n<p><img alt=\"伊西斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Isis.svg/218px-Isis.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/ec/Isis.svg\"></p>\n<h3 id=\"赛特（Seth）\"><a href=\"#赛特（Seth）\" class=\"headerlink\" title=\"赛特（Seth）\"></a>赛特（Seth）</h3><p>干旱之神，风暴之神。有时也被认为是战神。九柱神之一。</p>\n<p><img alt=\"赛特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/7a/Set.svg/231px-Set.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/7/7a/Set.svg\"></p>\n<h3 id=\"奈芙蒂斯（Nephthys）\"><a href=\"#奈芙蒂斯（Nephthys）\" class=\"headerlink\" title=\"奈芙蒂斯（Nephthys）\"></a>奈芙蒂斯（Nephthys）</h3><p>死者的守护神，赛特的妻子。九柱神之一。</p>\n<p><img alt=\"奈芙蒂斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Nepthys.svg/218px-Nepthys.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/a7/Nepthys.svg\"></p>\n<h3 id=\"阿努比斯（Anubis）\"><a href=\"#阿努比斯（Anubis）\" class=\"headerlink\" title=\"阿努比斯（Anubis）\"></a>阿努比斯（Anubis）</h3><p>赛特和奈芙蒂斯，负责制作木乃伊和评判死去的人该不该永生。</p>\n<p><img alt=\"阿努比斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Anubis_standing.svg/224px-Anubis_standing.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/6/6d/Anubis_standing.svg\"></p>\n<h3 id=\"荷鲁斯（Horus）\"><a href=\"#荷鲁斯（Horus）\" class=\"headerlink\" title=\"荷鲁斯（Horus）\"></a>荷鲁斯（Horus）</h3><p>奥西里斯和伊西斯的儿子，一般是代表法老的权威。</p>\n<p><img alt=\"荷鲁斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c2/Horus_standing.svg/210px-Horus_standing.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/c/c2/Horus_standing.svg\"></p>\n<h3 id=\"哈索尔（Hathor）\"><a href=\"#哈索尔（Hathor）\" class=\"headerlink\" title=\"哈索尔（Hathor）\"></a>哈索尔（Hathor）</h3><p>爱神、美神，荷鲁斯妻子。</p>\n<p><img alt=\"哈索尔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/Hathor.svg/203px-Hathor.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/4/47/Hathor.svg\"></p>\n<h3 id=\"荷鲁斯的四个儿子\"><a href=\"#荷鲁斯的四个儿子\" class=\"headerlink\" title=\"荷鲁斯的四个儿子\"></a>荷鲁斯的四个儿子</h3><p>为木乃伊保存四个内脏。伊姆塞特保护肝脏，哈庇保护肺，杜阿木忒弗保护胃，克贝克塞努弗保护肠。</p>\n<p><img alt=\"荷鲁斯的四个儿子 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Four_sons_of_Horus.svg/535px-Four_sons_of_Horus.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/2/29/Four_sons_of_Horus.svg\"></p>\n<h3 id=\"神明之间的关系\"><a href=\"#神明之间的关系\" class=\"headerlink\" title=\"神明之间的关系\"></a>神明之间的关系</h3><p>拉是众神之始，生出舒和泰芙努特。</p>\n<p>舒与泰芙努特生盖布和努特。</p>\n<p>盖布在下为地，努特在上为天，舒在中间撑着。</p>\n<p><img alt=\"舒，盖布和努特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Geb%2C_Nut%2C_Shu.jpg/640px-Geb%2C_Nut%2C_Shu.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Geb%2C_Nut%2C_Shu.jpg\"></p>\n<p>盖布与努特生奥西里斯、赛特、伊西斯、奈芙蒂斯。奥西里斯和伊西斯成夫妻，赛特和奈芙蒂斯成夫妻。</p>\n<p>赛特嫉妒哥哥奥西里斯，举办了一个宴会，做一个刚好哥哥能躺进去的棺材，让别人躺进去试试。奥西里斯躺进去就封上扔进尼罗河溺死他。</p>\n<p>伊西斯和奈芙蒂斯找回尸体复活，但赛特又一次杀死了奥西里斯并分尸十四块，藏在世界各地。伊西斯找了很久，除了下体凑足了尸体，负责做木乃伊的阿努比斯帮助她复活奥西里斯。伊西斯之后生下荷鲁斯，然后奥西里斯成了冥界之主。有些文献说是因为他的下体被鱼吃了，伊西斯使用木头代替导致复活不完全。</p>\n<p>奥西里斯的经典造型是绿脸，双手握权杖交叉胸前，经常出现在法老为自己建造的陵墓门口。</p>\n<p>荷鲁斯被秘密抚养长大之后，向赛特复仇并打败了他，过程中扯下了他的一颗睾丸，自己则失去一只眼睛。那只眼睛就被视为著名的「荷鲁斯之眼」。</p>\n<p><img alt=\"荷鲁斯之眼 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/Eye_of_Horus_Right.svg/624px-Eye_of_Horus_Right.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/Eye_of_Horus_Right.svg/624px-Eye_of_Horus_Right.svg.png\"></p>\n<h2 id=\"八元神\"><a href=\"#八元神\" class=\"headerlink\" title=\"八元神\"></a>八元神</h2><p>八元神其实是四对分雌雄的神。关于八元神的故事并不多。</p>\n<p>代表自然水，纳乌涅特（Naunet）和 努恩（Nu）、<br>代表空气或隐蔽或虚无，阿玛乌涅特（Amaunet）和 阿蒙（Amun）、<br>代表黑暗，卡乌凯特（Kauket）和 库克（Kuk）、<br>代表永恒或无限空间，哈乌赫特（Hauhet）和 胡（Huh）。</p>\n<p>在这个体系中，拉是在四对神的相互作用下诞生的。</p>\n<h2 id=\"底比斯诸神\"><a href=\"#底比斯诸神\" class=\"headerlink\" title=\"底比斯诸神\"></a>底比斯诸神</h2><p>底比斯经常作为古埃及的首都，其当地的神话和神明在古埃及宗教上占有很重的地位，甚至排挤其他神明的地位。</p>\n<h3 id=\"阿蒙（Amun）\"><a href=\"#阿蒙（Amun）\" class=\"headerlink\" title=\"阿蒙（Amun）\"></a>阿蒙（Amun）</h3><p>本身只是地方神祇，但是十八王朝开始随着王室的崇拜和古埃及版图扩张而逐渐成为到了主神的地步。</p>\n<p>有时又会和拉结合，成为众神之王。</p>\n<p><img alt=\"阿蒙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/Amun.svg/181px-Amun.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/5/57/Amun.svg\"></p>\n<h3 id=\"姆特（Mut）\"><a href=\"#姆特（Mut）\" class=\"headerlink\" title=\"姆特（Mut）\"></a>姆特（Mut）</h3><p>阿蒙之妻，生下孔斯，一起成为底比斯三柱神。</p>\n<p><img alt=\"姆特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Mut.svg/214px-Mut.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/9/9d/Mut.svg\"></p>\n<h3 id=\"孔斯（Khonsu）\"><a href=\"#孔斯（Khonsu）\" class=\"headerlink\" title=\"孔斯（Khonsu）\"></a>孔斯（Khonsu）</h3><p>阿蒙和姆特之子，一代月神。</p>\n<p><img alt=\"孔斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/bf/Khonsu_as_falcon.svg/218px-Khonsu_as_falcon.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/b/bf/Khonsu_as_falcon.svg\"></p>\n<h3 id=\"麦里特塞盖尔（Meretseger）\"><a href=\"#麦里特塞盖尔（Meretseger）\" class=\"headerlink\" title=\"麦里特塞盖尔（Meretseger）\"></a>麦里特塞盖尔（Meretseger）</h3><p>不是太重要的神，负责守卫帝王谷。</p>\n<p><img alt=\"麦里特塞盖尔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Meretseger.svg/236px-Meretseger.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/04/Meretseger.svg\"></p>\n<h3 id=\"托特（Thoth）\"><a href=\"#托特（Thoth）\" class=\"headerlink\" title=\"托特（Thoth）\"></a>托特（Thoth）</h3><p>智慧之神。二代月神同时也是数学、医药之神，负责守护文艺和书记的工作。相传他是古埃及文字的发明者。</p>\n<p><img alt=\"托特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Thoth.svg/249px-Thoth.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/c/c3/Thoth.svg\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://en.wikipedia.org/wiki/Egyptian_mythology\" target=\"_blank\" rel=\"noopener\">Egyptian mythology</a><br><a href=\"https://en.wikipedia.org/wiki/Ennead\" target=\"_blank\" rel=\"noopener\">Ennead</a><br><a href=\"https://en.wikipedia.org/wiki/Ogdoad_(Egyptian\" target=\"_blank\" rel=\"noopener\">Ogdoad_(Egyptian)</a>)<br><a href=\"埃及神话\">埃及神话</a><br><a href=\"https://zh.wikipedia.org/wiki/九柱神\" target=\"_blank\" rel=\"noopener\">九柱神</a><br><a href=\"https://zh.wikipedia.org/wiki/八元神\" target=\"_blank\" rel=\"noopener\">八元神</a><br><a href=\"http://travelm.tw/egypt-god\" target=\"_blank\" rel=\"noopener\">埃及旅遊｜一起認識複雜的埃及神祇吧！九柱神與重要神祇們</a><br><a href=\"https://myancientegyptpractice.wordpress.com/2015/07/18/神話簡介\" target=\"_blank\" rel=\"noopener\">古埃及主要神話體系簡介</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>古埃及的宗教是多神教，他们认为自然现象、客观事物甚至动物，都存在神明。在新王国时期法老阿肯那顿将阿顿作为唯一神，古埃及曾短暂地存在一神教时期。这部分详细可以阅读<a href=\"/learn-ancient-egyptian-history-in-30-minutes\">30 分钟速成古埃及历史</a>。</p>\n<p>三千年的存在时间和政权的多次更迭造成古埃及神明种类繁多，系统复杂，甚至可能互相矛盾，但总的来说有三个神话系统。</p>\n<h2 id=\"九柱神\"><a href=\"#九柱神\" class=\"headerlink\" title=\"九柱神\"></a>九柱神</h2><p>九柱神是古埃及宗教中一般都采用的神话系统。</p>\n<h3 id=\"拉（Ra）\"><a href=\"#拉（Ra）\" class=\"headerlink\" title=\"拉（Ra）\"></a>拉（Ra）</h3><p>太阳神，埃及神话中的最高神。生舒和泰芙努特。九柱神之一。</p>\n<p><img alt=\"拉 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Re-Horakhty.svg/218px-Re-Horakhty.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/Re-Horakhty.svg\"></p>\n<h3 id=\"舒（Shu）\"><a href=\"#舒（Shu）\" class=\"headerlink\" title=\"舒（Shu）\"></a>舒（Shu）</h3><p>风神，拉的儿子，与泰芙努特生盖布和努特。九柱神之一。</p>\n<p><img alt=\"舒 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/Shu_with_feather.svg/224px-Shu_with_feather.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/e1/Shu_with_feather.svg\"></p>\n<h3 id=\"泰芙努特（Tefnut）\"><a href=\"#泰芙努特（Tefnut）\" class=\"headerlink\" title=\"泰芙努特（Tefnut）\"></a>泰芙努特（Tefnut）</h3><p>雨神，拉的女儿，舒的妻子。九柱神之一。</p>\n<p><img alt=\"泰芙努特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8b/Tefnut.png/273px-Tefnut.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/8/8b/Tefnut.png\"></p>\n<h3 id=\"盖布（Geb）\"><a href=\"#盖布（Geb）\" class=\"headerlink\" title=\"盖布（Geb）\"></a>盖布（Geb）</h3><p>大地之神，与努特生欧西里斯、赛特、艾西斯、奈芙蒂斯。九柱神之一。</p>\n<p><img alt=\"盖布 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Geb.svg/219px-Geb.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Geb.svg\"></p>\n<h3 id=\"努特（Nut）\"><a href=\"#努特（Nut）\" class=\"headerlink\" title=\"努特（Nut）\"></a>努特（Nut）</h3><p>天神，盖布的妻子。九柱神之一。</p>\n<p><img alt=\"努特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Nut.svg/236px-Nut.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/d/df/Nut.svg\"></p>\n<h3 id=\"奥西里斯（Osiris）\"><a href=\"#奥西里斯（Osiris）\" class=\"headerlink\" title=\"奥西里斯（Osiris）\"></a>奥西里斯（Osiris）</h3><p>冥王，也是农业之神。九柱神之一。</p>\n<p><img alt=\"奥西里斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Standing_Osiris_edit1.svg/221px-Standing_Osiris_edit1.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/c/cc/Standing_Osiris_edit1.svg\"></p>\n<h3 id=\"伊西斯（Isis）\"><a href=\"#伊西斯（Isis）\" class=\"headerlink\" title=\"伊西斯（Isis）\"></a>伊西斯（Isis）</h3><p>死者的守护神，也是生育之神，奥西里斯的妻子。九柱神之一。</p>\n<p><img alt=\"伊西斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Isis.svg/218px-Isis.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/ec/Isis.svg\"></p>\n<h3 id=\"赛特（Seth）\"><a href=\"#赛特（Seth）\" class=\"headerlink\" title=\"赛特（Seth）\"></a>赛特（Seth）</h3><p>干旱之神，风暴之神。有时也被认为是战神。九柱神之一。</p>\n<p><img alt=\"赛特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/7a/Set.svg/231px-Set.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/7/7a/Set.svg\"></p>\n<h3 id=\"奈芙蒂斯（Nephthys）\"><a href=\"#奈芙蒂斯（Nephthys）\" class=\"headerlink\" title=\"奈芙蒂斯（Nephthys）\"></a>奈芙蒂斯（Nephthys）</h3><p>死者的守护神，赛特的妻子。九柱神之一。</p>\n<p><img alt=\"奈芙蒂斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Nepthys.svg/218px-Nepthys.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/a7/Nepthys.svg\"></p>\n<h3 id=\"阿努比斯（Anubis）\"><a href=\"#阿努比斯（Anubis）\" class=\"headerlink\" title=\"阿努比斯（Anubis）\"></a>阿努比斯（Anubis）</h3><p>赛特和奈芙蒂斯，负责制作木乃伊和评判死去的人该不该永生。</p>\n<p><img alt=\"阿努比斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6d/Anubis_standing.svg/224px-Anubis_standing.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/6/6d/Anubis_standing.svg\"></p>\n<h3 id=\"荷鲁斯（Horus）\"><a href=\"#荷鲁斯（Horus）\" class=\"headerlink\" title=\"荷鲁斯（Horus）\"></a>荷鲁斯（Horus）</h3><p>奥西里斯和伊西斯的儿子，一般是代表法老的权威。</p>\n<p><img alt=\"荷鲁斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c2/Horus_standing.svg/210px-Horus_standing.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/c/c2/Horus_standing.svg\"></p>\n<h3 id=\"哈索尔（Hathor）\"><a href=\"#哈索尔（Hathor）\" class=\"headerlink\" title=\"哈索尔（Hathor）\"></a>哈索尔（Hathor）</h3><p>爱神、美神，荷鲁斯妻子。</p>\n<p><img alt=\"哈索尔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/Hathor.svg/203px-Hathor.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/4/47/Hathor.svg\"></p>\n<h3 id=\"荷鲁斯的四个儿子\"><a href=\"#荷鲁斯的四个儿子\" class=\"headerlink\" title=\"荷鲁斯的四个儿子\"></a>荷鲁斯的四个儿子</h3><p>为木乃伊保存四个内脏。伊姆塞特保护肝脏，哈庇保护肺，杜阿木忒弗保护胃，克贝克塞努弗保护肠。</p>\n<p><img alt=\"荷鲁斯的四个儿子 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/29/Four_sons_of_Horus.svg/535px-Four_sons_of_Horus.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/2/29/Four_sons_of_Horus.svg\"></p>\n<h3 id=\"神明之间的关系\"><a href=\"#神明之间的关系\" class=\"headerlink\" title=\"神明之间的关系\"></a>神明之间的关系</h3><p>拉是众神之始，生出舒和泰芙努特。</p>\n<p>舒与泰芙努特生盖布和努特。</p>\n<p>盖布在下为地，努特在上为天，舒在中间撑着。</p>\n<p><img alt=\"舒，盖布和努特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Geb%2C_Nut%2C_Shu.jpg/640px-Geb%2C_Nut%2C_Shu.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Geb%2C_Nut%2C_Shu.jpg\"></p>\n<p>盖布与努特生奥西里斯、赛特、伊西斯、奈芙蒂斯。奥西里斯和伊西斯成夫妻，赛特和奈芙蒂斯成夫妻。</p>\n<p>赛特嫉妒哥哥奥西里斯，举办了一个宴会，做一个刚好哥哥能躺进去的棺材，让别人躺进去试试。奥西里斯躺进去就封上扔进尼罗河溺死他。</p>\n<p>伊西斯和奈芙蒂斯找回尸体复活，但赛特又一次杀死了奥西里斯并分尸十四块，藏在世界各地。伊西斯找了很久，除了下体凑足了尸体，负责做木乃伊的阿努比斯帮助她复活奥西里斯。伊西斯之后生下荷鲁斯，然后奥西里斯成了冥界之主。有些文献说是因为他的下体被鱼吃了，伊西斯使用木头代替导致复活不完全。</p>\n<p>奥西里斯的经典造型是绿脸，双手握权杖交叉胸前，经常出现在法老为自己建造的陵墓门口。</p>\n<p>荷鲁斯被秘密抚养长大之后，向赛特复仇并打败了他，过程中扯下了他的一颗睾丸，自己则失去一只眼睛。那只眼睛就被视为著名的「荷鲁斯之眼」。</p>\n<p><img alt=\"荷鲁斯之眼 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/Eye_of_Horus_Right.svg/624px-Eye_of_Horus_Right.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/Eye_of_Horus_Right.svg/624px-Eye_of_Horus_Right.svg.png\"></p>\n<h2 id=\"八元神\"><a href=\"#八元神\" class=\"headerlink\" title=\"八元神\"></a>八元神</h2><p>八元神其实是四对分雌雄的神。关于八元神的故事并不多。</p>\n<p>代表自然水，纳乌涅特（Naunet）和 努恩（Nu）、<br>代表空气或隐蔽或虚无，阿玛乌涅特（Amaunet）和 阿蒙（Amun）、<br>代表黑暗，卡乌凯特（Kauket）和 库克（Kuk）、<br>代表永恒或无限空间，哈乌赫特（Hauhet）和 胡（Huh）。</p>\n<p>在这个体系中，拉是在四对神的相互作用下诞生的。</p>\n<h2 id=\"底比斯诸神\"><a href=\"#底比斯诸神\" class=\"headerlink\" title=\"底比斯诸神\"></a>底比斯诸神</h2><p>底比斯经常作为古埃及的首都，其当地的神话和神明在古埃及宗教上占有很重的地位，甚至排挤其他神明的地位。</p>\n<h3 id=\"阿蒙（Amun）\"><a href=\"#阿蒙（Amun）\" class=\"headerlink\" title=\"阿蒙（Amun）\"></a>阿蒙（Amun）</h3><p>本身只是地方神祇，但是十八王朝开始随着王室的崇拜和古埃及版图扩张而逐渐成为到了主神的地步。</p>\n<p>有时又会和拉结合，成为众神之王。</p>\n<p><img alt=\"阿蒙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/57/Amun.svg/181px-Amun.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/5/57/Amun.svg\"></p>\n<h3 id=\"姆特（Mut）\"><a href=\"#姆特（Mut）\" class=\"headerlink\" title=\"姆特（Mut）\"></a>姆特（Mut）</h3><p>阿蒙之妻，生下孔斯，一起成为底比斯三柱神。</p>\n<p><img alt=\"姆特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Mut.svg/214px-Mut.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/9/9d/Mut.svg\"></p>\n<h3 id=\"孔斯（Khonsu）\"><a href=\"#孔斯（Khonsu）\" class=\"headerlink\" title=\"孔斯（Khonsu）\"></a>孔斯（Khonsu）</h3><p>阿蒙和姆特之子，一代月神。</p>\n<p><img alt=\"孔斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/bf/Khonsu_as_falcon.svg/218px-Khonsu_as_falcon.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/b/bf/Khonsu_as_falcon.svg\"></p>\n<h3 id=\"麦里特塞盖尔（Meretseger）\"><a href=\"#麦里特塞盖尔（Meretseger）\" class=\"headerlink\" title=\"麦里特塞盖尔（Meretseger）\"></a>麦里特塞盖尔（Meretseger）</h3><p>不是太重要的神，负责守卫帝王谷。</p>\n<p><img alt=\"麦里特塞盖尔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Meretseger.svg/236px-Meretseger.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/04/Meretseger.svg\"></p>\n<h3 id=\"托特（Thoth）\"><a href=\"#托特（Thoth）\" class=\"headerlink\" title=\"托特（Thoth）\"></a>托特（Thoth）</h3><p>智慧之神。二代月神同时也是数学、医药之神，负责守护文艺和书记的工作。相传他是古埃及文字的发明者。</p>\n<p><img alt=\"托特 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Thoth.svg/249px-Thoth.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/c/c3/Thoth.svg\"></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://en.wikipedia.org/wiki/Egyptian_mythology\" target=\"_blank\" rel=\"noopener\">Egyptian mythology</a><br><a href=\"https://en.wikipedia.org/wiki/Ennead\" target=\"_blank\" rel=\"noopener\">Ennead</a><br><a href=\"https://en.wikipedia.org/wiki/Ogdoad_(Egyptian\" target=\"_blank\" rel=\"noopener\">Ogdoad_(Egyptian)</a>)<br><a href=\"埃及神话\">埃及神话</a><br><a href=\"https://zh.wikipedia.org/wiki/九柱神\" target=\"_blank\" rel=\"noopener\">九柱神</a><br><a href=\"https://zh.wikipedia.org/wiki/八元神\" target=\"_blank\" rel=\"noopener\">八元神</a><br><a href=\"http://travelm.tw/egypt-god\" target=\"_blank\" rel=\"noopener\">埃及旅遊｜一起認識複雜的埃及神祇吧！九柱神與重要神祇們</a><br><a href=\"https://myancientegyptpractice.wordpress.com/2015/07/18/神話簡介\" target=\"_blank\" rel=\"noopener\">古埃及主要神話體系簡介</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Re-Horakhty.svg/218px-Re-Horakhty.svg.png","popularPost_tmp_gaData":{"updated":"Fri May 24 2019 09:58:24 GMT+0800 (China Standard Time)","title":"5 分钟速成古埃及神明","path":"learn-ancient-egyptian-gods-in-5-minutes/","eyeCatchImage":"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Re-Horakhty.svg/218px-Re-Horakhty.svg.png","excerpt":null,"date":"2019-05-21T14:18:29.025Z","pv":0,"totalPV":0,"categories":"知识 > 古埃及","tags":["ancient-egypt","god"],"internalLinks":["learn-ancient-egyptian-history-in-30-minutes"],"keywords":[],"keywordsLength":0},"length":1609},{"title":"CoolShell puzzle game 攻略","id":"22","updated":"2014-08-06T08:22:53.000Z","date":"2014-08-03T13:56:51.000Z","_content":"\ncoolshell出了个游戏，网址点[这里](http://fun.coolshell.cn/)，奉上攻略。\n\n## 第0关\n\nbrainfuck语言，很久以前就觉得有意思。\n\n自己看就算了，直接网上执行一次。点[这个](http://esoteric.sange.fi/brainfuck/impl/interp/i.html)或[这个](http://www.brainfuck.tk/)或[这个](http://copy.sh/brainfuck/)都可以。\n\n得出是welcome.html。\n\n## 第1关\n\n2, 3, 6, 18, 108, ?\n\n2×3=6，3×6=18，6×18=108，18×108=1944\n\n输入1944.html知道x=1944。\n\n“生命、宇宙以及任何事情的终极答案”，42。输入42.html知道y=42。\n\n1944×42=81648\n\n得81648.html。\n\n## 第2关\n\n那个键盘排布是dvorak方案，不同于我们平常的QWERT键盘方案。\n\n直接上网找[转换](http://wbic16.xedoloh.com/dvorak.html)，那串字符转过来就是\n\n`main() { printf(&unix[\"\\021%six\\012\\0\"],(unix)[\"have\"]+\"fun\"-0x60);}`\n\n看起来就是C++语言。继续在线编译运行。运行出错，好吧。\n\n按照collshell好像很喜欢IOCCC的尿性，用Google搜一些关键字，比如奇怪的`\"&unix\"`，记得加上双引号。找到一个比较有用的[解释](http://www.di-mgt.com.au/src/korn_ioccc.txt)。\n\n学以致用，得出答案：unix\n\n## 第3关\n\n扫描QR Code，得`[abcdefghijklmnopqrstuvwxyz] <=> [pvwdgazxubqfsnrhocitlkeymj]`。简单的字符替换。\n\n在线解析QR code也可以，[网址](http://zxing.org/w/decode.jspx)。\n\n因为在浏览器下，直接用javascript写脚本了。OK……注意是后一个的字母替换前一个。\n\n```javascript\nfunction decode(text) {\n    var newText='';\n    for (i=0;i<text.length;i++) {\n        if (dict[text[i]]) {\n            newText += dict[text[i]];\n        } else {\n            newText += text[i];\n        }\n    }\n    return newText;\n};\ndict={};\nciper='abcdefghijklmnopqrstuvwxyz';\nalphe='pvwdgazxubqfsnrhocitlkeymj'\nfor (i=0;i<alphe.length;i++) {\n    dict[alphe[i]]=ciper[i];\n}\nrawText='Wxgcg txgcg ui p ixgff, txgcg ui p epm. I gyhgwt mrl lig txg ixgff wrsspnd tr irfkg txui hcrvfgs, nre, hfgpig tcm liunz txg crt13 ra \"ixgff\" tr gntgc ngyt fgkgf.';\nconsole.log(decode(rawText));\n```\n\n得到一段话：`Where there is a shell, there is a way. I expect you use the shell command to solve this problem, now, please try using the rot13 of \"shell\" to enter next level.`\n\n就是说要用ROT13来转换`shell`这个字符串，得出是furyy\n\n## 第4关\n\n左边就是告诉我们提取字符的模式：\n\n每5个字符，看前两个和后两个，必须满足：\n\n1. 必须含一个大写字母和一个数字\n1. 是回文\n\n而提取的字符则必须是小写字母。\n\n`The answer has been lost in the source`则是说密文在源代码里面。有好一大串。\n\n用正则吧，写出来就是`([A-Z])([0-9])[a-z](\\2)(\\1)|([0-9])([A-Z])[a-z](\\6)(\\5)`。\n\n抱歉，更高级的写不出来了。\n\n直接开sublime text 2，复制那段大串字符进去，搜索开启正则模式和区分大小写，得：\n\n```\nE1v1E\n4FaF4\n9XrX9\nO3i3O\n0MaM0\n4GbG4\nM5l5M\n0WeW0\nY0s0Y\n```\n\n取中间的variables就是答案。\n\n## 第5关\n\n点图片，按后跳转，得一串数字，复制到地址栏，又是一串，好吧这模式都太无聊了。而且页面没有jQuery，先引入。\n\n```javascript\nvar jq = document.createElement('script');\njq.src = \"https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js\";\ndocument.getElementsByTagName('head')[0].appendChild(jq);\njQuery.noConflict();\n```\n\n接着模仿我之前写过的另外一个[攻略](http://blog.e10t.net/answers-for-alibaba-quiz3/)里面的做法。\n\n```javascript\nurl = 'http://fun.coolshell.cn/n/';\nurlreal=url + '32222';\nfunction g() {\n    $.get(urlreal, function(data){\n        urlreal = url + data;\n        console.log(data);\n    })\n}\n```\n\n之后就不断执行`g()`吧，最后答案是tree。\n\n## 第?关\n\n最后tree.html跳回一开始了，不知道是不是我太渣已经过时了……\n\n突然想到可能会看reference，于是访问了一下前一个地址：fun.coolshell.cn/n/20446，再回头访问tree.html，可以了。\n\n## 第6关\n\n算法……我等只会Google的渣渣就棘手了。\n\n好歹用python写了还原树结构的代码，但是它说找deepest path就不懂了，看看有什么人有解释……\n\n最后还是得靠自己画树……借助python代码将节点关系打出来。\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n__author__ = 'draco'\n\nclass Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\n\ndef binaryTreeFromInPostOrder(in_order, post_order):\n    if len(in_order) == 0 or len(post_list) == 0:\n        return None\n    node = Node(post_order[-1])\n    node_index = in_order.index(node.value)\n    node.left = binaryTreeFromInPostOrder(in_order[:node_index], post_order[:node_index])\n    node.right = binaryTreeFromInPostOrder(in_order[node_index+1:], post_order[node_index:-1])\n    return node\n\n\ndef printLevel(q):\n    global tree_structure\n    next_level = list()\n    this_structure = list()\n    while len(q) != 0:\n        node = q.pop(0)\n        this_structure.append((node[0], node[1].value))\n        if node[1].left:\n            next_level.append((node[1].value + \"-l\", node[1].left))\n\n        if node[1].right:\n            next_level.append((node[1].value + \"-r\", node[1].right))\n\n    tree_structure.append(this_structure)\n\n    return next_level\n\n\ndef printTree(tree):\n    current_level = list()\n    n = 0\n\n    current_level.append((\"None\", tree))\n\n    while n < 14:\n        current_level = printLevel(current_level)\n        n += 1\n\nin_list   = \"T b H V h 3 o g P W F L u A f G r m 1 x J 7 w e 0 i Q Y n Z 8 K v q k 9 y 5 C N B D 2 4 U l c p I E M a j 6 S R O X s d z t\".split(\" \")\n\npost_list = \"T V H o 3 h P g b F f A u m r 7 J x e w 1 Y Q i 0 Z n G L K y 9 k q v N D B C 5 4 c l U 2 8 E I R S 6 j d s X O a M p W t z\".split(\" \")\n\ntree_structure = list()\n\ntree = binaryTreeFromInPostOrder(in_list, post_list)\n\nprintTree(tree)\n\nfor i in tree_structure:\n    print(i)\n```\n\n输出结果：\n\n```\n[('None', 'z')]\n[('z-l', 'W'), ('z-r', 't')]\n[('W-l', 'b'), ('W-r', 'p')]\n[('b-l', 'T'), ('b-r', 'g'), ('p-l', '8'), ('p-r', 'M')]\n[('g-l', 'h'), ('g-r', 'P'), ('8-l', 'L'), ('8-r', '2'), ('M-l', 'I'), ('M-r', 'a')]\n[('h-l', 'H'), ('h-r', '3'), ('L-l', 'F'), ('L-r', 'G'), ('2-l', '5'), ('2-r', 'U'), ('I-r', 'E'), ('a-r', 'O')]\n[('H-r', 'V'), ('3-r', 'o'), ('G-l', 'u'), ('G-r', 'n'), ('5-l', 'v'), ('5-r', 'C'), ('U-l', '4'), ('U-r', 'l'), ('O-l', 'j'), ('O-r', 'X')]\n[('u-r', 'A'), ('n-l', '0'), ('n-r', 'Z'), ('v-l', 'K'), ('v-r', 'q'), ('C-r', 'B'), ('l-r', 'c'), ('j-r', '6'), ('X-r', 's')]\n[('A-r', 'f'), ('0-l', '1'), ('0-r', 'i'), ('q-r', 'k'), ('B-l', 'N'), ('B-r', 'D'), ('6-r', 'S'), ('s-r', 'd')]\n[('1-l', 'r'), ('1-r', 'w'), ('i-r', 'Q'), ('k-r', '9'), ('S-r', 'R')]\n[('r-r', 'm'), ('w-l', 'x'), ('w-r', 'e'), ('Q-r', 'Y'), ('9-r', 'y')]\n[('x-r', 'J')]\n[('J-r', '7')]\n[]\n```\n\n然后手动画树！最后得到最深路径是zWp8LGn01wxJ7。\n\nLinux下执行：\n\n`echo U2FsdGVkX1+gxunKbemS2193vhGGQ1Y8pc5gPegMAcg=|openssl enc -aes-128-cbc -a -d -pass pass:zWp8LGn01wxJ7`\n\n得到nqueens。终于过了。\n\n## 第7关\n\n好吧八皇后。说实话我从来都不太想在做类似的游戏时写算法，又不是什么ACM做题，唉。直接Google N皇后算法的python算法，解出N=9的所有解，352个解，是时候用暴力手段了。\n\n只是它这个code和通常表示八皇后解的数字不一样，正常是从上到下从左到右记录，它这个是从下到上从右到左记录……\n\n暴力出全部解之后其实都一样啦。\n\n结合sha1解密验证的代码：\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n__author__ = 'draco'\n\nfrom itertools import *\nimport hashlib\n\nc = (1,2,3,4,5,6,7,8,9)\nnq = [v for v in permutations(c) if 9==len({v[i-1]+i for i in c})==len({v[i-1]-i for i in c})]\nfor q in nq:\n    code = \"\".join(map(str, q))\n    s = hashlib.sha1()\n    s.update(\"zWp8LGn01wxJ7\" + code + \"\\n\")\n    if s.hexdigest() == \"e48d316ed573d3273931e19f9ac9f9e6039a4242\":\n        print(code)\n        break\n```\n\n得出答案：953172864\n\n## 第8关\n\n好吧26进制\n\nA=1, B=2, ... , Z=26\n\n于是AA=26^1*1+1, ZZ=26^1*26+26, AAA=26^2*1+26^1*1+1, ...\n\n算出来是85165，然后还要转字符……是DUYO。\n\n## 第9关\n\n根据图片搜出来是Pigpen Cipher，上wiki查到对应英文。\n\n答案是helloworld。\n\n啊终于通关了，看top100，排53。\n\n本文被原作者指出会破坏游戏公平性，故在活动结束之后才重新发布……当时自己考虑不周给各位道歉了OTL。","source":"_posts/CoolShell-puzzle-game-攻略.md","raw":"---\ntitle: CoolShell puzzle game 攻略\ncategories:\n  - [技术, 黑客]\n  - [编程语言, javascript]\n  - [编程语言, python]\ntags: [python, javascript, walkthrough, quiz]\npermalink: coolshell-puzzle-game-walkthrough\nid: 22\nupdated: '2014-08-06 16:22:53'\ndate: 2014-08-03 21:56:51\n---\n\ncoolshell出了个游戏，网址点[这里](http://fun.coolshell.cn/)，奉上攻略。\n\n## 第0关\n\nbrainfuck语言，很久以前就觉得有意思。\n\n自己看就算了，直接网上执行一次。点[这个](http://esoteric.sange.fi/brainfuck/impl/interp/i.html)或[这个](http://www.brainfuck.tk/)或[这个](http://copy.sh/brainfuck/)都可以。\n\n得出是welcome.html。\n\n## 第1关\n\n2, 3, 6, 18, 108, ?\n\n2×3=6，3×6=18，6×18=108，18×108=1944\n\n输入1944.html知道x=1944。\n\n“生命、宇宙以及任何事情的终极答案”，42。输入42.html知道y=42。\n\n1944×42=81648\n\n得81648.html。\n\n## 第2关\n\n那个键盘排布是dvorak方案，不同于我们平常的QWERT键盘方案。\n\n直接上网找[转换](http://wbic16.xedoloh.com/dvorak.html)，那串字符转过来就是\n\n`main() { printf(&unix[\"\\021%six\\012\\0\"],(unix)[\"have\"]+\"fun\"-0x60);}`\n\n看起来就是C++语言。继续在线编译运行。运行出错，好吧。\n\n按照collshell好像很喜欢IOCCC的尿性，用Google搜一些关键字，比如奇怪的`\"&unix\"`，记得加上双引号。找到一个比较有用的[解释](http://www.di-mgt.com.au/src/korn_ioccc.txt)。\n\n学以致用，得出答案：unix\n\n## 第3关\n\n扫描QR Code，得`[abcdefghijklmnopqrstuvwxyz] <=> [pvwdgazxubqfsnrhocitlkeymj]`。简单的字符替换。\n\n在线解析QR code也可以，[网址](http://zxing.org/w/decode.jspx)。\n\n因为在浏览器下，直接用javascript写脚本了。OK……注意是后一个的字母替换前一个。\n\n```javascript\nfunction decode(text) {\n    var newText='';\n    for (i=0;i<text.length;i++) {\n        if (dict[text[i]]) {\n            newText += dict[text[i]];\n        } else {\n            newText += text[i];\n        }\n    }\n    return newText;\n};\ndict={};\nciper='abcdefghijklmnopqrstuvwxyz';\nalphe='pvwdgazxubqfsnrhocitlkeymj'\nfor (i=0;i<alphe.length;i++) {\n    dict[alphe[i]]=ciper[i];\n}\nrawText='Wxgcg txgcg ui p ixgff, txgcg ui p epm. I gyhgwt mrl lig txg ixgff wrsspnd tr irfkg txui hcrvfgs, nre, hfgpig tcm liunz txg crt13 ra \"ixgff\" tr gntgc ngyt fgkgf.';\nconsole.log(decode(rawText));\n```\n\n得到一段话：`Where there is a shell, there is a way. I expect you use the shell command to solve this problem, now, please try using the rot13 of \"shell\" to enter next level.`\n\n就是说要用ROT13来转换`shell`这个字符串，得出是furyy\n\n## 第4关\n\n左边就是告诉我们提取字符的模式：\n\n每5个字符，看前两个和后两个，必须满足：\n\n1. 必须含一个大写字母和一个数字\n1. 是回文\n\n而提取的字符则必须是小写字母。\n\n`The answer has been lost in the source`则是说密文在源代码里面。有好一大串。\n\n用正则吧，写出来就是`([A-Z])([0-9])[a-z](\\2)(\\1)|([0-9])([A-Z])[a-z](\\6)(\\5)`。\n\n抱歉，更高级的写不出来了。\n\n直接开sublime text 2，复制那段大串字符进去，搜索开启正则模式和区分大小写，得：\n\n```\nE1v1E\n4FaF4\n9XrX9\nO3i3O\n0MaM0\n4GbG4\nM5l5M\n0WeW0\nY0s0Y\n```\n\n取中间的variables就是答案。\n\n## 第5关\n\n点图片，按后跳转，得一串数字，复制到地址栏，又是一串，好吧这模式都太无聊了。而且页面没有jQuery，先引入。\n\n```javascript\nvar jq = document.createElement('script');\njq.src = \"https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js\";\ndocument.getElementsByTagName('head')[0].appendChild(jq);\njQuery.noConflict();\n```\n\n接着模仿我之前写过的另外一个[攻略](http://blog.e10t.net/answers-for-alibaba-quiz3/)里面的做法。\n\n```javascript\nurl = 'http://fun.coolshell.cn/n/';\nurlreal=url + '32222';\nfunction g() {\n    $.get(urlreal, function(data){\n        urlreal = url + data;\n        console.log(data);\n    })\n}\n```\n\n之后就不断执行`g()`吧，最后答案是tree。\n\n## 第?关\n\n最后tree.html跳回一开始了，不知道是不是我太渣已经过时了……\n\n突然想到可能会看reference，于是访问了一下前一个地址：fun.coolshell.cn/n/20446，再回头访问tree.html，可以了。\n\n## 第6关\n\n算法……我等只会Google的渣渣就棘手了。\n\n好歹用python写了还原树结构的代码，但是它说找deepest path就不懂了，看看有什么人有解释……\n\n最后还是得靠自己画树……借助python代码将节点关系打出来。\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n__author__ = 'draco'\n\nclass Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\n\ndef binaryTreeFromInPostOrder(in_order, post_order):\n    if len(in_order) == 0 or len(post_list) == 0:\n        return None\n    node = Node(post_order[-1])\n    node_index = in_order.index(node.value)\n    node.left = binaryTreeFromInPostOrder(in_order[:node_index], post_order[:node_index])\n    node.right = binaryTreeFromInPostOrder(in_order[node_index+1:], post_order[node_index:-1])\n    return node\n\n\ndef printLevel(q):\n    global tree_structure\n    next_level = list()\n    this_structure = list()\n    while len(q) != 0:\n        node = q.pop(0)\n        this_structure.append((node[0], node[1].value))\n        if node[1].left:\n            next_level.append((node[1].value + \"-l\", node[1].left))\n\n        if node[1].right:\n            next_level.append((node[1].value + \"-r\", node[1].right))\n\n    tree_structure.append(this_structure)\n\n    return next_level\n\n\ndef printTree(tree):\n    current_level = list()\n    n = 0\n\n    current_level.append((\"None\", tree))\n\n    while n < 14:\n        current_level = printLevel(current_level)\n        n += 1\n\nin_list   = \"T b H V h 3 o g P W F L u A f G r m 1 x J 7 w e 0 i Q Y n Z 8 K v q k 9 y 5 C N B D 2 4 U l c p I E M a j 6 S R O X s d z t\".split(\" \")\n\npost_list = \"T V H o 3 h P g b F f A u m r 7 J x e w 1 Y Q i 0 Z n G L K y 9 k q v N D B C 5 4 c l U 2 8 E I R S 6 j d s X O a M p W t z\".split(\" \")\n\ntree_structure = list()\n\ntree = binaryTreeFromInPostOrder(in_list, post_list)\n\nprintTree(tree)\n\nfor i in tree_structure:\n    print(i)\n```\n\n输出结果：\n\n```\n[('None', 'z')]\n[('z-l', 'W'), ('z-r', 't')]\n[('W-l', 'b'), ('W-r', 'p')]\n[('b-l', 'T'), ('b-r', 'g'), ('p-l', '8'), ('p-r', 'M')]\n[('g-l', 'h'), ('g-r', 'P'), ('8-l', 'L'), ('8-r', '2'), ('M-l', 'I'), ('M-r', 'a')]\n[('h-l', 'H'), ('h-r', '3'), ('L-l', 'F'), ('L-r', 'G'), ('2-l', '5'), ('2-r', 'U'), ('I-r', 'E'), ('a-r', 'O')]\n[('H-r', 'V'), ('3-r', 'o'), ('G-l', 'u'), ('G-r', 'n'), ('5-l', 'v'), ('5-r', 'C'), ('U-l', '4'), ('U-r', 'l'), ('O-l', 'j'), ('O-r', 'X')]\n[('u-r', 'A'), ('n-l', '0'), ('n-r', 'Z'), ('v-l', 'K'), ('v-r', 'q'), ('C-r', 'B'), ('l-r', 'c'), ('j-r', '6'), ('X-r', 's')]\n[('A-r', 'f'), ('0-l', '1'), ('0-r', 'i'), ('q-r', 'k'), ('B-l', 'N'), ('B-r', 'D'), ('6-r', 'S'), ('s-r', 'd')]\n[('1-l', 'r'), ('1-r', 'w'), ('i-r', 'Q'), ('k-r', '9'), ('S-r', 'R')]\n[('r-r', 'm'), ('w-l', 'x'), ('w-r', 'e'), ('Q-r', 'Y'), ('9-r', 'y')]\n[('x-r', 'J')]\n[('J-r', '7')]\n[]\n```\n\n然后手动画树！最后得到最深路径是zWp8LGn01wxJ7。\n\nLinux下执行：\n\n`echo U2FsdGVkX1+gxunKbemS2193vhGGQ1Y8pc5gPegMAcg=|openssl enc -aes-128-cbc -a -d -pass pass:zWp8LGn01wxJ7`\n\n得到nqueens。终于过了。\n\n## 第7关\n\n好吧八皇后。说实话我从来都不太想在做类似的游戏时写算法，又不是什么ACM做题，唉。直接Google N皇后算法的python算法，解出N=9的所有解，352个解，是时候用暴力手段了。\n\n只是它这个code和通常表示八皇后解的数字不一样，正常是从上到下从左到右记录，它这个是从下到上从右到左记录……\n\n暴力出全部解之后其实都一样啦。\n\n结合sha1解密验证的代码：\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n__author__ = 'draco'\n\nfrom itertools import *\nimport hashlib\n\nc = (1,2,3,4,5,6,7,8,9)\nnq = [v for v in permutations(c) if 9==len({v[i-1]+i for i in c})==len({v[i-1]-i for i in c})]\nfor q in nq:\n    code = \"\".join(map(str, q))\n    s = hashlib.sha1()\n    s.update(\"zWp8LGn01wxJ7\" + code + \"\\n\")\n    if s.hexdigest() == \"e48d316ed573d3273931e19f9ac9f9e6039a4242\":\n        print(code)\n        break\n```\n\n得出答案：953172864\n\n## 第8关\n\n好吧26进制\n\nA=1, B=2, ... , Z=26\n\n于是AA=26^1*1+1, ZZ=26^1*26+26, AAA=26^2*1+26^1*1+1, ...\n\n算出来是85165，然后还要转字符……是DUYO。\n\n## 第9关\n\n根据图片搜出来是Pigpen Cipher，上wiki查到对应英文。\n\n答案是helloworld。\n\n啊终于通关了，看top100，排53。\n\n本文被原作者指出会破坏游戏公平性，故在活动结束之后才重新发布……当时自己考虑不周给各位道歉了OTL。","slug":"coolshell-puzzle-game-walkthrough","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuru0063n7t4525ark5x","content":"<p>coolshell出了个游戏，网址点<a href=\"http://fun.coolshell.cn/\" target=\"_blank\" rel=\"noopener\">这里</a>，奉上攻略。</p>\n<h2 id=\"第0关\"><a href=\"#第0关\" class=\"headerlink\" title=\"第0关\"></a>第0关</h2><p>brainfuck语言，很久以前就觉得有意思。</p>\n<p>自己看就算了，直接网上执行一次。点<a href=\"http://esoteric.sange.fi/brainfuck/impl/interp/i.html\" target=\"_blank\" rel=\"noopener\">这个</a>或<a href=\"http://www.brainfuck.tk/\" target=\"_blank\" rel=\"noopener\">这个</a>或<a href=\"http://copy.sh/brainfuck/\" target=\"_blank\" rel=\"noopener\">这个</a>都可以。</p>\n<p>得出是welcome.html。</p>\n<h2 id=\"第1关\"><a href=\"#第1关\" class=\"headerlink\" title=\"第1关\"></a>第1关</h2><p>2, 3, 6, 18, 108, ?</p>\n<p>2×3=6，3×6=18，6×18=108，18×108=1944</p>\n<p>输入1944.html知道x=1944。</p>\n<p>“生命、宇宙以及任何事情的终极答案”，42。输入42.html知道y=42。</p>\n<p>1944×42=81648</p>\n<p>得81648.html。</p>\n<h2 id=\"第2关\"><a href=\"#第2关\" class=\"headerlink\" title=\"第2关\"></a>第2关</h2><p>那个键盘排布是dvorak方案，不同于我们平常的QWERT键盘方案。</p>\n<p>直接上网找<a href=\"http://wbic16.xedoloh.com/dvorak.html\" target=\"_blank\" rel=\"noopener\">转换</a>，那串字符转过来就是</p>\n<p><code>main() { printf(&amp;unix[&quot;\\021%six\\012\\0&quot;],(unix)[&quot;have&quot;]+&quot;fun&quot;-0x60);}</code></p>\n<p>看起来就是C++语言。继续在线编译运行。运行出错，好吧。</p>\n<p>按照collshell好像很喜欢IOCCC的尿性，用Google搜一些关键字，比如奇怪的<code>&quot;&amp;unix&quot;</code>，记得加上双引号。找到一个比较有用的<a href=\"http://www.di-mgt.com.au/src/korn_ioccc.txt\" target=\"_blank\" rel=\"noopener\">解释</a>。</p>\n<p>学以致用，得出答案：unix</p>\n<h2 id=\"第3关\"><a href=\"#第3关\" class=\"headerlink\" title=\"第3关\"></a>第3关</h2><p>扫描QR Code，得<code>[abcdefghijklmnopqrstuvwxyz] &lt;=&gt; [pvwdgazxubqfsnrhocitlkeymj]</code>。简单的字符替换。</p>\n<p>在线解析QR code也可以，<a href=\"http://zxing.org/w/decode.jspx\" target=\"_blank\" rel=\"noopener\">网址</a>。</p>\n<p>因为在浏览器下，直接用javascript写脚本了。OK……注意是后一个的字母替换前一个。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decode</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newText=<span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;text.length;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dict[text[i]]) &#123;</span><br><span class=\"line\">            newText += dict[text[i]];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            newText += text[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newText;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">dict=&#123;&#125;;</span><br><span class=\"line\">ciper=<span class=\"string\">'abcdefghijklmnopqrstuvwxyz'</span>;</span><br><span class=\"line\">alphe=<span class=\"string\">'pvwdgazxubqfsnrhocitlkeymj'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;alphe.length;i++) &#123;</span><br><span class=\"line\">    dict[alphe[i]]=ciper[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">rawText=<span class=\"string\">'Wxgcg txgcg ui p ixgff, txgcg ui p epm. I gyhgwt mrl lig txg ixgff wrsspnd tr irfkg txui hcrvfgs, nre, hfgpig tcm liunz txg crt13 ra \"ixgff\" tr gntgc ngyt fgkgf.'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(decode(rawText));</span><br></pre></td></tr></table></figure>\n<p>得到一段话：<code>Where there is a shell, there is a way. I expect you use the shell command to solve this problem, now, please try using the rot13 of &quot;shell&quot; to enter next level.</code></p>\n<p>就是说要用ROT13来转换<code>shell</code>这个字符串，得出是furyy</p>\n<h2 id=\"第4关\"><a href=\"#第4关\" class=\"headerlink\" title=\"第4关\"></a>第4关</h2><p>左边就是告诉我们提取字符的模式：</p>\n<p>每5个字符，看前两个和后两个，必须满足：</p>\n<ol>\n<li>必须含一个大写字母和一个数字</li>\n<li>是回文</li>\n</ol>\n<p>而提取的字符则必须是小写字母。</p>\n<p><code>The answer has been lost in the source</code>则是说密文在源代码里面。有好一大串。</p>\n<p>用正则吧，写出来就是<code>([A-Z])([0-9])[a-z](\\2)(\\1)|([0-9])([A-Z])[a-z](\\6)(\\5)</code>。</p>\n<p>抱歉，更高级的写不出来了。</p>\n<p>直接开sublime text 2，复制那段大串字符进去，搜索开启正则模式和区分大小写，得：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E1v1E</span><br><span class=\"line\"><span class=\"number\">4</span>FaF4</span><br><span class=\"line\"><span class=\"number\">9</span>XrX9</span><br><span class=\"line\">O3i3O</span><br><span class=\"line\"><span class=\"number\">0</span>MaM0</span><br><span class=\"line\"><span class=\"number\">4</span>GbG4</span><br><span class=\"line\">M5l5M</span><br><span class=\"line\"><span class=\"number\">0</span>WeW0</span><br><span class=\"line\">Y0s0Y</span><br></pre></td></tr></table></figure>\n<p>取中间的variables就是答案。</p>\n<h2 id=\"第5关\"><a href=\"#第5关\" class=\"headerlink\" title=\"第5关\"></a>第5关</h2><p>点图片，按后跳转，得一串数字，复制到地址栏，又是一串，好吧这模式都太无聊了。而且页面没有jQuery，先引入。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jq = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">jq.src = <span class=\"string\">\"https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(jq);</span><br><span class=\"line\">jQuery.noConflict();</span><br></pre></td></tr></table></figure>\n<p>接着模仿我之前写过的另外一个<a href=\"http://blog.e10t.net/answers-for-alibaba-quiz3/\">攻略</a>里面的做法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">'http://fun.coolshell.cn/n/'</span>;</span><br><span class=\"line\">urlreal=url + <span class=\"string\">'32222'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $.<span class=\"keyword\">get</span>(urlreal, function(data)&#123;</span><br><span class=\"line\">        urlreal = url + data;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后就不断执行<code>g()</code>吧，最后答案是tree。</p>\n<h2 id=\"第-关\"><a href=\"#第-关\" class=\"headerlink\" title=\"第?关\"></a>第?关</h2><p>最后tree.html跳回一开始了，不知道是不是我太渣已经过时了……</p>\n<p>突然想到可能会看reference，于是访问了一下前一个地址：fun.coolshell.cn/n/20446，再回头访问tree.html，可以了。</p>\n<h2 id=\"第6关\"><a href=\"#第6关\" class=\"headerlink\" title=\"第6关\"></a>第6关</h2><p>算法……我等只会Google的渣渣就棘手了。</p>\n<p>好歹用python写了还原树结构的代码，但是它说找deepest path就不懂了，看看有什么人有解释……</p>\n<p>最后还是得靠自己画树……借助python代码将节点关系打出来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = <span class=\"string\">'draco'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value, left=None, right=None)</span>:</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">        self.left = left</span><br><span class=\"line\">        self.right = right</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binaryTreeFromInPostOrder</span><span class=\"params\">(in_order, post_order)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(in_order) == <span class=\"number\">0</span> <span class=\"keyword\">or</span> len(post_list) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    node = Node(post_order[<span class=\"number\">-1</span>])</span><br><span class=\"line\">    node_index = in_order.index(node.value)</span><br><span class=\"line\">    node.left = binaryTreeFromInPostOrder(in_order[:node_index], post_order[:node_index])</span><br><span class=\"line\">    node.right = binaryTreeFromInPostOrder(in_order[node_index+<span class=\"number\">1</span>:], post_order[node_index:<span class=\"number\">-1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printLevel</span><span class=\"params\">(q)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> tree_structure</span><br><span class=\"line\">    next_level = list()</span><br><span class=\"line\">    this_structure = list()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> len(q) != <span class=\"number\">0</span>:</span><br><span class=\"line\">        node = q.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        this_structure.append((node[<span class=\"number\">0</span>], node[<span class=\"number\">1</span>].value))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> node[<span class=\"number\">1</span>].left:</span><br><span class=\"line\">            next_level.append((node[<span class=\"number\">1</span>].value + <span class=\"string\">\"-l\"</span>, node[<span class=\"number\">1</span>].left))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node[<span class=\"number\">1</span>].right:</span><br><span class=\"line\">            next_level.append((node[<span class=\"number\">1</span>].value + <span class=\"string\">\"-r\"</span>, node[<span class=\"number\">1</span>].right))</span><br><span class=\"line\"></span><br><span class=\"line\">    tree_structure.append(this_structure)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> next_level</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printTree</span><span class=\"params\">(tree)</span>:</span></span><br><span class=\"line\">    current_level = list()</span><br><span class=\"line\">    n = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    current_level.append((<span class=\"string\">\"None\"</span>, tree))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &lt; <span class=\"number\">14</span>:</span><br><span class=\"line\">        current_level = printLevel(current_level)</span><br><span class=\"line\">        n += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">in_list   = <span class=\"string\">\"T b H V h 3 o g P W F L u A f G r m 1 x J 7 w e 0 i Q Y n Z 8 K v q k 9 y 5 C N B D 2 4 U l c p I E M a j 6 S R O X s d z t\"</span>.split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">post_list = <span class=\"string\">\"T V H o 3 h P g b F f A u m r 7 J x e w 1 Y Q i 0 Z n G L K y 9 k q v N D B C 5 4 c l U 2 8 E I R S 6 j d s X O a M p W t z\"</span>.split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">tree_structure = list()</span><br><span class=\"line\"></span><br><span class=\"line\">tree = binaryTreeFromInPostOrder(in_list, post_list)</span><br><span class=\"line\"></span><br><span class=\"line\">printTree(tree)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tree_structure:</span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[(<span class=\"symbol\">'None</span>', <span class=\"symbol\">'z</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'z-l</span>', <span class=\"symbol\">'W</span>'), (<span class=\"symbol\">'z-r</span>', <span class=\"symbol\">'t</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'W-l</span>', <span class=\"symbol\">'b</span>'), (<span class=\"symbol\">'W-r</span>', <span class=\"symbol\">'p</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'b-l</span>', <span class=\"symbol\">'T</span>'), (<span class=\"symbol\">'b-r</span>', <span class=\"symbol\">'g</span>'), (<span class=\"symbol\">'p-l</span>', <span class=\"symbol\">'8</span>'), (<span class=\"symbol\">'p-r</span>', <span class=\"symbol\">'M</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'g-l</span>', <span class=\"symbol\">'h</span>'), (<span class=\"symbol\">'g-r</span>', <span class=\"symbol\">'P</span>'), (<span class=\"symbol\">'8-l</span>', <span class=\"symbol\">'L</span>'), (<span class=\"symbol\">'8-r</span>', <span class=\"symbol\">'2</span>'), (<span class=\"symbol\">'M-l</span>', <span class=\"symbol\">'I</span>'), (<span class=\"symbol\">'M-r</span>', <span class=\"symbol\">'a</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'h-l</span>', <span class=\"symbol\">'H</span>'), (<span class=\"symbol\">'h-r</span>', <span class=\"symbol\">'3</span>'), (<span class=\"symbol\">'L-l</span>', <span class=\"symbol\">'F</span>'), (<span class=\"symbol\">'L-r</span>', <span class=\"symbol\">'G</span>'), (<span class=\"symbol\">'2-l</span>', <span class=\"symbol\">'5</span>'), (<span class=\"symbol\">'2-r</span>', <span class=\"symbol\">'U</span>'), (<span class=\"symbol\">'I-r</span>', <span class=\"symbol\">'E</span>'), (<span class=\"symbol\">'a-r</span>', <span class=\"symbol\">'O</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'H-r</span>', <span class=\"symbol\">'V</span>'), (<span class=\"symbol\">'3-r</span>', <span class=\"symbol\">'o</span>'), (<span class=\"symbol\">'G-l</span>', <span class=\"symbol\">'u</span>'), (<span class=\"symbol\">'G-r</span>', <span class=\"symbol\">'n</span>'), (<span class=\"symbol\">'5-l</span>', <span class=\"symbol\">'v</span>'), (<span class=\"symbol\">'5-r</span>', <span class=\"symbol\">'C</span>'), (<span class=\"symbol\">'U-l</span>', <span class=\"symbol\">'4</span>'), (<span class=\"symbol\">'U-r</span>', <span class=\"symbol\">'l</span>'), (<span class=\"symbol\">'O-l</span>', <span class=\"symbol\">'j</span>'), (<span class=\"symbol\">'O-r</span>', <span class=\"symbol\">'X</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'u-r</span>', <span class=\"symbol\">'A</span>'), (<span class=\"symbol\">'n-l</span>', <span class=\"symbol\">'0</span>'), (<span class=\"symbol\">'n-r</span>', <span class=\"symbol\">'Z</span>'), (<span class=\"symbol\">'v-l</span>', <span class=\"symbol\">'K</span>'), (<span class=\"symbol\">'v-r</span>', <span class=\"symbol\">'q</span>'), (<span class=\"symbol\">'C-r</span>', <span class=\"symbol\">'B</span>'), (<span class=\"symbol\">'l-r</span>', <span class=\"symbol\">'c</span>'), (<span class=\"symbol\">'j-r</span>', <span class=\"symbol\">'6</span>'), (<span class=\"symbol\">'X-r</span>', <span class=\"symbol\">'s</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'A-r</span>', <span class=\"symbol\">'f</span>'), (<span class=\"symbol\">'0-l</span>', <span class=\"symbol\">'1</span>'), (<span class=\"symbol\">'0-r</span>', <span class=\"symbol\">'i</span>'), (<span class=\"symbol\">'q-r</span>', <span class=\"symbol\">'k</span>'), (<span class=\"symbol\">'B-l</span>', <span class=\"symbol\">'N</span>'), (<span class=\"symbol\">'B-r</span>', <span class=\"symbol\">'D</span>'), (<span class=\"symbol\">'6-r</span>', <span class=\"symbol\">'S</span>'), (<span class=\"symbol\">'s-r</span>', <span class=\"symbol\">'d</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'1-l</span>', <span class=\"symbol\">'r</span>'), (<span class=\"symbol\">'1-r</span>', <span class=\"symbol\">'w</span>'), (<span class=\"symbol\">'i-r</span>', <span class=\"symbol\">'Q</span>'), (<span class=\"symbol\">'k-r</span>', <span class=\"symbol\">'9</span>'), (<span class=\"symbol\">'S-r</span>', <span class=\"symbol\">'R</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'r-r</span>', <span class=\"symbol\">'m</span>'), (<span class=\"symbol\">'w-l</span>', <span class=\"symbol\">'x</span>'), (<span class=\"symbol\">'w-r</span>', <span class=\"symbol\">'e</span>'), (<span class=\"symbol\">'Q-r</span>', <span class=\"symbol\">'Y</span>'), (<span class=\"symbol\">'9-r</span>', <span class=\"symbol\">'y</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'x-r</span>', <span class=\"symbol\">'J</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'J-r</span>', <span class=\"symbol\">'7</span>')]</span><br><span class=\"line\">[]</span><br></pre></td></tr></table></figure>\n<p>然后手动画树！最后得到最深路径是zWp8LGn01wxJ7。</p>\n<p>Linux下执行：</p>\n<p><code>echo U2FsdGVkX1+gxunKbemS2193vhGGQ1Y8pc5gPegMAcg=|openssl enc -aes-128-cbc -a -d -pass pass:zWp8LGn01wxJ7</code></p>\n<p>得到nqueens。终于过了。</p>\n<h2 id=\"第7关\"><a href=\"#第7关\" class=\"headerlink\" title=\"第7关\"></a>第7关</h2><p>好吧八皇后。说实话我从来都不太想在做类似的游戏时写算法，又不是什么ACM做题，唉。直接Google N皇后算法的python算法，解出N=9的所有解，352个解，是时候用暴力手段了。</p>\n<p>只是它这个code和通常表示八皇后解的数字不一样，正常是从上到下从左到右记录，它这个是从下到上从右到左记录……</p>\n<p>暴力出全部解之后其实都一样啦。</p>\n<p>结合sha1解密验证的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = <span class=\"string\">'draco'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"></span><br><span class=\"line\">c = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>)</span><br><span class=\"line\">nq = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> permutations(c) <span class=\"keyword\">if</span> <span class=\"number\">9</span>==len(&#123;v[i<span class=\"number\">-1</span>]+i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> c&#125;)==len(&#123;v[i<span class=\"number\">-1</span>]-i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> c&#125;)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> q <span class=\"keyword\">in</span> nq:</span><br><span class=\"line\">    code = <span class=\"string\">\"\"</span>.join(map(str, q))</span><br><span class=\"line\">    s = hashlib.sha1()</span><br><span class=\"line\">    s.update(<span class=\"string\">\"zWp8LGn01wxJ7\"</span> + code + <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> s.hexdigest() == <span class=\"string\">\"e48d316ed573d3273931e19f9ac9f9e6039a4242\"</span>:</span><br><span class=\"line\">        print(code)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<p>得出答案：953172864</p>\n<h2 id=\"第8关\"><a href=\"#第8关\" class=\"headerlink\" title=\"第8关\"></a>第8关</h2><p>好吧26进制</p>\n<p>A=1, B=2, … , Z=26</p>\n<p>于是AA=26^1<em>1+1, ZZ=26^1</em>26+26, AAA=26^2<em>1+26^1</em>1+1, …</p>\n<p>算出来是85165，然后还要转字符……是DUYO。</p>\n<h2 id=\"第9关\"><a href=\"#第9关\" class=\"headerlink\" title=\"第9关\"></a>第9关</h2><p>根据图片搜出来是Pigpen Cipher，上wiki查到对应英文。</p>\n<p>答案是helloworld。</p>\n<p>啊终于通关了，看top100，排53。</p>\n<p>本文被原作者指出会破坏游戏公平性，故在活动结束之后才重新发布……当时自己考虑不周给各位道歉了OTL。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>coolshell出了个游戏，网址点<a href=\"http://fun.coolshell.cn/\" target=\"_blank\" rel=\"noopener\">这里</a>，奉上攻略。</p>\n<h2 id=\"第0关\"><a href=\"#第0关\" class=\"headerlink\" title=\"第0关\"></a>第0关</h2><p>brainfuck语言，很久以前就觉得有意思。</p>\n<p>自己看就算了，直接网上执行一次。点<a href=\"http://esoteric.sange.fi/brainfuck/impl/interp/i.html\" target=\"_blank\" rel=\"noopener\">这个</a>或<a href=\"http://www.brainfuck.tk/\" target=\"_blank\" rel=\"noopener\">这个</a>或<a href=\"http://copy.sh/brainfuck/\" target=\"_blank\" rel=\"noopener\">这个</a>都可以。</p>\n<p>得出是welcome.html。</p>\n<h2 id=\"第1关\"><a href=\"#第1关\" class=\"headerlink\" title=\"第1关\"></a>第1关</h2><p>2, 3, 6, 18, 108, ?</p>\n<p>2×3=6，3×6=18，6×18=108，18×108=1944</p>\n<p>输入1944.html知道x=1944。</p>\n<p>“生命、宇宙以及任何事情的终极答案”，42。输入42.html知道y=42。</p>\n<p>1944×42=81648</p>\n<p>得81648.html。</p>\n<h2 id=\"第2关\"><a href=\"#第2关\" class=\"headerlink\" title=\"第2关\"></a>第2关</h2><p>那个键盘排布是dvorak方案，不同于我们平常的QWERT键盘方案。</p>\n<p>直接上网找<a href=\"http://wbic16.xedoloh.com/dvorak.html\" target=\"_blank\" rel=\"noopener\">转换</a>，那串字符转过来就是</p>\n<p><code>main() { printf(&amp;unix[&quot;\\021%six\\012\\0&quot;],(unix)[&quot;have&quot;]+&quot;fun&quot;-0x60);}</code></p>\n<p>看起来就是C++语言。继续在线编译运行。运行出错，好吧。</p>\n<p>按照collshell好像很喜欢IOCCC的尿性，用Google搜一些关键字，比如奇怪的<code>&quot;&amp;unix&quot;</code>，记得加上双引号。找到一个比较有用的<a href=\"http://www.di-mgt.com.au/src/korn_ioccc.txt\" target=\"_blank\" rel=\"noopener\">解释</a>。</p>\n<p>学以致用，得出答案：unix</p>\n<h2 id=\"第3关\"><a href=\"#第3关\" class=\"headerlink\" title=\"第3关\"></a>第3关</h2><p>扫描QR Code，得<code>[abcdefghijklmnopqrstuvwxyz] &lt;=&gt; [pvwdgazxubqfsnrhocitlkeymj]</code>。简单的字符替换。</p>\n<p>在线解析QR code也可以，<a href=\"http://zxing.org/w/decode.jspx\" target=\"_blank\" rel=\"noopener\">网址</a>。</p>\n<p>因为在浏览器下，直接用javascript写脚本了。OK……注意是后一个的字母替换前一个。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decode</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newText=<span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;text.length;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dict[text[i]]) &#123;</span><br><span class=\"line\">            newText += dict[text[i]];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            newText += text[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newText;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">dict=&#123;&#125;;</span><br><span class=\"line\">ciper=<span class=\"string\">'abcdefghijklmnopqrstuvwxyz'</span>;</span><br><span class=\"line\">alphe=<span class=\"string\">'pvwdgazxubqfsnrhocitlkeymj'</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;alphe.length;i++) &#123;</span><br><span class=\"line\">    dict[alphe[i]]=ciper[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">rawText=<span class=\"string\">'Wxgcg txgcg ui p ixgff, txgcg ui p epm. I gyhgwt mrl lig txg ixgff wrsspnd tr irfkg txui hcrvfgs, nre, hfgpig tcm liunz txg crt13 ra \"ixgff\" tr gntgc ngyt fgkgf.'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(decode(rawText));</span><br></pre></td></tr></table></figure>\n<p>得到一段话：<code>Where there is a shell, there is a way. I expect you use the shell command to solve this problem, now, please try using the rot13 of &quot;shell&quot; to enter next level.</code></p>\n<p>就是说要用ROT13来转换<code>shell</code>这个字符串，得出是furyy</p>\n<h2 id=\"第4关\"><a href=\"#第4关\" class=\"headerlink\" title=\"第4关\"></a>第4关</h2><p>左边就是告诉我们提取字符的模式：</p>\n<p>每5个字符，看前两个和后两个，必须满足：</p>\n<ol>\n<li>必须含一个大写字母和一个数字</li>\n<li>是回文</li>\n</ol>\n<p>而提取的字符则必须是小写字母。</p>\n<p><code>The answer has been lost in the source</code>则是说密文在源代码里面。有好一大串。</p>\n<p>用正则吧，写出来就是<code>([A-Z])([0-9])[a-z](\\2)(\\1)|([0-9])([A-Z])[a-z](\\6)(\\5)</code>。</p>\n<p>抱歉，更高级的写不出来了。</p>\n<p>直接开sublime text 2，复制那段大串字符进去，搜索开启正则模式和区分大小写，得：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E1v1E</span><br><span class=\"line\"><span class=\"number\">4</span>FaF4</span><br><span class=\"line\"><span class=\"number\">9</span>XrX9</span><br><span class=\"line\">O3i3O</span><br><span class=\"line\"><span class=\"number\">0</span>MaM0</span><br><span class=\"line\"><span class=\"number\">4</span>GbG4</span><br><span class=\"line\">M5l5M</span><br><span class=\"line\"><span class=\"number\">0</span>WeW0</span><br><span class=\"line\">Y0s0Y</span><br></pre></td></tr></table></figure>\n<p>取中间的variables就是答案。</p>\n<h2 id=\"第5关\"><a href=\"#第5关\" class=\"headerlink\" title=\"第5关\"></a>第5关</h2><p>点图片，按后跳转，得一串数字，复制到地址栏，又是一串，好吧这模式都太无聊了。而且页面没有jQuery，先引入。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> jq = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">jq.src = <span class=\"string\">\"https://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js\"</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'head'</span>)[<span class=\"number\">0</span>].appendChild(jq);</span><br><span class=\"line\">jQuery.noConflict();</span><br></pre></td></tr></table></figure>\n<p>接着模仿我之前写过的另外一个<a href=\"http://blog.e10t.net/answers-for-alibaba-quiz3/\">攻略</a>里面的做法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url = <span class=\"string\">'http://fun.coolshell.cn/n/'</span>;</span><br><span class=\"line\">urlreal=url + <span class=\"string\">'32222'</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $.<span class=\"keyword\">get</span>(urlreal, function(data)&#123;</span><br><span class=\"line\">        urlreal = url + data;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>之后就不断执行<code>g()</code>吧，最后答案是tree。</p>\n<h2 id=\"第-关\"><a href=\"#第-关\" class=\"headerlink\" title=\"第?关\"></a>第?关</h2><p>最后tree.html跳回一开始了，不知道是不是我太渣已经过时了……</p>\n<p>突然想到可能会看reference，于是访问了一下前一个地址：fun.coolshell.cn/n/20446，再回头访问tree.html，可以了。</p>\n<h2 id=\"第6关\"><a href=\"#第6关\" class=\"headerlink\" title=\"第6关\"></a>第6关</h2><p>算法……我等只会Google的渣渣就棘手了。</p>\n<p>好歹用python写了还原树结构的代码，但是它说找deepest path就不懂了，看看有什么人有解释……</p>\n<p>最后还是得靠自己画树……借助python代码将节点关系打出来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = <span class=\"string\">'draco'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, value, left=None, right=None)</span>:</span></span><br><span class=\"line\">        self.value = value</span><br><span class=\"line\">        self.left = left</span><br><span class=\"line\">        self.right = right</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">binaryTreeFromInPostOrder</span><span class=\"params\">(in_order, post_order)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(in_order) == <span class=\"number\">0</span> <span class=\"keyword\">or</span> len(post_list) == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    node = Node(post_order[<span class=\"number\">-1</span>])</span><br><span class=\"line\">    node_index = in_order.index(node.value)</span><br><span class=\"line\">    node.left = binaryTreeFromInPostOrder(in_order[:node_index], post_order[:node_index])</span><br><span class=\"line\">    node.right = binaryTreeFromInPostOrder(in_order[node_index+<span class=\"number\">1</span>:], post_order[node_index:<span class=\"number\">-1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printLevel</span><span class=\"params\">(q)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> tree_structure</span><br><span class=\"line\">    next_level = list()</span><br><span class=\"line\">    this_structure = list()</span><br><span class=\"line\">    <span class=\"keyword\">while</span> len(q) != <span class=\"number\">0</span>:</span><br><span class=\"line\">        node = q.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        this_structure.append((node[<span class=\"number\">0</span>], node[<span class=\"number\">1</span>].value))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> node[<span class=\"number\">1</span>].left:</span><br><span class=\"line\">            next_level.append((node[<span class=\"number\">1</span>].value + <span class=\"string\">\"-l\"</span>, node[<span class=\"number\">1</span>].left))</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> node[<span class=\"number\">1</span>].right:</span><br><span class=\"line\">            next_level.append((node[<span class=\"number\">1</span>].value + <span class=\"string\">\"-r\"</span>, node[<span class=\"number\">1</span>].right))</span><br><span class=\"line\"></span><br><span class=\"line\">    tree_structure.append(this_structure)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> next_level</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printTree</span><span class=\"params\">(tree)</span>:</span></span><br><span class=\"line\">    current_level = list()</span><br><span class=\"line\">    n = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    current_level.append((<span class=\"string\">\"None\"</span>, tree))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> n &lt; <span class=\"number\">14</span>:</span><br><span class=\"line\">        current_level = printLevel(current_level)</span><br><span class=\"line\">        n += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">in_list   = <span class=\"string\">\"T b H V h 3 o g P W F L u A f G r m 1 x J 7 w e 0 i Q Y n Z 8 K v q k 9 y 5 C N B D 2 4 U l c p I E M a j 6 S R O X s d z t\"</span>.split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">post_list = <span class=\"string\">\"T V H o 3 h P g b F f A u m r 7 J x e w 1 Y Q i 0 Z n G L K y 9 k q v N D B C 5 4 c l U 2 8 E I R S 6 j d s X O a M p W t z\"</span>.split(<span class=\"string\">\" \"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">tree_structure = list()</span><br><span class=\"line\"></span><br><span class=\"line\">tree = binaryTreeFromInPostOrder(in_list, post_list)</span><br><span class=\"line\"></span><br><span class=\"line\">printTree(tree)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> tree_structure:</span><br><span class=\"line\">    print(i)</span><br></pre></td></tr></table></figure>\n<p>输出结果：</p>\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[(<span class=\"symbol\">'None</span>', <span class=\"symbol\">'z</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'z-l</span>', <span class=\"symbol\">'W</span>'), (<span class=\"symbol\">'z-r</span>', <span class=\"symbol\">'t</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'W-l</span>', <span class=\"symbol\">'b</span>'), (<span class=\"symbol\">'W-r</span>', <span class=\"symbol\">'p</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'b-l</span>', <span class=\"symbol\">'T</span>'), (<span class=\"symbol\">'b-r</span>', <span class=\"symbol\">'g</span>'), (<span class=\"symbol\">'p-l</span>', <span class=\"symbol\">'8</span>'), (<span class=\"symbol\">'p-r</span>', <span class=\"symbol\">'M</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'g-l</span>', <span class=\"symbol\">'h</span>'), (<span class=\"symbol\">'g-r</span>', <span class=\"symbol\">'P</span>'), (<span class=\"symbol\">'8-l</span>', <span class=\"symbol\">'L</span>'), (<span class=\"symbol\">'8-r</span>', <span class=\"symbol\">'2</span>'), (<span class=\"symbol\">'M-l</span>', <span class=\"symbol\">'I</span>'), (<span class=\"symbol\">'M-r</span>', <span class=\"symbol\">'a</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'h-l</span>', <span class=\"symbol\">'H</span>'), (<span class=\"symbol\">'h-r</span>', <span class=\"symbol\">'3</span>'), (<span class=\"symbol\">'L-l</span>', <span class=\"symbol\">'F</span>'), (<span class=\"symbol\">'L-r</span>', <span class=\"symbol\">'G</span>'), (<span class=\"symbol\">'2-l</span>', <span class=\"symbol\">'5</span>'), (<span class=\"symbol\">'2-r</span>', <span class=\"symbol\">'U</span>'), (<span class=\"symbol\">'I-r</span>', <span class=\"symbol\">'E</span>'), (<span class=\"symbol\">'a-r</span>', <span class=\"symbol\">'O</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'H-r</span>', <span class=\"symbol\">'V</span>'), (<span class=\"symbol\">'3-r</span>', <span class=\"symbol\">'o</span>'), (<span class=\"symbol\">'G-l</span>', <span class=\"symbol\">'u</span>'), (<span class=\"symbol\">'G-r</span>', <span class=\"symbol\">'n</span>'), (<span class=\"symbol\">'5-l</span>', <span class=\"symbol\">'v</span>'), (<span class=\"symbol\">'5-r</span>', <span class=\"symbol\">'C</span>'), (<span class=\"symbol\">'U-l</span>', <span class=\"symbol\">'4</span>'), (<span class=\"symbol\">'U-r</span>', <span class=\"symbol\">'l</span>'), (<span class=\"symbol\">'O-l</span>', <span class=\"symbol\">'j</span>'), (<span class=\"symbol\">'O-r</span>', <span class=\"symbol\">'X</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'u-r</span>', <span class=\"symbol\">'A</span>'), (<span class=\"symbol\">'n-l</span>', <span class=\"symbol\">'0</span>'), (<span class=\"symbol\">'n-r</span>', <span class=\"symbol\">'Z</span>'), (<span class=\"symbol\">'v-l</span>', <span class=\"symbol\">'K</span>'), (<span class=\"symbol\">'v-r</span>', <span class=\"symbol\">'q</span>'), (<span class=\"symbol\">'C-r</span>', <span class=\"symbol\">'B</span>'), (<span class=\"symbol\">'l-r</span>', <span class=\"symbol\">'c</span>'), (<span class=\"symbol\">'j-r</span>', <span class=\"symbol\">'6</span>'), (<span class=\"symbol\">'X-r</span>', <span class=\"symbol\">'s</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'A-r</span>', <span class=\"symbol\">'f</span>'), (<span class=\"symbol\">'0-l</span>', <span class=\"symbol\">'1</span>'), (<span class=\"symbol\">'0-r</span>', <span class=\"symbol\">'i</span>'), (<span class=\"symbol\">'q-r</span>', <span class=\"symbol\">'k</span>'), (<span class=\"symbol\">'B-l</span>', <span class=\"symbol\">'N</span>'), (<span class=\"symbol\">'B-r</span>', <span class=\"symbol\">'D</span>'), (<span class=\"symbol\">'6-r</span>', <span class=\"symbol\">'S</span>'), (<span class=\"symbol\">'s-r</span>', <span class=\"symbol\">'d</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'1-l</span>', <span class=\"symbol\">'r</span>'), (<span class=\"symbol\">'1-r</span>', <span class=\"symbol\">'w</span>'), (<span class=\"symbol\">'i-r</span>', <span class=\"symbol\">'Q</span>'), (<span class=\"symbol\">'k-r</span>', <span class=\"symbol\">'9</span>'), (<span class=\"symbol\">'S-r</span>', <span class=\"symbol\">'R</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'r-r</span>', <span class=\"symbol\">'m</span>'), (<span class=\"symbol\">'w-l</span>', <span class=\"symbol\">'x</span>'), (<span class=\"symbol\">'w-r</span>', <span class=\"symbol\">'e</span>'), (<span class=\"symbol\">'Q-r</span>', <span class=\"symbol\">'Y</span>'), (<span class=\"symbol\">'9-r</span>', <span class=\"symbol\">'y</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'x-r</span>', <span class=\"symbol\">'J</span>')]</span><br><span class=\"line\">[(<span class=\"symbol\">'J-r</span>', <span class=\"symbol\">'7</span>')]</span><br><span class=\"line\">[]</span><br></pre></td></tr></table></figure>\n<p>然后手动画树！最后得到最深路径是zWp8LGn01wxJ7。</p>\n<p>Linux下执行：</p>\n<p><code>echo U2FsdGVkX1+gxunKbemS2193vhGGQ1Y8pc5gPegMAcg=|openssl enc -aes-128-cbc -a -d -pass pass:zWp8LGn01wxJ7</code></p>\n<p>得到nqueens。终于过了。</p>\n<h2 id=\"第7关\"><a href=\"#第7关\" class=\"headerlink\" title=\"第7关\"></a>第7关</h2><p>好吧八皇后。说实话我从来都不太想在做类似的游戏时写算法，又不是什么ACM做题，唉。直接Google N皇后算法的python算法，解出N=9的所有解，352个解，是时候用暴力手段了。</p>\n<p>只是它这个code和通常表示八皇后解的数字不一样，正常是从上到下从左到右记录，它这个是从下到上从右到左记录……</p>\n<p>暴力出全部解之后其实都一样啦。</p>\n<p>结合sha1解密验证的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = <span class=\"string\">'draco'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> hashlib</span><br><span class=\"line\"></span><br><span class=\"line\">c = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>)</span><br><span class=\"line\">nq = [v <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> permutations(c) <span class=\"keyword\">if</span> <span class=\"number\">9</span>==len(&#123;v[i<span class=\"number\">-1</span>]+i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> c&#125;)==len(&#123;v[i<span class=\"number\">-1</span>]-i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> c&#125;)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> q <span class=\"keyword\">in</span> nq:</span><br><span class=\"line\">    code = <span class=\"string\">\"\"</span>.join(map(str, q))</span><br><span class=\"line\">    s = hashlib.sha1()</span><br><span class=\"line\">    s.update(<span class=\"string\">\"zWp8LGn01wxJ7\"</span> + code + <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> s.hexdigest() == <span class=\"string\">\"e48d316ed573d3273931e19f9ac9f9e6039a4242\"</span>:</span><br><span class=\"line\">        print(code)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<p>得出答案：953172864</p>\n<h2 id=\"第8关\"><a href=\"#第8关\" class=\"headerlink\" title=\"第8关\"></a>第8关</h2><p>好吧26进制</p>\n<p>A=1, B=2, … , Z=26</p>\n<p>于是AA=26^1<em>1+1, ZZ=26^1</em>26+26, AAA=26^2<em>1+26^1</em>1+1, …</p>\n<p>算出来是85165，然后还要转字符……是DUYO。</p>\n<h2 id=\"第9关\"><a href=\"#第9关\" class=\"headerlink\" title=\"第9关\"></a>第9关</h2><p>根据图片搜出来是Pigpen Cipher，上wiki查到对应英文。</p>\n<p>答案是helloworld。</p>\n<p>啊终于通关了，看top100，排53。</p>\n<p>本文被原作者指出会破坏游戏公平性，故在活动结束之后才重新发布……当时自己考虑不周给各位道歉了OTL。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Wed Aug 06 2014 16:22:53 GMT+0800 (China Standard Time)","title":"CoolShell puzzle game 攻略","path":"coolshell-puzzle-game-walkthrough/","eyeCatchImage":null,"excerpt":null,"date":"2014-08-03T13:56:51.000Z","pv":0,"totalPV":0,"categories":"技术 > 黑客 > 编程语言 > python > javascript","tags":["javascript","python","walkthrough","quiz"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2116},{"title":"PSO2/鬼斬/剑灵，网游个人分析和感受","id":"24","updated":"2014-04-15T07:40:42.000Z","date":"2014-01-22T19:57:59.000Z","_content":"\n我玩的网游很少，而且都只玩免费网游。目前为止，曾经坚持玩下去的网游就只有洛奇、洛奇英雄传、Phantasy Star Online 2、鬼斬和剑灵。其中洛奇和洛英玩了比较短的一段时间后已弃，原因是玩得太寂寞。重点说说个人对后三个游戏的感受好了。受游戏知识和运行环境的影响，个人观点难免有所偏差。\n简单介绍（非常短，详细请自行Google去）\n\n![pso2](http://s13.sinaimg.cn/mw690/0020TQz1gy6FaGSjd6c3c)\n\nPSO2：如果我说Phantasy Star的中文名字是梦幻之星的话，会不会有很多人恍然大悟。游戏类型是ARPG，游戏背景是宇宙，有剑士枪手魔法师等职业选择。\n\n![onigiri](http://s1.sinaimg.cn/mw690/0020TQz1gy6FaH1boas40)\n\n鬼斬：十分新的一个网游，13.12.12才正式运营。中文资料很少，台服官网介绍是“和风无锁定MMORPG”。何谓无锁定，后面会大概说说。公司是Cyberstep（没听过……），题材大概是奇幻系列，NPC的名字是什么“靜御前”“義經”之类的日本古人名字。\n\n剑灵：近来在中国很火啊，大概玩过网游的人都知道，不多说了。\n\n### 玩的理由&近况\nPSO2：在PSP上玩过《梦幻之星2》，既然出了online版那就去玩一玩，结果发现不错，于是就一直玩了。后来SEGA限制了非日本IP的登录，我没有日本VPN于是玩不了了。近来看到有英文版的主页，估计会出欧服或者美服？不知何年何月了。\n\n鬼斬：在网上偶然看到介绍，画风十分讨喜，游戏官网也做得很好（是旧的日服官网，参考台服官网），看宣传片也觉得有兴趣。游戏当时宣布是点卡制，后来改成了无料，不玩似乎说不过去（锚定效应起作用了）。只是这货更新很成问题，我挂VPN更新经常失败，也不知道为什么，暂时在靠贴吧的雷锋过日子。但是一旦更新好了，玩起来是不成问题的。\n\n剑灵：听说跳票了很久的一个游戏，实验室里面曾经有朋友说这个游戏公测了就和我一起玩，现在公测了就只有我下载了来玩。在某个区开了一个号，因为太寂寞了就换了另外一个班里的同学都在的区。现在一边追赶班里的同学的级数一边合武器和首饰中。\n\n### 操作\nPSO2：上手容易，打怪有准星锁定，但是只要打中怪就能扣血。特色是怪是有弱点的，如果能瞄准弱点，则事半功倍，反之事倍功半，所以打boss都是瞄准弱点打。网上有1血挑boss的神触视频。不同类型的武器都有特定的招式，招式需要事先组合好，通过左右键发出。\n\n鬼斬：无锁定，就是不会帮你将武器的输出自动定位到怪上。虽然也有准星，但是作用只是提示你怪在武器的有效距离以内而已，跟怪物猎人比较像，也是我很欣赏的一点。上手比较难，但是能以技巧挑boss，娱乐性更强。武器的普通招式是固定的，长按或者多次按左键连击发出，但是不同武器是有不同的三种特殊攻击，通过123键或者q键切换，右键发出。\n\n剑灵：什么都不说了，上手极其容易，等级和武器决定一切。虽然有一个合击和打断，但是比起等级和武器的重要性，实在是比较低。不同职业有不同的招式，1到4和z到v，八种招式随便放，合击要配合空格和f，实在是要人精分……当然有组织的出招才能保证打得怪起不来。\n\n### 声音\nPSO2：背景乐不错啊，重点是NPC的配音请了有名的声优！名声优的声音包也是作为商品还是赠品来着。\n\n鬼斬：不同地图音乐不同，在副本任务中音乐也一直有。感觉很是配合这个游戏的和风风格，反正听起来很舒服。\n\n剑灵：在记忆中似乎是不错来着，可惜好像只是出现在跑地图的时候。在副本任务中好像没啥背景音乐？我现在是关掉音乐然后在nico听广播来玩的。\n\n画面（我的机子烂，不敢妄评）\nPSO2：我只开中级画面，已经很好看了。曾经试过开高级画面，机子温度狂飙升。但是高级画面下的水面超漂亮。\n\n鬼斬：非常恶心的没有调整画质等的选项，只有全屏和桌面两种切换，切换的时候还会崩溃。\n\n剑灵：除了不用最低配置外，所有质量调最低，保证操作顺畅。长期二十来帧……\nPS：我的机子还是只用来编程算了……\n\n### 武器系统-使用（太庞大，挑重点和特点说）\nPSO2：可以设定几种武器，战斗的时候随时切换以适应地形和怪物。\n鬼斬：可以设定最多4种武器，随时切换，因为很有可能一种武器都打烂了还没有打通……\n\n剑灵：一个职业只能用一种武器，而几乎所有人都是用同一把武器……\n\n### 武器系统-进化\nPSO2：大概没有人不会痛恨负责武器研磨的大叔。这游戏打出了武器之后，有时需要鉴定，并且可以通过研磨石使武器逐渐进化上最高的十星级，但是研磨是会失败的，失败的时候那个大叔还会嘲讽说“你的运气真差啊”。有可能你挥霍了99个一组的研磨石，最后武器反而变差了，实在是比较坑。另外也可以给武器附加属性什么的。同一类武器有很多种，不同武器样子也不一样。除了职业限定的武器，你尽管用，自由得很。在游戏里看到的不同人行头和武器都很不一样，个人感很是强烈。\n\n鬼斬：玩的时间不长，拿到的武器不多。武器掉落后需要给“靜御前”来鉴定，“義經”来强化或者修理。是“武器喂武器”的模式，武器的种类也比较多。\n\n剑灵：相信几乎每个人都是拿着体制武器的吧，也就是只要职业形同，那么基本上必定是洪门、妖魔这样升上去，毫无新意。武器的成长和进化需要大量其他同种武器的堆砌和各种稀有辅助材料。而这一切的结果，最后也不过是得到了跟别人一模一样的行头和能力，但你要在这个游戏里面生存下去，就不得不这样干。这模式是不是很熟悉？要我说在游戏里面也得这样做也实在太悲哀了。\n\n### 辅助系统\nPSO2：一定等级可以拿到一只玛古，就是宠物了，喂各种各样的东西可以成长和进化。因为喂不同的东西进化的路线不同，所以有专门的研究。我是随便喂的了……身上三个地方可以加上辅助道具。战斗前可以加官方提供的buff，而且是要钱的。\n\n鬼斬：暂时来说无宠无坐骑，估计以后也不会有。只有勾玉这一样辅助道具。比较特殊的还有有时间限制的“酒”。\n\n剑灵：无宠无坐骑。有一个独特的八卦牌的设定可以得到多种辅助加成，凑齐一套有套装加成。配合跟武器一样是体制式的首饰（喂武器还不够……），基本都是RPG的一贯设定了。\n\n### 任务&副本\nPSO2：任务都是在飞船内找NPC领任务然后传送到星球上进行，集中方便，利于同一个服务器的玩家们交流。任务都是一些以“探索”和“讨伐”为主题，这都是由梦幻之星的世界观设定决定的。任务可以选择难度，以适应不同等级的玩家。地图应该都是随机地图，但多走几次可以发现其实地图的走向也是有一定的大趋势的。不定时会出现“紧急任务”，通常就是特殊地图供你练级，个人或者队伍打地图boss。大更新比较频繁，新的地图和boss足够你去玩。\n\n鬼斬：支线随主线走，做完了就没了。地图副本随便进去刷，可以选择“仁”“皇”“神”三种难度，地图固定，怪物固定。\n\n剑灵：支线伴随这主线走，有所谓的“每日任务”，其实就是告诉你埋头刷就是了。等级一高就成了机械重复的劳动。有很重要的副本系统，进去之后就是无脑刷，完全脱离了游戏内的时空设定，让人忍不住吐槽主角你究竟是不是为师门报仇的？现在我玩都已经不看剧情的了。\n\n个人在这里重点说一下，我认为PSO2和鬼斬这样的任务安排比较合情合理，而剑灵给我的感觉就是刷刷刷，无聊。本质同样是刷副本，对比起另外两个副本任务能自然而然地发生，剑灵则是赤裸裸地鼓励玩家去刷。而副本难免会带剧情，剑灵的剧情安排却使得玩家一刷得多就会觉得脱离了游戏。比如我消灭了黑龙寨的那个头目，名字叫做暗黑龙（在这里名字很重要，它是物品的独立标识），第二天我又可以消灭她一遍，嗯？我这算是穿越了吗？打死同一个人两次？如果是打副本更离谱，几分钟就可以打死同一个boss两次了，带来的影响就是重复经历同一段时间的错觉，怎么也分不开。PSO2和鬼斬则不是，怪物都是没有名字的，boss也只是比较强的怪物，这一次打跟下一次可以解释成是不一样的怪。正是其独特的世界观，容易解释任务的重复是内容的重复而非时间的重复。时间的非重复保证了时间流是正常一条的，而反观剑灵则是多条叠加的。如果你看过命运石之门，那么这里的情况就跟凶真一次又一次看着真由里死的情况差不多。最后凶真都说自己麻木了，同样剑灵玩家也麻木了。人会因重复而麻木，重复的内容会越来越不重要，而重复的内容刚好是构筑世界的剧情的话，那么人就越来越脱离这个世界了。\n\n### 队伍\nPSO2：随着主线的进行，玩家可以跟某些NPC互动，提升其好感度至一定程度就可以在任务中一起组成队伍，并且同一个地图里面NPC应该是不会出现两个的。更厉害的是不在线好友也是可以作为队友加入的。个人认为这个很赞，可以令玩家更加沉浸在游戏世界中。NPC也会在队伍中扮演好真正队友的角色，会说一些符合情景的对话。每个NPC的性格不同又鲜明，即使玩家是一个人玩也不会寂寞。即使是玩家和玩家之间的交流也是很多的，我在同一个服务器的某个工会qq群上观察到他们经常都组队去玩，在大厅里面交流，整个工会在游戏里面照相留念什么的。\n\n鬼斬：跟PSO2一样，NPC也是可以增加好感度和加入队伍。不知道这是不是日本网游的特点。可惜暂时玩家人数太少，可供交流的选项也几乎没有，不知之后会不会加入相关的功能。\n\n剑灵：只有在刷副本和PK的时候需要队伍，队伍就是一个为降低副本难度而存在的临时组织。人员的流动性非常强，有可能你一进入副本，队友就跑了。很多时候，即使是组成了队伍，大家也是各打各的毫无交流，因为进了副本的人，基本就是来刷物品。\n\nPS：近来在剑灵里面跟着熟人打副本还是挺有意思的，因为我等级太低，打起来比较吃力。\n\n### 买卖\nPSO2：需要付费才能开店卖东西。其实没用的都可以用来喂玛古自己消化掉。\n\n鬼斬：貌似暂时只能跟NPC进行买卖，而且很多时候物品都紧缺，基本没有出售的欲望。\n\n剑灵：没啥特别的，玩家间可以互相买卖物品。只是拍卖行是个很蛋疼的设定，通常人们缺东西要用了才会想去买，急着要用的东西还要等实在说不过去。\n\n## 娱乐性\nPSO2：高。除了任务打怪还有很多其他可以做的。比如可以自己画画作为自定义表情发出去，在大厅经常可以看到有人发漂亮的图画。之前有一段时间很多人会在大厅里面一起跳舞。最令我印象深刻的是有一次大厅的大屏幕在播miku的视频，非常多的玩家坐在一起看，我想那是我在其他网游里从来没有看见过的、如此生活化的景象。舍得花钱的话也可以付费开通自己的房间，装饰上战利品，邀请好友来房间聊天或者游玩。\n\n鬼斬：暂时不好评价。12号正式运营，19号加入付费物品，系统也不太完善。但是但就剧情和游玩来说还过得去。\n\n剑灵：低。疯狂刷副本和PK占了整个游戏很大的一部分，如此单调和狂热带来的就是累和空虚。也没有其他有趣的东西，实在是可惜。即使有服装系统，在每个人都在奔波刷怪的时候，又有谁留意你身上穿了啥？不过话说回来，剑灵好像是个PVP的游戏，我暂时也没有打算去玩PK，所以也不敢肯定剑灵就不好玩，只能说我不太合适玩这类游戏。\n\n免费游戏的大问题是游戏的娱乐性，如果RMB玩家太过“叼”，影响了游戏的平衡性，那么游戏总是会无聊的；而不能激起玩家付费的欲望，那么游戏又是会经营不下去的。这些游戏基本上都能使用金钱来加快角色或者加强角色，而PSO2在基础的武器购买、经验购买和钱财使用上吸引玩家付费外，还有各种相比起来更加注重“精神消费”的无形消费，免费玩家可以玩得开心，付费玩家也付得高兴。剑灵的话，你不想付费，那么就麻木地刷，刷到麻木吧。\n\n### 一句话评论\nPSO2：很好玩，但是玩不了。\n\n鬼斬：可以玩，看以后发展。\n\n剑灵：可以玩，什么时候受不了就不玩。\n\n### 个人喜爱度：PSO2>鬼斬>剑灵","source":"_posts/PSO2-鬼斬-剑灵，网游个人分析和感受.md","raw":"---\ntitle: PSO2/鬼斬/剑灵，网游个人分析和感受\ncategories:\n  - [ACGN, 游戏]\ntags: [pso2, 鬼斬, 剑灵, MMORPG]\npermalink: pso2-onigiri-bladesoul-personal-comment\nid: 24\nupdated: '2014-04-15 15:40:42'\ndate: 2014-01-23 03:57:59\n---\n\n我玩的网游很少，而且都只玩免费网游。目前为止，曾经坚持玩下去的网游就只有洛奇、洛奇英雄传、Phantasy Star Online 2、鬼斬和剑灵。其中洛奇和洛英玩了比较短的一段时间后已弃，原因是玩得太寂寞。重点说说个人对后三个游戏的感受好了。受游戏知识和运行环境的影响，个人观点难免有所偏差。\n简单介绍（非常短，详细请自行Google去）\n\n![pso2](http://s13.sinaimg.cn/mw690/0020TQz1gy6FaGSjd6c3c)\n\nPSO2：如果我说Phantasy Star的中文名字是梦幻之星的话，会不会有很多人恍然大悟。游戏类型是ARPG，游戏背景是宇宙，有剑士枪手魔法师等职业选择。\n\n![onigiri](http://s1.sinaimg.cn/mw690/0020TQz1gy6FaH1boas40)\n\n鬼斬：十分新的一个网游，13.12.12才正式运营。中文资料很少，台服官网介绍是“和风无锁定MMORPG”。何谓无锁定，后面会大概说说。公司是Cyberstep（没听过……），题材大概是奇幻系列，NPC的名字是什么“靜御前”“義經”之类的日本古人名字。\n\n剑灵：近来在中国很火啊，大概玩过网游的人都知道，不多说了。\n\n### 玩的理由&近况\nPSO2：在PSP上玩过《梦幻之星2》，既然出了online版那就去玩一玩，结果发现不错，于是就一直玩了。后来SEGA限制了非日本IP的登录，我没有日本VPN于是玩不了了。近来看到有英文版的主页，估计会出欧服或者美服？不知何年何月了。\n\n鬼斬：在网上偶然看到介绍，画风十分讨喜，游戏官网也做得很好（是旧的日服官网，参考台服官网），看宣传片也觉得有兴趣。游戏当时宣布是点卡制，后来改成了无料，不玩似乎说不过去（锚定效应起作用了）。只是这货更新很成问题，我挂VPN更新经常失败，也不知道为什么，暂时在靠贴吧的雷锋过日子。但是一旦更新好了，玩起来是不成问题的。\n\n剑灵：听说跳票了很久的一个游戏，实验室里面曾经有朋友说这个游戏公测了就和我一起玩，现在公测了就只有我下载了来玩。在某个区开了一个号，因为太寂寞了就换了另外一个班里的同学都在的区。现在一边追赶班里的同学的级数一边合武器和首饰中。\n\n### 操作\nPSO2：上手容易，打怪有准星锁定，但是只要打中怪就能扣血。特色是怪是有弱点的，如果能瞄准弱点，则事半功倍，反之事倍功半，所以打boss都是瞄准弱点打。网上有1血挑boss的神触视频。不同类型的武器都有特定的招式，招式需要事先组合好，通过左右键发出。\n\n鬼斬：无锁定，就是不会帮你将武器的输出自动定位到怪上。虽然也有准星，但是作用只是提示你怪在武器的有效距离以内而已，跟怪物猎人比较像，也是我很欣赏的一点。上手比较难，但是能以技巧挑boss，娱乐性更强。武器的普通招式是固定的，长按或者多次按左键连击发出，但是不同武器是有不同的三种特殊攻击，通过123键或者q键切换，右键发出。\n\n剑灵：什么都不说了，上手极其容易，等级和武器决定一切。虽然有一个合击和打断，但是比起等级和武器的重要性，实在是比较低。不同职业有不同的招式，1到4和z到v，八种招式随便放，合击要配合空格和f，实在是要人精分……当然有组织的出招才能保证打得怪起不来。\n\n### 声音\nPSO2：背景乐不错啊，重点是NPC的配音请了有名的声优！名声优的声音包也是作为商品还是赠品来着。\n\n鬼斬：不同地图音乐不同，在副本任务中音乐也一直有。感觉很是配合这个游戏的和风风格，反正听起来很舒服。\n\n剑灵：在记忆中似乎是不错来着，可惜好像只是出现在跑地图的时候。在副本任务中好像没啥背景音乐？我现在是关掉音乐然后在nico听广播来玩的。\n\n画面（我的机子烂，不敢妄评）\nPSO2：我只开中级画面，已经很好看了。曾经试过开高级画面，机子温度狂飙升。但是高级画面下的水面超漂亮。\n\n鬼斬：非常恶心的没有调整画质等的选项，只有全屏和桌面两种切换，切换的时候还会崩溃。\n\n剑灵：除了不用最低配置外，所有质量调最低，保证操作顺畅。长期二十来帧……\nPS：我的机子还是只用来编程算了……\n\n### 武器系统-使用（太庞大，挑重点和特点说）\nPSO2：可以设定几种武器，战斗的时候随时切换以适应地形和怪物。\n鬼斬：可以设定最多4种武器，随时切换，因为很有可能一种武器都打烂了还没有打通……\n\n剑灵：一个职业只能用一种武器，而几乎所有人都是用同一把武器……\n\n### 武器系统-进化\nPSO2：大概没有人不会痛恨负责武器研磨的大叔。这游戏打出了武器之后，有时需要鉴定，并且可以通过研磨石使武器逐渐进化上最高的十星级，但是研磨是会失败的，失败的时候那个大叔还会嘲讽说“你的运气真差啊”。有可能你挥霍了99个一组的研磨石，最后武器反而变差了，实在是比较坑。另外也可以给武器附加属性什么的。同一类武器有很多种，不同武器样子也不一样。除了职业限定的武器，你尽管用，自由得很。在游戏里看到的不同人行头和武器都很不一样，个人感很是强烈。\n\n鬼斬：玩的时间不长，拿到的武器不多。武器掉落后需要给“靜御前”来鉴定，“義經”来强化或者修理。是“武器喂武器”的模式，武器的种类也比较多。\n\n剑灵：相信几乎每个人都是拿着体制武器的吧，也就是只要职业形同，那么基本上必定是洪门、妖魔这样升上去，毫无新意。武器的成长和进化需要大量其他同种武器的堆砌和各种稀有辅助材料。而这一切的结果，最后也不过是得到了跟别人一模一样的行头和能力，但你要在这个游戏里面生存下去，就不得不这样干。这模式是不是很熟悉？要我说在游戏里面也得这样做也实在太悲哀了。\n\n### 辅助系统\nPSO2：一定等级可以拿到一只玛古，就是宠物了，喂各种各样的东西可以成长和进化。因为喂不同的东西进化的路线不同，所以有专门的研究。我是随便喂的了……身上三个地方可以加上辅助道具。战斗前可以加官方提供的buff，而且是要钱的。\n\n鬼斬：暂时来说无宠无坐骑，估计以后也不会有。只有勾玉这一样辅助道具。比较特殊的还有有时间限制的“酒”。\n\n剑灵：无宠无坐骑。有一个独特的八卦牌的设定可以得到多种辅助加成，凑齐一套有套装加成。配合跟武器一样是体制式的首饰（喂武器还不够……），基本都是RPG的一贯设定了。\n\n### 任务&副本\nPSO2：任务都是在飞船内找NPC领任务然后传送到星球上进行，集中方便，利于同一个服务器的玩家们交流。任务都是一些以“探索”和“讨伐”为主题，这都是由梦幻之星的世界观设定决定的。任务可以选择难度，以适应不同等级的玩家。地图应该都是随机地图，但多走几次可以发现其实地图的走向也是有一定的大趋势的。不定时会出现“紧急任务”，通常就是特殊地图供你练级，个人或者队伍打地图boss。大更新比较频繁，新的地图和boss足够你去玩。\n\n鬼斬：支线随主线走，做完了就没了。地图副本随便进去刷，可以选择“仁”“皇”“神”三种难度，地图固定，怪物固定。\n\n剑灵：支线伴随这主线走，有所谓的“每日任务”，其实就是告诉你埋头刷就是了。等级一高就成了机械重复的劳动。有很重要的副本系统，进去之后就是无脑刷，完全脱离了游戏内的时空设定，让人忍不住吐槽主角你究竟是不是为师门报仇的？现在我玩都已经不看剧情的了。\n\n个人在这里重点说一下，我认为PSO2和鬼斬这样的任务安排比较合情合理，而剑灵给我的感觉就是刷刷刷，无聊。本质同样是刷副本，对比起另外两个副本任务能自然而然地发生，剑灵则是赤裸裸地鼓励玩家去刷。而副本难免会带剧情，剑灵的剧情安排却使得玩家一刷得多就会觉得脱离了游戏。比如我消灭了黑龙寨的那个头目，名字叫做暗黑龙（在这里名字很重要，它是物品的独立标识），第二天我又可以消灭她一遍，嗯？我这算是穿越了吗？打死同一个人两次？如果是打副本更离谱，几分钟就可以打死同一个boss两次了，带来的影响就是重复经历同一段时间的错觉，怎么也分不开。PSO2和鬼斬则不是，怪物都是没有名字的，boss也只是比较强的怪物，这一次打跟下一次可以解释成是不一样的怪。正是其独特的世界观，容易解释任务的重复是内容的重复而非时间的重复。时间的非重复保证了时间流是正常一条的，而反观剑灵则是多条叠加的。如果你看过命运石之门，那么这里的情况就跟凶真一次又一次看着真由里死的情况差不多。最后凶真都说自己麻木了，同样剑灵玩家也麻木了。人会因重复而麻木，重复的内容会越来越不重要，而重复的内容刚好是构筑世界的剧情的话，那么人就越来越脱离这个世界了。\n\n### 队伍\nPSO2：随着主线的进行，玩家可以跟某些NPC互动，提升其好感度至一定程度就可以在任务中一起组成队伍，并且同一个地图里面NPC应该是不会出现两个的。更厉害的是不在线好友也是可以作为队友加入的。个人认为这个很赞，可以令玩家更加沉浸在游戏世界中。NPC也会在队伍中扮演好真正队友的角色，会说一些符合情景的对话。每个NPC的性格不同又鲜明，即使玩家是一个人玩也不会寂寞。即使是玩家和玩家之间的交流也是很多的，我在同一个服务器的某个工会qq群上观察到他们经常都组队去玩，在大厅里面交流，整个工会在游戏里面照相留念什么的。\n\n鬼斬：跟PSO2一样，NPC也是可以增加好感度和加入队伍。不知道这是不是日本网游的特点。可惜暂时玩家人数太少，可供交流的选项也几乎没有，不知之后会不会加入相关的功能。\n\n剑灵：只有在刷副本和PK的时候需要队伍，队伍就是一个为降低副本难度而存在的临时组织。人员的流动性非常强，有可能你一进入副本，队友就跑了。很多时候，即使是组成了队伍，大家也是各打各的毫无交流，因为进了副本的人，基本就是来刷物品。\n\nPS：近来在剑灵里面跟着熟人打副本还是挺有意思的，因为我等级太低，打起来比较吃力。\n\n### 买卖\nPSO2：需要付费才能开店卖东西。其实没用的都可以用来喂玛古自己消化掉。\n\n鬼斬：貌似暂时只能跟NPC进行买卖，而且很多时候物品都紧缺，基本没有出售的欲望。\n\n剑灵：没啥特别的，玩家间可以互相买卖物品。只是拍卖行是个很蛋疼的设定，通常人们缺东西要用了才会想去买，急着要用的东西还要等实在说不过去。\n\n## 娱乐性\nPSO2：高。除了任务打怪还有很多其他可以做的。比如可以自己画画作为自定义表情发出去，在大厅经常可以看到有人发漂亮的图画。之前有一段时间很多人会在大厅里面一起跳舞。最令我印象深刻的是有一次大厅的大屏幕在播miku的视频，非常多的玩家坐在一起看，我想那是我在其他网游里从来没有看见过的、如此生活化的景象。舍得花钱的话也可以付费开通自己的房间，装饰上战利品，邀请好友来房间聊天或者游玩。\n\n鬼斬：暂时不好评价。12号正式运营，19号加入付费物品，系统也不太完善。但是但就剧情和游玩来说还过得去。\n\n剑灵：低。疯狂刷副本和PK占了整个游戏很大的一部分，如此单调和狂热带来的就是累和空虚。也没有其他有趣的东西，实在是可惜。即使有服装系统，在每个人都在奔波刷怪的时候，又有谁留意你身上穿了啥？不过话说回来，剑灵好像是个PVP的游戏，我暂时也没有打算去玩PK，所以也不敢肯定剑灵就不好玩，只能说我不太合适玩这类游戏。\n\n免费游戏的大问题是游戏的娱乐性，如果RMB玩家太过“叼”，影响了游戏的平衡性，那么游戏总是会无聊的；而不能激起玩家付费的欲望，那么游戏又是会经营不下去的。这些游戏基本上都能使用金钱来加快角色或者加强角色，而PSO2在基础的武器购买、经验购买和钱财使用上吸引玩家付费外，还有各种相比起来更加注重“精神消费”的无形消费，免费玩家可以玩得开心，付费玩家也付得高兴。剑灵的话，你不想付费，那么就麻木地刷，刷到麻木吧。\n\n### 一句话评论\nPSO2：很好玩，但是玩不了。\n\n鬼斬：可以玩，看以后发展。\n\n剑灵：可以玩，什么时候受不了就不玩。\n\n### 个人喜爱度：PSO2>鬼斬>剑灵","slug":"pso2-onigiri-bladesoul-personal-comment","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyurz0065n7t4pz3cwhl8","content":"<p>我玩的网游很少，而且都只玩免费网游。目前为止，曾经坚持玩下去的网游就只有洛奇、洛奇英雄传、Phantasy Star Online 2、鬼斬和剑灵。其中洛奇和洛英玩了比较短的一段时间后已弃，原因是玩得太寂寞。重点说说个人对后三个游戏的感受好了。受游戏知识和运行环境的影响，个人观点难免有所偏差。<br>简单介绍（非常短，详细请自行Google去）</p>\n<p><img src=\"http://s13.sinaimg.cn/mw690/0020TQz1gy6FaGSjd6c3c\" alt=\"pso2\"></p>\n<p>PSO2：如果我说Phantasy Star的中文名字是梦幻之星的话，会不会有很多人恍然大悟。游戏类型是ARPG，游戏背景是宇宙，有剑士枪手魔法师等职业选择。</p>\n<p><img src=\"http://s1.sinaimg.cn/mw690/0020TQz1gy6FaH1boas40\" alt=\"onigiri\"></p>\n<p>鬼斬：十分新的一个网游，13.12.12才正式运营。中文资料很少，台服官网介绍是“和风无锁定MMORPG”。何谓无锁定，后面会大概说说。公司是Cyberstep（没听过……），题材大概是奇幻系列，NPC的名字是什么“靜御前”“義經”之类的日本古人名字。</p>\n<p>剑灵：近来在中国很火啊，大概玩过网游的人都知道，不多说了。</p>\n<h3 id=\"玩的理由-amp-近况\"><a href=\"#玩的理由-amp-近况\" class=\"headerlink\" title=\"玩的理由&amp;近况\"></a>玩的理由&amp;近况</h3><p>PSO2：在PSP上玩过《梦幻之星2》，既然出了online版那就去玩一玩，结果发现不错，于是就一直玩了。后来SEGA限制了非日本IP的登录，我没有日本VPN于是玩不了了。近来看到有英文版的主页，估计会出欧服或者美服？不知何年何月了。</p>\n<p>鬼斬：在网上偶然看到介绍，画风十分讨喜，游戏官网也做得很好（是旧的日服官网，参考台服官网），看宣传片也觉得有兴趣。游戏当时宣布是点卡制，后来改成了无料，不玩似乎说不过去（锚定效应起作用了）。只是这货更新很成问题，我挂VPN更新经常失败，也不知道为什么，暂时在靠贴吧的雷锋过日子。但是一旦更新好了，玩起来是不成问题的。</p>\n<p>剑灵：听说跳票了很久的一个游戏，实验室里面曾经有朋友说这个游戏公测了就和我一起玩，现在公测了就只有我下载了来玩。在某个区开了一个号，因为太寂寞了就换了另外一个班里的同学都在的区。现在一边追赶班里的同学的级数一边合武器和首饰中。</p>\n<h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><p>PSO2：上手容易，打怪有准星锁定，但是只要打中怪就能扣血。特色是怪是有弱点的，如果能瞄准弱点，则事半功倍，反之事倍功半，所以打boss都是瞄准弱点打。网上有1血挑boss的神触视频。不同类型的武器都有特定的招式，招式需要事先组合好，通过左右键发出。</p>\n<p>鬼斬：无锁定，就是不会帮你将武器的输出自动定位到怪上。虽然也有准星，但是作用只是提示你怪在武器的有效距离以内而已，跟怪物猎人比较像，也是我很欣赏的一点。上手比较难，但是能以技巧挑boss，娱乐性更强。武器的普通招式是固定的，长按或者多次按左键连击发出，但是不同武器是有不同的三种特殊攻击，通过123键或者q键切换，右键发出。</p>\n<p>剑灵：什么都不说了，上手极其容易，等级和武器决定一切。虽然有一个合击和打断，但是比起等级和武器的重要性，实在是比较低。不同职业有不同的招式，1到4和z到v，八种招式随便放，合击要配合空格和f，实在是要人精分……当然有组织的出招才能保证打得怪起不来。</p>\n<h3 id=\"声音\"><a href=\"#声音\" class=\"headerlink\" title=\"声音\"></a>声音</h3><p>PSO2：背景乐不错啊，重点是NPC的配音请了有名的声优！名声优的声音包也是作为商品还是赠品来着。</p>\n<p>鬼斬：不同地图音乐不同，在副本任务中音乐也一直有。感觉很是配合这个游戏的和风风格，反正听起来很舒服。</p>\n<p>剑灵：在记忆中似乎是不错来着，可惜好像只是出现在跑地图的时候。在副本任务中好像没啥背景音乐？我现在是关掉音乐然后在nico听广播来玩的。</p>\n<p>画面（我的机子烂，不敢妄评）<br>PSO2：我只开中级画面，已经很好看了。曾经试过开高级画面，机子温度狂飙升。但是高级画面下的水面超漂亮。</p>\n<p>鬼斬：非常恶心的没有调整画质等的选项，只有全屏和桌面两种切换，切换的时候还会崩溃。</p>\n<p>剑灵：除了不用最低配置外，所有质量调最低，保证操作顺畅。长期二十来帧……<br>PS：我的机子还是只用来编程算了……</p>\n<h3 id=\"武器系统-使用（太庞大，挑重点和特点说）\"><a href=\"#武器系统-使用（太庞大，挑重点和特点说）\" class=\"headerlink\" title=\"武器系统-使用（太庞大，挑重点和特点说）\"></a>武器系统-使用（太庞大，挑重点和特点说）</h3><p>PSO2：可以设定几种武器，战斗的时候随时切换以适应地形和怪物。<br>鬼斬：可以设定最多4种武器，随时切换，因为很有可能一种武器都打烂了还没有打通……</p>\n<p>剑灵：一个职业只能用一种武器，而几乎所有人都是用同一把武器……</p>\n<h3 id=\"武器系统-进化\"><a href=\"#武器系统-进化\" class=\"headerlink\" title=\"武器系统-进化\"></a>武器系统-进化</h3><p>PSO2：大概没有人不会痛恨负责武器研磨的大叔。这游戏打出了武器之后，有时需要鉴定，并且可以通过研磨石使武器逐渐进化上最高的十星级，但是研磨是会失败的，失败的时候那个大叔还会嘲讽说“你的运气真差啊”。有可能你挥霍了99个一组的研磨石，最后武器反而变差了，实在是比较坑。另外也可以给武器附加属性什么的。同一类武器有很多种，不同武器样子也不一样。除了职业限定的武器，你尽管用，自由得很。在游戏里看到的不同人行头和武器都很不一样，个人感很是强烈。</p>\n<p>鬼斬：玩的时间不长，拿到的武器不多。武器掉落后需要给“靜御前”来鉴定，“義經”来强化或者修理。是“武器喂武器”的模式，武器的种类也比较多。</p>\n<p>剑灵：相信几乎每个人都是拿着体制武器的吧，也就是只要职业形同，那么基本上必定是洪门、妖魔这样升上去，毫无新意。武器的成长和进化需要大量其他同种武器的堆砌和各种稀有辅助材料。而这一切的结果，最后也不过是得到了跟别人一模一样的行头和能力，但你要在这个游戏里面生存下去，就不得不这样干。这模式是不是很熟悉？要我说在游戏里面也得这样做也实在太悲哀了。</p>\n<h3 id=\"辅助系统\"><a href=\"#辅助系统\" class=\"headerlink\" title=\"辅助系统\"></a>辅助系统</h3><p>PSO2：一定等级可以拿到一只玛古，就是宠物了，喂各种各样的东西可以成长和进化。因为喂不同的东西进化的路线不同，所以有专门的研究。我是随便喂的了……身上三个地方可以加上辅助道具。战斗前可以加官方提供的buff，而且是要钱的。</p>\n<p>鬼斬：暂时来说无宠无坐骑，估计以后也不会有。只有勾玉这一样辅助道具。比较特殊的还有有时间限制的“酒”。</p>\n<p>剑灵：无宠无坐骑。有一个独特的八卦牌的设定可以得到多种辅助加成，凑齐一套有套装加成。配合跟武器一样是体制式的首饰（喂武器还不够……），基本都是RPG的一贯设定了。</p>\n<h3 id=\"任务-amp-副本\"><a href=\"#任务-amp-副本\" class=\"headerlink\" title=\"任务&amp;副本\"></a>任务&amp;副本</h3><p>PSO2：任务都是在飞船内找NPC领任务然后传送到星球上进行，集中方便，利于同一个服务器的玩家们交流。任务都是一些以“探索”和“讨伐”为主题，这都是由梦幻之星的世界观设定决定的。任务可以选择难度，以适应不同等级的玩家。地图应该都是随机地图，但多走几次可以发现其实地图的走向也是有一定的大趋势的。不定时会出现“紧急任务”，通常就是特殊地图供你练级，个人或者队伍打地图boss。大更新比较频繁，新的地图和boss足够你去玩。</p>\n<p>鬼斬：支线随主线走，做完了就没了。地图副本随便进去刷，可以选择“仁”“皇”“神”三种难度，地图固定，怪物固定。</p>\n<p>剑灵：支线伴随这主线走，有所谓的“每日任务”，其实就是告诉你埋头刷就是了。等级一高就成了机械重复的劳动。有很重要的副本系统，进去之后就是无脑刷，完全脱离了游戏内的时空设定，让人忍不住吐槽主角你究竟是不是为师门报仇的？现在我玩都已经不看剧情的了。</p>\n<p>个人在这里重点说一下，我认为PSO2和鬼斬这样的任务安排比较合情合理，而剑灵给我的感觉就是刷刷刷，无聊。本质同样是刷副本，对比起另外两个副本任务能自然而然地发生，剑灵则是赤裸裸地鼓励玩家去刷。而副本难免会带剧情，剑灵的剧情安排却使得玩家一刷得多就会觉得脱离了游戏。比如我消灭了黑龙寨的那个头目，名字叫做暗黑龙（在这里名字很重要，它是物品的独立标识），第二天我又可以消灭她一遍，嗯？我这算是穿越了吗？打死同一个人两次？如果是打副本更离谱，几分钟就可以打死同一个boss两次了，带来的影响就是重复经历同一段时间的错觉，怎么也分不开。PSO2和鬼斬则不是，怪物都是没有名字的，boss也只是比较强的怪物，这一次打跟下一次可以解释成是不一样的怪。正是其独特的世界观，容易解释任务的重复是内容的重复而非时间的重复。时间的非重复保证了时间流是正常一条的，而反观剑灵则是多条叠加的。如果你看过命运石之门，那么这里的情况就跟凶真一次又一次看着真由里死的情况差不多。最后凶真都说自己麻木了，同样剑灵玩家也麻木了。人会因重复而麻木，重复的内容会越来越不重要，而重复的内容刚好是构筑世界的剧情的话，那么人就越来越脱离这个世界了。</p>\n<h3 id=\"队伍\"><a href=\"#队伍\" class=\"headerlink\" title=\"队伍\"></a>队伍</h3><p>PSO2：随着主线的进行，玩家可以跟某些NPC互动，提升其好感度至一定程度就可以在任务中一起组成队伍，并且同一个地图里面NPC应该是不会出现两个的。更厉害的是不在线好友也是可以作为队友加入的。个人认为这个很赞，可以令玩家更加沉浸在游戏世界中。NPC也会在队伍中扮演好真正队友的角色，会说一些符合情景的对话。每个NPC的性格不同又鲜明，即使玩家是一个人玩也不会寂寞。即使是玩家和玩家之间的交流也是很多的，我在同一个服务器的某个工会qq群上观察到他们经常都组队去玩，在大厅里面交流，整个工会在游戏里面照相留念什么的。</p>\n<p>鬼斬：跟PSO2一样，NPC也是可以增加好感度和加入队伍。不知道这是不是日本网游的特点。可惜暂时玩家人数太少，可供交流的选项也几乎没有，不知之后会不会加入相关的功能。</p>\n<p>剑灵：只有在刷副本和PK的时候需要队伍，队伍就是一个为降低副本难度而存在的临时组织。人员的流动性非常强，有可能你一进入副本，队友就跑了。很多时候，即使是组成了队伍，大家也是各打各的毫无交流，因为进了副本的人，基本就是来刷物品。</p>\n<p>PS：近来在剑灵里面跟着熟人打副本还是挺有意思的，因为我等级太低，打起来比较吃力。</p>\n<h3 id=\"买卖\"><a href=\"#买卖\" class=\"headerlink\" title=\"买卖\"></a>买卖</h3><p>PSO2：需要付费才能开店卖东西。其实没用的都可以用来喂玛古自己消化掉。</p>\n<p>鬼斬：貌似暂时只能跟NPC进行买卖，而且很多时候物品都紧缺，基本没有出售的欲望。</p>\n<p>剑灵：没啥特别的，玩家间可以互相买卖物品。只是拍卖行是个很蛋疼的设定，通常人们缺东西要用了才会想去买，急着要用的东西还要等实在说不过去。</p>\n<h2 id=\"娱乐性\"><a href=\"#娱乐性\" class=\"headerlink\" title=\"娱乐性\"></a>娱乐性</h2><p>PSO2：高。除了任务打怪还有很多其他可以做的。比如可以自己画画作为自定义表情发出去，在大厅经常可以看到有人发漂亮的图画。之前有一段时间很多人会在大厅里面一起跳舞。最令我印象深刻的是有一次大厅的大屏幕在播miku的视频，非常多的玩家坐在一起看，我想那是我在其他网游里从来没有看见过的、如此生活化的景象。舍得花钱的话也可以付费开通自己的房间，装饰上战利品，邀请好友来房间聊天或者游玩。</p>\n<p>鬼斬：暂时不好评价。12号正式运营，19号加入付费物品，系统也不太完善。但是但就剧情和游玩来说还过得去。</p>\n<p>剑灵：低。疯狂刷副本和PK占了整个游戏很大的一部分，如此单调和狂热带来的就是累和空虚。也没有其他有趣的东西，实在是可惜。即使有服装系统，在每个人都在奔波刷怪的时候，又有谁留意你身上穿了啥？不过话说回来，剑灵好像是个PVP的游戏，我暂时也没有打算去玩PK，所以也不敢肯定剑灵就不好玩，只能说我不太合适玩这类游戏。</p>\n<p>免费游戏的大问题是游戏的娱乐性，如果RMB玩家太过“叼”，影响了游戏的平衡性，那么游戏总是会无聊的；而不能激起玩家付费的欲望，那么游戏又是会经营不下去的。这些游戏基本上都能使用金钱来加快角色或者加强角色，而PSO2在基础的武器购买、经验购买和钱财使用上吸引玩家付费外，还有各种相比起来更加注重“精神消费”的无形消费，免费玩家可以玩得开心，付费玩家也付得高兴。剑灵的话，你不想付费，那么就麻木地刷，刷到麻木吧。</p>\n<h3 id=\"一句话评论\"><a href=\"#一句话评论\" class=\"headerlink\" title=\"一句话评论\"></a>一句话评论</h3><p>PSO2：很好玩，但是玩不了。</p>\n<p>鬼斬：可以玩，看以后发展。</p>\n<p>剑灵：可以玩，什么时候受不了就不玩。</p>\n<h3 id=\"个人喜爱度：PSO2-gt-鬼斬-gt-剑灵\"><a href=\"#个人喜爱度：PSO2-gt-鬼斬-gt-剑灵\" class=\"headerlink\" title=\"个人喜爱度：PSO2&gt;鬼斬&gt;剑灵\"></a>个人喜爱度：PSO2&gt;鬼斬&gt;剑灵</h3>","site":{"data":{}},"excerpt":"","more":"<p>我玩的网游很少，而且都只玩免费网游。目前为止，曾经坚持玩下去的网游就只有洛奇、洛奇英雄传、Phantasy Star Online 2、鬼斬和剑灵。其中洛奇和洛英玩了比较短的一段时间后已弃，原因是玩得太寂寞。重点说说个人对后三个游戏的感受好了。受游戏知识和运行环境的影响，个人观点难免有所偏差。<br>简单介绍（非常短，详细请自行Google去）</p>\n<p><img src=\"http://s13.sinaimg.cn/mw690/0020TQz1gy6FaGSjd6c3c\" alt=\"pso2\"></p>\n<p>PSO2：如果我说Phantasy Star的中文名字是梦幻之星的话，会不会有很多人恍然大悟。游戏类型是ARPG，游戏背景是宇宙，有剑士枪手魔法师等职业选择。</p>\n<p><img src=\"http://s1.sinaimg.cn/mw690/0020TQz1gy6FaH1boas40\" alt=\"onigiri\"></p>\n<p>鬼斬：十分新的一个网游，13.12.12才正式运营。中文资料很少，台服官网介绍是“和风无锁定MMORPG”。何谓无锁定，后面会大概说说。公司是Cyberstep（没听过……），题材大概是奇幻系列，NPC的名字是什么“靜御前”“義經”之类的日本古人名字。</p>\n<p>剑灵：近来在中国很火啊，大概玩过网游的人都知道，不多说了。</p>\n<h3 id=\"玩的理由-amp-近况\"><a href=\"#玩的理由-amp-近况\" class=\"headerlink\" title=\"玩的理由&amp;近况\"></a>玩的理由&amp;近况</h3><p>PSO2：在PSP上玩过《梦幻之星2》，既然出了online版那就去玩一玩，结果发现不错，于是就一直玩了。后来SEGA限制了非日本IP的登录，我没有日本VPN于是玩不了了。近来看到有英文版的主页，估计会出欧服或者美服？不知何年何月了。</p>\n<p>鬼斬：在网上偶然看到介绍，画风十分讨喜，游戏官网也做得很好（是旧的日服官网，参考台服官网），看宣传片也觉得有兴趣。游戏当时宣布是点卡制，后来改成了无料，不玩似乎说不过去（锚定效应起作用了）。只是这货更新很成问题，我挂VPN更新经常失败，也不知道为什么，暂时在靠贴吧的雷锋过日子。但是一旦更新好了，玩起来是不成问题的。</p>\n<p>剑灵：听说跳票了很久的一个游戏，实验室里面曾经有朋友说这个游戏公测了就和我一起玩，现在公测了就只有我下载了来玩。在某个区开了一个号，因为太寂寞了就换了另外一个班里的同学都在的区。现在一边追赶班里的同学的级数一边合武器和首饰中。</p>\n<h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><p>PSO2：上手容易，打怪有准星锁定，但是只要打中怪就能扣血。特色是怪是有弱点的，如果能瞄准弱点，则事半功倍，反之事倍功半，所以打boss都是瞄准弱点打。网上有1血挑boss的神触视频。不同类型的武器都有特定的招式，招式需要事先组合好，通过左右键发出。</p>\n<p>鬼斬：无锁定，就是不会帮你将武器的输出自动定位到怪上。虽然也有准星，但是作用只是提示你怪在武器的有效距离以内而已，跟怪物猎人比较像，也是我很欣赏的一点。上手比较难，但是能以技巧挑boss，娱乐性更强。武器的普通招式是固定的，长按或者多次按左键连击发出，但是不同武器是有不同的三种特殊攻击，通过123键或者q键切换，右键发出。</p>\n<p>剑灵：什么都不说了，上手极其容易，等级和武器决定一切。虽然有一个合击和打断，但是比起等级和武器的重要性，实在是比较低。不同职业有不同的招式，1到4和z到v，八种招式随便放，合击要配合空格和f，实在是要人精分……当然有组织的出招才能保证打得怪起不来。</p>\n<h3 id=\"声音\"><a href=\"#声音\" class=\"headerlink\" title=\"声音\"></a>声音</h3><p>PSO2：背景乐不错啊，重点是NPC的配音请了有名的声优！名声优的声音包也是作为商品还是赠品来着。</p>\n<p>鬼斬：不同地图音乐不同，在副本任务中音乐也一直有。感觉很是配合这个游戏的和风风格，反正听起来很舒服。</p>\n<p>剑灵：在记忆中似乎是不错来着，可惜好像只是出现在跑地图的时候。在副本任务中好像没啥背景音乐？我现在是关掉音乐然后在nico听广播来玩的。</p>\n<p>画面（我的机子烂，不敢妄评）<br>PSO2：我只开中级画面，已经很好看了。曾经试过开高级画面，机子温度狂飙升。但是高级画面下的水面超漂亮。</p>\n<p>鬼斬：非常恶心的没有调整画质等的选项，只有全屏和桌面两种切换，切换的时候还会崩溃。</p>\n<p>剑灵：除了不用最低配置外，所有质量调最低，保证操作顺畅。长期二十来帧……<br>PS：我的机子还是只用来编程算了……</p>\n<h3 id=\"武器系统-使用（太庞大，挑重点和特点说）\"><a href=\"#武器系统-使用（太庞大，挑重点和特点说）\" class=\"headerlink\" title=\"武器系统-使用（太庞大，挑重点和特点说）\"></a>武器系统-使用（太庞大，挑重点和特点说）</h3><p>PSO2：可以设定几种武器，战斗的时候随时切换以适应地形和怪物。<br>鬼斬：可以设定最多4种武器，随时切换，因为很有可能一种武器都打烂了还没有打通……</p>\n<p>剑灵：一个职业只能用一种武器，而几乎所有人都是用同一把武器……</p>\n<h3 id=\"武器系统-进化\"><a href=\"#武器系统-进化\" class=\"headerlink\" title=\"武器系统-进化\"></a>武器系统-进化</h3><p>PSO2：大概没有人不会痛恨负责武器研磨的大叔。这游戏打出了武器之后，有时需要鉴定，并且可以通过研磨石使武器逐渐进化上最高的十星级，但是研磨是会失败的，失败的时候那个大叔还会嘲讽说“你的运气真差啊”。有可能你挥霍了99个一组的研磨石，最后武器反而变差了，实在是比较坑。另外也可以给武器附加属性什么的。同一类武器有很多种，不同武器样子也不一样。除了职业限定的武器，你尽管用，自由得很。在游戏里看到的不同人行头和武器都很不一样，个人感很是强烈。</p>\n<p>鬼斬：玩的时间不长，拿到的武器不多。武器掉落后需要给“靜御前”来鉴定，“義經”来强化或者修理。是“武器喂武器”的模式，武器的种类也比较多。</p>\n<p>剑灵：相信几乎每个人都是拿着体制武器的吧，也就是只要职业形同，那么基本上必定是洪门、妖魔这样升上去，毫无新意。武器的成长和进化需要大量其他同种武器的堆砌和各种稀有辅助材料。而这一切的结果，最后也不过是得到了跟别人一模一样的行头和能力，但你要在这个游戏里面生存下去，就不得不这样干。这模式是不是很熟悉？要我说在游戏里面也得这样做也实在太悲哀了。</p>\n<h3 id=\"辅助系统\"><a href=\"#辅助系统\" class=\"headerlink\" title=\"辅助系统\"></a>辅助系统</h3><p>PSO2：一定等级可以拿到一只玛古，就是宠物了，喂各种各样的东西可以成长和进化。因为喂不同的东西进化的路线不同，所以有专门的研究。我是随便喂的了……身上三个地方可以加上辅助道具。战斗前可以加官方提供的buff，而且是要钱的。</p>\n<p>鬼斬：暂时来说无宠无坐骑，估计以后也不会有。只有勾玉这一样辅助道具。比较特殊的还有有时间限制的“酒”。</p>\n<p>剑灵：无宠无坐骑。有一个独特的八卦牌的设定可以得到多种辅助加成，凑齐一套有套装加成。配合跟武器一样是体制式的首饰（喂武器还不够……），基本都是RPG的一贯设定了。</p>\n<h3 id=\"任务-amp-副本\"><a href=\"#任务-amp-副本\" class=\"headerlink\" title=\"任务&amp;副本\"></a>任务&amp;副本</h3><p>PSO2：任务都是在飞船内找NPC领任务然后传送到星球上进行，集中方便，利于同一个服务器的玩家们交流。任务都是一些以“探索”和“讨伐”为主题，这都是由梦幻之星的世界观设定决定的。任务可以选择难度，以适应不同等级的玩家。地图应该都是随机地图，但多走几次可以发现其实地图的走向也是有一定的大趋势的。不定时会出现“紧急任务”，通常就是特殊地图供你练级，个人或者队伍打地图boss。大更新比较频繁，新的地图和boss足够你去玩。</p>\n<p>鬼斬：支线随主线走，做完了就没了。地图副本随便进去刷，可以选择“仁”“皇”“神”三种难度，地图固定，怪物固定。</p>\n<p>剑灵：支线伴随这主线走，有所谓的“每日任务”，其实就是告诉你埋头刷就是了。等级一高就成了机械重复的劳动。有很重要的副本系统，进去之后就是无脑刷，完全脱离了游戏内的时空设定，让人忍不住吐槽主角你究竟是不是为师门报仇的？现在我玩都已经不看剧情的了。</p>\n<p>个人在这里重点说一下，我认为PSO2和鬼斬这样的任务安排比较合情合理，而剑灵给我的感觉就是刷刷刷，无聊。本质同样是刷副本，对比起另外两个副本任务能自然而然地发生，剑灵则是赤裸裸地鼓励玩家去刷。而副本难免会带剧情，剑灵的剧情安排却使得玩家一刷得多就会觉得脱离了游戏。比如我消灭了黑龙寨的那个头目，名字叫做暗黑龙（在这里名字很重要，它是物品的独立标识），第二天我又可以消灭她一遍，嗯？我这算是穿越了吗？打死同一个人两次？如果是打副本更离谱，几分钟就可以打死同一个boss两次了，带来的影响就是重复经历同一段时间的错觉，怎么也分不开。PSO2和鬼斬则不是，怪物都是没有名字的，boss也只是比较强的怪物，这一次打跟下一次可以解释成是不一样的怪。正是其独特的世界观，容易解释任务的重复是内容的重复而非时间的重复。时间的非重复保证了时间流是正常一条的，而反观剑灵则是多条叠加的。如果你看过命运石之门，那么这里的情况就跟凶真一次又一次看着真由里死的情况差不多。最后凶真都说自己麻木了，同样剑灵玩家也麻木了。人会因重复而麻木，重复的内容会越来越不重要，而重复的内容刚好是构筑世界的剧情的话，那么人就越来越脱离这个世界了。</p>\n<h3 id=\"队伍\"><a href=\"#队伍\" class=\"headerlink\" title=\"队伍\"></a>队伍</h3><p>PSO2：随着主线的进行，玩家可以跟某些NPC互动，提升其好感度至一定程度就可以在任务中一起组成队伍，并且同一个地图里面NPC应该是不会出现两个的。更厉害的是不在线好友也是可以作为队友加入的。个人认为这个很赞，可以令玩家更加沉浸在游戏世界中。NPC也会在队伍中扮演好真正队友的角色，会说一些符合情景的对话。每个NPC的性格不同又鲜明，即使玩家是一个人玩也不会寂寞。即使是玩家和玩家之间的交流也是很多的，我在同一个服务器的某个工会qq群上观察到他们经常都组队去玩，在大厅里面交流，整个工会在游戏里面照相留念什么的。</p>\n<p>鬼斬：跟PSO2一样，NPC也是可以增加好感度和加入队伍。不知道这是不是日本网游的特点。可惜暂时玩家人数太少，可供交流的选项也几乎没有，不知之后会不会加入相关的功能。</p>\n<p>剑灵：只有在刷副本和PK的时候需要队伍，队伍就是一个为降低副本难度而存在的临时组织。人员的流动性非常强，有可能你一进入副本，队友就跑了。很多时候，即使是组成了队伍，大家也是各打各的毫无交流，因为进了副本的人，基本就是来刷物品。</p>\n<p>PS：近来在剑灵里面跟着熟人打副本还是挺有意思的，因为我等级太低，打起来比较吃力。</p>\n<h3 id=\"买卖\"><a href=\"#买卖\" class=\"headerlink\" title=\"买卖\"></a>买卖</h3><p>PSO2：需要付费才能开店卖东西。其实没用的都可以用来喂玛古自己消化掉。</p>\n<p>鬼斬：貌似暂时只能跟NPC进行买卖，而且很多时候物品都紧缺，基本没有出售的欲望。</p>\n<p>剑灵：没啥特别的，玩家间可以互相买卖物品。只是拍卖行是个很蛋疼的设定，通常人们缺东西要用了才会想去买，急着要用的东西还要等实在说不过去。</p>\n<h2 id=\"娱乐性\"><a href=\"#娱乐性\" class=\"headerlink\" title=\"娱乐性\"></a>娱乐性</h2><p>PSO2：高。除了任务打怪还有很多其他可以做的。比如可以自己画画作为自定义表情发出去，在大厅经常可以看到有人发漂亮的图画。之前有一段时间很多人会在大厅里面一起跳舞。最令我印象深刻的是有一次大厅的大屏幕在播miku的视频，非常多的玩家坐在一起看，我想那是我在其他网游里从来没有看见过的、如此生活化的景象。舍得花钱的话也可以付费开通自己的房间，装饰上战利品，邀请好友来房间聊天或者游玩。</p>\n<p>鬼斬：暂时不好评价。12号正式运营，19号加入付费物品，系统也不太完善。但是但就剧情和游玩来说还过得去。</p>\n<p>剑灵：低。疯狂刷副本和PK占了整个游戏很大的一部分，如此单调和狂热带来的就是累和空虚。也没有其他有趣的东西，实在是可惜。即使有服装系统，在每个人都在奔波刷怪的时候，又有谁留意你身上穿了啥？不过话说回来，剑灵好像是个PVP的游戏，我暂时也没有打算去玩PK，所以也不敢肯定剑灵就不好玩，只能说我不太合适玩这类游戏。</p>\n<p>免费游戏的大问题是游戏的娱乐性，如果RMB玩家太过“叼”，影响了游戏的平衡性，那么游戏总是会无聊的；而不能激起玩家付费的欲望，那么游戏又是会经营不下去的。这些游戏基本上都能使用金钱来加快角色或者加强角色，而PSO2在基础的武器购买、经验购买和钱财使用上吸引玩家付费外，还有各种相比起来更加注重“精神消费”的无形消费，免费玩家可以玩得开心，付费玩家也付得高兴。剑灵的话，你不想付费，那么就麻木地刷，刷到麻木吧。</p>\n<h3 id=\"一句话评论\"><a href=\"#一句话评论\" class=\"headerlink\" title=\"一句话评论\"></a>一句话评论</h3><p>PSO2：很好玩，但是玩不了。</p>\n<p>鬼斬：可以玩，看以后发展。</p>\n<p>剑灵：可以玩，什么时候受不了就不玩。</p>\n<h3 id=\"个人喜爱度：PSO2-gt-鬼斬-gt-剑灵\"><a href=\"#个人喜爱度：PSO2-gt-鬼斬-gt-剑灵\" class=\"headerlink\" title=\"个人喜爱度：PSO2&gt;鬼斬&gt;剑灵\"></a>个人喜爱度：PSO2&gt;鬼斬&gt;剑灵</h3>","popularPost_tmp_postPath":true,"eyeCatchImage":"http://s13.sinaimg.cn/mw690/0020TQz1gy6FaGSjd6c3c","popularPost_tmp_gaData":{"updated":"Tue Apr 15 2014 15:40:42 GMT+0800 (China Standard Time)","title":"PSO2/鬼斬/剑灵，网游个人分析和感受","path":"pso2-onigiri-bladesoul-personal-comment/","eyeCatchImage":"http://s13.sinaimg.cn/mw690/0020TQz1gy6FaGSjd6c3c","excerpt":null,"date":"2014-01-22T19:57:59.000Z","pv":0,"totalPV":0,"categories":"ACGN > 游戏","tags":["pso2","鬼斬","剑灵","MMORPG"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":4645},{"title":"不要再只会用 for 了","_content":"\n> No Silver Bullet\n\n## 老黄牛的 for\n\n![for-for-everywhere](https://i.imgflip.com/1y3pxa.jpg)\n\n几乎每一个编程语言都有 `for`，JavaScript 也不例外。\n\n在 JavsScript 中，`for` 广泛用于遍历数组中，也能用于遍历对象的属性。\n\n语法：\n\n```javascript\nfor ([initialization]; [condition]; [final-expression])\n   statement\n```\n\n`initialization` 是初始化语句，通常用于初始化计数变量（比如，你们最爱的 `i`）；`condition` 是判断本次是否执行 `statement`；`final-expression` 在 `statement` 执行完后执行，通常用于对计数变量进行变换。\n\n例如，要遍历一个数组 `arr`，那么可以这样写：\n\n```javascript\nfor (var i=0; i<arr.length; i++) {\n  ;// 做你爱做的事\n  // arr[i] 就能在每一次运行过程中取到在 arr 中的元素\n}\n```\n\n或者经常见到所谓的性能优化：\n\n```javascript\nfor (var i=0, len=arr.length; i<len; i++) {\n  ;// 做你爱做的事\n  // arr[i] 就能在每一次运行过程中取到在 arr 中的元素\n}\n```\n\n> 强烈建议使用 `const` 或 `let` 声明变量而不是使用 `var`，因为 `var` 会在 `for` 语句外声明变量，结果就是变量可能会在意外的地方被读取到。如果你不能使用 ES2015 或更新的版本，下文同样有解决方法（同样是本文的主要内容）。\n\n如果你写过 C 系列，那么你有可能忍不住自己的麒麟臂，写出「炫技」的代码来。比如 MDN 上的[这个例子][for-on-mdn]。\n\n```javascript\nfunction showOffsetPos(sId) {\n\n  var nLeft = 0, nTop = 0;\n\n  for (\n\n    var oItNode = document.getElementById(sId); /* initialization */\n\n      oItNode; /* condition */\n\n    nLeft += oItNode.offsetLeft, nTop += oItNode.offsetTop, oItNode = oItNode.offsetParent /* final-expression */\n\n  ); /* semicolon */\n\n  console.log('Offset position of \\'' + sId + '\\' element:\\n left: ' + nLeft + 'px;\\n top: ' + nTop + 'px;');\n\n}\n\n/* Example call: */\n\nshowOffsetPos('content');\n\n// Output:\n// \"Offset position of \"content\" element:\n// left: 0px;\n// top: 153px;\"\n```\n\n这么写看着很酷，但是实际上不要这样写，尤其是在团队合作中。这样的代码一是混杂难懂，二是难以维护。代码首先是写给人看的，接着才是给机器运行的。\n\n或许你已经非常习惯写 `for` 了，习惯到了看见一个数组就自然而然打出 `for (...)` 来。但是你有没有想过，很多时候，遍历数组其实跟索引并没有什么关系，代码只是要将数组里面的元素按顺序处理完。然而，**数组天然就应该是顺序的**，根本无需要一个额外的 `i` 来保证。换句话说，数组应该利用自身属性，提供无需索引的顺序读取方法，而索引只是在顺序读取的过程中的一个记录变量。\n\n那这样有什么优势呢？\n\n从处理流程上说，举个例子：假设你是一个接待员，工作是处理一列队伍的咨询。使用 `for` 的处理方法是：先计算整个队伍的长度，然后喊第一个人开始处理；每处理完一个人，就将序号加一再喊；直到序号等于队伍长度。而使用直接顺序读取的处理方法是：从队伍最前开始处理，每处理完一个，直接转到下一个重新开始处理，直到队伍没有下一个需要处理。这样以来就能省去了对队伍长度和索引的处理。\n\n从代码逻辑上说，在数组上提供顺序读取方法，是将全局的语法转化为了相当于成员函数的执行，解除了和全局的耦合的同时，结合链式调用和灵活的回调函数能解放出极大的数组处理潜力。你能轻松在一行代码内基于数组进行非常多而灵活的处理，并且将「肮脏」的处理过程隐藏起来，直接得到一个处理得「连你阿妈都唔识」的结果，干净利落。\n\n下面来认识一下这些顺序读取方法吧。\n\n[for-on-mdn]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\n\n## 优雅的 forEach, map, filter, reduce\n\n![forEach,map,filter,reduce](https://i.imgflip.com/1y3h2m.jpg)\n\n在 ES5（ES5.1） 中，JavaScript 新增了多个数组方法，包括：forEach, map, filter, reduce。\n\n每个方法都接受一个回调函数作为参数传入，每个方法都会在取得一个元素的时候调用此回调函数，不同在于不同方法对待回调函数的结果上。\n\n### forEach\n\nforEach 返回值为 undefined，适合通过数组来操作其他对象。\n\n```javascript\narr.forEach(function callback(currentValue, index, array) {\n    //your iterator\n}[, thisArg]);\n```\n\n### map\n\nmap 返回值为回调函数返回值组成的数组，适合处理数组变换。\n\n```javascript\nvar new_array = arr.map(function callback(currentValue, index, array) {\n    // Return element for new_array\n}[, thisArg])\n```\n\n### filter\n\nfilter 返回值为回调函数返回真所对应的元素组成的数组，适合处理数组筛选。\n\n```javascript\nvar new_array = arr.filter(function callback(currentValue, index, array) {\n    // Return true or false\n}[, thisArg])\n```\n\n### reduce\n\nreduce 返回值为初始值经过和每个元素作用后得到的最终值，适合遍历数组后得到一个值或者一个对象的情况。\n\n```javascript\nvar new_array = arr.reduce(function callback(accumulator, currentValue, index, array) {\n    // Return accumulator\n}[, initialValue])\n```\n\n> 别忘了在回调函数中返回结果！\n\n## 新方法新思路\n\n配合几个编写代码时的常见场景，看看不使用 `for` 的解决方法。\n\n### 循环多次执行某些动作\n\n给定一个数组，打印其元素。\n\n```javascript\nvar arr = [1, 2, 3]\n```\n\nfor\n\n```javascript\nfor (var i=0; i<arr.length; i++) {\n  console.log(arr[i])  // 1 2 3\n}\n```\n\n炫技\n\n```javascript\nfor (\n  var i=0;\n  i<arr.length;\n  console.log(arr[i++])\n  );\n```\n\n改写\n\n```javascript\narr.forEach(el => console.log(el))  // 1 2 3\n```\n\n### 对数组的每一个元素进行变换\n\n给定一个数组，将其元素都加一。\n\n```javascript\nvar arr = [1, 2, 3]\n```\n\nfor\n\n```javascript\nfor (var i=0; i<arr.length; i++) {\n  arr[i] = arr[i] + 1\n}\n```\n\n炫技\n\n```javascript\nfor (\n  var i=0;\n  i<arr.length;\n  arr[i] = arr[i++] + 1\n  );\n```\n\n改写\n\n```javascript\narr.forEach((el, i, ar) => ar[i] = ar[i] + 1)\n```\n\n更好\n\n```javascript\nconst newArr = arr.map(el => el + 1)\n```\n\n> 在允许的情况下尽量不要去修改原数据，而是返回一个新的数组。\n\n### \b提取数组中符合某个标准的元素\n\n给定一个数组，筛选出大于 2 的元素。\n\n```javascript\nvar arr = [1, 2, 3]\n```\n\nfor\n\n```javascript\nvar newArr = []\nfor (var i=0; i<arr.length; i++) {\n  if (arr[i] > 2) {  // e.g. should be larger than 2\n    newArr.push(arr[i])\n  }\n}\n```\n\n改写\n\n```javascript\nconst newArr = arr.filter(el => el > 2)\n```\n\n### 使用数组生成新数组\n\n给定一个数组，要求使用其元素内容作为键，元素下表作为值，生成一个新数组\n\n```javascript\nvar arr = ['a', 'b', 'c']\n```\n\nfor\n\n```javascript\nvar newArr = []\nfor (var i=0; i<arr.length; i++) {\n  var obj = {}\n  obj[arr[i]] = i\n  newArr.push(obj)\n}\n// can access 'i' and 'obj' here\n```\n\n改写\n\n```javascript\nvar newArr = arr.map(function(el, i) {\n  var obj = {}\n  obj[el] = i\n  return obj\n})\n// cannot access 'obj' here, hell yeah!\n```\n\nES2015\n\n```javascript\nconst newArr = arr.map((el, i) => { return { [el]: i } })\n// less code in one line! fuck yeah!\n```\n\n### 遍历数组，得到一个最终值\n\n给定一个数字数组，将其包含的数字累加\n\n```javascript\nvar arr = [1, 2, 3]\n```\n\nfor\n\n```javascript\nvar result = 0\nfor (var i=0; i<arr.length; i++) {\n  result += arr[i]\n}\n```\n\n改写\n\n```javascript\nconst result = arr.reduce((ret, el) => ret + el, 0)\n```\n\n给定一个键值数组，将其转换为一个对象\n\n```javascript\nvar arr = [\n  { key: 'a', value: 1 },\n  { key: 'b', value: 2 },\n  { key: 'c', value: 3 },\n  { key: 'd', value: 4 },\n]\n```\n\nfor\n\n```javascript\nvar result = {}\nfor (var i=0; i<arr.length; i++) {\n  result[arr[i].key] = arr[i].value\n}\n```\n\n改写\n\n```javascript\nconst result = arr.reduce((obj, { key, value }) => {\n  obj[key] = value\n  return obj\n}, {})\n```\n\n从以上例子中可以看到，ES2015 的代码更加清晰可读，而且代码打起来流畅省时（你自己试试！）。如果你还没使用上 ES6，那么应该赶紧去学！或许[这篇文章][Why You Should Be Writing ECMA Script 6 Now]和[这篇文章][6 reasons Web developers need to learn JavaScript ES6 now]能说服你。\n\n也可以看看本人写的 [《Understanding ECMAScript 6》笔记][《Understanding ECMAScript 6》笔记]。\n\n[Why You Should Be Writing ECMA Script 6 Now]: https://www.wintellect.com/why-you-should-be-writing-ecma-script-6-now/\n[6 reasons Web developers need to learn JavaScript ES6 now]: https://thenextweb.com/dd/2016/03/09/6-reasons-need-learn-javascript-es6-now-not-later/\n[《Understanding ECMAScript 6》笔记]: https://raw.githubusercontent.com/exoticknight/blog-post/master/%E3%80%8AUnderstanding%20ECMAScript%206%E3%80%8B%E7%AC%94%E8%AE%B0.md\n\n## 不灭的 for\n\n尽管数组新增的方法十分强大，但是 `for` 除了会在遍历数组中使用，还会在处理对象的时候使用，比如使用 `for...in` 遍历对象的属性（及其原型上的属性）。在这些场合上，就需要具体情况具体分析了。\n\n### 遍历对象问题\n\n给出 app 的版本以及版本的使用量，统计最新两个大版本的使用量。版本命名符合 semver 标准，形如 'x.x.x'。\n\n```javascript\nvar apps = {\n  '6.6.0': 53695,\n  '6.10.0': 47319,\n  '5.4.0': 42601,\n  '5.8.5': 41320,\n  '5.5.5': 40322,\n  '5.8.1': 38509,\n  '5.1.5': 26473,\n  '5.2.1': 24267,\n  '6.10.1': 17042,\n  '5.8.0': 13878,\n  '5.5.1': 12887,\n  '5.1.0': 9836,\n  '6.5.0': 8909,\n  '5.0.0': 6704,\n  '4.7.0': 5915,\n  '4.5.0': 5300,\n  '4.3.0': 4213,\n  '5.7.0': 4000,\n  '4.6.1': 3647,\n  '4.4.0': 1921,\n  '4.6.0': 1802\n}\n```\n\nfor\n\n```javascript\nlet largest = 0\nconst versions = {}\nfor (const key in apps) {\n  const major = parseInt(key.split('.')[0], 10)\n  if (!versions[major]) {\n    versions[major] = {}\n  }\n  versions[major][key] = apps[key]\n\n  largest = largest < major ? major : largest\n}\nconst newApps = {}\nfor (let i=0; i<2; i++) {\n  Object.assign(newApps, versions[largest-i])\n}\n```\n\nES2015\n\n```javascript\nlet largest = 0\nconst versions = Object.keys(apps).reduce((obj, key) => {\n  const major = parseInt(key.split('.')[0], 10)\n  if (!obj[major]) {\n    obj[major] = {}\n  }\n  obj[major][key] = apps[key]\n\n  largest = largest < major ? major : largest\n\n  return obj\n}, {})\nconst newApps = [...Array(2).keys()].map(x => largest - x).reduce((obj, key) => {\n  return Object.assign(obj, versions[key])\n}, {})\n```\n\n使用 `for` 和不使用 `for`相比，相差不大，甚至代码看起来更清晰，而且有 ES2015 的加成，消除了变量泄露的影响。所以如果是遍历对象，就没必要去用数组的方法了。\n\n### 性能问题\n\n截止目前位置（2017-10-17），从 [benchmark][for-vs-foreach-vs-for-of] 来看，在性能上，`for` > `forEach` > `for...of`。\n\n因此在一些对性能要求比较高的代码中，使用 `forEach` 和 `for...of` 需要谨慎，这有可能会成为性能瓶颈。另外 `for...of` 在浏览器上的支持度不高，所以还是可以暂时不使用，除非你清楚自己在干什么。\n\n不过，仍然是那句话，代码首先是写给人看的，性能优化应该在功能实现之后再考虑。\n\n[for-vs-foreach-vs-for-of]: https://jsperf.com/for-vs-foreach-vs-for-of\n\n### 循环中断问题\n\n一般来说，使用 `for` 和使用数组方法在功能实现上是一样的，但是由于 `for` 是编程语言层面的实现，可以使用 `break` 和 `return` 手段进行中断；上文中的数组方法由于是遍历调用函数，并不存在什么停止的条件，因此肯定是会将所有元素都过一遍。在这种情况下，就乖乖使用 `for` 吧。\n\n> 当然也可以使用 `Array.some` 等方法模拟中断效果，但要是那样做还不如直接 `for` 呢。\n\n### Promise 的问题\n\n使用数组方法时，最容易出错的地方是和 Promise 一起使用的时候。\n\n比如需要从不同的 URL 请求数据，极其容易写成以下**错误的**代码。\n\n```javascript\nconst URLs = [\n  'http://www.a.com',\n  'http://www.b.com',\n  'http://www.c.com',\n]\nconst results = URLs.map(url => {\n  return $.ajax(url)\n})\n```\n\n你会发现 `results` 的内容只是 Promise 实例，根本不是期望的值。代码的问题在于几乎所有的网络请求 API，返回的都是一个 Promise 实例。\n\n正确的做法是使用 `Promise.all` 将多个 Promise 实例包装成一个 Promise 实例：\n\n```javascript\nconst URLs = [\n  'http://www.a.com',\n  'http://www.b.com',\n  'http://www.c.com',\n]\nlet result\nPromise.all(URLs.map(url => {\n  return $.ajax(url)\n})).then(res => result = res)\n```\n\n如果你使用 async／await，**千万不要这样写**：\n\n```javascript\nconst URLs = [\n  'http://www.a.com',\n  'http://www.b.com',\n  'http://www.c.com',\n]\nconst results = URLs.map(async url => {\n  await $.ajax(url)\n})\n```\n\n同样这种写法只能得到一个 Promise 实例数组。应该这样：\n\n```javascript\nconst URLs = [\n  'http://www.a.com',\n  'http://www.b.com',\n  'http://www.c.com',\n]\nconst results = await Promise.all(URLs.map(url => {\n  return $.ajax(url)\n}))\n```\n\n> ⚠️ 注意你不能在没有 `async` 标识的函数中使用 `await`，因此在各种全局状态下是无法使用 `await` 的。幸好 async／await 处理的就是 Promise，你只需要改用 `.then` 就好了。\n\n举一个更极端的例子，URL 请求需要按顺序发送，上一次的结果需要作为下一次请求的参数。怎么写呢？\n\nPromise 方法：\n\n```javascript\nconst URLs = [\n  'http://www.a.com',\n  'http://www.b.com',\n  'http://www.c.com',\n]\nlet result\nURLs\n.map(url => {\n  return params => {\n    return $.ajax(url + params)\n  }\n})\n.reduce((prev, next) => {\n  return prev.then(next)\n}, Promise.resolve(''))\n.then(ret => result = ret)\n```\n\nasync／await 方法：\n\n```javascript\nconst URLs = [\n  'http://www.a.com',\n  'http://www.b.com',\n  'http://www.c.com',\n]\nconst result = await URLs.map(url => {\n  return params => {\n    return $.ajax(url + params)\n  }\n}).reduce((prev, next) => {\n  return prev.then(next)\n}, Promise.resolve(''))\n```\n\n但是看看用 `for` 会如何？\n\n```javascript\nconst URLs = [\n  'http://www.a.com',\n  'http://www.b.com',\n  'http://www.c.com',\n]\nlet result\nfor (const url of URLs) {\n  result = await $.ajax(url + result)\n}\n```\n\n意外的简洁。这归功于数组的有序性，以及 `for` 在语言层面上的可被打断性。\n\n可见在处理顺序的异步请求上，`for` 有着很大的优势，但在并发请求上，还是乖乖用 `.map` 吧（比 `for` + `.push` 要好）。\n","source":"_posts/dont-only-use-for-any-more.md","raw":"---\ntitle: 不要再只会用 for 了\ncategories:\n  - [技术, 前端]\n  - [编程语言, javascript]\ntags: [javascript, bytalk]\npermalink: dont-only-use-for-any-more\n---\n\n> No Silver Bullet\n\n## 老黄牛的 for\n\n![for-for-everywhere](https://i.imgflip.com/1y3pxa.jpg)\n\n几乎每一个编程语言都有 `for`，JavaScript 也不例外。\n\n在 JavsScript 中，`for` 广泛用于遍历数组中，也能用于遍历对象的属性。\n\n语法：\n\n```javascript\nfor ([initialization]; [condition]; [final-expression])\n   statement\n```\n\n`initialization` 是初始化语句，通常用于初始化计数变量（比如，你们最爱的 `i`）；`condition` 是判断本次是否执行 `statement`；`final-expression` 在 `statement` 执行完后执行，通常用于对计数变量进行变换。\n\n例如，要遍历一个数组 `arr`，那么可以这样写：\n\n```javascript\nfor (var i=0; i<arr.length; i++) {\n  ;// 做你爱做的事\n  // arr[i] 就能在每一次运行过程中取到在 arr 中的元素\n}\n```\n\n或者经常见到所谓的性能优化：\n\n```javascript\nfor (var i=0, len=arr.length; i<len; i++) {\n  ;// 做你爱做的事\n  // arr[i] 就能在每一次运行过程中取到在 arr 中的元素\n}\n```\n\n> 强烈建议使用 `const` 或 `let` 声明变量而不是使用 `var`，因为 `var` 会在 `for` 语句外声明变量，结果就是变量可能会在意外的地方被读取到。如果你不能使用 ES2015 或更新的版本，下文同样有解决方法（同样是本文的主要内容）。\n\n如果你写过 C 系列，那么你有可能忍不住自己的麒麟臂，写出「炫技」的代码来。比如 MDN 上的[这个例子][for-on-mdn]。\n\n```javascript\nfunction showOffsetPos(sId) {\n\n  var nLeft = 0, nTop = 0;\n\n  for (\n\n    var oItNode = document.getElementById(sId); /* initialization */\n\n      oItNode; /* condition */\n\n    nLeft += oItNode.offsetLeft, nTop += oItNode.offsetTop, oItNode = oItNode.offsetParent /* final-expression */\n\n  ); /* semicolon */\n\n  console.log('Offset position of \\'' + sId + '\\' element:\\n left: ' + nLeft + 'px;\\n top: ' + nTop + 'px;');\n\n}\n\n/* Example call: */\n\nshowOffsetPos('content');\n\n// Output:\n// \"Offset position of \"content\" element:\n// left: 0px;\n// top: 153px;\"\n```\n\n这么写看着很酷，但是实际上不要这样写，尤其是在团队合作中。这样的代码一是混杂难懂，二是难以维护。代码首先是写给人看的，接着才是给机器运行的。\n\n或许你已经非常习惯写 `for` 了，习惯到了看见一个数组就自然而然打出 `for (...)` 来。但是你有没有想过，很多时候，遍历数组其实跟索引并没有什么关系，代码只是要将数组里面的元素按顺序处理完。然而，**数组天然就应该是顺序的**，根本无需要一个额外的 `i` 来保证。换句话说，数组应该利用自身属性，提供无需索引的顺序读取方法，而索引只是在顺序读取的过程中的一个记录变量。\n\n那这样有什么优势呢？\n\n从处理流程上说，举个例子：假设你是一个接待员，工作是处理一列队伍的咨询。使用 `for` 的处理方法是：先计算整个队伍的长度，然后喊第一个人开始处理；每处理完一个人，就将序号加一再喊；直到序号等于队伍长度。而使用直接顺序读取的处理方法是：从队伍最前开始处理，每处理完一个，直接转到下一个重新开始处理，直到队伍没有下一个需要处理。这样以来就能省去了对队伍长度和索引的处理。\n\n从代码逻辑上说，在数组上提供顺序读取方法，是将全局的语法转化为了相当于成员函数的执行，解除了和全局的耦合的同时，结合链式调用和灵活的回调函数能解放出极大的数组处理潜力。你能轻松在一行代码内基于数组进行非常多而灵活的处理，并且将「肮脏」的处理过程隐藏起来，直接得到一个处理得「连你阿妈都唔识」的结果，干净利落。\n\n下面来认识一下这些顺序读取方法吧。\n\n[for-on-mdn]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\n\n## 优雅的 forEach, map, filter, reduce\n\n![forEach,map,filter,reduce](https://i.imgflip.com/1y3h2m.jpg)\n\n在 ES5（ES5.1） 中，JavaScript 新增了多个数组方法，包括：forEach, map, filter, reduce。\n\n每个方法都接受一个回调函数作为参数传入，每个方法都会在取得一个元素的时候调用此回调函数，不同在于不同方法对待回调函数的结果上。\n\n### forEach\n\nforEach 返回值为 undefined，适合通过数组来操作其他对象。\n\n```javascript\narr.forEach(function callback(currentValue, index, array) {\n    //your iterator\n}[, thisArg]);\n```\n\n### map\n\nmap 返回值为回调函数返回值组成的数组，适合处理数组变换。\n\n```javascript\nvar new_array = arr.map(function callback(currentValue, index, array) {\n    // Return element for new_array\n}[, thisArg])\n```\n\n### filter\n\nfilter 返回值为回调函数返回真所对应的元素组成的数组，适合处理数组筛选。\n\n```javascript\nvar new_array = arr.filter(function callback(currentValue, index, array) {\n    // Return true or false\n}[, thisArg])\n```\n\n### reduce\n\nreduce 返回值为初始值经过和每个元素作用后得到的最终值，适合遍历数组后得到一个值或者一个对象的情况。\n\n```javascript\nvar new_array = arr.reduce(function callback(accumulator, currentValue, index, array) {\n    // Return accumulator\n}[, initialValue])\n```\n\n> 别忘了在回调函数中返回结果！\n\n## 新方法新思路\n\n配合几个编写代码时的常见场景，看看不使用 `for` 的解决方法。\n\n### 循环多次执行某些动作\n\n给定一个数组，打印其元素。\n\n```javascript\nvar arr = [1, 2, 3]\n```\n\nfor\n\n```javascript\nfor (var i=0; i<arr.length; i++) {\n  console.log(arr[i])  // 1 2 3\n}\n```\n\n炫技\n\n```javascript\nfor (\n  var i=0;\n  i<arr.length;\n  console.log(arr[i++])\n  );\n```\n\n改写\n\n```javascript\narr.forEach(el => console.log(el))  // 1 2 3\n```\n\n### 对数组的每一个元素进行变换\n\n给定一个数组，将其元素都加一。\n\n```javascript\nvar arr = [1, 2, 3]\n```\n\nfor\n\n```javascript\nfor (var i=0; i<arr.length; i++) {\n  arr[i] = arr[i] + 1\n}\n```\n\n炫技\n\n```javascript\nfor (\n  var i=0;\n  i<arr.length;\n  arr[i] = arr[i++] + 1\n  );\n```\n\n改写\n\n```javascript\narr.forEach((el, i, ar) => ar[i] = ar[i] + 1)\n```\n\n更好\n\n```javascript\nconst newArr = arr.map(el => el + 1)\n```\n\n> 在允许的情况下尽量不要去修改原数据，而是返回一个新的数组。\n\n### \b提取数组中符合某个标准的元素\n\n给定一个数组，筛选出大于 2 的元素。\n\n```javascript\nvar arr = [1, 2, 3]\n```\n\nfor\n\n```javascript\nvar newArr = []\nfor (var i=0; i<arr.length; i++) {\n  if (arr[i] > 2) {  // e.g. should be larger than 2\n    newArr.push(arr[i])\n  }\n}\n```\n\n改写\n\n```javascript\nconst newArr = arr.filter(el => el > 2)\n```\n\n### 使用数组生成新数组\n\n给定一个数组，要求使用其元素内容作为键，元素下表作为值，生成一个新数组\n\n```javascript\nvar arr = ['a', 'b', 'c']\n```\n\nfor\n\n```javascript\nvar newArr = []\nfor (var i=0; i<arr.length; i++) {\n  var obj = {}\n  obj[arr[i]] = i\n  newArr.push(obj)\n}\n// can access 'i' and 'obj' here\n```\n\n改写\n\n```javascript\nvar newArr = arr.map(function(el, i) {\n  var obj = {}\n  obj[el] = i\n  return obj\n})\n// cannot access 'obj' here, hell yeah!\n```\n\nES2015\n\n```javascript\nconst newArr = arr.map((el, i) => { return { [el]: i } })\n// less code in one line! fuck yeah!\n```\n\n### 遍历数组，得到一个最终值\n\n给定一个数字数组，将其包含的数字累加\n\n```javascript\nvar arr = [1, 2, 3]\n```\n\nfor\n\n```javascript\nvar result = 0\nfor (var i=0; i<arr.length; i++) {\n  result += arr[i]\n}\n```\n\n改写\n\n```javascript\nconst result = arr.reduce((ret, el) => ret + el, 0)\n```\n\n给定一个键值数组，将其转换为一个对象\n\n```javascript\nvar arr = [\n  { key: 'a', value: 1 },\n  { key: 'b', value: 2 },\n  { key: 'c', value: 3 },\n  { key: 'd', value: 4 },\n]\n```\n\nfor\n\n```javascript\nvar result = {}\nfor (var i=0; i<arr.length; i++) {\n  result[arr[i].key] = arr[i].value\n}\n```\n\n改写\n\n```javascript\nconst result = arr.reduce((obj, { key, value }) => {\n  obj[key] = value\n  return obj\n}, {})\n```\n\n从以上例子中可以看到，ES2015 的代码更加清晰可读，而且代码打起来流畅省时（你自己试试！）。如果你还没使用上 ES6，那么应该赶紧去学！或许[这篇文章][Why You Should Be Writing ECMA Script 6 Now]和[这篇文章][6 reasons Web developers need to learn JavaScript ES6 now]能说服你。\n\n也可以看看本人写的 [《Understanding ECMAScript 6》笔记][《Understanding ECMAScript 6》笔记]。\n\n[Why You Should Be Writing ECMA Script 6 Now]: https://www.wintellect.com/why-you-should-be-writing-ecma-script-6-now/\n[6 reasons Web developers need to learn JavaScript ES6 now]: https://thenextweb.com/dd/2016/03/09/6-reasons-need-learn-javascript-es6-now-not-later/\n[《Understanding ECMAScript 6》笔记]: https://raw.githubusercontent.com/exoticknight/blog-post/master/%E3%80%8AUnderstanding%20ECMAScript%206%E3%80%8B%E7%AC%94%E8%AE%B0.md\n\n## 不灭的 for\n\n尽管数组新增的方法十分强大，但是 `for` 除了会在遍历数组中使用，还会在处理对象的时候使用，比如使用 `for...in` 遍历对象的属性（及其原型上的属性）。在这些场合上，就需要具体情况具体分析了。\n\n### 遍历对象问题\n\n给出 app 的版本以及版本的使用量，统计最新两个大版本的使用量。版本命名符合 semver 标准，形如 'x.x.x'。\n\n```javascript\nvar apps = {\n  '6.6.0': 53695,\n  '6.10.0': 47319,\n  '5.4.0': 42601,\n  '5.8.5': 41320,\n  '5.5.5': 40322,\n  '5.8.1': 38509,\n  '5.1.5': 26473,\n  '5.2.1': 24267,\n  '6.10.1': 17042,\n  '5.8.0': 13878,\n  '5.5.1': 12887,\n  '5.1.0': 9836,\n  '6.5.0': 8909,\n  '5.0.0': 6704,\n  '4.7.0': 5915,\n  '4.5.0': 5300,\n  '4.3.0': 4213,\n  '5.7.0': 4000,\n  '4.6.1': 3647,\n  '4.4.0': 1921,\n  '4.6.0': 1802\n}\n```\n\nfor\n\n```javascript\nlet largest = 0\nconst versions = {}\nfor (const key in apps) {\n  const major = parseInt(key.split('.')[0], 10)\n  if (!versions[major]) {\n    versions[major] = {}\n  }\n  versions[major][key] = apps[key]\n\n  largest = largest < major ? major : largest\n}\nconst newApps = {}\nfor (let i=0; i<2; i++) {\n  Object.assign(newApps, versions[largest-i])\n}\n```\n\nES2015\n\n```javascript\nlet largest = 0\nconst versions = Object.keys(apps).reduce((obj, key) => {\n  const major = parseInt(key.split('.')[0], 10)\n  if (!obj[major]) {\n    obj[major] = {}\n  }\n  obj[major][key] = apps[key]\n\n  largest = largest < major ? major : largest\n\n  return obj\n}, {})\nconst newApps = [...Array(2).keys()].map(x => largest - x).reduce((obj, key) => {\n  return Object.assign(obj, versions[key])\n}, {})\n```\n\n使用 `for` 和不使用 `for`相比，相差不大，甚至代码看起来更清晰，而且有 ES2015 的加成，消除了变量泄露的影响。所以如果是遍历对象，就没必要去用数组的方法了。\n\n### 性能问题\n\n截止目前位置（2017-10-17），从 [benchmark][for-vs-foreach-vs-for-of] 来看，在性能上，`for` > `forEach` > `for...of`。\n\n因此在一些对性能要求比较高的代码中，使用 `forEach` 和 `for...of` 需要谨慎，这有可能会成为性能瓶颈。另外 `for...of` 在浏览器上的支持度不高，所以还是可以暂时不使用，除非你清楚自己在干什么。\n\n不过，仍然是那句话，代码首先是写给人看的，性能优化应该在功能实现之后再考虑。\n\n[for-vs-foreach-vs-for-of]: https://jsperf.com/for-vs-foreach-vs-for-of\n\n### 循环中断问题\n\n一般来说，使用 `for` 和使用数组方法在功能实现上是一样的，但是由于 `for` 是编程语言层面的实现，可以使用 `break` 和 `return` 手段进行中断；上文中的数组方法由于是遍历调用函数，并不存在什么停止的条件，因此肯定是会将所有元素都过一遍。在这种情况下，就乖乖使用 `for` 吧。\n\n> 当然也可以使用 `Array.some` 等方法模拟中断效果，但要是那样做还不如直接 `for` 呢。\n\n### Promise 的问题\n\n使用数组方法时，最容易出错的地方是和 Promise 一起使用的时候。\n\n比如需要从不同的 URL 请求数据，极其容易写成以下**错误的**代码。\n\n```javascript\nconst URLs = [\n  'http://www.a.com',\n  'http://www.b.com',\n  'http://www.c.com',\n]\nconst results = URLs.map(url => {\n  return $.ajax(url)\n})\n```\n\n你会发现 `results` 的内容只是 Promise 实例，根本不是期望的值。代码的问题在于几乎所有的网络请求 API，返回的都是一个 Promise 实例。\n\n正确的做法是使用 `Promise.all` 将多个 Promise 实例包装成一个 Promise 实例：\n\n```javascript\nconst URLs = [\n  'http://www.a.com',\n  'http://www.b.com',\n  'http://www.c.com',\n]\nlet result\nPromise.all(URLs.map(url => {\n  return $.ajax(url)\n})).then(res => result = res)\n```\n\n如果你使用 async／await，**千万不要这样写**：\n\n```javascript\nconst URLs = [\n  'http://www.a.com',\n  'http://www.b.com',\n  'http://www.c.com',\n]\nconst results = URLs.map(async url => {\n  await $.ajax(url)\n})\n```\n\n同样这种写法只能得到一个 Promise 实例数组。应该这样：\n\n```javascript\nconst URLs = [\n  'http://www.a.com',\n  'http://www.b.com',\n  'http://www.c.com',\n]\nconst results = await Promise.all(URLs.map(url => {\n  return $.ajax(url)\n}))\n```\n\n> ⚠️ 注意你不能在没有 `async` 标识的函数中使用 `await`，因此在各种全局状态下是无法使用 `await` 的。幸好 async／await 处理的就是 Promise，你只需要改用 `.then` 就好了。\n\n举一个更极端的例子，URL 请求需要按顺序发送，上一次的结果需要作为下一次请求的参数。怎么写呢？\n\nPromise 方法：\n\n```javascript\nconst URLs = [\n  'http://www.a.com',\n  'http://www.b.com',\n  'http://www.c.com',\n]\nlet result\nURLs\n.map(url => {\n  return params => {\n    return $.ajax(url + params)\n  }\n})\n.reduce((prev, next) => {\n  return prev.then(next)\n}, Promise.resolve(''))\n.then(ret => result = ret)\n```\n\nasync／await 方法：\n\n```javascript\nconst URLs = [\n  'http://www.a.com',\n  'http://www.b.com',\n  'http://www.c.com',\n]\nconst result = await URLs.map(url => {\n  return params => {\n    return $.ajax(url + params)\n  }\n}).reduce((prev, next) => {\n  return prev.then(next)\n}, Promise.resolve(''))\n```\n\n但是看看用 `for` 会如何？\n\n```javascript\nconst URLs = [\n  'http://www.a.com',\n  'http://www.b.com',\n  'http://www.c.com',\n]\nlet result\nfor (const url of URLs) {\n  result = await $.ajax(url + result)\n}\n```\n\n意外的简洁。这归功于数组的有序性，以及 `for` 在语言层面上的可被打断性。\n\n可见在处理顺序的异步请求上，`for` 有着很大的优势，但在并发请求上，还是乖乖用 `.map` 吧（比 `for` + `.push` 要好）。\n","slug":"dont-only-use-for-any-more","published":1,"date":"2017-10-23T15:54:14.000Z","updated":"2019-05-22T09:09:17.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyus00067n7t4l6d8fi5f","content":"<blockquote>\n<p>No Silver Bullet</p>\n</blockquote>\n<h2 id=\"老黄牛的-for\"><a href=\"#老黄牛的-for\" class=\"headerlink\" title=\"老黄牛的 for\"></a>老黄牛的 for</h2><p><img src=\"https://i.imgflip.com/1y3pxa.jpg\" alt=\"for-for-everywhere\"></p>\n<p>几乎每一个编程语言都有 <code>for</code>，JavaScript 也不例外。</p>\n<p>在 JavsScript 中，<code>for</code> 广泛用于遍历数组中，也能用于遍历对象的属性。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ([initialization]; [condition]; [final-expression])</span><br><span class=\"line\">   statement</span><br></pre></td></tr></table></figure>\n<p><code>initialization</code> 是初始化语句，通常用于初始化计数变量（比如，你们最爱的 <code>i</code>）；<code>condition</code> 是判断本次是否执行 <code>statement</code>；<code>final-expression</code> 在 <code>statement</code> 执行完后执行，通常用于对计数变量进行变换。</p>\n<p>例如，要遍历一个数组 <code>arr</code>，那么可以这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">  ;<span class=\"comment\">// 做你爱做的事</span></span><br><span class=\"line\">  <span class=\"comment\">// arr[i] 就能在每一次运行过程中取到在 arr 中的元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者经常见到所谓的性能优化：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>, len=arr.length; i&lt;len; i++) &#123;</span><br><span class=\"line\">  ;<span class=\"comment\">// 做你爱做的事</span></span><br><span class=\"line\">  <span class=\"comment\">// arr[i] 就能在每一次运行过程中取到在 arr 中的元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>强烈建议使用 <code>const</code> 或 <code>let</code> 声明变量而不是使用 <code>var</code>，因为 <code>var</code> 会在 <code>for</code> 语句外声明变量，结果就是变量可能会在意外的地方被读取到。如果你不能使用 ES2015 或更新的版本，下文同样有解决方法（同样是本文的主要内容）。</p>\n</blockquote>\n<p>如果你写过 C 系列，那么你有可能忍不住自己的麒麟臂，写出「炫技」的代码来。比如 MDN 上的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\" target=\"_blank\" rel=\"noopener\">这个例子</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showOffsetPos</span>(<span class=\"params\">sId</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> nLeft = <span class=\"number\">0</span>, nTop = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> oItNode = <span class=\"built_in\">document</span>.getElementById(sId); <span class=\"comment\">/* initialization */</span></span><br><span class=\"line\"></span><br><span class=\"line\">      oItNode; <span class=\"comment\">/* condition */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    nLeft += oItNode.offsetLeft, nTop += oItNode.offsetTop, oItNode = oItNode.offsetParent <span class=\"comment\">/* final-expression */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  ); <span class=\"comment\">/* semicolon */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Offset position of \\''</span> + sId + <span class=\"string\">'\\' element:\\n left: '</span> + nLeft + <span class=\"string\">'px;\\n top: '</span> + nTop + <span class=\"string\">'px;'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Example call: */</span></span><br><span class=\"line\"></span><br><span class=\"line\">showOffsetPos(<span class=\"string\">'content'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Output:</span></span><br><span class=\"line\"><span class=\"comment\">// \"Offset position of \"content\" element:</span></span><br><span class=\"line\"><span class=\"comment\">// left: 0px;</span></span><br><span class=\"line\"><span class=\"comment\">// top: 153px;\"</span></span><br></pre></td></tr></table></figure>\n<p>这么写看着很酷，但是实际上不要这样写，尤其是在团队合作中。这样的代码一是混杂难懂，二是难以维护。代码首先是写给人看的，接着才是给机器运行的。</p>\n<p>或许你已经非常习惯写 <code>for</code> 了，习惯到了看见一个数组就自然而然打出 <code>for (...)</code> 来。但是你有没有想过，很多时候，遍历数组其实跟索引并没有什么关系，代码只是要将数组里面的元素按顺序处理完。然而，<strong>数组天然就应该是顺序的</strong>，根本无需要一个额外的 <code>i</code> 来保证。换句话说，数组应该利用自身属性，提供无需索引的顺序读取方法，而索引只是在顺序读取的过程中的一个记录变量。</p>\n<p>那这样有什么优势呢？</p>\n<p>从处理流程上说，举个例子：假设你是一个接待员，工作是处理一列队伍的咨询。使用 <code>for</code> 的处理方法是：先计算整个队伍的长度，然后喊第一个人开始处理；每处理完一个人，就将序号加一再喊；直到序号等于队伍长度。而使用直接顺序读取的处理方法是：从队伍最前开始处理，每处理完一个，直接转到下一个重新开始处理，直到队伍没有下一个需要处理。这样以来就能省去了对队伍长度和索引的处理。</p>\n<p>从代码逻辑上说，在数组上提供顺序读取方法，是将全局的语法转化为了相当于成员函数的执行，解除了和全局的耦合的同时，结合链式调用和灵活的回调函数能解放出极大的数组处理潜力。你能轻松在一行代码内基于数组进行非常多而灵活的处理，并且将「肮脏」的处理过程隐藏起来，直接得到一个处理得「连你阿妈都唔识」的结果，干净利落。</p>\n<p>下面来认识一下这些顺序读取方法吧。</p>\n<h2 id=\"优雅的-forEach-map-filter-reduce\"><a href=\"#优雅的-forEach-map-filter-reduce\" class=\"headerlink\" title=\"优雅的 forEach, map, filter, reduce\"></a>优雅的 forEach, map, filter, reduce</h2><p><img src=\"https://i.imgflip.com/1y3h2m.jpg\" alt=\"forEach,map,filter,reduce\"></p>\n<p>在 ES5（ES5.1） 中，JavaScript 新增了多个数组方法，包括：forEach, map, filter, reduce。</p>\n<p>每个方法都接受一个回调函数作为参数传入，每个方法都会在取得一个元素的时候调用此回调函数，不同在于不同方法对待回调函数的结果上。</p>\n<h3 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h3><p>forEach 返回值为 undefined，适合通过数组来操作其他对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue, index, array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//your iterator</span></span><br><span class=\"line\">&#125;[, thisArg]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><p>map 返回值为回调函数返回值组成的数组，适合处理数组变换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = arr.map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue, index, array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Return element for new_array</span></span><br><span class=\"line\">&#125;[, thisArg])</span><br></pre></td></tr></table></figure>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><p>filter 返回值为回调函数返回真所对应的元素组成的数组，适合处理数组筛选。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue, index, array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Return true or false</span></span><br><span class=\"line\">&#125;[, thisArg])</span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h3><p>reduce 返回值为初始值经过和每个元素作用后得到的最终值，适合遍历数组后得到一个值或者一个对象的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">accumulator, currentValue, index, array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Return accumulator</span></span><br><span class=\"line\">&#125;[, initialValue])</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>别忘了在回调函数中返回结果！</p>\n</blockquote>\n<h2 id=\"新方法新思路\"><a href=\"#新方法新思路\" class=\"headerlink\" title=\"新方法新思路\"></a>新方法新思路</h2><p>配合几个编写代码时的常见场景，看看不使用 <code>for</code> 的解决方法。</p>\n<h3 id=\"循环多次执行某些动作\"><a href=\"#循环多次执行某些动作\" class=\"headerlink\" title=\"循环多次执行某些动作\"></a>循环多次执行某些动作</h3><p>给定一个数组，打印其元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<p>for</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr[i])  <span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>炫技</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">  i&lt;arr.length;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr[i++])</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n<p>改写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> <span class=\"built_in\">console</span>.log(el))  <span class=\"comment\">// 1 2 3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对数组的每一个元素进行变换\"><a href=\"#对数组的每一个元素进行变换\" class=\"headerlink\" title=\"对数组的每一个元素进行变换\"></a>对数组的每一个元素进行变换</h3><p>给定一个数组，将其元素都加一。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<p>for</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">  arr[i] = arr[i] + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>炫技</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">  i&lt;arr.length;</span><br><span class=\"line\">  arr[i] = arr[i++] + <span class=\"number\">1</span></span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n<p>改写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">el, i, ar</span>) =&gt;</span> ar[i] = ar[i] + <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>更好</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArr = arr.map(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el + <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在允许的情况下尽量不要去修改原数据，而是返回一个新的数组。</p>\n</blockquote>\n<h3 id=\"提取数组中符合某个标准的元素\"><a href=\"#提取数组中符合某个标准的元素\" class=\"headerlink\" title=\"\b提取数组中符合某个标准的元素\"></a>\b提取数组中符合某个标准的元素</h3><p>给定一个数组，筛选出大于 2 的元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<p>for</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newArr = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr[i] &gt; <span class=\"number\">2</span>) &#123;  <span class=\"comment\">// e.g. should be larger than 2</span></span><br><span class=\"line\">    newArr.push(arr[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArr = arr.filter(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el &gt; <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用数组生成新数组\"><a href=\"#使用数组生成新数组\" class=\"headerlink\" title=\"使用数组生成新数组\"></a>使用数组生成新数组</h3><p>给定一个数组，要求使用其元素内容作为键，元素下表作为值，生成一个新数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br></pre></td></tr></table></figure>\n<p>for</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newArr = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\">  obj[arr[i]] = i</span><br><span class=\"line\">  newArr.push(obj)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// can access 'i' and 'obj' here</span></span><br></pre></td></tr></table></figure>\n<p>改写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newArr = arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\">  obj[el] = i</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// cannot access 'obj' here, hell yeah!</span></span><br></pre></td></tr></table></figure>\n<p>ES2015</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArr = arr.map(<span class=\"function\">(<span class=\"params\">el, i</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> &#123; [el]: i &#125; &#125;)</span><br><span class=\"line\"><span class=\"comment\">// less code in one line! fuck yeah!</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"遍历数组，得到一个最终值\"><a href=\"#遍历数组，得到一个最终值\" class=\"headerlink\" title=\"遍历数组，得到一个最终值\"></a>遍历数组，得到一个最终值</h3><p>给定一个数字数组，将其包含的数字累加</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<p>for</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">  result += arr[i]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = arr.reduce(<span class=\"function\">(<span class=\"params\">ret, el</span>) =&gt;</span> ret + el, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>给定一个键值数组，将其转换为一个对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">key</span>: <span class=\"string\">'a'</span>, <span class=\"attr\">value</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">key</span>: <span class=\"string\">'b'</span>, <span class=\"attr\">value</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">key</span>: <span class=\"string\">'c'</span>, <span class=\"attr\">value</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">key</span>: <span class=\"string\">'d'</span>, <span class=\"attr\">value</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>for</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">  result[arr[i].key] = arr[i].value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = arr.reduce(<span class=\"function\">(<span class=\"params\">obj, &#123; key, value &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  obj[key] = value</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;, &#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>从以上例子中可以看到，ES2015 的代码更加清晰可读，而且代码打起来流畅省时（你自己试试！）。如果你还没使用上 ES6，那么应该赶紧去学！或许<a href=\"https://www.wintellect.com/why-you-should-be-writing-ecma-script-6-now/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>和<a href=\"https://thenextweb.com/dd/2016/03/09/6-reasons-need-learn-javascript-es6-now-not-later/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>能说服你。</p>\n<p>也可以看看本人写的 <a href=\"https://raw.githubusercontent.com/exoticknight/blog-post/master/%E3%80%8AUnderstanding%20ECMAScript%206%E3%80%8B%E7%AC%94%E8%AE%B0.md\" target=\"_blank\" rel=\"noopener\">《Understanding ECMAScript 6》笔记</a>。</p>\n<h2 id=\"不灭的-for\"><a href=\"#不灭的-for\" class=\"headerlink\" title=\"不灭的 for\"></a>不灭的 for</h2><p>尽管数组新增的方法十分强大，但是 <code>for</code> 除了会在遍历数组中使用，还会在处理对象的时候使用，比如使用 <code>for...in</code> 遍历对象的属性（及其原型上的属性）。在这些场合上，就需要具体情况具体分析了。</p>\n<h3 id=\"遍历对象问题\"><a href=\"#遍历对象问题\" class=\"headerlink\" title=\"遍历对象问题\"></a>遍历对象问题</h3><p>给出 app 的版本以及版本的使用量，统计最新两个大版本的使用量。版本命名符合 semver 标准，形如 ‘x.x.x’。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> apps = &#123;</span><br><span class=\"line\">  <span class=\"string\">'6.6.0'</span>: <span class=\"number\">53695</span>,</span><br><span class=\"line\">  <span class=\"string\">'6.10.0'</span>: <span class=\"number\">47319</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.4.0'</span>: <span class=\"number\">42601</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.8.5'</span>: <span class=\"number\">41320</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.5.5'</span>: <span class=\"number\">40322</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.8.1'</span>: <span class=\"number\">38509</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.1.5'</span>: <span class=\"number\">26473</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.2.1'</span>: <span class=\"number\">24267</span>,</span><br><span class=\"line\">  <span class=\"string\">'6.10.1'</span>: <span class=\"number\">17042</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.8.0'</span>: <span class=\"number\">13878</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.5.1'</span>: <span class=\"number\">12887</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.1.0'</span>: <span class=\"number\">9836</span>,</span><br><span class=\"line\">  <span class=\"string\">'6.5.0'</span>: <span class=\"number\">8909</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.0.0'</span>: <span class=\"number\">6704</span>,</span><br><span class=\"line\">  <span class=\"string\">'4.7.0'</span>: <span class=\"number\">5915</span>,</span><br><span class=\"line\">  <span class=\"string\">'4.5.0'</span>: <span class=\"number\">5300</span>,</span><br><span class=\"line\">  <span class=\"string\">'4.3.0'</span>: <span class=\"number\">4213</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.7.0'</span>: <span class=\"number\">4000</span>,</span><br><span class=\"line\">  <span class=\"string\">'4.6.1'</span>: <span class=\"number\">3647</span>,</span><br><span class=\"line\">  <span class=\"string\">'4.4.0'</span>: <span class=\"number\">1921</span>,</span><br><span class=\"line\">  <span class=\"string\">'4.6.0'</span>: <span class=\"number\">1802</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>for</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> largest = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> versions = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> apps) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> major = <span class=\"built_in\">parseInt</span>(key.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>], <span class=\"number\">10</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!versions[major]) &#123;</span><br><span class=\"line\">    versions[major] = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  versions[major][key] = apps[key]</span><br><span class=\"line\"></span><br><span class=\"line\">  largest = largest &lt; major ? major : largest</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> newApps = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.assign(newApps, versions[largest-i])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ES2015</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> largest = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> versions = <span class=\"built_in\">Object</span>.keys(apps).reduce(<span class=\"function\">(<span class=\"params\">obj, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> major = <span class=\"built_in\">parseInt</span>(key.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>], <span class=\"number\">10</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!obj[major]) &#123;</span><br><span class=\"line\">    obj[major] = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  obj[major][key] = apps[key]</span><br><span class=\"line\"></span><br><span class=\"line\">  largest = largest &lt; major ? major : largest</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;, &#123;&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> newApps = [...Array(<span class=\"number\">2</span>).keys()].map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> largest - x).reduce(<span class=\"function\">(<span class=\"params\">obj, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(obj, versions[key])</span><br><span class=\"line\">&#125;, &#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用 <code>for</code> 和不使用 <code>for</code>相比，相差不大，甚至代码看起来更清晰，而且有 ES2015 的加成，消除了变量泄露的影响。所以如果是遍历对象，就没必要去用数组的方法了。</p>\n<h3 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h3><p>截止目前位置（2017-10-17），从 <a href=\"https://jsperf.com/for-vs-foreach-vs-for-of\" target=\"_blank\" rel=\"noopener\">benchmark</a> 来看，在性能上，<code>for</code> &gt; <code>forEach</code> &gt; <code>for...of</code>。</p>\n<p>因此在一些对性能要求比较高的代码中，使用 <code>forEach</code> 和 <code>for...of</code> 需要谨慎，这有可能会成为性能瓶颈。另外 <code>for...of</code> 在浏览器上的支持度不高，所以还是可以暂时不使用，除非你清楚自己在干什么。</p>\n<p>不过，仍然是那句话，代码首先是写给人看的，性能优化应该在功能实现之后再考虑。</p>\n<h3 id=\"循环中断问题\"><a href=\"#循环中断问题\" class=\"headerlink\" title=\"循环中断问题\"></a>循环中断问题</h3><p>一般来说，使用 <code>for</code> 和使用数组方法在功能实现上是一样的，但是由于 <code>for</code> 是编程语言层面的实现，可以使用 <code>break</code> 和 <code>return</code> 手段进行中断；上文中的数组方法由于是遍历调用函数，并不存在什么停止的条件，因此肯定是会将所有元素都过一遍。在这种情况下，就乖乖使用 <code>for</code> 吧。</p>\n<blockquote>\n<p>当然也可以使用 <code>Array.some</code> 等方法模拟中断效果，但要是那样做还不如直接 <code>for</code> 呢。</p>\n</blockquote>\n<h3 id=\"Promise-的问题\"><a href=\"#Promise-的问题\" class=\"headerlink\" title=\"Promise 的问题\"></a>Promise 的问题</h3><p>使用数组方法时，最容易出错的地方是和 Promise 一起使用的时候。</p>\n<p>比如需要从不同的 URL 请求数据，极其容易写成以下<strong>错误的</strong>代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> URLs = [</span><br><span class=\"line\">  <span class=\"string\">'http://www.a.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.b.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.c.com'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> results = URLs.map(<span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $.ajax(url)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>你会发现 <code>results</code> 的内容只是 Promise 实例，根本不是期望的值。代码的问题在于几乎所有的网络请求 API，返回的都是一个 Promise 实例。</p>\n<p>正确的做法是使用 <code>Promise.all</code> 将多个 Promise 实例包装成一个 Promise 实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> URLs = [</span><br><span class=\"line\">  <span class=\"string\">'http://www.a.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.b.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.c.com'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">let</span> result</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all(URLs.map(<span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $.ajax(url)</span><br><span class=\"line\">&#125;)).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> result = res)</span><br></pre></td></tr></table></figure>\n<p>如果你使用 async／await，<strong>千万不要这样写</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> URLs = [</span><br><span class=\"line\">  <span class=\"string\">'http://www.a.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.b.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.c.com'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> results = URLs.map(<span class=\"keyword\">async</span> url =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> $.ajax(url)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>同样这种写法只能得到一个 Promise 实例数组。应该这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> URLs = [</span><br><span class=\"line\">  <span class=\"string\">'http://www.a.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.b.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.c.com'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> results = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(URLs.map(<span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $.ajax(url)</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>⚠️ 注意你不能在没有 <code>async</code> 标识的函数中使用 <code>await</code>，因此在各种全局状态下是无法使用 <code>await</code> 的。幸好 async／await 处理的就是 Promise，你只需要改用 <code>.then</code> 就好了。</p>\n</blockquote>\n<p>举一个更极端的例子，URL 请求需要按顺序发送，上一次的结果需要作为下一次请求的参数。怎么写呢？</p>\n<p>Promise 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> URLs = [</span><br><span class=\"line\">  <span class=\"string\">'http://www.a.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.b.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.c.com'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">let</span> result</span><br><span class=\"line\">URLs</span><br><span class=\"line\">.map(<span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $.ajax(url + params)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.reduce(<span class=\"function\">(<span class=\"params\">prev, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev.then(next)</span><br><span class=\"line\">&#125;, <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">''</span>))</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">ret</span> =&gt;</span> result = ret)</span><br></pre></td></tr></table></figure>\n<p>async／await 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> URLs = [</span><br><span class=\"line\">  <span class=\"string\">'http://www.a.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.b.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.c.com'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> URLs.map(<span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $.ajax(url + params)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).reduce(<span class=\"function\">(<span class=\"params\">prev, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev.then(next)</span><br><span class=\"line\">&#125;, <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">''</span>))</span><br></pre></td></tr></table></figure>\n<p>但是看看用 <code>for</code> 会如何？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> URLs = [</span><br><span class=\"line\">  <span class=\"string\">'http://www.a.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.b.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.c.com'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">let</span> result</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> url <span class=\"keyword\">of</span> URLs) &#123;</span><br><span class=\"line\">  result = <span class=\"keyword\">await</span> $.ajax(url + result)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>意外的简洁。这归功于数组的有序性，以及 <code>for</code> 在语言层面上的可被打断性。</p>\n<p>可见在处理顺序的异步请求上，<code>for</code> 有着很大的优势，但在并发请求上，还是乖乖用 <code>.map</code> 吧（比 <code>for</code> + <code>.push</code> 要好）。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>No Silver Bullet</p>\n</blockquote>\n<h2 id=\"老黄牛的-for\"><a href=\"#老黄牛的-for\" class=\"headerlink\" title=\"老黄牛的 for\"></a>老黄牛的 for</h2><p><img src=\"https://i.imgflip.com/1y3pxa.jpg\" alt=\"for-for-everywhere\"></p>\n<p>几乎每一个编程语言都有 <code>for</code>，JavaScript 也不例外。</p>\n<p>在 JavsScript 中，<code>for</code> 广泛用于遍历数组中，也能用于遍历对象的属性。</p>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ([initialization]; [condition]; [final-expression])</span><br><span class=\"line\">   statement</span><br></pre></td></tr></table></figure>\n<p><code>initialization</code> 是初始化语句，通常用于初始化计数变量（比如，你们最爱的 <code>i</code>）；<code>condition</code> 是判断本次是否执行 <code>statement</code>；<code>final-expression</code> 在 <code>statement</code> 执行完后执行，通常用于对计数变量进行变换。</p>\n<p>例如，要遍历一个数组 <code>arr</code>，那么可以这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">  ;<span class=\"comment\">// 做你爱做的事</span></span><br><span class=\"line\">  <span class=\"comment\">// arr[i] 就能在每一次运行过程中取到在 arr 中的元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者经常见到所谓的性能优化：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>, len=arr.length; i&lt;len; i++) &#123;</span><br><span class=\"line\">  ;<span class=\"comment\">// 做你爱做的事</span></span><br><span class=\"line\">  <span class=\"comment\">// arr[i] 就能在每一次运行过程中取到在 arr 中的元素</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>强烈建议使用 <code>const</code> 或 <code>let</code> 声明变量而不是使用 <code>var</code>，因为 <code>var</code> 会在 <code>for</code> 语句外声明变量，结果就是变量可能会在意外的地方被读取到。如果你不能使用 ES2015 或更新的版本，下文同样有解决方法（同样是本文的主要内容）。</p>\n</blockquote>\n<p>如果你写过 C 系列，那么你有可能忍不住自己的麒麟臂，写出「炫技」的代码来。比如 MDN 上的<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\" target=\"_blank\" rel=\"noopener\">这个例子</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showOffsetPos</span>(<span class=\"params\">sId</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> nLeft = <span class=\"number\">0</span>, nTop = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> oItNode = <span class=\"built_in\">document</span>.getElementById(sId); <span class=\"comment\">/* initialization */</span></span><br><span class=\"line\"></span><br><span class=\"line\">      oItNode; <span class=\"comment\">/* condition */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    nLeft += oItNode.offsetLeft, nTop += oItNode.offsetTop, oItNode = oItNode.offsetParent <span class=\"comment\">/* final-expression */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  ); <span class=\"comment\">/* semicolon */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Offset position of \\''</span> + sId + <span class=\"string\">'\\' element:\\n left: '</span> + nLeft + <span class=\"string\">'px;\\n top: '</span> + nTop + <span class=\"string\">'px;'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Example call: */</span></span><br><span class=\"line\"></span><br><span class=\"line\">showOffsetPos(<span class=\"string\">'content'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Output:</span></span><br><span class=\"line\"><span class=\"comment\">// \"Offset position of \"content\" element:</span></span><br><span class=\"line\"><span class=\"comment\">// left: 0px;</span></span><br><span class=\"line\"><span class=\"comment\">// top: 153px;\"</span></span><br></pre></td></tr></table></figure>\n<p>这么写看着很酷，但是实际上不要这样写，尤其是在团队合作中。这样的代码一是混杂难懂，二是难以维护。代码首先是写给人看的，接着才是给机器运行的。</p>\n<p>或许你已经非常习惯写 <code>for</code> 了，习惯到了看见一个数组就自然而然打出 <code>for (...)</code> 来。但是你有没有想过，很多时候，遍历数组其实跟索引并没有什么关系，代码只是要将数组里面的元素按顺序处理完。然而，<strong>数组天然就应该是顺序的</strong>，根本无需要一个额外的 <code>i</code> 来保证。换句话说，数组应该利用自身属性，提供无需索引的顺序读取方法，而索引只是在顺序读取的过程中的一个记录变量。</p>\n<p>那这样有什么优势呢？</p>\n<p>从处理流程上说，举个例子：假设你是一个接待员，工作是处理一列队伍的咨询。使用 <code>for</code> 的处理方法是：先计算整个队伍的长度，然后喊第一个人开始处理；每处理完一个人，就将序号加一再喊；直到序号等于队伍长度。而使用直接顺序读取的处理方法是：从队伍最前开始处理，每处理完一个，直接转到下一个重新开始处理，直到队伍没有下一个需要处理。这样以来就能省去了对队伍长度和索引的处理。</p>\n<p>从代码逻辑上说，在数组上提供顺序读取方法，是将全局的语法转化为了相当于成员函数的执行，解除了和全局的耦合的同时，结合链式调用和灵活的回调函数能解放出极大的数组处理潜力。你能轻松在一行代码内基于数组进行非常多而灵活的处理，并且将「肮脏」的处理过程隐藏起来，直接得到一个处理得「连你阿妈都唔识」的结果，干净利落。</p>\n<p>下面来认识一下这些顺序读取方法吧。</p>\n<h2 id=\"优雅的-forEach-map-filter-reduce\"><a href=\"#优雅的-forEach-map-filter-reduce\" class=\"headerlink\" title=\"优雅的 forEach, map, filter, reduce\"></a>优雅的 forEach, map, filter, reduce</h2><p><img src=\"https://i.imgflip.com/1y3h2m.jpg\" alt=\"forEach,map,filter,reduce\"></p>\n<p>在 ES5（ES5.1） 中，JavaScript 新增了多个数组方法，包括：forEach, map, filter, reduce。</p>\n<p>每个方法都接受一个回调函数作为参数传入，每个方法都会在取得一个元素的时候调用此回调函数，不同在于不同方法对待回调函数的结果上。</p>\n<h3 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach\"></a>forEach</h3><p>forEach 返回值为 undefined，适合通过数组来操作其他对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue, index, array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//your iterator</span></span><br><span class=\"line\">&#125;[, thisArg]);</span><br></pre></td></tr></table></figure>\n<h3 id=\"map\"><a href=\"#map\" class=\"headerlink\" title=\"map\"></a>map</h3><p>map 返回值为回调函数返回值组成的数组，适合处理数组变换。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = arr.map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue, index, array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Return element for new_array</span></span><br><span class=\"line\">&#125;[, thisArg])</span><br></pre></td></tr></table></figure>\n<h3 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter\"></a>filter</h3><p>filter 返回值为回调函数返回真所对应的元素组成的数组，适合处理数组筛选。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue, index, array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Return true or false</span></span><br><span class=\"line\">&#125;[, thisArg])</span><br></pre></td></tr></table></figure>\n<h3 id=\"reduce\"><a href=\"#reduce\" class=\"headerlink\" title=\"reduce\"></a>reduce</h3><p>reduce 返回值为初始值经过和每个元素作用后得到的最终值，适合遍历数组后得到一个值或者一个对象的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> new_array = arr.reduce(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">accumulator, currentValue, index, array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Return accumulator</span></span><br><span class=\"line\">&#125;[, initialValue])</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>别忘了在回调函数中返回结果！</p>\n</blockquote>\n<h2 id=\"新方法新思路\"><a href=\"#新方法新思路\" class=\"headerlink\" title=\"新方法新思路\"></a>新方法新思路</h2><p>配合几个编写代码时的常见场景，看看不使用 <code>for</code> 的解决方法。</p>\n<h3 id=\"循环多次执行某些动作\"><a href=\"#循环多次执行某些动作\" class=\"headerlink\" title=\"循环多次执行某些动作\"></a>循环多次执行某些动作</h3><p>给定一个数组，打印其元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<p>for</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr[i])  <span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>炫技</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">  i&lt;arr.length;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr[i++])</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n<p>改写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.forEach(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> <span class=\"built_in\">console</span>.log(el))  <span class=\"comment\">// 1 2 3</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对数组的每一个元素进行变换\"><a href=\"#对数组的每一个元素进行变换\" class=\"headerlink\" title=\"对数组的每一个元素进行变换\"></a>对数组的每一个元素进行变换</h3><p>给定一个数组，将其元素都加一。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<p>for</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">  arr[i] = arr[i] + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>炫技</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">  i&lt;arr.length;</span><br><span class=\"line\">  arr[i] = arr[i++] + <span class=\"number\">1</span></span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure>\n<p>改写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">el, i, ar</span>) =&gt;</span> ar[i] = ar[i] + <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>更好</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArr = arr.map(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el + <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在允许的情况下尽量不要去修改原数据，而是返回一个新的数组。</p>\n</blockquote>\n<h3 id=\"提取数组中符合某个标准的元素\"><a href=\"#提取数组中符合某个标准的元素\" class=\"headerlink\" title=\"\b提取数组中符合某个标准的元素\"></a>\b提取数组中符合某个标准的元素</h3><p>给定一个数组，筛选出大于 2 的元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<p>for</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newArr = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr[i] &gt; <span class=\"number\">2</span>) &#123;  <span class=\"comment\">// e.g. should be larger than 2</span></span><br><span class=\"line\">    newArr.push(arr[i])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArr = arr.filter(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> el &gt; <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用数组生成新数组\"><a href=\"#使用数组生成新数组\" class=\"headerlink\" title=\"使用数组生成新数组\"></a>使用数组生成新数组</h3><p>给定一个数组，要求使用其元素内容作为键，元素下表作为值，生成一个新数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br></pre></td></tr></table></figure>\n<p>for</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newArr = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\">  obj[arr[i]] = i</span><br><span class=\"line\">  newArr.push(obj)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// can access 'i' and 'obj' here</span></span><br></pre></td></tr></table></figure>\n<p>改写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newArr = arr.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;&#125;</span><br><span class=\"line\">  obj[el] = i</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// cannot access 'obj' here, hell yeah!</span></span><br></pre></td></tr></table></figure>\n<p>ES2015</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> newArr = arr.map(<span class=\"function\">(<span class=\"params\">el, i</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> &#123; [el]: i &#125; &#125;)</span><br><span class=\"line\"><span class=\"comment\">// less code in one line! fuck yeah!</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"遍历数组，得到一个最终值\"><a href=\"#遍历数组，得到一个最终值\" class=\"headerlink\" title=\"遍历数组，得到一个最终值\"></a>遍历数组，得到一个最终值</h3><p>给定一个数字数组，将其包含的数字累加</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<p>for</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">  result += arr[i]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = arr.reduce(<span class=\"function\">(<span class=\"params\">ret, el</span>) =&gt;</span> ret + el, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>给定一个键值数组，将其转换为一个对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">key</span>: <span class=\"string\">'a'</span>, <span class=\"attr\">value</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">key</span>: <span class=\"string\">'b'</span>, <span class=\"attr\">value</span>: <span class=\"number\">2</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">key</span>: <span class=\"string\">'c'</span>, <span class=\"attr\">value</span>: <span class=\"number\">3</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">key</span>: <span class=\"string\">'d'</span>, <span class=\"attr\">value</span>: <span class=\"number\">4</span> &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>for</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">  result[arr[i].key] = arr[i].value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> result = arr.reduce(<span class=\"function\">(<span class=\"params\">obj, &#123; key, value &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  obj[key] = value</span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;, &#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>从以上例子中可以看到，ES2015 的代码更加清晰可读，而且代码打起来流畅省时（你自己试试！）。如果你还没使用上 ES6，那么应该赶紧去学！或许<a href=\"https://www.wintellect.com/why-you-should-be-writing-ecma-script-6-now/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>和<a href=\"https://thenextweb.com/dd/2016/03/09/6-reasons-need-learn-javascript-es6-now-not-later/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>能说服你。</p>\n<p>也可以看看本人写的 <a href=\"https://raw.githubusercontent.com/exoticknight/blog-post/master/%E3%80%8AUnderstanding%20ECMAScript%206%E3%80%8B%E7%AC%94%E8%AE%B0.md\" target=\"_blank\" rel=\"noopener\">《Understanding ECMAScript 6》笔记</a>。</p>\n<h2 id=\"不灭的-for\"><a href=\"#不灭的-for\" class=\"headerlink\" title=\"不灭的 for\"></a>不灭的 for</h2><p>尽管数组新增的方法十分强大，但是 <code>for</code> 除了会在遍历数组中使用，还会在处理对象的时候使用，比如使用 <code>for...in</code> 遍历对象的属性（及其原型上的属性）。在这些场合上，就需要具体情况具体分析了。</p>\n<h3 id=\"遍历对象问题\"><a href=\"#遍历对象问题\" class=\"headerlink\" title=\"遍历对象问题\"></a>遍历对象问题</h3><p>给出 app 的版本以及版本的使用量，统计最新两个大版本的使用量。版本命名符合 semver 标准，形如 ‘x.x.x’。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> apps = &#123;</span><br><span class=\"line\">  <span class=\"string\">'6.6.0'</span>: <span class=\"number\">53695</span>,</span><br><span class=\"line\">  <span class=\"string\">'6.10.0'</span>: <span class=\"number\">47319</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.4.0'</span>: <span class=\"number\">42601</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.8.5'</span>: <span class=\"number\">41320</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.5.5'</span>: <span class=\"number\">40322</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.8.1'</span>: <span class=\"number\">38509</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.1.5'</span>: <span class=\"number\">26473</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.2.1'</span>: <span class=\"number\">24267</span>,</span><br><span class=\"line\">  <span class=\"string\">'6.10.1'</span>: <span class=\"number\">17042</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.8.0'</span>: <span class=\"number\">13878</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.5.1'</span>: <span class=\"number\">12887</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.1.0'</span>: <span class=\"number\">9836</span>,</span><br><span class=\"line\">  <span class=\"string\">'6.5.0'</span>: <span class=\"number\">8909</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.0.0'</span>: <span class=\"number\">6704</span>,</span><br><span class=\"line\">  <span class=\"string\">'4.7.0'</span>: <span class=\"number\">5915</span>,</span><br><span class=\"line\">  <span class=\"string\">'4.5.0'</span>: <span class=\"number\">5300</span>,</span><br><span class=\"line\">  <span class=\"string\">'4.3.0'</span>: <span class=\"number\">4213</span>,</span><br><span class=\"line\">  <span class=\"string\">'5.7.0'</span>: <span class=\"number\">4000</span>,</span><br><span class=\"line\">  <span class=\"string\">'4.6.1'</span>: <span class=\"number\">3647</span>,</span><br><span class=\"line\">  <span class=\"string\">'4.4.0'</span>: <span class=\"number\">1921</span>,</span><br><span class=\"line\">  <span class=\"string\">'4.6.0'</span>: <span class=\"number\">1802</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>for</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> largest = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> versions = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> apps) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> major = <span class=\"built_in\">parseInt</span>(key.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>], <span class=\"number\">10</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!versions[major]) &#123;</span><br><span class=\"line\">    versions[major] = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  versions[major][key] = apps[key]</span><br><span class=\"line\"></span><br><span class=\"line\">  largest = largest &lt; major ? major : largest</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> newApps = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.assign(newApps, versions[largest-i])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ES2015</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> largest = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> versions = <span class=\"built_in\">Object</span>.keys(apps).reduce(<span class=\"function\">(<span class=\"params\">obj, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> major = <span class=\"built_in\">parseInt</span>(key.split(<span class=\"string\">'.'</span>)[<span class=\"number\">0</span>], <span class=\"number\">10</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!obj[major]) &#123;</span><br><span class=\"line\">    obj[major] = &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  obj[major][key] = apps[key]</span><br><span class=\"line\"></span><br><span class=\"line\">  largest = largest &lt; major ? major : largest</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">&#125;, &#123;&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> newApps = [...Array(<span class=\"number\">2</span>).keys()].map(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> largest - x).reduce(<span class=\"function\">(<span class=\"params\">obj, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(obj, versions[key])</span><br><span class=\"line\">&#125;, &#123;&#125;)</span><br></pre></td></tr></table></figure>\n<p>使用 <code>for</code> 和不使用 <code>for</code>相比，相差不大，甚至代码看起来更清晰，而且有 ES2015 的加成，消除了变量泄露的影响。所以如果是遍历对象，就没必要去用数组的方法了。</p>\n<h3 id=\"性能问题\"><a href=\"#性能问题\" class=\"headerlink\" title=\"性能问题\"></a>性能问题</h3><p>截止目前位置（2017-10-17），从 <a href=\"https://jsperf.com/for-vs-foreach-vs-for-of\" target=\"_blank\" rel=\"noopener\">benchmark</a> 来看，在性能上，<code>for</code> &gt; <code>forEach</code> &gt; <code>for...of</code>。</p>\n<p>因此在一些对性能要求比较高的代码中，使用 <code>forEach</code> 和 <code>for...of</code> 需要谨慎，这有可能会成为性能瓶颈。另外 <code>for...of</code> 在浏览器上的支持度不高，所以还是可以暂时不使用，除非你清楚自己在干什么。</p>\n<p>不过，仍然是那句话，代码首先是写给人看的，性能优化应该在功能实现之后再考虑。</p>\n<h3 id=\"循环中断问题\"><a href=\"#循环中断问题\" class=\"headerlink\" title=\"循环中断问题\"></a>循环中断问题</h3><p>一般来说，使用 <code>for</code> 和使用数组方法在功能实现上是一样的，但是由于 <code>for</code> 是编程语言层面的实现，可以使用 <code>break</code> 和 <code>return</code> 手段进行中断；上文中的数组方法由于是遍历调用函数，并不存在什么停止的条件，因此肯定是会将所有元素都过一遍。在这种情况下，就乖乖使用 <code>for</code> 吧。</p>\n<blockquote>\n<p>当然也可以使用 <code>Array.some</code> 等方法模拟中断效果，但要是那样做还不如直接 <code>for</code> 呢。</p>\n</blockquote>\n<h3 id=\"Promise-的问题\"><a href=\"#Promise-的问题\" class=\"headerlink\" title=\"Promise 的问题\"></a>Promise 的问题</h3><p>使用数组方法时，最容易出错的地方是和 Promise 一起使用的时候。</p>\n<p>比如需要从不同的 URL 请求数据，极其容易写成以下<strong>错误的</strong>代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> URLs = [</span><br><span class=\"line\">  <span class=\"string\">'http://www.a.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.b.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.c.com'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> results = URLs.map(<span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $.ajax(url)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>你会发现 <code>results</code> 的内容只是 Promise 实例，根本不是期望的值。代码的问题在于几乎所有的网络请求 API，返回的都是一个 Promise 实例。</p>\n<p>正确的做法是使用 <code>Promise.all</code> 将多个 Promise 实例包装成一个 Promise 实例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> URLs = [</span><br><span class=\"line\">  <span class=\"string\">'http://www.a.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.b.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.c.com'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">let</span> result</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all(URLs.map(<span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $.ajax(url)</span><br><span class=\"line\">&#125;)).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> result = res)</span><br></pre></td></tr></table></figure>\n<p>如果你使用 async／await，<strong>千万不要这样写</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> URLs = [</span><br><span class=\"line\">  <span class=\"string\">'http://www.a.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.b.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.c.com'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> results = URLs.map(<span class=\"keyword\">async</span> url =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">await</span> $.ajax(url)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>同样这种写法只能得到一个 Promise 实例数组。应该这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> URLs = [</span><br><span class=\"line\">  <span class=\"string\">'http://www.a.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.b.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.c.com'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> results = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(URLs.map(<span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> $.ajax(url)</span><br><span class=\"line\">&#125;))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>⚠️ 注意你不能在没有 <code>async</code> 标识的函数中使用 <code>await</code>，因此在各种全局状态下是无法使用 <code>await</code> 的。幸好 async／await 处理的就是 Promise，你只需要改用 <code>.then</code> 就好了。</p>\n</blockquote>\n<p>举一个更极端的例子，URL 请求需要按顺序发送，上一次的结果需要作为下一次请求的参数。怎么写呢？</p>\n<p>Promise 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> URLs = [</span><br><span class=\"line\">  <span class=\"string\">'http://www.a.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.b.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.c.com'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">let</span> result</span><br><span class=\"line\">URLs</span><br><span class=\"line\">.map(<span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $.ajax(url + params)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.reduce(<span class=\"function\">(<span class=\"params\">prev, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev.then(next)</span><br><span class=\"line\">&#125;, <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">''</span>))</span><br><span class=\"line\">.then(<span class=\"function\"><span class=\"params\">ret</span> =&gt;</span> result = ret)</span><br></pre></td></tr></table></figure>\n<p>async／await 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> URLs = [</span><br><span class=\"line\">  <span class=\"string\">'http://www.a.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.b.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.c.com'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> URLs.map(<span class=\"function\"><span class=\"params\">url</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $.ajax(url + params)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).reduce(<span class=\"function\">(<span class=\"params\">prev, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> prev.then(next)</span><br><span class=\"line\">&#125;, <span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">''</span>))</span><br></pre></td></tr></table></figure>\n<p>但是看看用 <code>for</code> 会如何？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> URLs = [</span><br><span class=\"line\">  <span class=\"string\">'http://www.a.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.b.com'</span>,</span><br><span class=\"line\">  <span class=\"string\">'http://www.c.com'</span>,</span><br><span class=\"line\">]</span><br><span class=\"line\"><span class=\"keyword\">let</span> result</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> url <span class=\"keyword\">of</span> URLs) &#123;</span><br><span class=\"line\">  result = <span class=\"keyword\">await</span> $.ajax(url + result)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>意外的简洁。这归功于数组的有序性，以及 <code>for</code> 在语言层面上的可被打断性。</p>\n<p>可见在处理顺序的异步请求上，<code>for</code> 有着很大的优势，但在并发请求上，还是乖乖用 <code>.map</code> 吧（比 <code>for</code> + <code>.push</code> 要好）。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://i.imgflip.com/1y3pxa.jpg","popularPost_tmp_gaData":{"updated":"Wed May 22 2019 17:09:17 GMT+0800 (China Standard Time)","title":"不要再只会用 for 了","path":"dont-only-use-for-any-more/","eyeCatchImage":"https://i.imgflip.com/1y3pxa.jpg","excerpt":null,"date":"2017-10-23T15:54:14.000Z","pv":0,"totalPV":0,"categories":"技术 > 前端 > 编程语言 > javascript","tags":["javascript","bytalk"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3180},{"title":"simpleTemplate.js 中列表和标志位的功能的实现","id":"28","updated":"2014-11-09T17:50:31.000Z","date":"2014-11-09T17:43:36.000Z","_content":"\n\n在[上一篇文章](http://blog.e10t.net/a-piece-of-simple-javascript-for-template-render/)中，为了一些实际需求，我写了一个非常理想化而基础的模板渲染js代码。但当我尝试将其实际使用的时候，却发现代码中不但问题不少，而且功能也不够，于是就只能继续改进。\n\n> 文中所有代码都截取自js文件，稍有修改。你可以到[github项目](https://github.com/exoticknight/jswarehouse/tree/master/simpleTemplate)上找到完整代码，边对比边看本文。\n\n## 绕开split函数\n\n在上一篇文章的更新里面提到，split函数在IE下有问题，只能放弃使用。\n\n其实在使用正则匹配数据域（field，在模板中的形式是`{field}`）的时候，是能够同时获得最近一次匹配到的数据域的位置的。比如：\n\n```javascript\nvar re=/\\{t\\}/g;\nre.exec('test{t}');  // [\"{t}\"]\nre.lastIndex;  // 7\n```\n\n或者去看[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex)加深了解。\n\n于是这个`lastIndex`减去匹配出的数据域长度就可以确定数据域前一小节模板文本的结尾，然后对原始模板字符串使用slice函数切割出此一小节模板文本。下面是大概的代码。\n\n```javascript\nvar lastIndex = 0;\nwhile ( ( mark = fieldRe.exec( str ) ) !== null ) {\n    /*\n    other code...\n    */\n\n    templateText.push( str.slice( lastIndex, fieldRe.lastIndex - mark[0].length ) );\n    lastIndex = fieldRe.lastIndex;\n\n    /*\n    other code...\n    */\n}\n\nif ( lastIndex < str.length ) {\n    templateText.push( str.slice( lastIndex, str.length ) );\n}\n```\n\n\n\n最后记得要检查一下完成匹配后的`lastIndex`值，因为有可能在最后一个数据域后还有一小段模板文本。\n\n好了，现在已经绕开了split函数来将模板分成“文本”和“数据域”两个数组了。\n\n## .表示法\n\n原来的js代码中，作为`field`的命名，只能使用一般的命名，也就是带`_`的英文字母和数字的混合，但是用以填充的json数据不一定是“扁平化”的，换言之有可能是嵌套的，比如`{'a':{'b':1}}`。普通js代码中用`a.b`就能访问`b`的值。在模板解析中，我思考了这么一个方法来实现（如果有更好的方法请告诉我！）\n\n将访问的路径用`.`分开，再逐层赋值，写成代码就是如下：\n\n```javascript\nvar _getDataViaPath = function( path, json ) {\n    var fieldPath = path.split( '.' ),\n        data = json,\n        index;\n\n    for ( index = 0; index < fieldPath.length; index++ ) {\n        data = data[fieldPath[index]];\n        if ( data === undefined ) {\n            return '';\n        }\n        if ( data === null ) {\n            return index + 1 < fieldPath.length ? '' : null; // maybe not necessary\n        }\n    }\n\n    return typeof data === 'function' ? data.call( json/* maybe better than 'data' */ ) : data;\n},\n```\n\n在通过路径访问数据的时候，如果：\n\n1. 路径不存在，返回空字符串\n1. 路径存在，返回数据\n\n第二行，以`.`为分割符将访问路径拆成数组。\n\n第六行，通过遍历数组来逐层访问数据，如果途中遇到undefinded，即路径不存在，那么就直接返回空字符（如果直接返回undefined，那么在拼合字符串的时候，调用toString方法会返回字符串`undefined`，显然不是我们想要的）。\n\n然而，路径存在的情况下，数据有可能为`null`，而`null`是不能再读取属性的，于是就看看是不是最后一个路径，不是就返回空字符（因为再走下去路径也不存在了），是就返回数据`null`。这里可能有点绕，并且其实空字符和`null`最后渲染出来的效果是一样的，似乎也没必要这么深究，但还是谨慎地区分一下比较好。\n\n最后，返回数据的时候如果发现数据是函数，那么就执行了之后再返回。执行函数的时候总是要留意这个函数执行的context（上下文），这里给它绑定最顶层的数据好了，在函数体里面它喜欢访问哪个嵌套的数据都行。\n\n> 使用.call()来调用函数，第一个参数是函数的context（上下文）。\n\n然后问题来了，之前识别数据域的正则在加入.表示法功能后就不适用了。重写一下。\n\n```javascript\n/\\{\\s*(([\\w\\d]+)(\\.[\\w\\d]+)*)\\s*\\}/gm\n```\n\n这样就既能匹配`{field}`，也能匹配`{field.field}`了。\n\n## 标志位 & 列表\n\n### 模板设计\n\n嗯，不知道这里说“标志位”是否准确，或者大家是否明白我要表达的意思，可能说“flag”会更容易理解？\n\n这里的标志位起这么一个作用，渲染的时候查看这个标志位，根据值（真/假）来决定是否渲染某一小段模板。\n\n看代码：\n\n```markup\n<p>{!flag}</p>\n<p>{field}</p>\n<p>{!flag}</p>\n```\n\n这里的`{!flag}`表明渲染的时候先查看一下`flag`的值，如果结果为假，那么两个`{!flag}`所包围着的一小段模板就不渲染了。\n\n至于列表，这样：\n\n```markup\n<p>{@list}</p>\n<p>{something}</p>\n<p>{-list}</p>\n```\n\n跟标志位类似，`{@list}`表明渲染的时候遍历`list`列表，每次循环都将`{@list}`和`{-list}`之间的模板渲染一次。\n\n为什么使用`@`和`-`两个不同的符号？因为要支持嵌套，循环的头尾用不同符号便于配对。\n\n```markup\n<p>{@list}</p>\n    <p>{@list1}</p>\n    <p>{something}</p>\n    <p>{-list1}</p>\n<p>{-list}</p>\n```\n\n### 修改正则识别\n\n再次修改识别数据域的正则表达式：\n\n```javascript\n/\\{\\s*([@|\\-|!]?)(([\\w\\d]+)(\\.[\\w\\d]+)*)\\s*\\}/gm\n```\n\n### 编写渲染过程\n\n接下来是渲染的过程。先回顾一下一个生成好的模板对象的结构：\n\n```javascript\ntemplate = {\n    templateText: [],  // 模板文本数组\n    fields: [],  // 数据域数组\n    data: {}  // 数据对象\n}\n```\n\n所以模板对象 = 模板文本数组 + 数据域数组 + 数据对象。\n\n我们稍微修改一下数据域数组的结构。\n\n从类似`['field1', 'field2', 'field1']`\n\n改成`[['!', 'field1'], ['', 'field2'], ['!': 'field1']]`\n\n也就是说在每一个数据域中添加一个标识，用来辨别此数据域是否有特殊功能。这在生成模板的时候并不难实现。\n\n当渲染进程遇到一个特殊功能的数据域，那么就应该去定位配对的下一个特殊数据域，两个特殊数据域中间的模板和数据域就需要特殊处理。\n\n我们可以在生成时就记录好这个信息。在模板对象中增加一个`functions`对象，结构如下：\n\n```javascript\nfunctions: {\n    loop: {},\n    flag: {}\n}\n```\n\n循环/标记位的首尾就以键值对的方式记录在`loop`/`falg`中，这样在渲染时一查就行。\n\n所以模板对象 = 模板文本数组 + 数据域数组 + 数据对象 + functions对象。\n\n先将渲染函数独立出来成一个内部函数：\n\n```javascript\n_render = function( scope, start, end ) {\n    var tempFragment = [],\n        strings = this.getTemplateText(),\n        fields = this.getFields(),\n        functions = this.getFunctions(),\n        field,\n        data,\n        i;\n\n    for ( i = start; i < end; i++ ) {\n        tempFragment.push( strings[i] );\n\n        field = fields[i];\n        data = _getDataViaPath( field[1], scope );\n        switch ( field[0] ) {\n            case '': // normal data\n            tempFragment.push( data );\n            break;\n\n            case '@': // begin of list\n            break;\n\n            case '!': // begin of flag\n            break;\n\n            default:\n        }\n    }\n\n    tempFragment.push( strings[i] ); // dont forget the last of strings\n\n    return tempFragment.join( '' );\n}\n```\n\n我来慢慢解释。\n\n`_render`函数定义为传入数据、待渲染数据域开头的下标和待渲染数据域结尾的下标，会返回数据域数组两下标段间（包括开头不包括结尾）的渲染结果（一个字符串）。\n\n开头各种变量定义自不用解释，主体部分是一个遍历，最后返回字符串。\n\n要注意，因为分割原始模板字符串使用的分隔符是不同的数据域，所以分割出来的**模板文本**总是比匹配到的**数据域**数量多1。\n\n> 举个例子，`'sgewgwgw,,seyer,jhrepbo,'.split(/,/g)`，匹配到的分隔符数量为4，分割后文本的数量为5。而任意两个分隔符之间的字符串也可以单独又看作一个待分割的字符串，继续分割后也跟整个字符串具有同样的性质。\n\n画出图来的话就是如下：\n\n![结构图](https://i.imgur.com/4FopsTK.png)\n\n整个函数执行过程看下图：\n\n![执行流程](https://i.imgur.com/ODPd80S.png)\n\n可以看到，循环要做的第一件事是压入模板文本，对应循环体内第一条语句`tempFragment.push( strings[i] );`。剩下的全是在处理数据，可以看到之前写的`_getDataViaPath`函数在这里用上了。最后在循环外压入最后一个模板文本，对应结束循环之后第一条语句`tempFragment.push( strings[i] );`。\n\n来编写数据处理中遇到标志位的情况，对应`switch`语句中`case '!'`：\n\n```javascript\ncase '!': // begin of flag\nif ( data ) {\n    tempFragment.push( _render.call( this, scope, i + 1, functions['flag'][i]));\n}\n\n// reset index\ni = functions['flag'][i];\nbreak;\n```\n\n十分简单，按照要求，判断值，再决定是否渲染两标志位间的模板。新加入的`functions`对象就在这里起重要作用了。\n\n最后的`i = functions['flag'][i];`是为了重置当前循环处理的位置（注意这个位置是整个数据域数组中的位置）。这里无需考虑超出下标的问题。\n\n> 为什么不考虑？`functions`对象中指示的位置必须是正确，否则整个渲染过程就毫无运行的必要。\n\n如果遇到列表：\n\n```javascript\ncase '@': // begin of list\nif ( Object.prototype.toString.call( data ) === '[object Array]' ) {\n    for ( var loopIndex = 0; loopIndex < data.length; loopIndex++ ) {\n\n        // recursively render\n        tempFragment.push( _render.call( this, scope, i + 1, functions['loop'][i]) );\n    }\n}\n\n// reset index\ni = functions['loop'][i];\nbreak;\n```\n\n这里需要先判断数据是否为数组，然后遍历数组，循环中渲染两个列表标志间的模板。其实跟标志位的过程差不多。\n\n如果遇到普通数据：\n\n```javascript\ncase '': // normal data\ntempFragment.push( data );\nbreak;\n```\n\n直接压入即可。\n\n### 编写解析模板的过程\n\n嘿，先别高兴得太早了，虽然编写好了渲染过程，但是渲染是要基于已经生成好的模板的！\n\n别忘了在渲染中指路的重要的`functions`对象是还没有生成出来的！我们刚才只是在假设它已经能工作的前提下编程的！\n\n回到本文一开头切割原始模板字符串的代码中，我们需要在那里为以后的一切铺路。还记得那个处理正则匹配的`while`语句吗？\n\n前方代码高能注意。\n\n```javascript\nvar templateText = [],\n    fields = [],\n    lastIndex = 0,\n    functions = {\n        'loop': {},\n        'flag': {}\n    },\n    flags = [],  // flag stack\n    loops = [],  // loop stack\n    flag,\n    loop,\n    mark;\n\n// initial data and index\nthis.data = {};\n\nwhile ( ( mark = fieldRe.exec( str ) ) !== null ) {\n    /*\n     * mark[0] = '{@fo.fo}'\n     * mark[1] = '@'\n     * mark[2] = 'fo.fo'\n     * mark[3] = 'fo'\n     * mark[4] = '.fo'\n     */\n    fields.push( [mark[1], mark[2]] );\n\n    templateText.push( str.slice( lastIndex, fieldRe.lastIndex - mark[0].length ) );\n    lastIndex = fieldRe.lastIndex;\n\n    switch ( mark[1] ) {\n        case '@':\n        loops.push( [mark[2], fields.length-1] );\n        break;\n\n        case '-':\n        if ( loops[loops.length-1] && loops[loops.length-1][0] === mark[2] ) {\n            loop = loops.pop();\n            functions['loop'][loop[1]] = fields.length - 1;\n        } else {\n            return;\n        }\n        break;\n\n        case '!':\n        if ( flags[0] && flags[0][0] === mark[2] ) {\n            flag = flags.pop();\n            functions['flag'][flag[1]] = fields.length - 1;\n        } else {\n            flags.push( [mark[2], fields.length-1] );\n        }\n        break;\n\n        default:\n    }\n\n}\n\nif ( lastIndex < str.length ) {\n    templateText.push( str.slice( lastIndex, str.length ) );\n}\n\nif ( flags.length !== 0 || loops.length !== 0 ) {\n    return;\n}\n```\n\n我们最后使用正则表达式是\n\n```javascript\n/\\{\\s*([@|\\-|!]?)(([\\w\\d]+)(\\.[\\w\\d]+)*)\\s*\\}/gm\n```\n\n在执行了`exec`之后，每一次匹配出来的结果都是一个数组，在注释当中我已经明确地指出每一个位置上的内容了。好好记住，开始解释代码。\n\n首先第一句，生成数据域数组。在编写渲染过程一节中我已经说过了这个的数据结构已经改为每一个元素都是“特殊功能符号”和“数据路径”了。这一句非常好理解。\n\n接着的两句就是熟悉的模板文本数组生成，是由于要绕开`split`函数所写。继续看下去。\n\n好了，*数据域数组*和*模板文本数组*处理好了，模板对象 = 模板文本数组 + 数据域数组 + 数据对象 + functions对象，接下来是functions对象。\n\n> 这里使用栈来检查特殊功能数据域是否匹配。\n\n查看一下数据的特殊功能符号，如果遇到的一个列表的头：\n\n```javascript\ncase '@':\nloops.push( [mark[2], fields.length-1] );\nbreak;\n```\n\n暂时先将它和它的位置压入栈`loops`。\n\n如果遇到一个列表的尾：\n\n```javascript\ncase '-':\nif ( loops[loops.length-1] && loops[loops.length-1][0] === mark[2] ) {\n    loop = loops.pop();\n    functions['loop'][loop[1]] = fields.length - 1;\n} else {\n    return;\n}\nbreak;\n```\n\n检查栈`loops`中最近一次压入的数据，不存在或者不等于这个列表尾的情况都属于模板格式错误，直接退出。\n\n否则就是匹配成功了，将列表头的位置作为键，列表尾的位置作为值放入`functions`对象的`loop`属性中。\n\n如果遇到标志位：\n\n```javascript\ncase '!':\nif ( flags[0] && flags[0][0] === mark[2] ) {\n    flag = flags.pop();\n    functions['flag'][flag[1]] = fields.length - 1;\n} else {\n    flags.push( [mark[2], fields.length-1] );\n}\nbreak;\n```\n\n查找栈`flags`中最近一次压入的数据，跟本次标志位相等即匹配成功，不相等继续压入。\n\n好了最后再检查一下两个栈是否为空，不为空则有些数据域没有匹配成功，也就是模板格式错误，打回。\n\n```javascript\nif ( flags.length !== 0 || loops.length !== 0 ) {\n    return;\n}\n```\n\n呼！写到这里，我都怀疑是不是说得太罗嗦了。画公仔都画出肠了。\n\n## 还没完！\n\n其实在渲染列表的时候，只是循环是没有多大意义的。更多时候，我们想输出的是列表中的内容。然而每次循环中需要输出的数据都不一样，怎么破？\n\n再写下去我估计你也不想看了，这个问题在下一篇文章中详细解释。","source":"_posts/simpleTemplate-js中列表和标志位的功能的实现.md","raw":"---\ntitle: simpleTemplate.js 中列表和标志位的功能的实现\ncategories:\n  - [技术, 前端]\n  - [编程语言, javascript]\ntags: [javascript, string-template]\npermalink: implements-list-and-flag-in-simpletemplatejs\nid: 28\nupdated: '2014-11-10 01:50:31'\ndate: 2014-11-10 01:43:36\n---\n\n\n在[上一篇文章](http://blog.e10t.net/a-piece-of-simple-javascript-for-template-render/)中，为了一些实际需求，我写了一个非常理想化而基础的模板渲染js代码。但当我尝试将其实际使用的时候，却发现代码中不但问题不少，而且功能也不够，于是就只能继续改进。\n\n> 文中所有代码都截取自js文件，稍有修改。你可以到[github项目](https://github.com/exoticknight/jswarehouse/tree/master/simpleTemplate)上找到完整代码，边对比边看本文。\n\n## 绕开split函数\n\n在上一篇文章的更新里面提到，split函数在IE下有问题，只能放弃使用。\n\n其实在使用正则匹配数据域（field，在模板中的形式是`{field}`）的时候，是能够同时获得最近一次匹配到的数据域的位置的。比如：\n\n```javascript\nvar re=/\\{t\\}/g;\nre.exec('test{t}');  // [\"{t}\"]\nre.lastIndex;  // 7\n```\n\n或者去看[MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex)加深了解。\n\n于是这个`lastIndex`减去匹配出的数据域长度就可以确定数据域前一小节模板文本的结尾，然后对原始模板字符串使用slice函数切割出此一小节模板文本。下面是大概的代码。\n\n```javascript\nvar lastIndex = 0;\nwhile ( ( mark = fieldRe.exec( str ) ) !== null ) {\n    /*\n    other code...\n    */\n\n    templateText.push( str.slice( lastIndex, fieldRe.lastIndex - mark[0].length ) );\n    lastIndex = fieldRe.lastIndex;\n\n    /*\n    other code...\n    */\n}\n\nif ( lastIndex < str.length ) {\n    templateText.push( str.slice( lastIndex, str.length ) );\n}\n```\n\n\n\n最后记得要检查一下完成匹配后的`lastIndex`值，因为有可能在最后一个数据域后还有一小段模板文本。\n\n好了，现在已经绕开了split函数来将模板分成“文本”和“数据域”两个数组了。\n\n## .表示法\n\n原来的js代码中，作为`field`的命名，只能使用一般的命名，也就是带`_`的英文字母和数字的混合，但是用以填充的json数据不一定是“扁平化”的，换言之有可能是嵌套的，比如`{'a':{'b':1}}`。普通js代码中用`a.b`就能访问`b`的值。在模板解析中，我思考了这么一个方法来实现（如果有更好的方法请告诉我！）\n\n将访问的路径用`.`分开，再逐层赋值，写成代码就是如下：\n\n```javascript\nvar _getDataViaPath = function( path, json ) {\n    var fieldPath = path.split( '.' ),\n        data = json,\n        index;\n\n    for ( index = 0; index < fieldPath.length; index++ ) {\n        data = data[fieldPath[index]];\n        if ( data === undefined ) {\n            return '';\n        }\n        if ( data === null ) {\n            return index + 1 < fieldPath.length ? '' : null; // maybe not necessary\n        }\n    }\n\n    return typeof data === 'function' ? data.call( json/* maybe better than 'data' */ ) : data;\n},\n```\n\n在通过路径访问数据的时候，如果：\n\n1. 路径不存在，返回空字符串\n1. 路径存在，返回数据\n\n第二行，以`.`为分割符将访问路径拆成数组。\n\n第六行，通过遍历数组来逐层访问数据，如果途中遇到undefinded，即路径不存在，那么就直接返回空字符（如果直接返回undefined，那么在拼合字符串的时候，调用toString方法会返回字符串`undefined`，显然不是我们想要的）。\n\n然而，路径存在的情况下，数据有可能为`null`，而`null`是不能再读取属性的，于是就看看是不是最后一个路径，不是就返回空字符（因为再走下去路径也不存在了），是就返回数据`null`。这里可能有点绕，并且其实空字符和`null`最后渲染出来的效果是一样的，似乎也没必要这么深究，但还是谨慎地区分一下比较好。\n\n最后，返回数据的时候如果发现数据是函数，那么就执行了之后再返回。执行函数的时候总是要留意这个函数执行的context（上下文），这里给它绑定最顶层的数据好了，在函数体里面它喜欢访问哪个嵌套的数据都行。\n\n> 使用.call()来调用函数，第一个参数是函数的context（上下文）。\n\n然后问题来了，之前识别数据域的正则在加入.表示法功能后就不适用了。重写一下。\n\n```javascript\n/\\{\\s*(([\\w\\d]+)(\\.[\\w\\d]+)*)\\s*\\}/gm\n```\n\n这样就既能匹配`{field}`，也能匹配`{field.field}`了。\n\n## 标志位 & 列表\n\n### 模板设计\n\n嗯，不知道这里说“标志位”是否准确，或者大家是否明白我要表达的意思，可能说“flag”会更容易理解？\n\n这里的标志位起这么一个作用，渲染的时候查看这个标志位，根据值（真/假）来决定是否渲染某一小段模板。\n\n看代码：\n\n```markup\n<p>{!flag}</p>\n<p>{field}</p>\n<p>{!flag}</p>\n```\n\n这里的`{!flag}`表明渲染的时候先查看一下`flag`的值，如果结果为假，那么两个`{!flag}`所包围着的一小段模板就不渲染了。\n\n至于列表，这样：\n\n```markup\n<p>{@list}</p>\n<p>{something}</p>\n<p>{-list}</p>\n```\n\n跟标志位类似，`{@list}`表明渲染的时候遍历`list`列表，每次循环都将`{@list}`和`{-list}`之间的模板渲染一次。\n\n为什么使用`@`和`-`两个不同的符号？因为要支持嵌套，循环的头尾用不同符号便于配对。\n\n```markup\n<p>{@list}</p>\n    <p>{@list1}</p>\n    <p>{something}</p>\n    <p>{-list1}</p>\n<p>{-list}</p>\n```\n\n### 修改正则识别\n\n再次修改识别数据域的正则表达式：\n\n```javascript\n/\\{\\s*([@|\\-|!]?)(([\\w\\d]+)(\\.[\\w\\d]+)*)\\s*\\}/gm\n```\n\n### 编写渲染过程\n\n接下来是渲染的过程。先回顾一下一个生成好的模板对象的结构：\n\n```javascript\ntemplate = {\n    templateText: [],  // 模板文本数组\n    fields: [],  // 数据域数组\n    data: {}  // 数据对象\n}\n```\n\n所以模板对象 = 模板文本数组 + 数据域数组 + 数据对象。\n\n我们稍微修改一下数据域数组的结构。\n\n从类似`['field1', 'field2', 'field1']`\n\n改成`[['!', 'field1'], ['', 'field2'], ['!': 'field1']]`\n\n也就是说在每一个数据域中添加一个标识，用来辨别此数据域是否有特殊功能。这在生成模板的时候并不难实现。\n\n当渲染进程遇到一个特殊功能的数据域，那么就应该去定位配对的下一个特殊数据域，两个特殊数据域中间的模板和数据域就需要特殊处理。\n\n我们可以在生成时就记录好这个信息。在模板对象中增加一个`functions`对象，结构如下：\n\n```javascript\nfunctions: {\n    loop: {},\n    flag: {}\n}\n```\n\n循环/标记位的首尾就以键值对的方式记录在`loop`/`falg`中，这样在渲染时一查就行。\n\n所以模板对象 = 模板文本数组 + 数据域数组 + 数据对象 + functions对象。\n\n先将渲染函数独立出来成一个内部函数：\n\n```javascript\n_render = function( scope, start, end ) {\n    var tempFragment = [],\n        strings = this.getTemplateText(),\n        fields = this.getFields(),\n        functions = this.getFunctions(),\n        field,\n        data,\n        i;\n\n    for ( i = start; i < end; i++ ) {\n        tempFragment.push( strings[i] );\n\n        field = fields[i];\n        data = _getDataViaPath( field[1], scope );\n        switch ( field[0] ) {\n            case '': // normal data\n            tempFragment.push( data );\n            break;\n\n            case '@': // begin of list\n            break;\n\n            case '!': // begin of flag\n            break;\n\n            default:\n        }\n    }\n\n    tempFragment.push( strings[i] ); // dont forget the last of strings\n\n    return tempFragment.join( '' );\n}\n```\n\n我来慢慢解释。\n\n`_render`函数定义为传入数据、待渲染数据域开头的下标和待渲染数据域结尾的下标，会返回数据域数组两下标段间（包括开头不包括结尾）的渲染结果（一个字符串）。\n\n开头各种变量定义自不用解释，主体部分是一个遍历，最后返回字符串。\n\n要注意，因为分割原始模板字符串使用的分隔符是不同的数据域，所以分割出来的**模板文本**总是比匹配到的**数据域**数量多1。\n\n> 举个例子，`'sgewgwgw,,seyer,jhrepbo,'.split(/,/g)`，匹配到的分隔符数量为4，分割后文本的数量为5。而任意两个分隔符之间的字符串也可以单独又看作一个待分割的字符串，继续分割后也跟整个字符串具有同样的性质。\n\n画出图来的话就是如下：\n\n![结构图](https://i.imgur.com/4FopsTK.png)\n\n整个函数执行过程看下图：\n\n![执行流程](https://i.imgur.com/ODPd80S.png)\n\n可以看到，循环要做的第一件事是压入模板文本，对应循环体内第一条语句`tempFragment.push( strings[i] );`。剩下的全是在处理数据，可以看到之前写的`_getDataViaPath`函数在这里用上了。最后在循环外压入最后一个模板文本，对应结束循环之后第一条语句`tempFragment.push( strings[i] );`。\n\n来编写数据处理中遇到标志位的情况，对应`switch`语句中`case '!'`：\n\n```javascript\ncase '!': // begin of flag\nif ( data ) {\n    tempFragment.push( _render.call( this, scope, i + 1, functions['flag'][i]));\n}\n\n// reset index\ni = functions['flag'][i];\nbreak;\n```\n\n十分简单，按照要求，判断值，再决定是否渲染两标志位间的模板。新加入的`functions`对象就在这里起重要作用了。\n\n最后的`i = functions['flag'][i];`是为了重置当前循环处理的位置（注意这个位置是整个数据域数组中的位置）。这里无需考虑超出下标的问题。\n\n> 为什么不考虑？`functions`对象中指示的位置必须是正确，否则整个渲染过程就毫无运行的必要。\n\n如果遇到列表：\n\n```javascript\ncase '@': // begin of list\nif ( Object.prototype.toString.call( data ) === '[object Array]' ) {\n    for ( var loopIndex = 0; loopIndex < data.length; loopIndex++ ) {\n\n        // recursively render\n        tempFragment.push( _render.call( this, scope, i + 1, functions['loop'][i]) );\n    }\n}\n\n// reset index\ni = functions['loop'][i];\nbreak;\n```\n\n这里需要先判断数据是否为数组，然后遍历数组，循环中渲染两个列表标志间的模板。其实跟标志位的过程差不多。\n\n如果遇到普通数据：\n\n```javascript\ncase '': // normal data\ntempFragment.push( data );\nbreak;\n```\n\n直接压入即可。\n\n### 编写解析模板的过程\n\n嘿，先别高兴得太早了，虽然编写好了渲染过程，但是渲染是要基于已经生成好的模板的！\n\n别忘了在渲染中指路的重要的`functions`对象是还没有生成出来的！我们刚才只是在假设它已经能工作的前提下编程的！\n\n回到本文一开头切割原始模板字符串的代码中，我们需要在那里为以后的一切铺路。还记得那个处理正则匹配的`while`语句吗？\n\n前方代码高能注意。\n\n```javascript\nvar templateText = [],\n    fields = [],\n    lastIndex = 0,\n    functions = {\n        'loop': {},\n        'flag': {}\n    },\n    flags = [],  // flag stack\n    loops = [],  // loop stack\n    flag,\n    loop,\n    mark;\n\n// initial data and index\nthis.data = {};\n\nwhile ( ( mark = fieldRe.exec( str ) ) !== null ) {\n    /*\n     * mark[0] = '{@fo.fo}'\n     * mark[1] = '@'\n     * mark[2] = 'fo.fo'\n     * mark[3] = 'fo'\n     * mark[4] = '.fo'\n     */\n    fields.push( [mark[1], mark[2]] );\n\n    templateText.push( str.slice( lastIndex, fieldRe.lastIndex - mark[0].length ) );\n    lastIndex = fieldRe.lastIndex;\n\n    switch ( mark[1] ) {\n        case '@':\n        loops.push( [mark[2], fields.length-1] );\n        break;\n\n        case '-':\n        if ( loops[loops.length-1] && loops[loops.length-1][0] === mark[2] ) {\n            loop = loops.pop();\n            functions['loop'][loop[1]] = fields.length - 1;\n        } else {\n            return;\n        }\n        break;\n\n        case '!':\n        if ( flags[0] && flags[0][0] === mark[2] ) {\n            flag = flags.pop();\n            functions['flag'][flag[1]] = fields.length - 1;\n        } else {\n            flags.push( [mark[2], fields.length-1] );\n        }\n        break;\n\n        default:\n    }\n\n}\n\nif ( lastIndex < str.length ) {\n    templateText.push( str.slice( lastIndex, str.length ) );\n}\n\nif ( flags.length !== 0 || loops.length !== 0 ) {\n    return;\n}\n```\n\n我们最后使用正则表达式是\n\n```javascript\n/\\{\\s*([@|\\-|!]?)(([\\w\\d]+)(\\.[\\w\\d]+)*)\\s*\\}/gm\n```\n\n在执行了`exec`之后，每一次匹配出来的结果都是一个数组，在注释当中我已经明确地指出每一个位置上的内容了。好好记住，开始解释代码。\n\n首先第一句，生成数据域数组。在编写渲染过程一节中我已经说过了这个的数据结构已经改为每一个元素都是“特殊功能符号”和“数据路径”了。这一句非常好理解。\n\n接着的两句就是熟悉的模板文本数组生成，是由于要绕开`split`函数所写。继续看下去。\n\n好了，*数据域数组*和*模板文本数组*处理好了，模板对象 = 模板文本数组 + 数据域数组 + 数据对象 + functions对象，接下来是functions对象。\n\n> 这里使用栈来检查特殊功能数据域是否匹配。\n\n查看一下数据的特殊功能符号，如果遇到的一个列表的头：\n\n```javascript\ncase '@':\nloops.push( [mark[2], fields.length-1] );\nbreak;\n```\n\n暂时先将它和它的位置压入栈`loops`。\n\n如果遇到一个列表的尾：\n\n```javascript\ncase '-':\nif ( loops[loops.length-1] && loops[loops.length-1][0] === mark[2] ) {\n    loop = loops.pop();\n    functions['loop'][loop[1]] = fields.length - 1;\n} else {\n    return;\n}\nbreak;\n```\n\n检查栈`loops`中最近一次压入的数据，不存在或者不等于这个列表尾的情况都属于模板格式错误，直接退出。\n\n否则就是匹配成功了，将列表头的位置作为键，列表尾的位置作为值放入`functions`对象的`loop`属性中。\n\n如果遇到标志位：\n\n```javascript\ncase '!':\nif ( flags[0] && flags[0][0] === mark[2] ) {\n    flag = flags.pop();\n    functions['flag'][flag[1]] = fields.length - 1;\n} else {\n    flags.push( [mark[2], fields.length-1] );\n}\nbreak;\n```\n\n查找栈`flags`中最近一次压入的数据，跟本次标志位相等即匹配成功，不相等继续压入。\n\n好了最后再检查一下两个栈是否为空，不为空则有些数据域没有匹配成功，也就是模板格式错误，打回。\n\n```javascript\nif ( flags.length !== 0 || loops.length !== 0 ) {\n    return;\n}\n```\n\n呼！写到这里，我都怀疑是不是说得太罗嗦了。画公仔都画出肠了。\n\n## 还没完！\n\n其实在渲染列表的时候，只是循环是没有多大意义的。更多时候，我们想输出的是列表中的内容。然而每次循环中需要输出的数据都不一样，怎么破？\n\n再写下去我估计你也不想看了，这个问题在下一篇文章中详细解释。","slug":"implements-list-and-flag-in-simpletemplatejs","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyus2006bn7t4kx77e81h","content":"<p>在<a href=\"http://blog.e10t.net/a-piece-of-simple-javascript-for-template-render/\">上一篇文章</a>中，为了一些实际需求，我写了一个非常理想化而基础的模板渲染js代码。但当我尝试将其实际使用的时候，却发现代码中不但问题不少，而且功能也不够，于是就只能继续改进。</p>\n<blockquote>\n<p>文中所有代码都截取自js文件，稍有修改。你可以到<a href=\"https://github.com/exoticknight/jswarehouse/tree/master/simpleTemplate\" target=\"_blank\" rel=\"noopener\">github项目</a>上找到完整代码，边对比边看本文。</p>\n</blockquote>\n<h2 id=\"绕开split函数\"><a href=\"#绕开split函数\" class=\"headerlink\" title=\"绕开split函数\"></a>绕开split函数</h2><p>在上一篇文章的更新里面提到，split函数在IE下有问题，只能放弃使用。</p>\n<p>其实在使用正则匹配数据域（field，在模板中的形式是<code>{field}</code>）的时候，是能够同时获得最近一次匹配到的数据域的位置的。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re=<span class=\"regexp\">/\\&#123;t\\&#125;/g</span>;</span><br><span class=\"line\">re.exec(<span class=\"string\">'test&#123;t&#125;'</span>);  <span class=\"comment\">// [\"&#123;t&#125;\"]</span></span><br><span class=\"line\">re.lastIndex;  <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n<p>或者去看<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\" target=\"_blank\" rel=\"noopener\">MDN</a>加深了解。</p>\n<p>于是这个<code>lastIndex</code>减去匹配出的数据域长度就可以确定数据域前一小节模板文本的结尾，然后对原始模板字符串使用slice函数切割出此一小节模板文本。下面是大概的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lastIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ( ( mark = fieldRe.exec( str ) ) !== <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    other code...</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    templateText.push( str.slice( lastIndex, fieldRe.lastIndex - mark[<span class=\"number\">0</span>].length ) );</span><br><span class=\"line\">    lastIndex = fieldRe.lastIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    other code...</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( lastIndex &lt; str.length ) &#123;</span><br><span class=\"line\">    templateText.push( str.slice( lastIndex, str.length ) );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后记得要检查一下完成匹配后的<code>lastIndex</code>值，因为有可能在最后一个数据域后还有一小段模板文本。</p>\n<p>好了，现在已经绕开了split函数来将模板分成“文本”和“数据域”两个数组了。</p>\n<h2 id=\"表示法\"><a href=\"#表示法\" class=\"headerlink\" title=\".表示法\"></a>.表示法</h2><p>原来的js代码中，作为<code>field</code>的命名，只能使用一般的命名，也就是带<code>_</code>的英文字母和数字的混合，但是用以填充的json数据不一定是“扁平化”的，换言之有可能是嵌套的，比如<code>{&#39;a&#39;:{&#39;b&#39;:1}}</code>。普通js代码中用<code>a.b</code>就能访问<code>b</code>的值。在模板解析中，我思考了这么一个方法来实现（如果有更好的方法请告诉我！）</p>\n<p>将访问的路径用<code>.</code>分开，再逐层赋值，写成代码就是如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _getDataViaPath = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> path, json </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fieldPath = path.split( <span class=\"string\">'.'</span> ),</span><br><span class=\"line\">        data = json,</span><br><span class=\"line\">        index;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( index = <span class=\"number\">0</span>; index &lt; fieldPath.length; index++ ) &#123;</span><br><span class=\"line\">        data = data[fieldPath[index]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( data === <span class=\"literal\">undefined</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( data === <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> index + <span class=\"number\">1</span> &lt; fieldPath.length ? <span class=\"string\">''</span> : <span class=\"literal\">null</span>; <span class=\"comment\">// maybe not necessary</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> data === <span class=\"string\">'function'</span> ? data.call( json<span class=\"comment\">/* maybe better than 'data' */</span> ) : data;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>在通过路径访问数据的时候，如果：</p>\n<ol>\n<li>路径不存在，返回空字符串</li>\n<li>路径存在，返回数据</li>\n</ol>\n<p>第二行，以<code>.</code>为分割符将访问路径拆成数组。</p>\n<p>第六行，通过遍历数组来逐层访问数据，如果途中遇到undefinded，即路径不存在，那么就直接返回空字符（如果直接返回undefined，那么在拼合字符串的时候，调用toString方法会返回字符串<code>undefined</code>，显然不是我们想要的）。</p>\n<p>然而，路径存在的情况下，数据有可能为<code>null</code>，而<code>null</code>是不能再读取属性的，于是就看看是不是最后一个路径，不是就返回空字符（因为再走下去路径也不存在了），是就返回数据<code>null</code>。这里可能有点绕，并且其实空字符和<code>null</code>最后渲染出来的效果是一样的，似乎也没必要这么深究，但还是谨慎地区分一下比较好。</p>\n<p>最后，返回数据的时候如果发现数据是函数，那么就执行了之后再返回。执行函数的时候总是要留意这个函数执行的context（上下文），这里给它绑定最顶层的数据好了，在函数体里面它喜欢访问哪个嵌套的数据都行。</p>\n<blockquote>\n<p>使用.call()来调用函数，第一个参数是函数的context（上下文）。</p>\n</blockquote>\n<p>然后问题来了，之前识别数据域的正则在加入.表示法功能后就不适用了。重写一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\&#123;\\s*(([\\w\\d]+)(\\.[\\w\\d]+)*)\\s*\\&#125;/gm</span><br></pre></td></tr></table></figure>\n<p>这样就既能匹配<code>{field}</code>，也能匹配<code>{field.field}</code>了。</p>\n<h2 id=\"标志位-amp-列表\"><a href=\"#标志位-amp-列表\" class=\"headerlink\" title=\"标志位 &amp; 列表\"></a>标志位 &amp; 列表</h2><h3 id=\"模板设计\"><a href=\"#模板设计\" class=\"headerlink\" title=\"模板设计\"></a>模板设计</h3><p>嗯，不知道这里说“标志位”是否准确，或者大家是否明白我要表达的意思，可能说“flag”会更容易理解？</p>\n<p>这里的标志位起这么一个作用，渲染的时候查看这个标志位，根据值（真/假）来决定是否渲染某一小段模板。</p>\n<p>看代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&#123;!flag&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;&#123;field&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;&#123;!flag&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n<p>这里的<code>{!flag}</code>表明渲染的时候先查看一下<code>flag</code>的值，如果结果为假，那么两个<code>{!flag}</code>所包围着的一小段模板就不渲染了。</p>\n<p>至于列表，这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&#123;@list&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;&#123;something&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;&#123;-list&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n<p>跟标志位类似，<code>{@list}</code>表明渲染的时候遍历<code>list</code>列表，每次循环都将<code>{@list}</code>和<code>{-list}</code>之间的模板渲染一次。</p>\n<p>为什么使用<code>@</code>和<code>-</code>两个不同的符号？因为要支持嵌套，循环的头尾用不同符号便于配对。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&#123;@list&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;@list1&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;something&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;-list1&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;&#123;-list&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改正则识别\"><a href=\"#修改正则识别\" class=\"headerlink\" title=\"修改正则识别\"></a>修改正则识别</h3><p>再次修改识别数据域的正则表达式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\&#123;\\s*([@|\\-|!]?)(([\\w\\d]+)(\\.[\\w\\d]+)*)\\s*\\&#125;/gm</span><br></pre></td></tr></table></figure>\n<h3 id=\"编写渲染过程\"><a href=\"#编写渲染过程\" class=\"headerlink\" title=\"编写渲染过程\"></a>编写渲染过程</h3><p>接下来是渲染的过程。先回顾一下一个生成好的模板对象的结构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template = &#123;</span><br><span class=\"line\">    templateText: [],  <span class=\"comment\">// 模板文本数组</span></span><br><span class=\"line\">    fields: [],  <span class=\"comment\">// 数据域数组</span></span><br><span class=\"line\">    data: &#123;&#125;  <span class=\"comment\">// 数据对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以模板对象 = 模板文本数组 + 数据域数组 + 数据对象。</p>\n<p>我们稍微修改一下数据域数组的结构。</p>\n<p>从类似<code>[&#39;field1&#39;, &#39;field2&#39;, &#39;field1&#39;]</code></p>\n<p>改成<code>[[&#39;!&#39;, &#39;field1&#39;], [&#39;&#39;, &#39;field2&#39;], [&#39;!&#39;: &#39;field1&#39;]]</code></p>\n<p>也就是说在每一个数据域中添加一个标识，用来辨别此数据域是否有特殊功能。这在生成模板的时候并不难实现。</p>\n<p>当渲染进程遇到一个特殊功能的数据域，那么就应该去定位配对的下一个特殊数据域，两个特殊数据域中间的模板和数据域就需要特殊处理。</p>\n<p>我们可以在生成时就记录好这个信息。在模板对象中增加一个<code>functions</code>对象，结构如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">functions: &#123;</span><br><span class=\"line\">    loop: &#123;&#125;,</span><br><span class=\"line\">    flag: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>循环/标记位的首尾就以键值对的方式记录在<code>loop</code>/<code>falg</code>中，这样在渲染时一查就行。</p>\n<p>所以模板对象 = 模板文本数组 + 数据域数组 + 数据对象 + functions对象。</p>\n<p>先将渲染函数独立出来成一个内部函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> scope, start, end </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempFragment = [],</span><br><span class=\"line\">        strings = <span class=\"keyword\">this</span>.getTemplateText(),</span><br><span class=\"line\">        fields = <span class=\"keyword\">this</span>.getFields(),</span><br><span class=\"line\">        functions = <span class=\"keyword\">this</span>.getFunctions(),</span><br><span class=\"line\">        field,</span><br><span class=\"line\">        data,</span><br><span class=\"line\">        i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = start; i &lt; end; i++ ) &#123;</span><br><span class=\"line\">        tempFragment.push( strings[i] );</span><br><span class=\"line\"></span><br><span class=\"line\">        field = fields[i];</span><br><span class=\"line\">        data = _getDataViaPath( field[<span class=\"number\">1</span>], scope );</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> ( field[<span class=\"number\">0</span>] ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">''</span>: <span class=\"comment\">// normal data</span></span><br><span class=\"line\">            tempFragment.push( data );</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'@'</span>: <span class=\"comment\">// begin of list</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'!'</span>: <span class=\"comment\">// begin of flag</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tempFragment.push( strings[i] ); <span class=\"comment\">// dont forget the last of strings</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tempFragment.join( <span class=\"string\">''</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我来慢慢解释。</p>\n<p><code>_render</code>函数定义为传入数据、待渲染数据域开头的下标和待渲染数据域结尾的下标，会返回数据域数组两下标段间（包括开头不包括结尾）的渲染结果（一个字符串）。</p>\n<p>开头各种变量定义自不用解释，主体部分是一个遍历，最后返回字符串。</p>\n<p>要注意，因为分割原始模板字符串使用的分隔符是不同的数据域，所以分割出来的<strong>模板文本</strong>总是比匹配到的<strong>数据域</strong>数量多1。</p>\n<blockquote>\n<p>举个例子，<code>&#39;sgewgwgw,,seyer,jhrepbo,&#39;.split(/,/g)</code>，匹配到的分隔符数量为4，分割后文本的数量为5。而任意两个分隔符之间的字符串也可以单独又看作一个待分割的字符串，继续分割后也跟整个字符串具有同样的性质。</p>\n</blockquote>\n<p>画出图来的话就是如下：</p>\n<p><img src=\"https://i.imgur.com/4FopsTK.png\" alt=\"结构图\"></p>\n<p>整个函数执行过程看下图：</p>\n<p><img src=\"https://i.imgur.com/ODPd80S.png\" alt=\"执行流程\"></p>\n<p>可以看到，循环要做的第一件事是压入模板文本，对应循环体内第一条语句<code>tempFragment.push( strings[i] );</code>。剩下的全是在处理数据，可以看到之前写的<code>_getDataViaPath</code>函数在这里用上了。最后在循环外压入最后一个模板文本，对应结束循环之后第一条语句<code>tempFragment.push( strings[i] );</code>。</p>\n<p>来编写数据处理中遇到标志位的情况，对应<code>switch</code>语句中<code>case &#39;!&#39;</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'!'</span>: <span class=\"comment\">// begin of flag</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( data ) &#123;</span><br><span class=\"line\">    tempFragment.push( _render.call( <span class=\"keyword\">this</span>, scope, i + <span class=\"number\">1</span>, functions[<span class=\"string\">'flag'</span>][i]));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reset index</span></span><br><span class=\"line\">i = functions[<span class=\"string\">'flag'</span>][i];</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>十分简单，按照要求，判断值，再决定是否渲染两标志位间的模板。新加入的<code>functions</code>对象就在这里起重要作用了。</p>\n<p>最后的<code>i = functions[&#39;flag&#39;][i];</code>是为了重置当前循环处理的位置（注意这个位置是整个数据域数组中的位置）。这里无需考虑超出下标的问题。</p>\n<blockquote>\n<p>为什么不考虑？<code>functions</code>对象中指示的位置必须是正确，否则整个渲染过程就毫无运行的必要。</p>\n</blockquote>\n<p>如果遇到列表：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'@'</span>: <span class=\"comment\">// begin of list</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"built_in\">Object</span>.prototype.toString.call( data ) === <span class=\"string\">'[object Array]'</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> loopIndex = <span class=\"number\">0</span>; loopIndex &lt; data.length; loopIndex++ ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// recursively render</span></span><br><span class=\"line\">        tempFragment.push( _render.call( <span class=\"keyword\">this</span>, scope, i + <span class=\"number\">1</span>, functions[<span class=\"string\">'loop'</span>][i]) );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reset index</span></span><br><span class=\"line\">i = functions[<span class=\"string\">'loop'</span>][i];</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>这里需要先判断数据是否为数组，然后遍历数组，循环中渲染两个列表标志间的模板。其实跟标志位的过程差不多。</p>\n<p>如果遇到普通数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">''</span>: <span class=\"comment\">// normal data</span></span><br><span class=\"line\">tempFragment.push( data );</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>直接压入即可。</p>\n<h3 id=\"编写解析模板的过程\"><a href=\"#编写解析模板的过程\" class=\"headerlink\" title=\"编写解析模板的过程\"></a>编写解析模板的过程</h3><p>嘿，先别高兴得太早了，虽然编写好了渲染过程，但是渲染是要基于已经生成好的模板的！</p>\n<p>别忘了在渲染中指路的重要的<code>functions</code>对象是还没有生成出来的！我们刚才只是在假设它已经能工作的前提下编程的！</p>\n<p>回到本文一开头切割原始模板字符串的代码中，我们需要在那里为以后的一切铺路。还记得那个处理正则匹配的<code>while</code>语句吗？</p>\n<p>前方代码高能注意。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> templateText = [],</span><br><span class=\"line\">    fields = [],</span><br><span class=\"line\">    lastIndex = <span class=\"number\">0</span>,</span><br><span class=\"line\">    functions = &#123;</span><br><span class=\"line\">        <span class=\"string\">'loop'</span>: &#123;&#125;,</span><br><span class=\"line\">        <span class=\"string\">'flag'</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    flags = [],  <span class=\"comment\">// flag stack</span></span><br><span class=\"line\">    loops = [],  <span class=\"comment\">// loop stack</span></span><br><span class=\"line\">    flag,</span><br><span class=\"line\">    loop,</span><br><span class=\"line\">    mark;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// initial data and index</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.data = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ( ( mark = fieldRe.exec( str ) ) !== <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * mark[0] = '&#123;@fo.fo&#125;'</span></span><br><span class=\"line\"><span class=\"comment\">     * mark[1] = '@'</span></span><br><span class=\"line\"><span class=\"comment\">     * mark[2] = 'fo.fo'</span></span><br><span class=\"line\"><span class=\"comment\">     * mark[3] = 'fo'</span></span><br><span class=\"line\"><span class=\"comment\">     * mark[4] = '.fo'</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    fields.push( [mark[<span class=\"number\">1</span>], mark[<span class=\"number\">2</span>]] );</span><br><span class=\"line\"></span><br><span class=\"line\">    templateText.push( str.slice( lastIndex, fieldRe.lastIndex - mark[<span class=\"number\">0</span>].length ) );</span><br><span class=\"line\">    lastIndex = fieldRe.lastIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> ( mark[<span class=\"number\">1</span>] ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'@'</span>:</span><br><span class=\"line\">        loops.push( [mark[<span class=\"number\">2</span>], fields.length<span class=\"number\">-1</span>] );</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'-'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( loops[loops.length<span class=\"number\">-1</span>] &amp;&amp; loops[loops.length<span class=\"number\">-1</span>][<span class=\"number\">0</span>] === mark[<span class=\"number\">2</span>] ) &#123;</span><br><span class=\"line\">            loop = loops.pop();</span><br><span class=\"line\">            functions[<span class=\"string\">'loop'</span>][loop[<span class=\"number\">1</span>]] = fields.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'!'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( flags[<span class=\"number\">0</span>] &amp;&amp; flags[<span class=\"number\">0</span>][<span class=\"number\">0</span>] === mark[<span class=\"number\">2</span>] ) &#123;</span><br><span class=\"line\">            flag = flags.pop();</span><br><span class=\"line\">            functions[<span class=\"string\">'flag'</span>][flag[<span class=\"number\">1</span>]] = fields.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            flags.push( [mark[<span class=\"number\">2</span>], fields.length<span class=\"number\">-1</span>] );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( lastIndex &lt; str.length ) &#123;</span><br><span class=\"line\">    templateText.push( str.slice( lastIndex, str.length ) );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( flags.length !== <span class=\"number\">0</span> || loops.length !== <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们最后使用正则表达式是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\&#123;\\s*([@|\\-|!]?)(([\\w\\d]+)(\\.[\\w\\d]+)*)\\s*\\&#125;/gm</span><br></pre></td></tr></table></figure>\n<p>在执行了<code>exec</code>之后，每一次匹配出来的结果都是一个数组，在注释当中我已经明确地指出每一个位置上的内容了。好好记住，开始解释代码。</p>\n<p>首先第一句，生成数据域数组。在编写渲染过程一节中我已经说过了这个的数据结构已经改为每一个元素都是“特殊功能符号”和“数据路径”了。这一句非常好理解。</p>\n<p>接着的两句就是熟悉的模板文本数组生成，是由于要绕开<code>split</code>函数所写。继续看下去。</p>\n<p>好了，<em>数据域数组</em>和<em>模板文本数组</em>处理好了，模板对象 = 模板文本数组 + 数据域数组 + 数据对象 + functions对象，接下来是functions对象。</p>\n<blockquote>\n<p>这里使用栈来检查特殊功能数据域是否匹配。</p>\n</blockquote>\n<p>查看一下数据的特殊功能符号，如果遇到的一个列表的头：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'@'</span>:</span><br><span class=\"line\">loops.push( [mark[<span class=\"number\">2</span>], fields.length<span class=\"number\">-1</span>] );</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>暂时先将它和它的位置压入栈<code>loops</code>。</p>\n<p>如果遇到一个列表的尾：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'-'</span>:</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( loops[loops.length<span class=\"number\">-1</span>] &amp;&amp; loops[loops.length<span class=\"number\">-1</span>][<span class=\"number\">0</span>] === mark[<span class=\"number\">2</span>] ) &#123;</span><br><span class=\"line\">    loop = loops.pop();</span><br><span class=\"line\">    functions[<span class=\"string\">'loop'</span>][loop[<span class=\"number\">1</span>]] = fields.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>检查栈<code>loops</code>中最近一次压入的数据，不存在或者不等于这个列表尾的情况都属于模板格式错误，直接退出。</p>\n<p>否则就是匹配成功了，将列表头的位置作为键，列表尾的位置作为值放入<code>functions</code>对象的<code>loop</code>属性中。</p>\n<p>如果遇到标志位：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'!'</span>:</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( flags[<span class=\"number\">0</span>] &amp;&amp; flags[<span class=\"number\">0</span>][<span class=\"number\">0</span>] === mark[<span class=\"number\">2</span>] ) &#123;</span><br><span class=\"line\">    flag = flags.pop();</span><br><span class=\"line\">    functions[<span class=\"string\">'flag'</span>][flag[<span class=\"number\">1</span>]] = fields.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    flags.push( [mark[<span class=\"number\">2</span>], fields.length<span class=\"number\">-1</span>] );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>查找栈<code>flags</code>中最近一次压入的数据，跟本次标志位相等即匹配成功，不相等继续压入。</p>\n<p>好了最后再检查一下两个栈是否为空，不为空则有些数据域没有匹配成功，也就是模板格式错误，打回。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( flags.length !== <span class=\"number\">0</span> || loops.length !== <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>呼！写到这里，我都怀疑是不是说得太罗嗦了。画公仔都画出肠了。</p>\n<h2 id=\"还没完！\"><a href=\"#还没完！\" class=\"headerlink\" title=\"还没完！\"></a>还没完！</h2><p>其实在渲染列表的时候，只是循环是没有多大意义的。更多时候，我们想输出的是列表中的内容。然而每次循环中需要输出的数据都不一样，怎么破？</p>\n<p>再写下去我估计你也不想看了，这个问题在下一篇文章中详细解释。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在<a href=\"http://blog.e10t.net/a-piece-of-simple-javascript-for-template-render/\">上一篇文章</a>中，为了一些实际需求，我写了一个非常理想化而基础的模板渲染js代码。但当我尝试将其实际使用的时候，却发现代码中不但问题不少，而且功能也不够，于是就只能继续改进。</p>\n<blockquote>\n<p>文中所有代码都截取自js文件，稍有修改。你可以到<a href=\"https://github.com/exoticknight/jswarehouse/tree/master/simpleTemplate\" target=\"_blank\" rel=\"noopener\">github项目</a>上找到完整代码，边对比边看本文。</p>\n</blockquote>\n<h2 id=\"绕开split函数\"><a href=\"#绕开split函数\" class=\"headerlink\" title=\"绕开split函数\"></a>绕开split函数</h2><p>在上一篇文章的更新里面提到，split函数在IE下有问题，只能放弃使用。</p>\n<p>其实在使用正则匹配数据域（field，在模板中的形式是<code>{field}</code>）的时候，是能够同时获得最近一次匹配到的数据域的位置的。比如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re=<span class=\"regexp\">/\\&#123;t\\&#125;/g</span>;</span><br><span class=\"line\">re.exec(<span class=\"string\">'test&#123;t&#125;'</span>);  <span class=\"comment\">// [\"&#123;t&#125;\"]</span></span><br><span class=\"line\">re.lastIndex;  <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n<p>或者去看<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\" target=\"_blank\" rel=\"noopener\">MDN</a>加深了解。</p>\n<p>于是这个<code>lastIndex</code>减去匹配出的数据域长度就可以确定数据域前一小节模板文本的结尾，然后对原始模板字符串使用slice函数切割出此一小节模板文本。下面是大概的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> lastIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ( ( mark = fieldRe.exec( str ) ) !== <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    other code...</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    templateText.push( str.slice( lastIndex, fieldRe.lastIndex - mark[<span class=\"number\">0</span>].length ) );</span><br><span class=\"line\">    lastIndex = fieldRe.lastIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    other code...</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( lastIndex &lt; str.length ) &#123;</span><br><span class=\"line\">    templateText.push( str.slice( lastIndex, str.length ) );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后记得要检查一下完成匹配后的<code>lastIndex</code>值，因为有可能在最后一个数据域后还有一小段模板文本。</p>\n<p>好了，现在已经绕开了split函数来将模板分成“文本”和“数据域”两个数组了。</p>\n<h2 id=\"表示法\"><a href=\"#表示法\" class=\"headerlink\" title=\".表示法\"></a>.表示法</h2><p>原来的js代码中，作为<code>field</code>的命名，只能使用一般的命名，也就是带<code>_</code>的英文字母和数字的混合，但是用以填充的json数据不一定是“扁平化”的，换言之有可能是嵌套的，比如<code>{&#39;a&#39;:{&#39;b&#39;:1}}</code>。普通js代码中用<code>a.b</code>就能访问<code>b</code>的值。在模板解析中，我思考了这么一个方法来实现（如果有更好的方法请告诉我！）</p>\n<p>将访问的路径用<code>.</code>分开，再逐层赋值，写成代码就是如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _getDataViaPath = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> path, json </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fieldPath = path.split( <span class=\"string\">'.'</span> ),</span><br><span class=\"line\">        data = json,</span><br><span class=\"line\">        index;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( index = <span class=\"number\">0</span>; index &lt; fieldPath.length; index++ ) &#123;</span><br><span class=\"line\">        data = data[fieldPath[index]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( data === <span class=\"literal\">undefined</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( data === <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> index + <span class=\"number\">1</span> &lt; fieldPath.length ? <span class=\"string\">''</span> : <span class=\"literal\">null</span>; <span class=\"comment\">// maybe not necessary</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> data === <span class=\"string\">'function'</span> ? data.call( json<span class=\"comment\">/* maybe better than 'data' */</span> ) : data;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>在通过路径访问数据的时候，如果：</p>\n<ol>\n<li>路径不存在，返回空字符串</li>\n<li>路径存在，返回数据</li>\n</ol>\n<p>第二行，以<code>.</code>为分割符将访问路径拆成数组。</p>\n<p>第六行，通过遍历数组来逐层访问数据，如果途中遇到undefinded，即路径不存在，那么就直接返回空字符（如果直接返回undefined，那么在拼合字符串的时候，调用toString方法会返回字符串<code>undefined</code>，显然不是我们想要的）。</p>\n<p>然而，路径存在的情况下，数据有可能为<code>null</code>，而<code>null</code>是不能再读取属性的，于是就看看是不是最后一个路径，不是就返回空字符（因为再走下去路径也不存在了），是就返回数据<code>null</code>。这里可能有点绕，并且其实空字符和<code>null</code>最后渲染出来的效果是一样的，似乎也没必要这么深究，但还是谨慎地区分一下比较好。</p>\n<p>最后，返回数据的时候如果发现数据是函数，那么就执行了之后再返回。执行函数的时候总是要留意这个函数执行的context（上下文），这里给它绑定最顶层的数据好了，在函数体里面它喜欢访问哪个嵌套的数据都行。</p>\n<blockquote>\n<p>使用.call()来调用函数，第一个参数是函数的context（上下文）。</p>\n</blockquote>\n<p>然后问题来了，之前识别数据域的正则在加入.表示法功能后就不适用了。重写一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\&#123;\\s*(([\\w\\d]+)(\\.[\\w\\d]+)*)\\s*\\&#125;/gm</span><br></pre></td></tr></table></figure>\n<p>这样就既能匹配<code>{field}</code>，也能匹配<code>{field.field}</code>了。</p>\n<h2 id=\"标志位-amp-列表\"><a href=\"#标志位-amp-列表\" class=\"headerlink\" title=\"标志位 &amp; 列表\"></a>标志位 &amp; 列表</h2><h3 id=\"模板设计\"><a href=\"#模板设计\" class=\"headerlink\" title=\"模板设计\"></a>模板设计</h3><p>嗯，不知道这里说“标志位”是否准确，或者大家是否明白我要表达的意思，可能说“flag”会更容易理解？</p>\n<p>这里的标志位起这么一个作用，渲染的时候查看这个标志位，根据值（真/假）来决定是否渲染某一小段模板。</p>\n<p>看代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&#123;!flag&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;&#123;field&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;&#123;!flag&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n<p>这里的<code>{!flag}</code>表明渲染的时候先查看一下<code>flag</code>的值，如果结果为假，那么两个<code>{!flag}</code>所包围着的一小段模板就不渲染了。</p>\n<p>至于列表，这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&#123;@list&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;&#123;something&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;&#123;-list&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n<p>跟标志位类似，<code>{@list}</code>表明渲染的时候遍历<code>list</code>列表，每次循环都将<code>{@list}</code>和<code>{-list}</code>之间的模板渲染一次。</p>\n<p>为什么使用<code>@</code>和<code>-</code>两个不同的符号？因为要支持嵌套，循环的头尾用不同符号便于配对。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p&gt;&#123;@list&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;@list1&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;something&#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;-list1&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;p&gt;&#123;-list&#125;&lt;/p&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改正则识别\"><a href=\"#修改正则识别\" class=\"headerlink\" title=\"修改正则识别\"></a>修改正则识别</h3><p>再次修改识别数据域的正则表达式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\&#123;\\s*([@|\\-|!]?)(([\\w\\d]+)(\\.[\\w\\d]+)*)\\s*\\&#125;/gm</span><br></pre></td></tr></table></figure>\n<h3 id=\"编写渲染过程\"><a href=\"#编写渲染过程\" class=\"headerlink\" title=\"编写渲染过程\"></a>编写渲染过程</h3><p>接下来是渲染的过程。先回顾一下一个生成好的模板对象的结构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template = &#123;</span><br><span class=\"line\">    templateText: [],  <span class=\"comment\">// 模板文本数组</span></span><br><span class=\"line\">    fields: [],  <span class=\"comment\">// 数据域数组</span></span><br><span class=\"line\">    data: &#123;&#125;  <span class=\"comment\">// 数据对象</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以模板对象 = 模板文本数组 + 数据域数组 + 数据对象。</p>\n<p>我们稍微修改一下数据域数组的结构。</p>\n<p>从类似<code>[&#39;field1&#39;, &#39;field2&#39;, &#39;field1&#39;]</code></p>\n<p>改成<code>[[&#39;!&#39;, &#39;field1&#39;], [&#39;&#39;, &#39;field2&#39;], [&#39;!&#39;: &#39;field1&#39;]]</code></p>\n<p>也就是说在每一个数据域中添加一个标识，用来辨别此数据域是否有特殊功能。这在生成模板的时候并不难实现。</p>\n<p>当渲染进程遇到一个特殊功能的数据域，那么就应该去定位配对的下一个特殊数据域，两个特殊数据域中间的模板和数据域就需要特殊处理。</p>\n<p>我们可以在生成时就记录好这个信息。在模板对象中增加一个<code>functions</code>对象，结构如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">functions: &#123;</span><br><span class=\"line\">    loop: &#123;&#125;,</span><br><span class=\"line\">    flag: &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>循环/标记位的首尾就以键值对的方式记录在<code>loop</code>/<code>falg</code>中，这样在渲染时一查就行。</p>\n<p>所以模板对象 = 模板文本数组 + 数据域数组 + 数据对象 + functions对象。</p>\n<p>先将渲染函数独立出来成一个内部函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> scope, start, end </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tempFragment = [],</span><br><span class=\"line\">        strings = <span class=\"keyword\">this</span>.getTemplateText(),</span><br><span class=\"line\">        fields = <span class=\"keyword\">this</span>.getFields(),</span><br><span class=\"line\">        functions = <span class=\"keyword\">this</span>.getFunctions(),</span><br><span class=\"line\">        field,</span><br><span class=\"line\">        data,</span><br><span class=\"line\">        i;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = start; i &lt; end; i++ ) &#123;</span><br><span class=\"line\">        tempFragment.push( strings[i] );</span><br><span class=\"line\"></span><br><span class=\"line\">        field = fields[i];</span><br><span class=\"line\">        data = _getDataViaPath( field[<span class=\"number\">1</span>], scope );</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> ( field[<span class=\"number\">0</span>] ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">''</span>: <span class=\"comment\">// normal data</span></span><br><span class=\"line\">            tempFragment.push( data );</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'@'</span>: <span class=\"comment\">// begin of list</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'!'</span>: <span class=\"comment\">// begin of flag</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    tempFragment.push( strings[i] ); <span class=\"comment\">// dont forget the last of strings</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> tempFragment.join( <span class=\"string\">''</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我来慢慢解释。</p>\n<p><code>_render</code>函数定义为传入数据、待渲染数据域开头的下标和待渲染数据域结尾的下标，会返回数据域数组两下标段间（包括开头不包括结尾）的渲染结果（一个字符串）。</p>\n<p>开头各种变量定义自不用解释，主体部分是一个遍历，最后返回字符串。</p>\n<p>要注意，因为分割原始模板字符串使用的分隔符是不同的数据域，所以分割出来的<strong>模板文本</strong>总是比匹配到的<strong>数据域</strong>数量多1。</p>\n<blockquote>\n<p>举个例子，<code>&#39;sgewgwgw,,seyer,jhrepbo,&#39;.split(/,/g)</code>，匹配到的分隔符数量为4，分割后文本的数量为5。而任意两个分隔符之间的字符串也可以单独又看作一个待分割的字符串，继续分割后也跟整个字符串具有同样的性质。</p>\n</blockquote>\n<p>画出图来的话就是如下：</p>\n<p><img src=\"https://i.imgur.com/4FopsTK.png\" alt=\"结构图\"></p>\n<p>整个函数执行过程看下图：</p>\n<p><img src=\"https://i.imgur.com/ODPd80S.png\" alt=\"执行流程\"></p>\n<p>可以看到，循环要做的第一件事是压入模板文本，对应循环体内第一条语句<code>tempFragment.push( strings[i] );</code>。剩下的全是在处理数据，可以看到之前写的<code>_getDataViaPath</code>函数在这里用上了。最后在循环外压入最后一个模板文本，对应结束循环之后第一条语句<code>tempFragment.push( strings[i] );</code>。</p>\n<p>来编写数据处理中遇到标志位的情况，对应<code>switch</code>语句中<code>case &#39;!&#39;</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'!'</span>: <span class=\"comment\">// begin of flag</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( data ) &#123;</span><br><span class=\"line\">    tempFragment.push( _render.call( <span class=\"keyword\">this</span>, scope, i + <span class=\"number\">1</span>, functions[<span class=\"string\">'flag'</span>][i]));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reset index</span></span><br><span class=\"line\">i = functions[<span class=\"string\">'flag'</span>][i];</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>十分简单，按照要求，判断值，再决定是否渲染两标志位间的模板。新加入的<code>functions</code>对象就在这里起重要作用了。</p>\n<p>最后的<code>i = functions[&#39;flag&#39;][i];</code>是为了重置当前循环处理的位置（注意这个位置是整个数据域数组中的位置）。这里无需考虑超出下标的问题。</p>\n<blockquote>\n<p>为什么不考虑？<code>functions</code>对象中指示的位置必须是正确，否则整个渲染过程就毫无运行的必要。</p>\n</blockquote>\n<p>如果遇到列表：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'@'</span>: <span class=\"comment\">// begin of list</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"built_in\">Object</span>.prototype.toString.call( data ) === <span class=\"string\">'[object Array]'</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> loopIndex = <span class=\"number\">0</span>; loopIndex &lt; data.length; loopIndex++ ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// recursively render</span></span><br><span class=\"line\">        tempFragment.push( _render.call( <span class=\"keyword\">this</span>, scope, i + <span class=\"number\">1</span>, functions[<span class=\"string\">'loop'</span>][i]) );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// reset index</span></span><br><span class=\"line\">i = functions[<span class=\"string\">'loop'</span>][i];</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>这里需要先判断数据是否为数组，然后遍历数组，循环中渲染两个列表标志间的模板。其实跟标志位的过程差不多。</p>\n<p>如果遇到普通数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">''</span>: <span class=\"comment\">// normal data</span></span><br><span class=\"line\">tempFragment.push( data );</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>直接压入即可。</p>\n<h3 id=\"编写解析模板的过程\"><a href=\"#编写解析模板的过程\" class=\"headerlink\" title=\"编写解析模板的过程\"></a>编写解析模板的过程</h3><p>嘿，先别高兴得太早了，虽然编写好了渲染过程，但是渲染是要基于已经生成好的模板的！</p>\n<p>别忘了在渲染中指路的重要的<code>functions</code>对象是还没有生成出来的！我们刚才只是在假设它已经能工作的前提下编程的！</p>\n<p>回到本文一开头切割原始模板字符串的代码中，我们需要在那里为以后的一切铺路。还记得那个处理正则匹配的<code>while</code>语句吗？</p>\n<p>前方代码高能注意。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> templateText = [],</span><br><span class=\"line\">    fields = [],</span><br><span class=\"line\">    lastIndex = <span class=\"number\">0</span>,</span><br><span class=\"line\">    functions = &#123;</span><br><span class=\"line\">        <span class=\"string\">'loop'</span>: &#123;&#125;,</span><br><span class=\"line\">        <span class=\"string\">'flag'</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    flags = [],  <span class=\"comment\">// flag stack</span></span><br><span class=\"line\">    loops = [],  <span class=\"comment\">// loop stack</span></span><br><span class=\"line\">    flag,</span><br><span class=\"line\">    loop,</span><br><span class=\"line\">    mark;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// initial data and index</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.data = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> ( ( mark = fieldRe.exec( str ) ) !== <span class=\"literal\">null</span> ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * mark[0] = '&#123;@fo.fo&#125;'</span></span><br><span class=\"line\"><span class=\"comment\">     * mark[1] = '@'</span></span><br><span class=\"line\"><span class=\"comment\">     * mark[2] = 'fo.fo'</span></span><br><span class=\"line\"><span class=\"comment\">     * mark[3] = 'fo'</span></span><br><span class=\"line\"><span class=\"comment\">     * mark[4] = '.fo'</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    fields.push( [mark[<span class=\"number\">1</span>], mark[<span class=\"number\">2</span>]] );</span><br><span class=\"line\"></span><br><span class=\"line\">    templateText.push( str.slice( lastIndex, fieldRe.lastIndex - mark[<span class=\"number\">0</span>].length ) );</span><br><span class=\"line\">    lastIndex = fieldRe.lastIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> ( mark[<span class=\"number\">1</span>] ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'@'</span>:</span><br><span class=\"line\">        loops.push( [mark[<span class=\"number\">2</span>], fields.length<span class=\"number\">-1</span>] );</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'-'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( loops[loops.length<span class=\"number\">-1</span>] &amp;&amp; loops[loops.length<span class=\"number\">-1</span>][<span class=\"number\">0</span>] === mark[<span class=\"number\">2</span>] ) &#123;</span><br><span class=\"line\">            loop = loops.pop();</span><br><span class=\"line\">            functions[<span class=\"string\">'loop'</span>][loop[<span class=\"number\">1</span>]] = fields.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'!'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( flags[<span class=\"number\">0</span>] &amp;&amp; flags[<span class=\"number\">0</span>][<span class=\"number\">0</span>] === mark[<span class=\"number\">2</span>] ) &#123;</span><br><span class=\"line\">            flag = flags.pop();</span><br><span class=\"line\">            functions[<span class=\"string\">'flag'</span>][flag[<span class=\"number\">1</span>]] = fields.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            flags.push( [mark[<span class=\"number\">2</span>], fields.length<span class=\"number\">-1</span>] );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( lastIndex &lt; str.length ) &#123;</span><br><span class=\"line\">    templateText.push( str.slice( lastIndex, str.length ) );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( flags.length !== <span class=\"number\">0</span> || loops.length !== <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们最后使用正则表达式是</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\&#123;\\s*([@|\\-|!]?)(([\\w\\d]+)(\\.[\\w\\d]+)*)\\s*\\&#125;/gm</span><br></pre></td></tr></table></figure>\n<p>在执行了<code>exec</code>之后，每一次匹配出来的结果都是一个数组，在注释当中我已经明确地指出每一个位置上的内容了。好好记住，开始解释代码。</p>\n<p>首先第一句，生成数据域数组。在编写渲染过程一节中我已经说过了这个的数据结构已经改为每一个元素都是“特殊功能符号”和“数据路径”了。这一句非常好理解。</p>\n<p>接着的两句就是熟悉的模板文本数组生成，是由于要绕开<code>split</code>函数所写。继续看下去。</p>\n<p>好了，<em>数据域数组</em>和<em>模板文本数组</em>处理好了，模板对象 = 模板文本数组 + 数据域数组 + 数据对象 + functions对象，接下来是functions对象。</p>\n<blockquote>\n<p>这里使用栈来检查特殊功能数据域是否匹配。</p>\n</blockquote>\n<p>查看一下数据的特殊功能符号，如果遇到的一个列表的头：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'@'</span>:</span><br><span class=\"line\">loops.push( [mark[<span class=\"number\">2</span>], fields.length<span class=\"number\">-1</span>] );</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>暂时先将它和它的位置压入栈<code>loops</code>。</p>\n<p>如果遇到一个列表的尾：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'-'</span>:</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( loops[loops.length<span class=\"number\">-1</span>] &amp;&amp; loops[loops.length<span class=\"number\">-1</span>][<span class=\"number\">0</span>] === mark[<span class=\"number\">2</span>] ) &#123;</span><br><span class=\"line\">    loop = loops.pop();</span><br><span class=\"line\">    functions[<span class=\"string\">'loop'</span>][loop[<span class=\"number\">1</span>]] = fields.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>检查栈<code>loops</code>中最近一次压入的数据，不存在或者不等于这个列表尾的情况都属于模板格式错误，直接退出。</p>\n<p>否则就是匹配成功了，将列表头的位置作为键，列表尾的位置作为值放入<code>functions</code>对象的<code>loop</code>属性中。</p>\n<p>如果遇到标志位：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">'!'</span>:</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( flags[<span class=\"number\">0</span>] &amp;&amp; flags[<span class=\"number\">0</span>][<span class=\"number\">0</span>] === mark[<span class=\"number\">2</span>] ) &#123;</span><br><span class=\"line\">    flag = flags.pop();</span><br><span class=\"line\">    functions[<span class=\"string\">'flag'</span>][flag[<span class=\"number\">1</span>]] = fields.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    flags.push( [mark[<span class=\"number\">2</span>], fields.length<span class=\"number\">-1</span>] );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>查找栈<code>flags</code>中最近一次压入的数据，跟本次标志位相等即匹配成功，不相等继续压入。</p>\n<p>好了最后再检查一下两个栈是否为空，不为空则有些数据域没有匹配成功，也就是模板格式错误，打回。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( flags.length !== <span class=\"number\">0</span> || loops.length !== <span class=\"number\">0</span> ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>呼！写到这里，我都怀疑是不是说得太罗嗦了。画公仔都画出肠了。</p>\n<h2 id=\"还没完！\"><a href=\"#还没完！\" class=\"headerlink\" title=\"还没完！\"></a>还没完！</h2><p>其实在渲染列表的时候，只是循环是没有多大意义的。更多时候，我们想输出的是列表中的内容。然而每次循环中需要输出的数据都不一样，怎么破？</p>\n<p>再写下去我估计你也不想看了，这个问题在下一篇文章中详细解释。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://i.imgur.com/4FopsTK.png","popularPost_tmp_gaData":{"updated":"Mon Nov 10 2014 01:50:31 GMT+0800 (China Standard Time)","title":"simpleTemplate.js 中列表和标志位的功能的实现","path":"implements-list-and-flag-in-simpletemplatejs/","eyeCatchImage":"https://i.imgur.com/4FopsTK.png","excerpt":null,"date":"2014-11-09T17:43:36.000Z","pv":0,"totalPV":0,"categories":"技术 > 前端 > 编程语言 > javascript","tags":["javascript","string-template"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3730},{"title":"一段简单的js模板渲染代码","id":"26","updated":"2014-11-06T14:17:16.000Z","date":"2014-10-25T06:30:29.000Z","_content":"\n![thumbnail](https://i.imgur.com/aWBIWv4.jpg)\n## 前言\n在为一些页面写 javascript 的时候，发现经常出现如下的一种使用情况：通过AJAX请求数据，然后将数据填入 HTML 的模板中，最后将这段 HTML 插入或者替代到原网页中。\n\n看到这样的使用情况，有所了解的人可能说直接上 jQuery 啦，用 `$.get` 之类的函数取到数据后再各种 DOM 操作，easy 啦～或者也有人说“嗯，这样的情况用 AngrularJS 或者 React 吧，国产的 AvalonJS 也不错哦”。嗯都说的没错，其实自己喜欢用哪个就用那个，顺手就好。\n\n不过嘛，jQuery虽然厉害，但是在一些简单页面中带上一个压缩了也近 100k 的大库总感觉得不偿失（当然本身整个网站需要的话论外），而且实际用到的功能很少。\n\n> 加上一些插件，jQuery 也有模板渲染功能啦。jQuery 本身也有 `tmpl()` 和 `template()`。\n\n然后 AngularJS 之流嘛，好用是好用，只是有大材小用之感。\n\n于是，<del>勇敢的少年快起床找**</del>勇敢的少年来写原生js吧！\n\n## 真实用例\n\n### 描述\n在做某个博客的一个页面的时候，需要拉取 github event 来展示。然而因为博客本身搭建在github上，只依靠github提供的Jekyll引擎渲染，毫无后端可言，因此不能直接生成带有数据的页面。于是就只能捎上个 AJAX 库（墙裂推荐[jx](http://www.openjs.com/scripts/jx/)，谁用谁知道），在页面载入后再请求 github 的数据。\n\n看了看 github api 返回的内容，一个 event 的基本结构如下：\n\n```javascript\n{\n\"id\": \"2338198221\",\n\"type\": \"PushEvent\",\n\"actor\": {\n  \"id\": 1171407,\n  \"login\": \"exoticknight\",\n  \"gravatar_id\": \"\",\n  \"url\": \"https://api.github.com/users/exoticknight\",\n  \"avatar_url\": \"https://avatars.githubusercontent.com/u/1171407?\"\n},\n\"repo\": {\n  \"id\": 24838315,\n  \"name\": \"scau-sidc/scau-sidc.github.io\",\n  \"url\": \"https://api.github.com/repos/scau-sidc/scau-sidc.github.io\"\n},\n\"payload\": {\n  \"push_id\": 472403458,\n  \"size\": 1,\n  \"distinct_size\": 1,\n  \"ref\": \"refs/heads/master\",\n  \"head\": \"5a20542ff0ccd9b3b71dc393eeb45bb74b5f40dc\",\n  \"before\": \"fb9144e0910813529f234cd00b24c4b0b21b67a2\",\n  \"commits\": [\n    {\n      \"sha\": \"5a20542ff0ccd9b3b71dc393eeb45bb74b5f40dc\",\n      \"author\": {\n        \"email\": \"draco.knight0@gmail.com\",\n        \"name\": \"exoticknight\"\n      },\n      \"message\": \"037\",\n      \"distinct\": true,\n      \"url\": \"https://api.github.com/repos/scau-sidc/scau-sidc.github.io/commits/5a20542ff0ccd9b3b71dc393eeb45bb74b5f40dc\"\n    }\n  ]\n},\n```\n\n数据存在于各种路径中……\n\n然后是HTML模板：\n\n```markup\n<div class=\"board-card mb4 p-responsive\" data-id=\"{cid}\">\n    <a alt=\"{uname}\" title=\"{uname}\" class=\"card-avatar\" target=\"_blank\" href=\"{uurl}\"><img class=\"animated\" src=\"{aurl}\" alt=\"avatar\" /></a>\n    <span class=\"card-type\">{ctype}</span>\n    <small class=\"card-commits\"><a target=\"_blank\" href=\"{curl}\">{chash}</a></small>\n    <p>{csummary}</p>\n</div>\n```\n\n其实 HTML 模板代码是怎样没所谓，留意其中用 `{` 和 `}` 括住的东西就是了。那是 field name，`{field}` 最终会被替换成数据。\n\n### 当我只想先快速解决的时候……\n直接一个replace了事……\n\n```javascript\nvar fillTemplate = function( template, field, data ) {\n    re = new RegExp( '\\\\{\\\\s*' + field + '\\\\s*\\\\}', 'g' );\n    return template.replace( re, data || '' );\n}\n```\n\n缺点也是简单易见的，因为只是替换了字符串再返回，所以如果替换了后的字符串（通常是数据）也包含 `{field}`，而下一次替换的 field name 刚好符合，那么最后生成出来的东西显然是错误的。\n\n<del>但是写起来快( ～'ω')～</del>\n\n### 当我有时间折腾的时候……\n来写一个**容易让别人使用**的js库吧。\n\n先来想想自己究竟想要怎么用这个库开始。\n\n我设想我将像如下那样的使用这个库：\n\n```javascript\n// 生成一个template对象\nvar template = simpleTemplate( '<div class=\"board-card mb4 p-responsive\" data-id=\"{cid}\"><a alt=\"{uname}\" title=\"{uname}\" class=\"card-avatar\" target=\"_blank\" href=\"{uurl}\"><img class=\"animated\" src=\"{aurl}\" alt=\"avatar\" /></a><span class=\"card-type\">{ctype}</span><small class=\"card-commits\"><a target=\"_blank\" href=\"{curl}\">{chash}</a></small><p>{csummary}</p></div>' );\n\n// 填充数据\ntemplate.fill({\n    'cid': '1234567',\n    'uname': 'exo',\n    'uurl': 'http://test.com/test',\n    'aurl': 'http://test.com/test'\n}).fill({\n    'csummary': '测试咯'\n});\n\n// 渲染\nvar html = template.render();\n```\n\n于是大概框架出来了。\n\n```javascript\n(function ( window, document, undefined ) {\n\nvar simpleTemplate = function( templateStr , prefix, suffix ) {\n\n    var template = function( str ) {\n    }\n\n    template.prototype.fill = function( jsonObj ) {\n        return this;\n    }\n\n    template.prototype.render = function() {\n    }\n\n    return new template( templateStr );\n}\n\nwindow.simpleTemplate = simpleTemplate;\n\n})( window, document )\n```\n\n模板的处理思路，我思考了这么一个方法。\n\n假设模板为 `<p>{field1}</p><p>{field1}</p><p>{filed2}</p>`。\n\n先将模板字符串使用 field 作为分隔符，使用 `split()` 来切分。<del>（`split()` 支持正则真是太好了）</del>因为 split 函数在IE中有比较严重的问题，IE8 中还没有改过来，所以在新版中只能换一个思路了，详情见下面的[更新](#update-2014-11-06)。\n\n则得到一个字符串数组 `text = [\"<p>\",\"</p><p>\",\"</p><p>\",\"</p>\"]`，这个作为最后合成所需的数组之一。\n\n```javascript\nvar splitRe = new RegExp( fieldPrefix + '\\\\s*\\\\w[\\\\w\\\\d]*\\\\s*' + fieldSuffix, 'g' )\nvar templateText = str.split( splitRe )\n```\n\n再对原模板字符串逐一匹配出 field，也组合成一个数组 `indexs = [\"field1\",\"field1\",\"filed2\"]`。这个数组的作用是标记 field 的位置。\n\n在匹配中也将 field 编成一个字典，用来存储数据。这里就是`{'filed1':'','field2':''}`。\n\n```javascript\nwhile ( result = indexRe.exec( str ) ) {\n    this.data[result[1]] = '';\n    fieldIndexs.push( result[1] );\n}\n```\n\n这样准备工作就完成了。\n\n填充数据的工作就是简单的将数据存储进那个 field 作为 key 的字典。\n\n```javascript\nfor ( var name in jsonObj ) {\n    if ( this.data.hasOwnProperty( name ) ) {\n        this.data[name] = jsonObj[name];\n    }\n}\n```\n\n最后渲染，简单易懂就直接上代码吧。\n\n```javascript\nfor ( i = 0; i < text.length; i++ ) {\n    temp.push( text[i] );\n    temp.push( this.data[indexs[i]] );\n}\n```\n\n接着 `temp.join('')` 就可以生成最终的内容了。\n\n这个方法因为将模板分割成小段字符串，所以不会存在重复渲染的问题。\n\n应用的实例可以到[这里](http://scau-sidc.github.io/trend/)查看。\n\n代码还没有 push 上 github，所以以下贴完整代码，满足只看代码星人。\n\n```javascript\n(function ( window, document, undefined ) {\nvar simpleTemplate = function( templateStr , prefix, suffix ) {\n    var fieldPrefix = prefix ? '\\\\' + prefix : '\\\\{',\n        fieldSuffix = suffix ? '\\\\' + suffix : '\\\\}',\n        splitRe = new RegExp( fieldPrefix + '\\\\s*\\\\w[\\\\w\\\\d]*\\\\s*' + fieldSuffix, 'g' ),\n        indexRe = new RegExp( fieldPrefix + '(\\\\s*\\\\w[\\\\w\\\\d]*\\\\s*)' + fieldSuffix, 'g' );\n\n    var template = function( str ) {\n        var templateText = str.split( splitRe ),\n            fieldIndexs = [];\n\n        // initial data and index\n        this.data = {};\n\n        var result;\n        while ( result = indexRe.exec( str ) ) {\n            this.data[result[1]] = '';\n            fieldIndexs.push( result[1] );\n        }\n\n        // getters\n        this.getTemplateText = function() {\n            return templateText;\n        }\n\n        this.getFieldIndexs = function() {\n            return fieldIndexs;\n        }\n    }\n\n    template.prototype.fill = function( jsonObj ) {\n        for ( var name in jsonObj ) {\n            if ( this.data.hasOwnProperty( name ) ) {\n                this.data[name] = jsonObj[name];\n            }\n        }\n\n        return this;\n    }\n\n    template.prototype.resetData = function() {\n        for ( var i in this.data ) {\n            this.data[i] = '';\n        }\n    }\n\n    template.prototype.render = function() {\n        var temp = [],\n            text = this.getTemplateText(),\n            indexs = this.getFieldIndexs(),\n            i;\n\n        // merge text array & data array\n        for ( i = 0; i < text.length; i++ ) {\n            temp.push( text[i] );\n            temp.push( this.data[indexs[i]] );\n        }\n\n        // clean\n        this.resetData();\n\n        return temp.join('');\n    }\n\n    return new template( templateStr );\n}\n\nwindow.simpleTemplate = simpleTemplate;\n\n})( window, document )\n```\n\n<a name=\"update-2014-11-06\"></a>\n## 2014.11.06更新\n\n在IE678中，split 函数如果使用正则匹配作为参数，那么结果中的空字符会被“吞”掉。\n\n看代码\n\n```javascript\n','.split(/,/g).length === 2;  // true in non-IE\n\n','.split(/,/g).length === 0;  // true in IE678\n```\n\n那么很明显如果我使用 split 函数的话，如果模板中出现 `{field}{field}` 的话，`}{` 中的空字符就会没了，模板文本和数据域的位置会打乱。\n\n于是就只能避免使用 split 函数，另辟蹊径。在解决这个问题的同时，我也在加上新的功能，简要来说就是支持列表循环和标志位了。最新的一个版本可以上[github项目](https://github.com/exoticknight/jswarehouse/tree/master/simpleTemplate)查看，算是本文中 js 的进化版。改进的思路我之后再写一篇博文来记录吧。","source":"_posts/一段简单的js模板渲染代码.md","raw":"---\ntitle: 一段简单的js模板渲染代码\ncategories:\n  - [技术, 前端]\n  - [编程语言, javascript]\ntags: [javascript, string-template]\npermalink: a-piece-of-simple-javascript-for-template-render\nid: 26\nupdated: '2014-11-06 22:17:16'\ndate: 2014-10-25 14:30:29\n---\n\n![thumbnail](https://i.imgur.com/aWBIWv4.jpg)\n## 前言\n在为一些页面写 javascript 的时候，发现经常出现如下的一种使用情况：通过AJAX请求数据，然后将数据填入 HTML 的模板中，最后将这段 HTML 插入或者替代到原网页中。\n\n看到这样的使用情况，有所了解的人可能说直接上 jQuery 啦，用 `$.get` 之类的函数取到数据后再各种 DOM 操作，easy 啦～或者也有人说“嗯，这样的情况用 AngrularJS 或者 React 吧，国产的 AvalonJS 也不错哦”。嗯都说的没错，其实自己喜欢用哪个就用那个，顺手就好。\n\n不过嘛，jQuery虽然厉害，但是在一些简单页面中带上一个压缩了也近 100k 的大库总感觉得不偿失（当然本身整个网站需要的话论外），而且实际用到的功能很少。\n\n> 加上一些插件，jQuery 也有模板渲染功能啦。jQuery 本身也有 `tmpl()` 和 `template()`。\n\n然后 AngularJS 之流嘛，好用是好用，只是有大材小用之感。\n\n于是，<del>勇敢的少年快起床找**</del>勇敢的少年来写原生js吧！\n\n## 真实用例\n\n### 描述\n在做某个博客的一个页面的时候，需要拉取 github event 来展示。然而因为博客本身搭建在github上，只依靠github提供的Jekyll引擎渲染，毫无后端可言，因此不能直接生成带有数据的页面。于是就只能捎上个 AJAX 库（墙裂推荐[jx](http://www.openjs.com/scripts/jx/)，谁用谁知道），在页面载入后再请求 github 的数据。\n\n看了看 github api 返回的内容，一个 event 的基本结构如下：\n\n```javascript\n{\n\"id\": \"2338198221\",\n\"type\": \"PushEvent\",\n\"actor\": {\n  \"id\": 1171407,\n  \"login\": \"exoticknight\",\n  \"gravatar_id\": \"\",\n  \"url\": \"https://api.github.com/users/exoticknight\",\n  \"avatar_url\": \"https://avatars.githubusercontent.com/u/1171407?\"\n},\n\"repo\": {\n  \"id\": 24838315,\n  \"name\": \"scau-sidc/scau-sidc.github.io\",\n  \"url\": \"https://api.github.com/repos/scau-sidc/scau-sidc.github.io\"\n},\n\"payload\": {\n  \"push_id\": 472403458,\n  \"size\": 1,\n  \"distinct_size\": 1,\n  \"ref\": \"refs/heads/master\",\n  \"head\": \"5a20542ff0ccd9b3b71dc393eeb45bb74b5f40dc\",\n  \"before\": \"fb9144e0910813529f234cd00b24c4b0b21b67a2\",\n  \"commits\": [\n    {\n      \"sha\": \"5a20542ff0ccd9b3b71dc393eeb45bb74b5f40dc\",\n      \"author\": {\n        \"email\": \"draco.knight0@gmail.com\",\n        \"name\": \"exoticknight\"\n      },\n      \"message\": \"037\",\n      \"distinct\": true,\n      \"url\": \"https://api.github.com/repos/scau-sidc/scau-sidc.github.io/commits/5a20542ff0ccd9b3b71dc393eeb45bb74b5f40dc\"\n    }\n  ]\n},\n```\n\n数据存在于各种路径中……\n\n然后是HTML模板：\n\n```markup\n<div class=\"board-card mb4 p-responsive\" data-id=\"{cid}\">\n    <a alt=\"{uname}\" title=\"{uname}\" class=\"card-avatar\" target=\"_blank\" href=\"{uurl}\"><img class=\"animated\" src=\"{aurl}\" alt=\"avatar\" /></a>\n    <span class=\"card-type\">{ctype}</span>\n    <small class=\"card-commits\"><a target=\"_blank\" href=\"{curl}\">{chash}</a></small>\n    <p>{csummary}</p>\n</div>\n```\n\n其实 HTML 模板代码是怎样没所谓，留意其中用 `{` 和 `}` 括住的东西就是了。那是 field name，`{field}` 最终会被替换成数据。\n\n### 当我只想先快速解决的时候……\n直接一个replace了事……\n\n```javascript\nvar fillTemplate = function( template, field, data ) {\n    re = new RegExp( '\\\\{\\\\s*' + field + '\\\\s*\\\\}', 'g' );\n    return template.replace( re, data || '' );\n}\n```\n\n缺点也是简单易见的，因为只是替换了字符串再返回，所以如果替换了后的字符串（通常是数据）也包含 `{field}`，而下一次替换的 field name 刚好符合，那么最后生成出来的东西显然是错误的。\n\n<del>但是写起来快( ～'ω')～</del>\n\n### 当我有时间折腾的时候……\n来写一个**容易让别人使用**的js库吧。\n\n先来想想自己究竟想要怎么用这个库开始。\n\n我设想我将像如下那样的使用这个库：\n\n```javascript\n// 生成一个template对象\nvar template = simpleTemplate( '<div class=\"board-card mb4 p-responsive\" data-id=\"{cid}\"><a alt=\"{uname}\" title=\"{uname}\" class=\"card-avatar\" target=\"_blank\" href=\"{uurl}\"><img class=\"animated\" src=\"{aurl}\" alt=\"avatar\" /></a><span class=\"card-type\">{ctype}</span><small class=\"card-commits\"><a target=\"_blank\" href=\"{curl}\">{chash}</a></small><p>{csummary}</p></div>' );\n\n// 填充数据\ntemplate.fill({\n    'cid': '1234567',\n    'uname': 'exo',\n    'uurl': 'http://test.com/test',\n    'aurl': 'http://test.com/test'\n}).fill({\n    'csummary': '测试咯'\n});\n\n// 渲染\nvar html = template.render();\n```\n\n于是大概框架出来了。\n\n```javascript\n(function ( window, document, undefined ) {\n\nvar simpleTemplate = function( templateStr , prefix, suffix ) {\n\n    var template = function( str ) {\n    }\n\n    template.prototype.fill = function( jsonObj ) {\n        return this;\n    }\n\n    template.prototype.render = function() {\n    }\n\n    return new template( templateStr );\n}\n\nwindow.simpleTemplate = simpleTemplate;\n\n})( window, document )\n```\n\n模板的处理思路，我思考了这么一个方法。\n\n假设模板为 `<p>{field1}</p><p>{field1}</p><p>{filed2}</p>`。\n\n先将模板字符串使用 field 作为分隔符，使用 `split()` 来切分。<del>（`split()` 支持正则真是太好了）</del>因为 split 函数在IE中有比较严重的问题，IE8 中还没有改过来，所以在新版中只能换一个思路了，详情见下面的[更新](#update-2014-11-06)。\n\n则得到一个字符串数组 `text = [\"<p>\",\"</p><p>\",\"</p><p>\",\"</p>\"]`，这个作为最后合成所需的数组之一。\n\n```javascript\nvar splitRe = new RegExp( fieldPrefix + '\\\\s*\\\\w[\\\\w\\\\d]*\\\\s*' + fieldSuffix, 'g' )\nvar templateText = str.split( splitRe )\n```\n\n再对原模板字符串逐一匹配出 field，也组合成一个数组 `indexs = [\"field1\",\"field1\",\"filed2\"]`。这个数组的作用是标记 field 的位置。\n\n在匹配中也将 field 编成一个字典，用来存储数据。这里就是`{'filed1':'','field2':''}`。\n\n```javascript\nwhile ( result = indexRe.exec( str ) ) {\n    this.data[result[1]] = '';\n    fieldIndexs.push( result[1] );\n}\n```\n\n这样准备工作就完成了。\n\n填充数据的工作就是简单的将数据存储进那个 field 作为 key 的字典。\n\n```javascript\nfor ( var name in jsonObj ) {\n    if ( this.data.hasOwnProperty( name ) ) {\n        this.data[name] = jsonObj[name];\n    }\n}\n```\n\n最后渲染，简单易懂就直接上代码吧。\n\n```javascript\nfor ( i = 0; i < text.length; i++ ) {\n    temp.push( text[i] );\n    temp.push( this.data[indexs[i]] );\n}\n```\n\n接着 `temp.join('')` 就可以生成最终的内容了。\n\n这个方法因为将模板分割成小段字符串，所以不会存在重复渲染的问题。\n\n应用的实例可以到[这里](http://scau-sidc.github.io/trend/)查看。\n\n代码还没有 push 上 github，所以以下贴完整代码，满足只看代码星人。\n\n```javascript\n(function ( window, document, undefined ) {\nvar simpleTemplate = function( templateStr , prefix, suffix ) {\n    var fieldPrefix = prefix ? '\\\\' + prefix : '\\\\{',\n        fieldSuffix = suffix ? '\\\\' + suffix : '\\\\}',\n        splitRe = new RegExp( fieldPrefix + '\\\\s*\\\\w[\\\\w\\\\d]*\\\\s*' + fieldSuffix, 'g' ),\n        indexRe = new RegExp( fieldPrefix + '(\\\\s*\\\\w[\\\\w\\\\d]*\\\\s*)' + fieldSuffix, 'g' );\n\n    var template = function( str ) {\n        var templateText = str.split( splitRe ),\n            fieldIndexs = [];\n\n        // initial data and index\n        this.data = {};\n\n        var result;\n        while ( result = indexRe.exec( str ) ) {\n            this.data[result[1]] = '';\n            fieldIndexs.push( result[1] );\n        }\n\n        // getters\n        this.getTemplateText = function() {\n            return templateText;\n        }\n\n        this.getFieldIndexs = function() {\n            return fieldIndexs;\n        }\n    }\n\n    template.prototype.fill = function( jsonObj ) {\n        for ( var name in jsonObj ) {\n            if ( this.data.hasOwnProperty( name ) ) {\n                this.data[name] = jsonObj[name];\n            }\n        }\n\n        return this;\n    }\n\n    template.prototype.resetData = function() {\n        for ( var i in this.data ) {\n            this.data[i] = '';\n        }\n    }\n\n    template.prototype.render = function() {\n        var temp = [],\n            text = this.getTemplateText(),\n            indexs = this.getFieldIndexs(),\n            i;\n\n        // merge text array & data array\n        for ( i = 0; i < text.length; i++ ) {\n            temp.push( text[i] );\n            temp.push( this.data[indexs[i]] );\n        }\n\n        // clean\n        this.resetData();\n\n        return temp.join('');\n    }\n\n    return new template( templateStr );\n}\n\nwindow.simpleTemplate = simpleTemplate;\n\n})( window, document )\n```\n\n<a name=\"update-2014-11-06\"></a>\n## 2014.11.06更新\n\n在IE678中，split 函数如果使用正则匹配作为参数，那么结果中的空字符会被“吞”掉。\n\n看代码\n\n```javascript\n','.split(/,/g).length === 2;  // true in non-IE\n\n','.split(/,/g).length === 0;  // true in IE678\n```\n\n那么很明显如果我使用 split 函数的话，如果模板中出现 `{field}{field}` 的话，`}{` 中的空字符就会没了，模板文本和数据域的位置会打乱。\n\n于是就只能避免使用 split 函数，另辟蹊径。在解决这个问题的同时，我也在加上新的功能，简要来说就是支持列表循环和标志位了。最新的一个版本可以上[github项目](https://github.com/exoticknight/jswarehouse/tree/master/simpleTemplate)查看，算是本文中 js 的进化版。改进的思路我之后再写一篇博文来记录吧。","slug":"a-piece-of-simple-javascript-for-template-render","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyus4006dn7t4g3moi85a","content":"<p><img src=\"https://i.imgur.com/aWBIWv4.jpg\" alt=\"thumbnail\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在为一些页面写 javascript 的时候，发现经常出现如下的一种使用情况：通过AJAX请求数据，然后将数据填入 HTML 的模板中，最后将这段 HTML 插入或者替代到原网页中。</p>\n<p>看到这样的使用情况，有所了解的人可能说直接上 jQuery 啦，用 <code>$.get</code> 之类的函数取到数据后再各种 DOM 操作，easy 啦～或者也有人说“嗯，这样的情况用 AngrularJS 或者 React 吧，国产的 AvalonJS 也不错哦”。嗯都说的没错，其实自己喜欢用哪个就用那个，顺手就好。</p>\n<p>不过嘛，jQuery虽然厉害，但是在一些简单页面中带上一个压缩了也近 100k 的大库总感觉得不偿失（当然本身整个网站需要的话论外），而且实际用到的功能很少。</p>\n<blockquote>\n<p>加上一些插件，jQuery 也有模板渲染功能啦。jQuery 本身也有 <code>tmpl()</code> 和 <code>template()</code>。</p>\n</blockquote>\n<p>然后 AngularJS 之流嘛，好用是好用，只是有大材小用之感。</p>\n<p>于是，<del>勇敢的少年快起床找**</del>勇敢的少年来写原生js吧！</p>\n<h2 id=\"真实用例\"><a href=\"#真实用例\" class=\"headerlink\" title=\"真实用例\"></a>真实用例</h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>在做某个博客的一个页面的时候，需要拉取 github event 来展示。然而因为博客本身搭建在github上，只依靠github提供的Jekyll引擎渲染，毫无后端可言，因此不能直接生成带有数据的页面。于是就只能捎上个 AJAX 库（墙裂推荐<a href=\"http://www.openjs.com/scripts/jx/\" target=\"_blank\" rel=\"noopener\">jx</a>，谁用谁知道），在页面载入后再请求 github 的数据。</p>\n<p>看了看 github api 返回的内容，一个 event 的基本结构如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"id\"</span>: <span class=\"string\">\"2338198221\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"type\"</span>: <span class=\"string\">\"PushEvent\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"actor\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"id\"</span>: <span class=\"number\">1171407</span>,</span><br><span class=\"line\">  <span class=\"string\">\"login\"</span>: <span class=\"string\">\"exoticknight\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"gravatar_id\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://api.github.com/users/exoticknight\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"avatar_url\"</span>: <span class=\"string\">\"https://avatars.githubusercontent.com/u/1171407?\"</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">\"repo\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"id\"</span>: <span class=\"number\">24838315</span>,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"scau-sidc/scau-sidc.github.io\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://api.github.com/repos/scau-sidc/scau-sidc.github.io\"</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">\"payload\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"push_id\"</span>: <span class=\"number\">472403458</span>,</span><br><span class=\"line\">  <span class=\"string\">\"size\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">\"distinct_size\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ref\"</span>: <span class=\"string\">\"refs/heads/master\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"head\"</span>: <span class=\"string\">\"5a20542ff0ccd9b3b71dc393eeb45bb74b5f40dc\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"before\"</span>: <span class=\"string\">\"fb9144e0910813529f234cd00b24c4b0b21b67a2\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"commits\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"sha\"</span>: <span class=\"string\">\"5a20542ff0ccd9b3b71dc393eeb45bb74b5f40dc\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"author\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"email\"</span>: <span class=\"string\">\"draco.knight0@gmail.com\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"name\"</span>: <span class=\"string\">\"exoticknight\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">\"message\"</span>: <span class=\"string\">\"037\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"distinct\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://api.github.com/repos/scau-sidc/scau-sidc.github.io/commits/5a20542ff0ccd9b3b71dc393eeb45bb74b5f40dc\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>数据存在于各种路径中……</p>\n<p>然后是HTML模板：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;board-card mb4 p-responsive&quot; data-id=&quot;&#123;cid&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;a alt=&quot;&#123;uname&#125;&quot; title=&quot;&#123;uname&#125;&quot; class=&quot;card-avatar&quot; target=&quot;_blank&quot; href=&quot;&#123;uurl&#125;&quot;&gt;&lt;img class=&quot;animated&quot; src=&quot;&#123;aurl&#125;&quot; alt=&quot;avatar&quot; /&gt;&lt;/a&gt;</span><br><span class=\"line\">    &lt;span class=&quot;card-type&quot;&gt;&#123;ctype&#125;&lt;/span&gt;</span><br><span class=\"line\">    &lt;small class=&quot;card-commits&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;&#123;curl&#125;&quot;&gt;&#123;chash&#125;&lt;/a&gt;&lt;/small&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;csummary&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>其实 HTML 模板代码是怎样没所谓，留意其中用 <code>{</code> 和 <code>}</code> 括住的东西就是了。那是 field name，<code>{field}</code> 最终会被替换成数据。</p>\n<h3 id=\"当我只想先快速解决的时候……\"><a href=\"#当我只想先快速解决的时候……\" class=\"headerlink\" title=\"当我只想先快速解决的时候……\"></a>当我只想先快速解决的时候……</h3><p>直接一个replace了事……</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fillTemplate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> template, field, data </span>) </span>&#123;</span><br><span class=\"line\">    re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>( <span class=\"string\">'\\\\&#123;\\\\s*'</span> + field + <span class=\"string\">'\\\\s*\\\\&#125;'</span>, <span class=\"string\">'g'</span> );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> template.replace( re, data || <span class=\"string\">''</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>缺点也是简单易见的，因为只是替换了字符串再返回，所以如果替换了后的字符串（通常是数据）也包含 <code>{field}</code>，而下一次替换的 field name 刚好符合，那么最后生成出来的东西显然是错误的。</p>\n<p><del>但是写起来快( ～’ω’)～</del></p>\n<h3 id=\"当我有时间折腾的时候……\"><a href=\"#当我有时间折腾的时候……\" class=\"headerlink\" title=\"当我有时间折腾的时候……\"></a>当我有时间折腾的时候……</h3><p>来写一个<strong>容易让别人使用</strong>的js库吧。</p>\n<p>先来想想自己究竟想要怎么用这个库开始。</p>\n<p>我设想我将像如下那样的使用这个库：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成一个template对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = simpleTemplate( <span class=\"string\">'&lt;div class=\"board-card mb4 p-responsive\" data-id=\"&#123;cid&#125;\"&gt;&lt;a alt=\"&#123;uname&#125;\" title=\"&#123;uname&#125;\" class=\"card-avatar\" target=\"_blank\" href=\"&#123;uurl&#125;\"&gt;&lt;img class=\"animated\" src=\"&#123;aurl&#125;\" alt=\"avatar\" /&gt;&lt;/a&gt;&lt;span class=\"card-type\"&gt;&#123;ctype&#125;&lt;/span&gt;&lt;small class=\"card-commits\"&gt;&lt;a target=\"_blank\" href=\"&#123;curl&#125;\"&gt;&#123;chash&#125;&lt;/a&gt;&lt;/small&gt;&lt;p&gt;&#123;csummary&#125;&lt;/p&gt;&lt;/div&gt;'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 填充数据</span></span><br><span class=\"line\">template.fill(&#123;</span><br><span class=\"line\">    <span class=\"string\">'cid'</span>: <span class=\"string\">'1234567'</span>,</span><br><span class=\"line\">    <span class=\"string\">'uname'</span>: <span class=\"string\">'exo'</span>,</span><br><span class=\"line\">    <span class=\"string\">'uurl'</span>: <span class=\"string\">'http://test.com/test'</span>,</span><br><span class=\"line\">    <span class=\"string\">'aurl'</span>: <span class=\"string\">'http://test.com/test'</span></span><br><span class=\"line\">&#125;).fill(&#123;</span><br><span class=\"line\">    <span class=\"string\">'csummary'</span>: <span class=\"string\">'测试咯'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 渲染</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> html = template.render();</span><br></pre></td></tr></table></figure>\n<p>于是大概框架出来了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> window, document, undefined </span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> simpleTemplate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> templateStr , prefix, suffix </span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> str </span>) </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    template.prototype.fill = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> jsonObj </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    template.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> template( templateStr );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.simpleTemplate = simpleTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)( <span class=\"built_in\">window</span>, <span class=\"built_in\">document</span> )</span><br></pre></td></tr></table></figure>\n<p>模板的处理思路，我思考了这么一个方法。</p>\n<p>假设模板为 <code>&lt;p&gt;{field1}&lt;/p&gt;&lt;p&gt;{field1}&lt;/p&gt;&lt;p&gt;{filed2}&lt;/p&gt;</code>。</p>\n<p>先将模板字符串使用 field 作为分隔符，使用 <code>split()</code> 来切分。<del>（<code>split()</code> 支持正则真是太好了）</del>因为 split 函数在IE中有比较严重的问题，IE8 中还没有改过来，所以在新版中只能换一个思路了，详情见下面的<a href=\"#update-2014-11-06\">更新</a>。</p>\n<p>则得到一个字符串数组 <code>text = [&quot;&lt;p&gt;&quot;,&quot;&lt;/p&gt;&lt;p&gt;&quot;,&quot;&lt;/p&gt;&lt;p&gt;&quot;,&quot;&lt;/p&gt;&quot;]</code>，这个作为最后合成所需的数组之一。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> splitRe = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>( fieldPrefix + <span class=\"string\">'\\\\s*\\\\w[\\\\w\\\\d]*\\\\s*'</span> + fieldSuffix, <span class=\"string\">'g'</span> )</span><br><span class=\"line\"><span class=\"keyword\">var</span> templateText = str.split( splitRe )</span><br></pre></td></tr></table></figure>\n<p>再对原模板字符串逐一匹配出 field，也组合成一个数组 <code>indexs = [&quot;field1&quot;,&quot;field1&quot;,&quot;filed2&quot;]</code>。这个数组的作用是标记 field 的位置。</p>\n<p>在匹配中也将 field 编成一个字典，用来存储数据。这里就是<code>{&#39;filed1&#39;:&#39;&#39;,&#39;field2&#39;:&#39;&#39;}</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ( result = indexRe.exec( str ) ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data[result[<span class=\"number\">1</span>]] = <span class=\"string\">''</span>;</span><br><span class=\"line\">    fieldIndexs.push( result[<span class=\"number\">1</span>] );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样准备工作就完成了。</p>\n<p>填充数据的工作就是简单的将数据存储进那个 field 作为 key 的字典。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> name <span class=\"keyword\">in</span> jsonObj ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.data.hasOwnProperty( name ) ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data[name] = jsonObj[name];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后渲染，简单易懂就直接上代码吧。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; text.length; i++ ) &#123;</span><br><span class=\"line\">    temp.push( text[i] );</span><br><span class=\"line\">    temp.push( <span class=\"keyword\">this</span>.data[indexs[i]] );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着 <code>temp.join(&#39;&#39;)</code> 就可以生成最终的内容了。</p>\n<p>这个方法因为将模板分割成小段字符串，所以不会存在重复渲染的问题。</p>\n<p>应用的实例可以到<a href=\"http://scau-sidc.github.io/trend/\" target=\"_blank\" rel=\"noopener\">这里</a>查看。</p>\n<p>代码还没有 push 上 github，所以以下贴完整代码，满足只看代码星人。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> window, document, undefined </span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> simpleTemplate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> templateStr , prefix, suffix </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fieldPrefix = prefix ? <span class=\"string\">'\\\\'</span> + prefix : <span class=\"string\">'\\\\&#123;'</span>,</span><br><span class=\"line\">        fieldSuffix = suffix ? <span class=\"string\">'\\\\'</span> + suffix : <span class=\"string\">'\\\\&#125;'</span>,</span><br><span class=\"line\">        splitRe = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>( fieldPrefix + <span class=\"string\">'\\\\s*\\\\w[\\\\w\\\\d]*\\\\s*'</span> + fieldSuffix, <span class=\"string\">'g'</span> ),</span><br><span class=\"line\">        indexRe = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>( fieldPrefix + <span class=\"string\">'(\\\\s*\\\\w[\\\\w\\\\d]*\\\\s*)'</span> + fieldSuffix, <span class=\"string\">'g'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> str </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> templateText = str.split( splitRe ),</span><br><span class=\"line\">            fieldIndexs = [];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// initial data and index</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> result;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( result = indexRe.exec( str ) ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.data[result[<span class=\"number\">1</span>]] = <span class=\"string\">''</span>;</span><br><span class=\"line\">            fieldIndexs.push( result[<span class=\"number\">1</span>] );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// getters</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getTemplateText = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> templateText;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getFieldIndexs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fieldIndexs;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    template.prototype.fill = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> jsonObj </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> name <span class=\"keyword\">in</span> jsonObj ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.data.hasOwnProperty( name ) ) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.data[name] = jsonObj[name];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    template.prototype.resetData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.data ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.data[i] = <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    template.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = [],</span><br><span class=\"line\">            text = <span class=\"keyword\">this</span>.getTemplateText(),</span><br><span class=\"line\">            indexs = <span class=\"keyword\">this</span>.getFieldIndexs(),</span><br><span class=\"line\">            i;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// merge text array &amp; data array</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; text.length; i++ ) &#123;</span><br><span class=\"line\">            temp.push( text[i] );</span><br><span class=\"line\">            temp.push( <span class=\"keyword\">this</span>.data[indexs[i]] );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// clean</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.resetData();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> template( templateStr );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.simpleTemplate = simpleTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)( <span class=\"built_in\">window</span>, <span class=\"built_in\">document</span> )</span><br></pre></td></tr></table></figure>\n<p><a name=\"update-2014-11-06\"></a></p>\n<h2 id=\"2014-11-06更新\"><a href=\"#2014-11-06更新\" class=\"headerlink\" title=\"2014.11.06更新\"></a>2014.11.06更新</h2><p>在IE678中，split 函数如果使用正则匹配作为参数，那么结果中的空字符会被“吞”掉。</p>\n<p>看代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">','</span>.split(<span class=\"regexp\">/,/g</span>).length === <span class=\"number\">2</span>;  <span class=\"comment\">// true in non-IE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">','</span>.split(<span class=\"regexp\">/,/g</span>).length === <span class=\"number\">0</span>;  <span class=\"comment\">// true in IE678</span></span><br></pre></td></tr></table></figure>\n<p>那么很明显如果我使用 split 函数的话，如果模板中出现 <code>{field}{field}</code> 的话，<code>}{</code> 中的空字符就会没了，模板文本和数据域的位置会打乱。</p>\n<p>于是就只能避免使用 split 函数，另辟蹊径。在解决这个问题的同时，我也在加上新的功能，简要来说就是支持列表循环和标志位了。最新的一个版本可以上<a href=\"https://github.com/exoticknight/jswarehouse/tree/master/simpleTemplate\" target=\"_blank\" rel=\"noopener\">github项目</a>查看，算是本文中 js 的进化版。改进的思路我之后再写一篇博文来记录吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://i.imgur.com/aWBIWv4.jpg\" alt=\"thumbnail\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在为一些页面写 javascript 的时候，发现经常出现如下的一种使用情况：通过AJAX请求数据，然后将数据填入 HTML 的模板中，最后将这段 HTML 插入或者替代到原网页中。</p>\n<p>看到这样的使用情况，有所了解的人可能说直接上 jQuery 啦，用 <code>$.get</code> 之类的函数取到数据后再各种 DOM 操作，easy 啦～或者也有人说“嗯，这样的情况用 AngrularJS 或者 React 吧，国产的 AvalonJS 也不错哦”。嗯都说的没错，其实自己喜欢用哪个就用那个，顺手就好。</p>\n<p>不过嘛，jQuery虽然厉害，但是在一些简单页面中带上一个压缩了也近 100k 的大库总感觉得不偿失（当然本身整个网站需要的话论外），而且实际用到的功能很少。</p>\n<blockquote>\n<p>加上一些插件，jQuery 也有模板渲染功能啦。jQuery 本身也有 <code>tmpl()</code> 和 <code>template()</code>。</p>\n</blockquote>\n<p>然后 AngularJS 之流嘛，好用是好用，只是有大材小用之感。</p>\n<p>于是，<del>勇敢的少年快起床找**</del>勇敢的少年来写原生js吧！</p>\n<h2 id=\"真实用例\"><a href=\"#真实用例\" class=\"headerlink\" title=\"真实用例\"></a>真实用例</h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>在做某个博客的一个页面的时候，需要拉取 github event 来展示。然而因为博客本身搭建在github上，只依靠github提供的Jekyll引擎渲染，毫无后端可言，因此不能直接生成带有数据的页面。于是就只能捎上个 AJAX 库（墙裂推荐<a href=\"http://www.openjs.com/scripts/jx/\" target=\"_blank\" rel=\"noopener\">jx</a>，谁用谁知道），在页面载入后再请求 github 的数据。</p>\n<p>看了看 github api 返回的内容，一个 event 的基本结构如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">\"id\"</span>: <span class=\"string\">\"2338198221\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"type\"</span>: <span class=\"string\">\"PushEvent\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"actor\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"id\"</span>: <span class=\"number\">1171407</span>,</span><br><span class=\"line\">  <span class=\"string\">\"login\"</span>: <span class=\"string\">\"exoticknight\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"gravatar_id\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://api.github.com/users/exoticknight\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"avatar_url\"</span>: <span class=\"string\">\"https://avatars.githubusercontent.com/u/1171407?\"</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">\"repo\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"id\"</span>: <span class=\"number\">24838315</span>,</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"scau-sidc/scau-sidc.github.io\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://api.github.com/repos/scau-sidc/scau-sidc.github.io\"</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">\"payload\"</span>: &#123;</span><br><span class=\"line\">  <span class=\"string\">\"push_id\"</span>: <span class=\"number\">472403458</span>,</span><br><span class=\"line\">  <span class=\"string\">\"size\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">\"distinct_size\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"string\">\"ref\"</span>: <span class=\"string\">\"refs/heads/master\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"head\"</span>: <span class=\"string\">\"5a20542ff0ccd9b3b71dc393eeb45bb74b5f40dc\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"before\"</span>: <span class=\"string\">\"fb9144e0910813529f234cd00b24c4b0b21b67a2\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"commits\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">\"sha\"</span>: <span class=\"string\">\"5a20542ff0ccd9b3b71dc393eeb45bb74b5f40dc\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"author\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"email\"</span>: <span class=\"string\">\"draco.knight0@gmail.com\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"name\"</span>: <span class=\"string\">\"exoticknight\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">\"message\"</span>: <span class=\"string\">\"037\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"distinct\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"string\">\"url\"</span>: <span class=\"string\">\"https://api.github.com/repos/scau-sidc/scau-sidc.github.io/commits/5a20542ff0ccd9b3b71dc393eeb45bb74b5f40dc\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>数据存在于各种路径中……</p>\n<p>然后是HTML模板：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;board-card mb4 p-responsive&quot; data-id=&quot;&#123;cid&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;a alt=&quot;&#123;uname&#125;&quot; title=&quot;&#123;uname&#125;&quot; class=&quot;card-avatar&quot; target=&quot;_blank&quot; href=&quot;&#123;uurl&#125;&quot;&gt;&lt;img class=&quot;animated&quot; src=&quot;&#123;aurl&#125;&quot; alt=&quot;avatar&quot; /&gt;&lt;/a&gt;</span><br><span class=\"line\">    &lt;span class=&quot;card-type&quot;&gt;&#123;ctype&#125;&lt;/span&gt;</span><br><span class=\"line\">    &lt;small class=&quot;card-commits&quot;&gt;&lt;a target=&quot;_blank&quot; href=&quot;&#123;curl&#125;&quot;&gt;&#123;chash&#125;&lt;/a&gt;&lt;/small&gt;</span><br><span class=\"line\">    &lt;p&gt;&#123;csummary&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>其实 HTML 模板代码是怎样没所谓，留意其中用 <code>{</code> 和 <code>}</code> 括住的东西就是了。那是 field name，<code>{field}</code> 最终会被替换成数据。</p>\n<h3 id=\"当我只想先快速解决的时候……\"><a href=\"#当我只想先快速解决的时候……\" class=\"headerlink\" title=\"当我只想先快速解决的时候……\"></a>当我只想先快速解决的时候……</h3><p>直接一个replace了事……</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fillTemplate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> template, field, data </span>) </span>&#123;</span><br><span class=\"line\">    re = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>( <span class=\"string\">'\\\\&#123;\\\\s*'</span> + field + <span class=\"string\">'\\\\s*\\\\&#125;'</span>, <span class=\"string\">'g'</span> );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> template.replace( re, data || <span class=\"string\">''</span> );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>缺点也是简单易见的，因为只是替换了字符串再返回，所以如果替换了后的字符串（通常是数据）也包含 <code>{field}</code>，而下一次替换的 field name 刚好符合，那么最后生成出来的东西显然是错误的。</p>\n<p><del>但是写起来快( ～’ω’)～</del></p>\n<h3 id=\"当我有时间折腾的时候……\"><a href=\"#当我有时间折腾的时候……\" class=\"headerlink\" title=\"当我有时间折腾的时候……\"></a>当我有时间折腾的时候……</h3><p>来写一个<strong>容易让别人使用</strong>的js库吧。</p>\n<p>先来想想自己究竟想要怎么用这个库开始。</p>\n<p>我设想我将像如下那样的使用这个库：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成一个template对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = simpleTemplate( <span class=\"string\">'&lt;div class=\"board-card mb4 p-responsive\" data-id=\"&#123;cid&#125;\"&gt;&lt;a alt=\"&#123;uname&#125;\" title=\"&#123;uname&#125;\" class=\"card-avatar\" target=\"_blank\" href=\"&#123;uurl&#125;\"&gt;&lt;img class=\"animated\" src=\"&#123;aurl&#125;\" alt=\"avatar\" /&gt;&lt;/a&gt;&lt;span class=\"card-type\"&gt;&#123;ctype&#125;&lt;/span&gt;&lt;small class=\"card-commits\"&gt;&lt;a target=\"_blank\" href=\"&#123;curl&#125;\"&gt;&#123;chash&#125;&lt;/a&gt;&lt;/small&gt;&lt;p&gt;&#123;csummary&#125;&lt;/p&gt;&lt;/div&gt;'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 填充数据</span></span><br><span class=\"line\">template.fill(&#123;</span><br><span class=\"line\">    <span class=\"string\">'cid'</span>: <span class=\"string\">'1234567'</span>,</span><br><span class=\"line\">    <span class=\"string\">'uname'</span>: <span class=\"string\">'exo'</span>,</span><br><span class=\"line\">    <span class=\"string\">'uurl'</span>: <span class=\"string\">'http://test.com/test'</span>,</span><br><span class=\"line\">    <span class=\"string\">'aurl'</span>: <span class=\"string\">'http://test.com/test'</span></span><br><span class=\"line\">&#125;).fill(&#123;</span><br><span class=\"line\">    <span class=\"string\">'csummary'</span>: <span class=\"string\">'测试咯'</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 渲染</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> html = template.render();</span><br></pre></td></tr></table></figure>\n<p>于是大概框架出来了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> window, document, undefined </span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> simpleTemplate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> templateStr , prefix, suffix </span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> str </span>) </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    template.prototype.fill = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> jsonObj </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    template.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> template( templateStr );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.simpleTemplate = simpleTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)( <span class=\"built_in\">window</span>, <span class=\"built_in\">document</span> )</span><br></pre></td></tr></table></figure>\n<p>模板的处理思路，我思考了这么一个方法。</p>\n<p>假设模板为 <code>&lt;p&gt;{field1}&lt;/p&gt;&lt;p&gt;{field1}&lt;/p&gt;&lt;p&gt;{filed2}&lt;/p&gt;</code>。</p>\n<p>先将模板字符串使用 field 作为分隔符，使用 <code>split()</code> 来切分。<del>（<code>split()</code> 支持正则真是太好了）</del>因为 split 函数在IE中有比较严重的问题，IE8 中还没有改过来，所以在新版中只能换一个思路了，详情见下面的<a href=\"#update-2014-11-06\">更新</a>。</p>\n<p>则得到一个字符串数组 <code>text = [&quot;&lt;p&gt;&quot;,&quot;&lt;/p&gt;&lt;p&gt;&quot;,&quot;&lt;/p&gt;&lt;p&gt;&quot;,&quot;&lt;/p&gt;&quot;]</code>，这个作为最后合成所需的数组之一。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> splitRe = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>( fieldPrefix + <span class=\"string\">'\\\\s*\\\\w[\\\\w\\\\d]*\\\\s*'</span> + fieldSuffix, <span class=\"string\">'g'</span> )</span><br><span class=\"line\"><span class=\"keyword\">var</span> templateText = str.split( splitRe )</span><br></pre></td></tr></table></figure>\n<p>再对原模板字符串逐一匹配出 field，也组合成一个数组 <code>indexs = [&quot;field1&quot;,&quot;field1&quot;,&quot;filed2&quot;]</code>。这个数组的作用是标记 field 的位置。</p>\n<p>在匹配中也将 field 编成一个字典，用来存储数据。这里就是<code>{&#39;filed1&#39;:&#39;&#39;,&#39;field2&#39;:&#39;&#39;}</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ( result = indexRe.exec( str ) ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.data[result[<span class=\"number\">1</span>]] = <span class=\"string\">''</span>;</span><br><span class=\"line\">    fieldIndexs.push( result[<span class=\"number\">1</span>] );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样准备工作就完成了。</p>\n<p>填充数据的工作就是简单的将数据存储进那个 field 作为 key 的字典。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> name <span class=\"keyword\">in</span> jsonObj ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.data.hasOwnProperty( name ) ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data[name] = jsonObj[name];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后渲染，简单易懂就直接上代码吧。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; text.length; i++ ) &#123;</span><br><span class=\"line\">    temp.push( text[i] );</span><br><span class=\"line\">    temp.push( <span class=\"keyword\">this</span>.data[indexs[i]] );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着 <code>temp.join(&#39;&#39;)</code> 就可以生成最终的内容了。</p>\n<p>这个方法因为将模板分割成小段字符串，所以不会存在重复渲染的问题。</p>\n<p>应用的实例可以到<a href=\"http://scau-sidc.github.io/trend/\" target=\"_blank\" rel=\"noopener\">这里</a>查看。</p>\n<p>代码还没有 push 上 github，所以以下贴完整代码，满足只看代码星人。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> window, document, undefined </span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> simpleTemplate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> templateStr , prefix, suffix </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fieldPrefix = prefix ? <span class=\"string\">'\\\\'</span> + prefix : <span class=\"string\">'\\\\&#123;'</span>,</span><br><span class=\"line\">        fieldSuffix = suffix ? <span class=\"string\">'\\\\'</span> + suffix : <span class=\"string\">'\\\\&#125;'</span>,</span><br><span class=\"line\">        splitRe = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>( fieldPrefix + <span class=\"string\">'\\\\s*\\\\w[\\\\w\\\\d]*\\\\s*'</span> + fieldSuffix, <span class=\"string\">'g'</span> ),</span><br><span class=\"line\">        indexRe = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>( fieldPrefix + <span class=\"string\">'(\\\\s*\\\\w[\\\\w\\\\d]*\\\\s*)'</span> + fieldSuffix, <span class=\"string\">'g'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> template = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> str </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> templateText = str.split( splitRe ),</span><br><span class=\"line\">            fieldIndexs = [];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// initial data and index</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.data = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> result;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( result = indexRe.exec( str ) ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.data[result[<span class=\"number\">1</span>]] = <span class=\"string\">''</span>;</span><br><span class=\"line\">            fieldIndexs.push( result[<span class=\"number\">1</span>] );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// getters</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getTemplateText = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> templateText;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getFieldIndexs = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fieldIndexs;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    template.prototype.fill = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> jsonObj </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> name <span class=\"keyword\">in</span> jsonObj ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.data.hasOwnProperty( name ) ) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">this</span>.data[name] = jsonObj[name];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    template.prototype.resetData = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>.data ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.data[i] = <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    template.prototype.render = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> temp = [],</span><br><span class=\"line\">            text = <span class=\"keyword\">this</span>.getTemplateText(),</span><br><span class=\"line\">            indexs = <span class=\"keyword\">this</span>.getFieldIndexs(),</span><br><span class=\"line\">            i;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// merge text array &amp; data array</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; text.length; i++ ) &#123;</span><br><span class=\"line\">            temp.push( text[i] );</span><br><span class=\"line\">            temp.push( <span class=\"keyword\">this</span>.data[indexs[i]] );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// clean</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.resetData();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> temp.join(<span class=\"string\">''</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> template( templateStr );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.simpleTemplate = simpleTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)( <span class=\"built_in\">window</span>, <span class=\"built_in\">document</span> )</span><br></pre></td></tr></table></figure>\n<p><a name=\"update-2014-11-06\"></a></p>\n<h2 id=\"2014-11-06更新\"><a href=\"#2014-11-06更新\" class=\"headerlink\" title=\"2014.11.06更新\"></a>2014.11.06更新</h2><p>在IE678中，split 函数如果使用正则匹配作为参数，那么结果中的空字符会被“吞”掉。</p>\n<p>看代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">','</span>.split(<span class=\"regexp\">/,/g</span>).length === <span class=\"number\">2</span>;  <span class=\"comment\">// true in non-IE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">','</span>.split(<span class=\"regexp\">/,/g</span>).length === <span class=\"number\">0</span>;  <span class=\"comment\">// true in IE678</span></span><br></pre></td></tr></table></figure>\n<p>那么很明显如果我使用 split 函数的话，如果模板中出现 <code>{field}{field}</code> 的话，<code>}{</code> 中的空字符就会没了，模板文本和数据域的位置会打乱。</p>\n<p>于是就只能避免使用 split 函数，另辟蹊径。在解决这个问题的同时，我也在加上新的功能，简要来说就是支持列表循环和标志位了。最新的一个版本可以上<a href=\"https://github.com/exoticknight/jswarehouse/tree/master/simpleTemplate\" target=\"_blank\" rel=\"noopener\">github项目</a>查看，算是本文中 js 的进化版。改进的思路我之后再写一篇博文来记录吧。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://i.imgur.com/aWBIWv4.jpg","popularPost_tmp_gaData":{"updated":"Thu Nov 06 2014 22:17:16 GMT+0800 (China Standard Time)","title":"一段简单的js模板渲染代码","path":"a-piece-of-simple-javascript-for-template-render/","eyeCatchImage":"https://i.imgur.com/aWBIWv4.jpg","excerpt":null,"date":"2014-10-25T06:30:29.000Z","pv":0,"totalPV":0,"categories":"技术 > 前端 > 编程语言 > javascript","tags":["javascript","string-template"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2010},{"title":"FictionInjection-始动：Angular 依赖注入分析和源码抽取改造（上）","id":"52","updated":"2016-11-08T07:58:22.000Z","date":"2016-05-12T05:56:53.000Z","_content":"\n几年前有一个项目构思，由于技术水平低，当时并没有思考得很清楚，所以一直没怎么着手开始。近来前端很多优秀的库出现了，也让我对那个项目有了新的想法。在写了几个 JavaScript 的项目后我觉得可以尝试开始了。尝试并成功写出一些代码之后，就开（挖）始（坑）了这个系列的博文。\n\n项目是写一个 JavaScript 框架，干什么的在此并不是重点，但是首先需要一个可扩展的模块系统。最简单就是直接用 jQuery 扩展的写法，直接将函数等的挂载在一个对象下，不过如此一来模块之间依赖非常多的话，管理起来会十分困难。也可以使用 AMD / CMD 的模块化的方法，不过考虑到 ES2015 已经加入了 import / export 的语法，最好就直接使用。然而使用了 ES2015 的语法之后，仍然使用 AMD 等的语法就显得很别扭，但是又想要依赖注入功能怎么办？\n\n解决方法是模（fu）仿（zhi）著名的 AngularJS 中关于依赖注入的源代码。\n\nAngular 有两个版本，1.x 和 2.x，但是 2.x 中，淡化了模块的概念，直接采用 component 和 ES2015 的 import / export 的机制，所以依赖注入已经不太算是亮点了。而且 Angular2 采用 TypeScript 编写，从语法编写上也不适合作为参考。最后选定 1.4.5 版本。\n\n> Angular 项目下还有一个不怎么有人知道的 `di.js` 项目，是从 Angular 中独立出来的依赖注入库，但是从文档来看，也是需要 TypeScript 来使用。\n\n文章较长，给个目录\n\n<a name=\"catalogue\"></a>\n* [实现依赖注入](#di)\n* [从 API 入手](#api)\n* [开始分析](#analyze)\n* [统一包装](#wrapup)\n* [小结](#brief)\n* [注入器的奥秘](#injector)\n* [读源码的意外发现](#unexpected)\n\n<a name=\"di\"></a>\n## 实现依赖注入[↑](#catalogue)\nJavaScript 如何实现依赖注入呢？AngularJS 给出了三个解决方法。\n\n```javascript\n// 直接在参数里面声明\nmodule.service( function ( $http ) {} )\n\n// 使用显示注释\nfunction a () {}\na.$inject = ['$http']\nmodule.service( a )\n\n// 数组内联\nmodule.service( ['$http', function ( http ) {}] )\n```\n\n实际上三个方式都是一样的，只是使用方式不一样，最后都是使用了 JavaScript 的闭包来实现依赖的注入，原理如下：\n\n```javascript\nfunction method ( $http ) {\n    return function ( args ) {\n        // $http.get( args )\n        // .....\n    }\n}\n```\n\n将依赖作为参数传入 `menthod` 得到的返回值就是是一个可以调用 `$http` 服务的函数了。\n\n像这样 `['$http', function ( http ) {}]` 最后一个元素是函数的结构可以称为一个**'可注入结构'**。\n\n<a name=\"api\"></a>\n## 从 API 入手[↑](#catalogue)\nAngular 库的源代码文件非常大，一般基本不会从头开始看。而 API 作为库对外的窗口，从 API 的使用顺藤摸瓜地查找代码是比较好的做法。Angular 模块的使用一般如下：\n\n```javascript\n// declare module\nconst a = angular.module( 'a', [] );\nconst b = angular.module( 'b', [] );\nconst c = angular.module( 'c', ['a'] );\n\n// use the module\na\n.value( 'a', 123 )\n.factory( 'a', function() { return 123; } )\n.service( 'serviceName', ... )\n.directive( 'directiveName', ... )\n.filter( 'filterName', ... );\n```\n\n先创建一个模块，用数组说明它的依赖模块，然后模块就可以调用 `value`、`service`、`directive` 等 API，API 的第一个参数是名字，第二个参数则是值或者函数或者数组，了解 AngularJS 的读者应该知道其实是值或者返回值的构造函数或者包含依赖和构造函数的数组。\n\n打开 Angular.js ，查找出 `module(name, requires, configFn)` 函数的定义，位于一个更大的函数 `setupModuleLoader` 内。`setupModuleLoader` 为 `module` 函数编写了一些检测函数和变量。最重要的是 `modules` 变量，用来保存所有的模块信息。\n\n下面来分析 `module` 函数。\n\n```javascript\n      if (requires && modules.hasOwnProperty(name)) {\n        modules[name] = null;\n      }\n```\n\n可以看出如果模块重复创建是会覆盖之前的。\n\n```javascript\n        /** @type {angular.Module} */\n        var moduleInstance = {\n```\n\n`moduleInstance` 就是将会返回出去的模块对象，可以看到里面有 `name` 和 `requires` 等属性和 `provider` 和 `factory` 等函数。\n\n里面所有的方法，都是通过调用 `invokeLater` 和 `invokeLaterAndSetModuleName` 生成的新函数。新函数的上下文中带有 `provider` 和 `method` 信息。比如 `service` 函数：provider='$provide'，method='service'，暂时还看不出来信息有什么用，可以先跳过。新函数在调用的时候会将信息连同调用的参数一起 push 进模块的 `_invokeQueue` 属性中。\n\n绕了一大圈，就是知道了：在调用 `value`、`service`、`provider` 这些基本的模块功能函数的时候，其实只是将构造函数和相关信息先保存了下来，根本就没有做初始化模块等工作。\n\n但是作为一个库必定需要跟 `window` 或者 `document` 产生点关系不然无法操作 DOM，根据编写过不少库的经验来看，通常将这样的代码放在最后。于是拉到最后一看，gotcha。\n\n```javascript\n  jqLite(document).ready(function() {\n    angularInit(document, bootstrap);\n  });\n```\n\n明显意思就是在文档准备完毕的时候调用 `angularInit`，转到 `angularInit` 的定义发现调用了 `bootstrap(appElement, module ? [module] : [], config);`，再转到 `bootstrap` 的定义，在函数内部又会调用 `doBootstrap` 函数，一系列的检查之后，调用了 `createInjector` 函数就结束了，转到 `createInjector` 的定义一看，有 `$provide` `factory` 等字样，说明找对地方了。\n\n<a name=\"analyze\"></a>\n## 开始分析[↑](#catalogue)\n\n重点来分析 `createInjector` 函数。\n\n函数体大概可以分成四段。\n\n第一段是定义了 `providerCache`、`instanceCache`、`providerInjector` 和 `instanceInjector`。最后返回 `instanceInjector` 对象。`providerInjector` 和 `instanceInjector` 各为将 `providerCache` 和 `instanceCache` 传入 `createInternalInjector` 函数的返回值。\n\n第二段是 provider 函数的定义，用以供初始化时候的调用。\n\n第三段是 `loadModules` 函数的定义，作用是，显然，初始化模块。\n\n第四段是 `createInternalInjector` 函数的定义，函数返回的是真正的注入器。\n\n从第一段的代码来看，真正的工作是在 `loadModules` 函数中，因为 `createInternalInjector` 函数只返回一个对象，没有 'side effect' 的代码。\n\n`loadModules` 函数上来就是一个对模块数组的遍历，然后在遍历内取模块的属性 `_invokeQueue` 来调用 `runInvokeQueue` 函数对已经缓存下来的对象或方法的构造函数进行处理。\n\n值得注意的是在做调用 `runInvokeQueue` 前，有一个递归的调用 `loadModules(moduleFn.requires)`，表明了在初始化本模块之前，会先初始化依赖的模块。\n\n到目前为止，可以判明模块初始化的分两个阶段，第一个是：声明模块及其依赖模块 -> 缓存模块变量的构造函数；第二个是：选取一个根模块（对应 AngularJS 中的 'app' 模块） -> 找出其依赖的模块，对于每一个依赖，递归地先初始化其依赖的模块，再初始化自身 -> 处理模块中缓存的变量的构造函数。\n\n如此采取先缓存所有模块再通过依赖树来初始化的做法虽然看起来繁琐，但是得到一个重要的特性就是声明模块的时候不用关注依赖的顺序，只需要表明依赖就可以了。如果声明的时候就立刻初始化，则必须小心检查所依赖的模块初始化是否已经完成了，然而如此一来就退化成了普通的模块化方法了。**延迟初始化是实现依赖注入的重要过程**。\n\n模块依赖已经明了，现在来看看作为处理函数的 `runInvokeQueue` 函数。\n\n```javascript\n      function runInvokeQueue(queue) {\n        var i, ii;\n        for (i = 0, ii = queue.length; i < ii; i++) {\n          var invokeArgs = queue[i],\n              provider = providerInjector.get(invokeArgs[0]);\n\n          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);\n        }\n      }\n```\n\n重要的代码只有两行，`provider = providerInjector.get(invokeArgs[0]);` 和 `provider[invokeArgs[1]].apply(provider, invokeArgs[2]);`。\n\n往上看一下，调用 `providerInjector.get` 相当于是调用 `getService`。\n\n```javascript\n    function getService(serviceName, caller) {\n      if (cache.hasOwnProperty(serviceName)) {\n        if (cache[serviceName] === INSTANTIATING) {\n          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',\n                    serviceName + ' <- ' + path.join(' <- '));\n        }\n        return cache[serviceName];\n      } else {\n        try {\n          path.unshift(serviceName);\n          cache[serviceName] = INSTANTIATING;\n          return cache[serviceName] = factory(serviceName, caller);\n        } catch (err) {\n          if (cache[serviceName] === INSTANTIATING) {\n            delete cache[serviceName];\n          }\n          throw err;\n        } finally {\n          path.shift();\n        }\n      }\n    }\n```\n\n代码虽多，但基本就是干一件事，返回 `cache` 中的对象，如果没有，就用 `factory` 创建一个再返回。而调用的对象 `providerInjector` 的定义来看，`cache` 就等于：\n\n```javascript\n      providerCache = {\n        $provide: {\n            provider: supportObject(provider),\n            factory: supportObject(factory),\n            service: supportObject(service),\n            value: supportObject(value),\n            constant: supportObject(constant),\n            decorator: decorator\n          }\n      },\n```\n\nOK，现在可以知道了那些被延迟初始化的模块元素会在这里被处理了。\n\n从上文可以知道，`invokeArgs[0]` 的值为 `$provider`，`invokeArgs[1]` 的值为 service / factory 等，`invokeArgs[2]` 则为参数数组。\n\n看看以下的示例：\n\n```javascript\n// 如此使用\nm.service( 'b', ['a', function ( a ) { this.a = a }] );\n\n// 初始化的时候实际上调用\n$provider.service( 'b', ['a', function ( a ) { this.a = a }] );\n```\n\n<a name=\"wrapup\"></a>\n## 统一包装[↑](#catalogue)\n\n接下来就是分析模块元素（对外表现为 API）的代码了。\n\n函数有点多，但是还是能看得出来。`supportObject` 不用管，只是负责转换一下参数，基本的函数是 `provider`，`factory` 会调用它，然后 `value` 和 `service` 会调用 `factory`。\n\n```javascript\n  function provider(name, provider_) {\n    assertNotHasOwnProperty(name, 'service');\n    if (isFunction(provider_) || isArray(provider_)) {\n      provider_ = providerInjector.instantiate(provider_);\n    }\n    if (!provider_.$get) {\n      throw $injectorMinErr('pget', \"Provider '{0}' must define $get factory method.\", name);\n    }\n    return providerCache[name + providerSuffix] = provider_;\n  }\n```\n\n第一个判断和第二个判断在 `factory` 调用的时候是无效的，因为 `factory` 调用 `provider` 的时候第二个参数是 Object，而且带有 `$get` 属性。实际上在本阶段做的是，就是将调用 API 传入的第二个参数（第一个参数是名字）再包装一层对象，再**存储在 `providerCache` 中**，对象统一拥有 `$get` 属性，或者说，接口。\n\n其中，`$get` 属性是一个可供调用的函数，功能是即使模块元素混杂存储，也能被统一的接口成功调用。\n\n对于 `value`，调用 API 的时候传入的是值，因此需要包装成返回这个值的函数才赋值给 `$get`。\n\n对于 `constant`，值是不变的，所以可以看到就直接存储了。\n\n对于 `decorator`，同样会定义 `$get` 属性。\n\n对于 `service`，设计上应该生成一个单例并存储下来。不过在这里，仍然是继续包装起来。\n\n源代码：\n\n```javascript\n  function enforceReturnValue(name, factory) {\n    return function enforcedReturnValue() {\n      var result = instanceInjector.invoke(factory, this);\n      if (isUndefined(result)) {\n        throw $injectorMinErr('undef', \"Provider '{0}' must return a value from $get factory method.\", name);\n      }\n      return result;\n    };\n  }\n\n  function factory(name, factoryFn, enforce) {\n    return provider(name, {\n      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn\n    });\n  }\n\n  function service(name, constructor) {\n    return factory(name, ['$injector', function($injector) {\n      return $injector.instantiate(constructor);\n    }]);\n  }\n```\n\n实际干了如下的事情：\n\n```javascript\n  (function (name) {\n    return provider(name, {  // 跟其他 API 一样调用 provider 函数\n      $get: function () {\n        return instanceInjector.invoke(\n            ['$injector', function($injector) {\n                return $injector.instantiate(constructor);  // 注意 constructor 是用户自定义的‘可注入结构’\n            }]  // 这又是一个‘可注入结构’，注入的是 '$injector'，实际上就等于 instanceInjector\n            , this);\n      }\n    });\n  })( 'serviceName' )\n```\n\n最后依然将包装好的函数存入 `$provider`。\n\n只是为什么还是存储在 `$provider`，而不是直接调用函数进行初始化？比如 `service`，为什么还要再包装上一层‘可注入结构’？\n\n<a name=\"brief\"></a>\n## 小结[↑](#catalogue)\n\n前文提到，使用延迟初始化实现了模块的依赖注入，使依赖的模块不需要提前定义。\n\n实际上模块内的元素（factory / service 等）也是可以使用依赖注入的。使用过 AngularJS 的肯定知道定义某一个 controller 的时候可以注入某个 service，然而 controller 和 service 的定义顺序应该不能对代码运行造成影响。\n\n因此，在此时，模块元素的“构造函数”（注意是用户自定义的那个函数而并非供\n new 调用的那个函数）还并不具备运行的条件，因为还是需要等依赖的元素初始化。\n\n于是某种意义上，模块元素就需要**第二重注入**。把‘可注入结构’缓存在 `$provider` 中实际上就是对应了前文叙述的‘把模块先全部缓存’，包装上一个函数再统一放在 `$get` 属性下明显是方便供下一阶段的调用。\n\n万事俱备，只欠注入了。\n\n> 分析到现阶段，大家应该对平常使用频繁的 `service`、`factory` 等函数有了更深的认识了。\n\n<a name=\"injector\"></a>\n## 注入器的奥秘[↑](#catalogue)\n现在把精力放在 `createInternalInjector` 函数。\n\n此函数在[开始分析](#analyze)一节中已经提到了，作用只是返回一个对象。这个对象就是真正的注入器。\n\n此函数被调用了两次，分别是得到 `providerInjector` 和 `instanceInjector`。\n\n注入器中重要的函数有三个，分别是 `getService`、`invoke` 和 `instantiate`。\n\n在[开始分析](#analyze)中已经大致介绍了，`getService` 函数干一件事，返回 `cache` 中的对象，如果没有，就用 `factory` 创建一个再返回。\n\n对于 `providerInjector`，`factory` 函数是：\n\n```javascript\nfunction(serviceName, caller) {\n  if (angular.isString(caller)) {\n    path.push(caller);\n  }\n  throw $injectorMinErr('unpr', \"Unknown provider: {0}\", path.join(' <- '));\n}\n```\n\n不难理解，因为在调用 provider 的时候，`providerCache` 中的函数应该已经在上一个初始化模块阶段中被定义好，如果没找到，那么肯定是调用了未定义的 provider。\n\n对于 `instanceInjector`，`factory` 函数是：\n\n```javascript\nfunction(serviceName, caller) {\n  var provider = providerInjector.get(serviceName + providerSuffix, caller);\n  return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);\n}\n```\n\n`instanceCache` 本身就是空的，因此在找不到的时候，就去 `providerInjector` 里找 provider，然后得到其调用的结果，就是真正需要的实例（instance）了。`$get` 在这里就凸显出统一调用的用处了。\n\n`invoke` 函数则是处理**'可注入结构'**和调用函数。从源码中也可以看到组装参数和调用函数，其中也会调用 `getService` 去得到实参的值来实现注入。从这里的 `getService` 出发，又有可能调用 `factory` 继而继续调用 `invoke` 来得到所依赖的实例，直到没有任何依赖需要实例化，从而完美的实现了自洽。\n\n`instantiate` 函数是用来处理 'service' 的，是用来模拟 `new` 的，从代码来看也是如此：复制一个函数的 prototype，绑定为函数的 `this`，然后调用函数。因此调用 `service` API 的时候，可以完全使用构造函数的写法，同时也能得到注入特性。\n\n<a name=\"unexpected\"></a>\n## 读源码的意外发现[↑](#catalogue)\n读源码一般都会有一定的收获，或是技巧上的，或是思想上的。\n\n当读完了 Angular 的依赖注入的代码后，才发现 Angular 虽然表明支持模块化，但是实际上所谓的模块化只是徒有其名，模块的定义只是方便框架自己做延迟初始化的工作，没有模块之实。模块只是依赖树上的节点，最终生成出来的命名空间跟模块没有一丁点的关系，所有模块里的东西，不论是 'value'、'service' 和 'provider' 等，都是平铺在 `instanceCache` 里面的。这样的做法明显的一个结果就是命名冲突，两个不同模块里面的同名对象，后实例化的会覆盖掉先实例化的。这一点非常的不好，因为完全不符合模块化的预期结果。\n\n在下一篇编（fu）写（zhi）注入功能的时候，我会修改这部分使其能满足模块化的实际预期。","source":"_posts/FictionInjection-始动：Angular-依赖注入分析和源码抽取改造（上）.md","raw":"---\ntitle: FictionInjection-始动：Angular 依赖注入分析和源码抽取改造（上）\ncategories:\n  - [技术, 前端]\n  - [编程语言, javascript]\ntags: [javascript, FictionInjection]\npermalink: fictioninjection-series-analyze-angular-dependence-injection-and-extract-it-part-1\nid: 52\nupdated: '2016-11-08 15:58:22'\ndate: 2016-05-12 13:56:53\n---\n\n几年前有一个项目构思，由于技术水平低，当时并没有思考得很清楚，所以一直没怎么着手开始。近来前端很多优秀的库出现了，也让我对那个项目有了新的想法。在写了几个 JavaScript 的项目后我觉得可以尝试开始了。尝试并成功写出一些代码之后，就开（挖）始（坑）了这个系列的博文。\n\n项目是写一个 JavaScript 框架，干什么的在此并不是重点，但是首先需要一个可扩展的模块系统。最简单就是直接用 jQuery 扩展的写法，直接将函数等的挂载在一个对象下，不过如此一来模块之间依赖非常多的话，管理起来会十分困难。也可以使用 AMD / CMD 的模块化的方法，不过考虑到 ES2015 已经加入了 import / export 的语法，最好就直接使用。然而使用了 ES2015 的语法之后，仍然使用 AMD 等的语法就显得很别扭，但是又想要依赖注入功能怎么办？\n\n解决方法是模（fu）仿（zhi）著名的 AngularJS 中关于依赖注入的源代码。\n\nAngular 有两个版本，1.x 和 2.x，但是 2.x 中，淡化了模块的概念，直接采用 component 和 ES2015 的 import / export 的机制，所以依赖注入已经不太算是亮点了。而且 Angular2 采用 TypeScript 编写，从语法编写上也不适合作为参考。最后选定 1.4.5 版本。\n\n> Angular 项目下还有一个不怎么有人知道的 `di.js` 项目，是从 Angular 中独立出来的依赖注入库，但是从文档来看，也是需要 TypeScript 来使用。\n\n文章较长，给个目录\n\n<a name=\"catalogue\"></a>\n* [实现依赖注入](#di)\n* [从 API 入手](#api)\n* [开始分析](#analyze)\n* [统一包装](#wrapup)\n* [小结](#brief)\n* [注入器的奥秘](#injector)\n* [读源码的意外发现](#unexpected)\n\n<a name=\"di\"></a>\n## 实现依赖注入[↑](#catalogue)\nJavaScript 如何实现依赖注入呢？AngularJS 给出了三个解决方法。\n\n```javascript\n// 直接在参数里面声明\nmodule.service( function ( $http ) {} )\n\n// 使用显示注释\nfunction a () {}\na.$inject = ['$http']\nmodule.service( a )\n\n// 数组内联\nmodule.service( ['$http', function ( http ) {}] )\n```\n\n实际上三个方式都是一样的，只是使用方式不一样，最后都是使用了 JavaScript 的闭包来实现依赖的注入，原理如下：\n\n```javascript\nfunction method ( $http ) {\n    return function ( args ) {\n        // $http.get( args )\n        // .....\n    }\n}\n```\n\n将依赖作为参数传入 `menthod` 得到的返回值就是是一个可以调用 `$http` 服务的函数了。\n\n像这样 `['$http', function ( http ) {}]` 最后一个元素是函数的结构可以称为一个**'可注入结构'**。\n\n<a name=\"api\"></a>\n## 从 API 入手[↑](#catalogue)\nAngular 库的源代码文件非常大，一般基本不会从头开始看。而 API 作为库对外的窗口，从 API 的使用顺藤摸瓜地查找代码是比较好的做法。Angular 模块的使用一般如下：\n\n```javascript\n// declare module\nconst a = angular.module( 'a', [] );\nconst b = angular.module( 'b', [] );\nconst c = angular.module( 'c', ['a'] );\n\n// use the module\na\n.value( 'a', 123 )\n.factory( 'a', function() { return 123; } )\n.service( 'serviceName', ... )\n.directive( 'directiveName', ... )\n.filter( 'filterName', ... );\n```\n\n先创建一个模块，用数组说明它的依赖模块，然后模块就可以调用 `value`、`service`、`directive` 等 API，API 的第一个参数是名字，第二个参数则是值或者函数或者数组，了解 AngularJS 的读者应该知道其实是值或者返回值的构造函数或者包含依赖和构造函数的数组。\n\n打开 Angular.js ，查找出 `module(name, requires, configFn)` 函数的定义，位于一个更大的函数 `setupModuleLoader` 内。`setupModuleLoader` 为 `module` 函数编写了一些检测函数和变量。最重要的是 `modules` 变量，用来保存所有的模块信息。\n\n下面来分析 `module` 函数。\n\n```javascript\n      if (requires && modules.hasOwnProperty(name)) {\n        modules[name] = null;\n      }\n```\n\n可以看出如果模块重复创建是会覆盖之前的。\n\n```javascript\n        /** @type {angular.Module} */\n        var moduleInstance = {\n```\n\n`moduleInstance` 就是将会返回出去的模块对象，可以看到里面有 `name` 和 `requires` 等属性和 `provider` 和 `factory` 等函数。\n\n里面所有的方法，都是通过调用 `invokeLater` 和 `invokeLaterAndSetModuleName` 生成的新函数。新函数的上下文中带有 `provider` 和 `method` 信息。比如 `service` 函数：provider='$provide'，method='service'，暂时还看不出来信息有什么用，可以先跳过。新函数在调用的时候会将信息连同调用的参数一起 push 进模块的 `_invokeQueue` 属性中。\n\n绕了一大圈，就是知道了：在调用 `value`、`service`、`provider` 这些基本的模块功能函数的时候，其实只是将构造函数和相关信息先保存了下来，根本就没有做初始化模块等工作。\n\n但是作为一个库必定需要跟 `window` 或者 `document` 产生点关系不然无法操作 DOM，根据编写过不少库的经验来看，通常将这样的代码放在最后。于是拉到最后一看，gotcha。\n\n```javascript\n  jqLite(document).ready(function() {\n    angularInit(document, bootstrap);\n  });\n```\n\n明显意思就是在文档准备完毕的时候调用 `angularInit`，转到 `angularInit` 的定义发现调用了 `bootstrap(appElement, module ? [module] : [], config);`，再转到 `bootstrap` 的定义，在函数内部又会调用 `doBootstrap` 函数，一系列的检查之后，调用了 `createInjector` 函数就结束了，转到 `createInjector` 的定义一看，有 `$provide` `factory` 等字样，说明找对地方了。\n\n<a name=\"analyze\"></a>\n## 开始分析[↑](#catalogue)\n\n重点来分析 `createInjector` 函数。\n\n函数体大概可以分成四段。\n\n第一段是定义了 `providerCache`、`instanceCache`、`providerInjector` 和 `instanceInjector`。最后返回 `instanceInjector` 对象。`providerInjector` 和 `instanceInjector` 各为将 `providerCache` 和 `instanceCache` 传入 `createInternalInjector` 函数的返回值。\n\n第二段是 provider 函数的定义，用以供初始化时候的调用。\n\n第三段是 `loadModules` 函数的定义，作用是，显然，初始化模块。\n\n第四段是 `createInternalInjector` 函数的定义，函数返回的是真正的注入器。\n\n从第一段的代码来看，真正的工作是在 `loadModules` 函数中，因为 `createInternalInjector` 函数只返回一个对象，没有 'side effect' 的代码。\n\n`loadModules` 函数上来就是一个对模块数组的遍历，然后在遍历内取模块的属性 `_invokeQueue` 来调用 `runInvokeQueue` 函数对已经缓存下来的对象或方法的构造函数进行处理。\n\n值得注意的是在做调用 `runInvokeQueue` 前，有一个递归的调用 `loadModules(moduleFn.requires)`，表明了在初始化本模块之前，会先初始化依赖的模块。\n\n到目前为止，可以判明模块初始化的分两个阶段，第一个是：声明模块及其依赖模块 -> 缓存模块变量的构造函数；第二个是：选取一个根模块（对应 AngularJS 中的 'app' 模块） -> 找出其依赖的模块，对于每一个依赖，递归地先初始化其依赖的模块，再初始化自身 -> 处理模块中缓存的变量的构造函数。\n\n如此采取先缓存所有模块再通过依赖树来初始化的做法虽然看起来繁琐，但是得到一个重要的特性就是声明模块的时候不用关注依赖的顺序，只需要表明依赖就可以了。如果声明的时候就立刻初始化，则必须小心检查所依赖的模块初始化是否已经完成了，然而如此一来就退化成了普通的模块化方法了。**延迟初始化是实现依赖注入的重要过程**。\n\n模块依赖已经明了，现在来看看作为处理函数的 `runInvokeQueue` 函数。\n\n```javascript\n      function runInvokeQueue(queue) {\n        var i, ii;\n        for (i = 0, ii = queue.length; i < ii; i++) {\n          var invokeArgs = queue[i],\n              provider = providerInjector.get(invokeArgs[0]);\n\n          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);\n        }\n      }\n```\n\n重要的代码只有两行，`provider = providerInjector.get(invokeArgs[0]);` 和 `provider[invokeArgs[1]].apply(provider, invokeArgs[2]);`。\n\n往上看一下，调用 `providerInjector.get` 相当于是调用 `getService`。\n\n```javascript\n    function getService(serviceName, caller) {\n      if (cache.hasOwnProperty(serviceName)) {\n        if (cache[serviceName] === INSTANTIATING) {\n          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',\n                    serviceName + ' <- ' + path.join(' <- '));\n        }\n        return cache[serviceName];\n      } else {\n        try {\n          path.unshift(serviceName);\n          cache[serviceName] = INSTANTIATING;\n          return cache[serviceName] = factory(serviceName, caller);\n        } catch (err) {\n          if (cache[serviceName] === INSTANTIATING) {\n            delete cache[serviceName];\n          }\n          throw err;\n        } finally {\n          path.shift();\n        }\n      }\n    }\n```\n\n代码虽多，但基本就是干一件事，返回 `cache` 中的对象，如果没有，就用 `factory` 创建一个再返回。而调用的对象 `providerInjector` 的定义来看，`cache` 就等于：\n\n```javascript\n      providerCache = {\n        $provide: {\n            provider: supportObject(provider),\n            factory: supportObject(factory),\n            service: supportObject(service),\n            value: supportObject(value),\n            constant: supportObject(constant),\n            decorator: decorator\n          }\n      },\n```\n\nOK，现在可以知道了那些被延迟初始化的模块元素会在这里被处理了。\n\n从上文可以知道，`invokeArgs[0]` 的值为 `$provider`，`invokeArgs[1]` 的值为 service / factory 等，`invokeArgs[2]` 则为参数数组。\n\n看看以下的示例：\n\n```javascript\n// 如此使用\nm.service( 'b', ['a', function ( a ) { this.a = a }] );\n\n// 初始化的时候实际上调用\n$provider.service( 'b', ['a', function ( a ) { this.a = a }] );\n```\n\n<a name=\"wrapup\"></a>\n## 统一包装[↑](#catalogue)\n\n接下来就是分析模块元素（对外表现为 API）的代码了。\n\n函数有点多，但是还是能看得出来。`supportObject` 不用管，只是负责转换一下参数，基本的函数是 `provider`，`factory` 会调用它，然后 `value` 和 `service` 会调用 `factory`。\n\n```javascript\n  function provider(name, provider_) {\n    assertNotHasOwnProperty(name, 'service');\n    if (isFunction(provider_) || isArray(provider_)) {\n      provider_ = providerInjector.instantiate(provider_);\n    }\n    if (!provider_.$get) {\n      throw $injectorMinErr('pget', \"Provider '{0}' must define $get factory method.\", name);\n    }\n    return providerCache[name + providerSuffix] = provider_;\n  }\n```\n\n第一个判断和第二个判断在 `factory` 调用的时候是无效的，因为 `factory` 调用 `provider` 的时候第二个参数是 Object，而且带有 `$get` 属性。实际上在本阶段做的是，就是将调用 API 传入的第二个参数（第一个参数是名字）再包装一层对象，再**存储在 `providerCache` 中**，对象统一拥有 `$get` 属性，或者说，接口。\n\n其中，`$get` 属性是一个可供调用的函数，功能是即使模块元素混杂存储，也能被统一的接口成功调用。\n\n对于 `value`，调用 API 的时候传入的是值，因此需要包装成返回这个值的函数才赋值给 `$get`。\n\n对于 `constant`，值是不变的，所以可以看到就直接存储了。\n\n对于 `decorator`，同样会定义 `$get` 属性。\n\n对于 `service`，设计上应该生成一个单例并存储下来。不过在这里，仍然是继续包装起来。\n\n源代码：\n\n```javascript\n  function enforceReturnValue(name, factory) {\n    return function enforcedReturnValue() {\n      var result = instanceInjector.invoke(factory, this);\n      if (isUndefined(result)) {\n        throw $injectorMinErr('undef', \"Provider '{0}' must return a value from $get factory method.\", name);\n      }\n      return result;\n    };\n  }\n\n  function factory(name, factoryFn, enforce) {\n    return provider(name, {\n      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn\n    });\n  }\n\n  function service(name, constructor) {\n    return factory(name, ['$injector', function($injector) {\n      return $injector.instantiate(constructor);\n    }]);\n  }\n```\n\n实际干了如下的事情：\n\n```javascript\n  (function (name) {\n    return provider(name, {  // 跟其他 API 一样调用 provider 函数\n      $get: function () {\n        return instanceInjector.invoke(\n            ['$injector', function($injector) {\n                return $injector.instantiate(constructor);  // 注意 constructor 是用户自定义的‘可注入结构’\n            }]  // 这又是一个‘可注入结构’，注入的是 '$injector'，实际上就等于 instanceInjector\n            , this);\n      }\n    });\n  })( 'serviceName' )\n```\n\n最后依然将包装好的函数存入 `$provider`。\n\n只是为什么还是存储在 `$provider`，而不是直接调用函数进行初始化？比如 `service`，为什么还要再包装上一层‘可注入结构’？\n\n<a name=\"brief\"></a>\n## 小结[↑](#catalogue)\n\n前文提到，使用延迟初始化实现了模块的依赖注入，使依赖的模块不需要提前定义。\n\n实际上模块内的元素（factory / service 等）也是可以使用依赖注入的。使用过 AngularJS 的肯定知道定义某一个 controller 的时候可以注入某个 service，然而 controller 和 service 的定义顺序应该不能对代码运行造成影响。\n\n因此，在此时，模块元素的“构造函数”（注意是用户自定义的那个函数而并非供\n new 调用的那个函数）还并不具备运行的条件，因为还是需要等依赖的元素初始化。\n\n于是某种意义上，模块元素就需要**第二重注入**。把‘可注入结构’缓存在 `$provider` 中实际上就是对应了前文叙述的‘把模块先全部缓存’，包装上一个函数再统一放在 `$get` 属性下明显是方便供下一阶段的调用。\n\n万事俱备，只欠注入了。\n\n> 分析到现阶段，大家应该对平常使用频繁的 `service`、`factory` 等函数有了更深的认识了。\n\n<a name=\"injector\"></a>\n## 注入器的奥秘[↑](#catalogue)\n现在把精力放在 `createInternalInjector` 函数。\n\n此函数在[开始分析](#analyze)一节中已经提到了，作用只是返回一个对象。这个对象就是真正的注入器。\n\n此函数被调用了两次，分别是得到 `providerInjector` 和 `instanceInjector`。\n\n注入器中重要的函数有三个，分别是 `getService`、`invoke` 和 `instantiate`。\n\n在[开始分析](#analyze)中已经大致介绍了，`getService` 函数干一件事，返回 `cache` 中的对象，如果没有，就用 `factory` 创建一个再返回。\n\n对于 `providerInjector`，`factory` 函数是：\n\n```javascript\nfunction(serviceName, caller) {\n  if (angular.isString(caller)) {\n    path.push(caller);\n  }\n  throw $injectorMinErr('unpr', \"Unknown provider: {0}\", path.join(' <- '));\n}\n```\n\n不难理解，因为在调用 provider 的时候，`providerCache` 中的函数应该已经在上一个初始化模块阶段中被定义好，如果没找到，那么肯定是调用了未定义的 provider。\n\n对于 `instanceInjector`，`factory` 函数是：\n\n```javascript\nfunction(serviceName, caller) {\n  var provider = providerInjector.get(serviceName + providerSuffix, caller);\n  return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);\n}\n```\n\n`instanceCache` 本身就是空的，因此在找不到的时候，就去 `providerInjector` 里找 provider，然后得到其调用的结果，就是真正需要的实例（instance）了。`$get` 在这里就凸显出统一调用的用处了。\n\n`invoke` 函数则是处理**'可注入结构'**和调用函数。从源码中也可以看到组装参数和调用函数，其中也会调用 `getService` 去得到实参的值来实现注入。从这里的 `getService` 出发，又有可能调用 `factory` 继而继续调用 `invoke` 来得到所依赖的实例，直到没有任何依赖需要实例化，从而完美的实现了自洽。\n\n`instantiate` 函数是用来处理 'service' 的，是用来模拟 `new` 的，从代码来看也是如此：复制一个函数的 prototype，绑定为函数的 `this`，然后调用函数。因此调用 `service` API 的时候，可以完全使用构造函数的写法，同时也能得到注入特性。\n\n<a name=\"unexpected\"></a>\n## 读源码的意外发现[↑](#catalogue)\n读源码一般都会有一定的收获，或是技巧上的，或是思想上的。\n\n当读完了 Angular 的依赖注入的代码后，才发现 Angular 虽然表明支持模块化，但是实际上所谓的模块化只是徒有其名，模块的定义只是方便框架自己做延迟初始化的工作，没有模块之实。模块只是依赖树上的节点，最终生成出来的命名空间跟模块没有一丁点的关系，所有模块里的东西，不论是 'value'、'service' 和 'provider' 等，都是平铺在 `instanceCache` 里面的。这样的做法明显的一个结果就是命名冲突，两个不同模块里面的同名对象，后实例化的会覆盖掉先实例化的。这一点非常的不好，因为完全不符合模块化的预期结果。\n\n在下一篇编（fu）写（zhi）注入功能的时候，我会修改这部分使其能满足模块化的实际预期。","slug":"fictioninjection-series-analyze-angular-dependence-injection-and-extract-it-part-1","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyutk007nn7t4ikztnfs1","content":"<p>几年前有一个项目构思，由于技术水平低，当时并没有思考得很清楚，所以一直没怎么着手开始。近来前端很多优秀的库出现了，也让我对那个项目有了新的想法。在写了几个 JavaScript 的项目后我觉得可以尝试开始了。尝试并成功写出一些代码之后，就开（挖）始（坑）了这个系列的博文。</p>\n<p>项目是写一个 JavaScript 框架，干什么的在此并不是重点，但是首先需要一个可扩展的模块系统。最简单就是直接用 jQuery 扩展的写法，直接将函数等的挂载在一个对象下，不过如此一来模块之间依赖非常多的话，管理起来会十分困难。也可以使用 AMD / CMD 的模块化的方法，不过考虑到 ES2015 已经加入了 import / export 的语法，最好就直接使用。然而使用了 ES2015 的语法之后，仍然使用 AMD 等的语法就显得很别扭，但是又想要依赖注入功能怎么办？</p>\n<p>解决方法是模（fu）仿（zhi）著名的 AngularJS 中关于依赖注入的源代码。</p>\n<p>Angular 有两个版本，1.x 和 2.x，但是 2.x 中，淡化了模块的概念，直接采用 component 和 ES2015 的 import / export 的机制，所以依赖注入已经不太算是亮点了。而且 Angular2 采用 TypeScript 编写，从语法编写上也不适合作为参考。最后选定 1.4.5 版本。</p>\n<blockquote>\n<p>Angular 项目下还有一个不怎么有人知道的 <code>di.js</code> 项目，是从 Angular 中独立出来的依赖注入库，但是从文档来看，也是需要 TypeScript 来使用。</p>\n</blockquote>\n<p>文章较长，给个目录</p>\n<p><a name=\"catalogue\"></a></p>\n<ul>\n<li><a href=\"#di\">实现依赖注入</a></li>\n<li><a href=\"#api\">从 API 入手</a></li>\n<li><a href=\"#analyze\">开始分析</a></li>\n<li><a href=\"#wrapup\">统一包装</a></li>\n<li><a href=\"#brief\">小结</a></li>\n<li><a href=\"#injector\">注入器的奥秘</a></li>\n<li><a href=\"#unexpected\">读源码的意外发现</a></li>\n</ul>\n<p><a name=\"di\"></a></p>\n<h2 id=\"实现依赖注入↑\"><a href=\"#实现依赖注入↑\" class=\"headerlink\" title=\"实现依赖注入↑\"></a>实现依赖注入<a href=\"#catalogue\">↑</a></h2><p>JavaScript 如何实现依赖注入呢？AngularJS 给出了三个解决方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接在参数里面声明</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.service( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> $http </span>) </span>&#123;&#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用显示注释</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">a.$inject = [<span class=\"string\">'$http'</span>]</span><br><span class=\"line\"><span class=\"built_in\">module</span>.service( a )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组内联</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.service( [<span class=\"string\">'$http'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> http </span>) </span>&#123;&#125;] )</span><br></pre></td></tr></table></figure>\n<p>实际上三个方式都是一样的，只是使用方式不一样，最后都是使用了 JavaScript 的闭包来实现依赖的注入，原理如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">method</span> (<span class=\"params\"> $http </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> args </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// $http.get( args )</span></span><br><span class=\"line\">        <span class=\"comment\">// .....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将依赖作为参数传入 <code>menthod</code> 得到的返回值就是是一个可以调用 <code>$http</code> 服务的函数了。</p>\n<p>像这样 <code>[&#39;$http&#39;, function ( http ) {}]</code> 最后一个元素是函数的结构可以称为一个<strong>‘可注入结构’</strong>。</p>\n<p><a name=\"api\"></a></p>\n<h2 id=\"从-API-入手↑\"><a href=\"#从-API-入手↑\" class=\"headerlink\" title=\"从 API 入手↑\"></a>从 API 入手<a href=\"#catalogue\">↑</a></h2><p>Angular 库的源代码文件非常大，一般基本不会从头开始看。而 API 作为库对外的窗口，从 API 的使用顺藤摸瓜地查找代码是比较好的做法。Angular 模块的使用一般如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// declare module</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = angular.module( <span class=\"string\">'a'</span>, [] );</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = angular.module( <span class=\"string\">'b'</span>, [] );</span><br><span class=\"line\"><span class=\"keyword\">const</span> c = angular.module( <span class=\"string\">'c'</span>, [<span class=\"string\">'a'</span>] );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// use the module</span></span><br><span class=\"line\">a</span><br><span class=\"line\">.value( <span class=\"string\">'a'</span>, <span class=\"number\">123</span> )</span><br><span class=\"line\">.factory( <span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">123</span>; &#125; )</span><br><span class=\"line\">.service( <span class=\"string\">'serviceName'</span>, ... )</span><br><span class=\"line\">.directive( <span class=\"string\">'directiveName'</span>, ... )</span><br><span class=\"line\">.filter( <span class=\"string\">'filterName'</span>, ... );</span><br></pre></td></tr></table></figure>\n<p>先创建一个模块，用数组说明它的依赖模块，然后模块就可以调用 <code>value</code>、<code>service</code>、<code>directive</code> 等 API，API 的第一个参数是名字，第二个参数则是值或者函数或者数组，了解 AngularJS 的读者应该知道其实是值或者返回值的构造函数或者包含依赖和构造函数的数组。</p>\n<p>打开 Angular.js ，查找出 <code>module(name, requires, configFn)</code> 函数的定义，位于一个更大的函数 <code>setupModuleLoader</code> 内。<code>setupModuleLoader</code> 为 <code>module</code> 函数编写了一些检测函数和变量。最重要的是 <code>modules</code> 变量，用来保存所有的模块信息。</p>\n<p>下面来分析 <code>module</code> 函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (requires &amp;&amp; modules.hasOwnProperty(name)) &#123;</span><br><span class=\"line\">  modules[name] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出如果模块重复创建是会覆盖之前的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** @type &#123;angular.Module&#125; */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moduleInstance = &#123;</span><br></pre></td></tr></table></figure>\n<p><code>moduleInstance</code> 就是将会返回出去的模块对象，可以看到里面有 <code>name</code> 和 <code>requires</code> 等属性和 <code>provider</code> 和 <code>factory</code> 等函数。</p>\n<p>里面所有的方法，都是通过调用 <code>invokeLater</code> 和 <code>invokeLaterAndSetModuleName</code> 生成的新函数。新函数的上下文中带有 <code>provider</code> 和 <code>method</code> 信息。比如 <code>service</code> 函数：provider=’$provide’，method=’service’，暂时还看不出来信息有什么用，可以先跳过。新函数在调用的时候会将信息连同调用的参数一起 push 进模块的 <code>_invokeQueue</code> 属性中。</p>\n<p>绕了一大圈，就是知道了：在调用 <code>value</code>、<code>service</code>、<code>provider</code> 这些基本的模块功能函数的时候，其实只是将构造函数和相关信息先保存了下来，根本就没有做初始化模块等工作。</p>\n<p>但是作为一个库必定需要跟 <code>window</code> 或者 <code>document</code> 产生点关系不然无法操作 DOM，根据编写过不少库的经验来看，通常将这样的代码放在最后。于是拉到最后一看，gotcha。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jqLite(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  angularInit(<span class=\"built_in\">document</span>, bootstrap);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>明显意思就是在文档准备完毕的时候调用 <code>angularInit</code>，转到 <code>angularInit</code> 的定义发现调用了 <code>bootstrap(appElement, module ? [module] : [], config);</code>，再转到 <code>bootstrap</code> 的定义，在函数内部又会调用 <code>doBootstrap</code> 函数，一系列的检查之后，调用了 <code>createInjector</code> 函数就结束了，转到 <code>createInjector</code> 的定义一看，有 <code>$provide</code> <code>factory</code> 等字样，说明找对地方了。</p>\n<p><a name=\"analyze\"></a></p>\n<h2 id=\"开始分析↑\"><a href=\"#开始分析↑\" class=\"headerlink\" title=\"开始分析↑\"></a>开始分析<a href=\"#catalogue\">↑</a></h2><p>重点来分析 <code>createInjector</code> 函数。</p>\n<p>函数体大概可以分成四段。</p>\n<p>第一段是定义了 <code>providerCache</code>、<code>instanceCache</code>、<code>providerInjector</code> 和 <code>instanceInjector</code>。最后返回 <code>instanceInjector</code> 对象。<code>providerInjector</code> 和 <code>instanceInjector</code> 各为将 <code>providerCache</code> 和 <code>instanceCache</code> 传入 <code>createInternalInjector</code> 函数的返回值。</p>\n<p>第二段是 provider 函数的定义，用以供初始化时候的调用。</p>\n<p>第三段是 <code>loadModules</code> 函数的定义，作用是，显然，初始化模块。</p>\n<p>第四段是 <code>createInternalInjector</code> 函数的定义，函数返回的是真正的注入器。</p>\n<p>从第一段的代码来看，真正的工作是在 <code>loadModules</code> 函数中，因为 <code>createInternalInjector</code> 函数只返回一个对象，没有 ‘side effect’ 的代码。</p>\n<p><code>loadModules</code> 函数上来就是一个对模块数组的遍历，然后在遍历内取模块的属性 <code>_invokeQueue</code> 来调用 <code>runInvokeQueue</code> 函数对已经缓存下来的对象或方法的构造函数进行处理。</p>\n<p>值得注意的是在做调用 <code>runInvokeQueue</code> 前，有一个递归的调用 <code>loadModules(moduleFn.requires)</code>，表明了在初始化本模块之前，会先初始化依赖的模块。</p>\n<p>到目前为止，可以判明模块初始化的分两个阶段，第一个是：声明模块及其依赖模块 -&gt; 缓存模块变量的构造函数；第二个是：选取一个根模块（对应 AngularJS 中的 ‘app’ 模块） -&gt; 找出其依赖的模块，对于每一个依赖，递归地先初始化其依赖的模块，再初始化自身 -&gt; 处理模块中缓存的变量的构造函数。</p>\n<p>如此采取先缓存所有模块再通过依赖树来初始化的做法虽然看起来繁琐，但是得到一个重要的特性就是声明模块的时候不用关注依赖的顺序，只需要表明依赖就可以了。如果声明的时候就立刻初始化，则必须小心检查所依赖的模块初始化是否已经完成了，然而如此一来就退化成了普通的模块化方法了。<strong>延迟初始化是实现依赖注入的重要过程</strong>。</p>\n<p>模块依赖已经明了，现在来看看作为处理函数的 <code>runInvokeQueue</code> 函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runInvokeQueue</span>(<span class=\"params\">queue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i, ii;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, ii = queue.length; i &lt; ii; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> invokeArgs = queue[i],</span><br><span class=\"line\">        provider = providerInjector.get(invokeArgs[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    provider[invokeArgs[<span class=\"number\">1</span>]].apply(provider, invokeArgs[<span class=\"number\">2</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重要的代码只有两行，<code>provider = providerInjector.get(invokeArgs[0]);</code> 和 <code>provider[invokeArgs[1]].apply(provider, invokeArgs[2]);</code>。</p>\n<p>往上看一下，调用 <code>providerInjector.get</code> 相当于是调用 <code>getService</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getService</span>(<span class=\"params\">serviceName, caller</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cache.hasOwnProperty(serviceName)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cache[serviceName] === INSTANTIATING) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> $injectorMinErr(<span class=\"string\">'cdep'</span>, <span class=\"string\">'Circular dependency found: &#123;0&#125;'</span>,</span><br><span class=\"line\">                serviceName + <span class=\"string\">' &lt;- '</span> + path.join(<span class=\"string\">' &lt;- '</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache[serviceName];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      path.unshift(serviceName);</span><br><span class=\"line\">      cache[serviceName] = INSTANTIATING;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cache[serviceName] = factory(serviceName, caller);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cache[serviceName] === INSTANTIATING) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> cache[serviceName];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      path.shift();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码虽多，但基本就是干一件事，返回 <code>cache</code> 中的对象，如果没有，就用 <code>factory</code> 创建一个再返回。而调用的对象 <code>providerInjector</code> 的定义来看，<code>cache</code> 就等于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">providerCache = &#123;</span><br><span class=\"line\">  $provide: &#123;</span><br><span class=\"line\">      provider: supportObject(provider),</span><br><span class=\"line\">      factory: supportObject(factory),</span><br><span class=\"line\">      service: supportObject(service),</span><br><span class=\"line\">      value: supportObject(value),</span><br><span class=\"line\">      constant: supportObject(constant),</span><br><span class=\"line\">      decorator: decorator</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>OK，现在可以知道了那些被延迟初始化的模块元素会在这里被处理了。</p>\n<p>从上文可以知道，<code>invokeArgs[0]</code> 的值为 <code>$provider</code>，<code>invokeArgs[1]</code> 的值为 service / factory 等，<code>invokeArgs[2]</code> 则为参数数组。</p>\n<p>看看以下的示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如此使用</span></span><br><span class=\"line\">m.service( <span class=\"string\">'b'</span>, [<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> a </span>) </span>&#123; <span class=\"keyword\">this</span>.a = a &#125;] );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化的时候实际上调用</span></span><br><span class=\"line\">$provider.service( <span class=\"string\">'b'</span>, [<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> a </span>) </span>&#123; <span class=\"keyword\">this</span>.a = a &#125;] );</span><br></pre></td></tr></table></figure>\n<p><a name=\"wrapup\"></a></p>\n<h2 id=\"统一包装↑\"><a href=\"#统一包装↑\" class=\"headerlink\" title=\"统一包装↑\"></a>统一包装<a href=\"#catalogue\">↑</a></h2><p>接下来就是分析模块元素（对外表现为 API）的代码了。</p>\n<p>函数有点多，但是还是能看得出来。<code>supportObject</code> 不用管，只是负责转换一下参数，基本的函数是 <code>provider</code>，<code>factory</code> 会调用它，然后 <code>value</code> 和 <code>service</code> 会调用 <code>factory</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">provider</span>(<span class=\"params\">name, provider_</span>) </span>&#123;</span><br><span class=\"line\">  assertNotHasOwnProperty(name, <span class=\"string\">'service'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isFunction(provider_) || isArray(provider_)) &#123;</span><br><span class=\"line\">    provider_ = providerInjector.instantiate(provider_);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!provider_.$<span class=\"keyword\">get</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> $injectorMinErr(<span class=\"string\">'pget'</span>, <span class=\"string\">\"Provider '&#123;0&#125;' must define $get factory method.\"</span>, name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> providerCache[name + providerSuffix] = provider_;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一个判断和第二个判断在 <code>factory</code> 调用的时候是无效的，因为 <code>factory</code> 调用 <code>provider</code> 的时候第二个参数是 Object，而且带有 <code>$get</code> 属性。实际上在本阶段做的是，就是将调用 API 传入的第二个参数（第一个参数是名字）再包装一层对象，再<strong>存储在 <code>providerCache</code> 中</strong>，对象统一拥有 <code>$get</code> 属性，或者说，接口。</p>\n<p>其中，<code>$get</code> 属性是一个可供调用的函数，功能是即使模块元素混杂存储，也能被统一的接口成功调用。</p>\n<p>对于 <code>value</code>，调用 API 的时候传入的是值，因此需要包装成返回这个值的函数才赋值给 <code>$get</code>。</p>\n<p>对于 <code>constant</code>，值是不变的，所以可以看到就直接存储了。</p>\n<p>对于 <code>decorator</code>，同样会定义 <code>$get</code> 属性。</p>\n<p>对于 <code>service</code>，设计上应该生成一个单例并存储下来。不过在这里，仍然是继续包装起来。</p>\n<p>源代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enforceReturnValue</span>(<span class=\"params\">name, factory</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enforcedReturnValue</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = instanceInjector.invoke(factory, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isUndefined(result)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> $injectorMinErr(<span class=\"string\">'undef'</span>, <span class=\"string\">\"Provider '&#123;0&#125;' must return a value from $get factory method.\"</span>, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factory</span>(<span class=\"params\">name, factoryFn, enforce</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> provider(name, &#123;</span><br><span class=\"line\">    $<span class=\"keyword\">get</span>: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function service(name, <span class=\"keyword\">constructor</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> factory(name, [<span class=\"string\">'$injector'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$injector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $injector.instantiate(<span class=\"keyword\">constructor</span>);</span><br><span class=\"line\">  &#125;]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际干了如下的事情：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> provider(name, &#123;  <span class=\"comment\">// 跟其他 API 一样调用 provider 函数</span></span><br><span class=\"line\">    $<span class=\"keyword\">get</span>: function () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> instanceInjector.invoke(</span><br><span class=\"line\">          [<span class=\"string\">'$injector'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$injector</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> $injector.instantiate(<span class=\"keyword\">constructor</span>);  // 注意 <span class=\"keyword\">constructor</span> 是用户自定义的‘可注入结构’</span><br><span class=\"line\">          &#125;]  // 这又是一个‘可注入结构’，注入的是 '$injector'，实际上就等于 instanceInjector</span><br><span class=\"line\">          , this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)( 'serviceName' )</span><br></pre></td></tr></table></figure>\n<p>最后依然将包装好的函数存入 <code>$provider</code>。</p>\n<p>只是为什么还是存储在 <code>$provider</code>，而不是直接调用函数进行初始化？比如 <code>service</code>，为什么还要再包装上一层‘可注入结构’？</p>\n<p><a name=\"brief\"></a></p>\n<h2 id=\"小结↑\"><a href=\"#小结↑\" class=\"headerlink\" title=\"小结↑\"></a>小结<a href=\"#catalogue\">↑</a></h2><p>前文提到，使用延迟初始化实现了模块的依赖注入，使依赖的模块不需要提前定义。</p>\n<p>实际上模块内的元素（factory / service 等）也是可以使用依赖注入的。使用过 AngularJS 的肯定知道定义某一个 controller 的时候可以注入某个 service，然而 controller 和 service 的定义顺序应该不能对代码运行造成影响。</p>\n<p>因此，在此时，模块元素的“构造函数”（注意是用户自定义的那个函数而并非供<br> new 调用的那个函数）还并不具备运行的条件，因为还是需要等依赖的元素初始化。</p>\n<p>于是某种意义上，模块元素就需要<strong>第二重注入</strong>。把‘可注入结构’缓存在 <code>$provider</code> 中实际上就是对应了前文叙述的‘把模块先全部缓存’，包装上一个函数再统一放在 <code>$get</code> 属性下明显是方便供下一阶段的调用。</p>\n<p>万事俱备，只欠注入了。</p>\n<blockquote>\n<p>分析到现阶段，大家应该对平常使用频繁的 <code>service</code>、<code>factory</code> 等函数有了更深的认识了。</p>\n</blockquote>\n<p><a name=\"injector\"></a></p>\n<h2 id=\"注入器的奥秘↑\"><a href=\"#注入器的奥秘↑\" class=\"headerlink\" title=\"注入器的奥秘↑\"></a>注入器的奥秘<a href=\"#catalogue\">↑</a></h2><p>现在把精力放在 <code>createInternalInjector</code> 函数。</p>\n<p>此函数在<a href=\"#analyze\">开始分析</a>一节中已经提到了，作用只是返回一个对象。这个对象就是真正的注入器。</p>\n<p>此函数被调用了两次，分别是得到 <code>providerInjector</code> 和 <code>instanceInjector</code>。</p>\n<p>注入器中重要的函数有三个，分别是 <code>getService</code>、<code>invoke</code> 和 <code>instantiate</code>。</p>\n<p>在<a href=\"#analyze\">开始分析</a>中已经大致介绍了，<code>getService</code> 函数干一件事，返回 <code>cache</code> 中的对象，如果没有，就用 <code>factory</code> 创建一个再返回。</p>\n<p>对于 <code>providerInjector</code>，<code>factory</code> 函数是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">serviceName, caller</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (angular.isString(caller)) &#123;</span><br><span class=\"line\">    path.push(caller);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> $injectorMinErr(<span class=\"string\">'unpr'</span>, <span class=\"string\">\"Unknown provider: &#123;0&#125;\"</span>, path.join(<span class=\"string\">' &lt;- '</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不难理解，因为在调用 provider 的时候，<code>providerCache</code> 中的函数应该已经在上一个初始化模块阶段中被定义好，如果没找到，那么肯定是调用了未定义的 provider。</p>\n<p>对于 <code>instanceInjector</code>，<code>factory</code> 函数是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">serviceName, caller</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> provider = providerInjector.get(serviceName + providerSuffix, caller);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> instanceInjector.invoke(provider.$<span class=\"keyword\">get</span>, provider, undefined, serviceName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>instanceCache</code> 本身就是空的，因此在找不到的时候，就去 <code>providerInjector</code> 里找 provider，然后得到其调用的结果，就是真正需要的实例（instance）了。<code>$get</code> 在这里就凸显出统一调用的用处了。</p>\n<p><code>invoke</code> 函数则是处理<strong>‘可注入结构’</strong>和调用函数。从源码中也可以看到组装参数和调用函数，其中也会调用 <code>getService</code> 去得到实参的值来实现注入。从这里的 <code>getService</code> 出发，又有可能调用 <code>factory</code> 继而继续调用 <code>invoke</code> 来得到所依赖的实例，直到没有任何依赖需要实例化，从而完美的实现了自洽。</p>\n<p><code>instantiate</code> 函数是用来处理 ‘service’ 的，是用来模拟 <code>new</code> 的，从代码来看也是如此：复制一个函数的 prototype，绑定为函数的 <code>this</code>，然后调用函数。因此调用 <code>service</code> API 的时候，可以完全使用构造函数的写法，同时也能得到注入特性。</p>\n<p><a name=\"unexpected\"></a></p>\n<h2 id=\"读源码的意外发现↑\"><a href=\"#读源码的意外发现↑\" class=\"headerlink\" title=\"读源码的意外发现↑\"></a>读源码的意外发现<a href=\"#catalogue\">↑</a></h2><p>读源码一般都会有一定的收获，或是技巧上的，或是思想上的。</p>\n<p>当读完了 Angular 的依赖注入的代码后，才发现 Angular 虽然表明支持模块化，但是实际上所谓的模块化只是徒有其名，模块的定义只是方便框架自己做延迟初始化的工作，没有模块之实。模块只是依赖树上的节点，最终生成出来的命名空间跟模块没有一丁点的关系，所有模块里的东西，不论是 ‘value’、’service’ 和 ‘provider’ 等，都是平铺在 <code>instanceCache</code> 里面的。这样的做法明显的一个结果就是命名冲突，两个不同模块里面的同名对象，后实例化的会覆盖掉先实例化的。这一点非常的不好，因为完全不符合模块化的预期结果。</p>\n<p>在下一篇编（fu）写（zhi）注入功能的时候，我会修改这部分使其能满足模块化的实际预期。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>几年前有一个项目构思，由于技术水平低，当时并没有思考得很清楚，所以一直没怎么着手开始。近来前端很多优秀的库出现了，也让我对那个项目有了新的想法。在写了几个 JavaScript 的项目后我觉得可以尝试开始了。尝试并成功写出一些代码之后，就开（挖）始（坑）了这个系列的博文。</p>\n<p>项目是写一个 JavaScript 框架，干什么的在此并不是重点，但是首先需要一个可扩展的模块系统。最简单就是直接用 jQuery 扩展的写法，直接将函数等的挂载在一个对象下，不过如此一来模块之间依赖非常多的话，管理起来会十分困难。也可以使用 AMD / CMD 的模块化的方法，不过考虑到 ES2015 已经加入了 import / export 的语法，最好就直接使用。然而使用了 ES2015 的语法之后，仍然使用 AMD 等的语法就显得很别扭，但是又想要依赖注入功能怎么办？</p>\n<p>解决方法是模（fu）仿（zhi）著名的 AngularJS 中关于依赖注入的源代码。</p>\n<p>Angular 有两个版本，1.x 和 2.x，但是 2.x 中，淡化了模块的概念，直接采用 component 和 ES2015 的 import / export 的机制，所以依赖注入已经不太算是亮点了。而且 Angular2 采用 TypeScript 编写，从语法编写上也不适合作为参考。最后选定 1.4.5 版本。</p>\n<blockquote>\n<p>Angular 项目下还有一个不怎么有人知道的 <code>di.js</code> 项目，是从 Angular 中独立出来的依赖注入库，但是从文档来看，也是需要 TypeScript 来使用。</p>\n</blockquote>\n<p>文章较长，给个目录</p>\n<p><a name=\"catalogue\"></a></p>\n<ul>\n<li><a href=\"#di\">实现依赖注入</a></li>\n<li><a href=\"#api\">从 API 入手</a></li>\n<li><a href=\"#analyze\">开始分析</a></li>\n<li><a href=\"#wrapup\">统一包装</a></li>\n<li><a href=\"#brief\">小结</a></li>\n<li><a href=\"#injector\">注入器的奥秘</a></li>\n<li><a href=\"#unexpected\">读源码的意外发现</a></li>\n</ul>\n<p><a name=\"di\"></a></p>\n<h2 id=\"实现依赖注入↑\"><a href=\"#实现依赖注入↑\" class=\"headerlink\" title=\"实现依赖注入↑\"></a>实现依赖注入<a href=\"#catalogue\">↑</a></h2><p>JavaScript 如何实现依赖注入呢？AngularJS 给出了三个解决方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 直接在参数里面声明</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.service( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> $http </span>) </span>&#123;&#125; )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用显示注释</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">a.$inject = [<span class=\"string\">'$http'</span>]</span><br><span class=\"line\"><span class=\"built_in\">module</span>.service( a )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组内联</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.service( [<span class=\"string\">'$http'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> http </span>) </span>&#123;&#125;] )</span><br></pre></td></tr></table></figure>\n<p>实际上三个方式都是一样的，只是使用方式不一样，最后都是使用了 JavaScript 的闭包来实现依赖的注入，原理如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">method</span> (<span class=\"params\"> $http </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> args </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// $http.get( args )</span></span><br><span class=\"line\">        <span class=\"comment\">// .....</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将依赖作为参数传入 <code>menthod</code> 得到的返回值就是是一个可以调用 <code>$http</code> 服务的函数了。</p>\n<p>像这样 <code>[&#39;$http&#39;, function ( http ) {}]</code> 最后一个元素是函数的结构可以称为一个<strong>‘可注入结构’</strong>。</p>\n<p><a name=\"api\"></a></p>\n<h2 id=\"从-API-入手↑\"><a href=\"#从-API-入手↑\" class=\"headerlink\" title=\"从 API 入手↑\"></a>从 API 入手<a href=\"#catalogue\">↑</a></h2><p>Angular 库的源代码文件非常大，一般基本不会从头开始看。而 API 作为库对外的窗口，从 API 的使用顺藤摸瓜地查找代码是比较好的做法。Angular 模块的使用一般如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// declare module</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = angular.module( <span class=\"string\">'a'</span>, [] );</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = angular.module( <span class=\"string\">'b'</span>, [] );</span><br><span class=\"line\"><span class=\"keyword\">const</span> c = angular.module( <span class=\"string\">'c'</span>, [<span class=\"string\">'a'</span>] );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// use the module</span></span><br><span class=\"line\">a</span><br><span class=\"line\">.value( <span class=\"string\">'a'</span>, <span class=\"number\">123</span> )</span><br><span class=\"line\">.factory( <span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">123</span>; &#125; )</span><br><span class=\"line\">.service( <span class=\"string\">'serviceName'</span>, ... )</span><br><span class=\"line\">.directive( <span class=\"string\">'directiveName'</span>, ... )</span><br><span class=\"line\">.filter( <span class=\"string\">'filterName'</span>, ... );</span><br></pre></td></tr></table></figure>\n<p>先创建一个模块，用数组说明它的依赖模块，然后模块就可以调用 <code>value</code>、<code>service</code>、<code>directive</code> 等 API，API 的第一个参数是名字，第二个参数则是值或者函数或者数组，了解 AngularJS 的读者应该知道其实是值或者返回值的构造函数或者包含依赖和构造函数的数组。</p>\n<p>打开 Angular.js ，查找出 <code>module(name, requires, configFn)</code> 函数的定义，位于一个更大的函数 <code>setupModuleLoader</code> 内。<code>setupModuleLoader</code> 为 <code>module</code> 函数编写了一些检测函数和变量。最重要的是 <code>modules</code> 变量，用来保存所有的模块信息。</p>\n<p>下面来分析 <code>module</code> 函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (requires &amp;&amp; modules.hasOwnProperty(name)) &#123;</span><br><span class=\"line\">  modules[name] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出如果模块重复创建是会覆盖之前的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** @type &#123;angular.Module&#125; */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> moduleInstance = &#123;</span><br></pre></td></tr></table></figure>\n<p><code>moduleInstance</code> 就是将会返回出去的模块对象，可以看到里面有 <code>name</code> 和 <code>requires</code> 等属性和 <code>provider</code> 和 <code>factory</code> 等函数。</p>\n<p>里面所有的方法，都是通过调用 <code>invokeLater</code> 和 <code>invokeLaterAndSetModuleName</code> 生成的新函数。新函数的上下文中带有 <code>provider</code> 和 <code>method</code> 信息。比如 <code>service</code> 函数：provider=’$provide’，method=’service’，暂时还看不出来信息有什么用，可以先跳过。新函数在调用的时候会将信息连同调用的参数一起 push 进模块的 <code>_invokeQueue</code> 属性中。</p>\n<p>绕了一大圈，就是知道了：在调用 <code>value</code>、<code>service</code>、<code>provider</code> 这些基本的模块功能函数的时候，其实只是将构造函数和相关信息先保存了下来，根本就没有做初始化模块等工作。</p>\n<p>但是作为一个库必定需要跟 <code>window</code> 或者 <code>document</code> 产生点关系不然无法操作 DOM，根据编写过不少库的经验来看，通常将这样的代码放在最后。于是拉到最后一看，gotcha。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jqLite(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  angularInit(<span class=\"built_in\">document</span>, bootstrap);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>明显意思就是在文档准备完毕的时候调用 <code>angularInit</code>，转到 <code>angularInit</code> 的定义发现调用了 <code>bootstrap(appElement, module ? [module] : [], config);</code>，再转到 <code>bootstrap</code> 的定义，在函数内部又会调用 <code>doBootstrap</code> 函数，一系列的检查之后，调用了 <code>createInjector</code> 函数就结束了，转到 <code>createInjector</code> 的定义一看，有 <code>$provide</code> <code>factory</code> 等字样，说明找对地方了。</p>\n<p><a name=\"analyze\"></a></p>\n<h2 id=\"开始分析↑\"><a href=\"#开始分析↑\" class=\"headerlink\" title=\"开始分析↑\"></a>开始分析<a href=\"#catalogue\">↑</a></h2><p>重点来分析 <code>createInjector</code> 函数。</p>\n<p>函数体大概可以分成四段。</p>\n<p>第一段是定义了 <code>providerCache</code>、<code>instanceCache</code>、<code>providerInjector</code> 和 <code>instanceInjector</code>。最后返回 <code>instanceInjector</code> 对象。<code>providerInjector</code> 和 <code>instanceInjector</code> 各为将 <code>providerCache</code> 和 <code>instanceCache</code> 传入 <code>createInternalInjector</code> 函数的返回值。</p>\n<p>第二段是 provider 函数的定义，用以供初始化时候的调用。</p>\n<p>第三段是 <code>loadModules</code> 函数的定义，作用是，显然，初始化模块。</p>\n<p>第四段是 <code>createInternalInjector</code> 函数的定义，函数返回的是真正的注入器。</p>\n<p>从第一段的代码来看，真正的工作是在 <code>loadModules</code> 函数中，因为 <code>createInternalInjector</code> 函数只返回一个对象，没有 ‘side effect’ 的代码。</p>\n<p><code>loadModules</code> 函数上来就是一个对模块数组的遍历，然后在遍历内取模块的属性 <code>_invokeQueue</code> 来调用 <code>runInvokeQueue</code> 函数对已经缓存下来的对象或方法的构造函数进行处理。</p>\n<p>值得注意的是在做调用 <code>runInvokeQueue</code> 前，有一个递归的调用 <code>loadModules(moduleFn.requires)</code>，表明了在初始化本模块之前，会先初始化依赖的模块。</p>\n<p>到目前为止，可以判明模块初始化的分两个阶段，第一个是：声明模块及其依赖模块 -&gt; 缓存模块变量的构造函数；第二个是：选取一个根模块（对应 AngularJS 中的 ‘app’ 模块） -&gt; 找出其依赖的模块，对于每一个依赖，递归地先初始化其依赖的模块，再初始化自身 -&gt; 处理模块中缓存的变量的构造函数。</p>\n<p>如此采取先缓存所有模块再通过依赖树来初始化的做法虽然看起来繁琐，但是得到一个重要的特性就是声明模块的时候不用关注依赖的顺序，只需要表明依赖就可以了。如果声明的时候就立刻初始化，则必须小心检查所依赖的模块初始化是否已经完成了，然而如此一来就退化成了普通的模块化方法了。<strong>延迟初始化是实现依赖注入的重要过程</strong>。</p>\n<p>模块依赖已经明了，现在来看看作为处理函数的 <code>runInvokeQueue</code> 函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runInvokeQueue</span>(<span class=\"params\">queue</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i, ii;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, ii = queue.length; i &lt; ii; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> invokeArgs = queue[i],</span><br><span class=\"line\">        provider = providerInjector.get(invokeArgs[<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">    provider[invokeArgs[<span class=\"number\">1</span>]].apply(provider, invokeArgs[<span class=\"number\">2</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重要的代码只有两行，<code>provider = providerInjector.get(invokeArgs[0]);</code> 和 <code>provider[invokeArgs[1]].apply(provider, invokeArgs[2]);</code>。</p>\n<p>往上看一下，调用 <code>providerInjector.get</code> 相当于是调用 <code>getService</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getService</span>(<span class=\"params\">serviceName, caller</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (cache.hasOwnProperty(serviceName)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cache[serviceName] === INSTANTIATING) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> $injectorMinErr(<span class=\"string\">'cdep'</span>, <span class=\"string\">'Circular dependency found: &#123;0&#125;'</span>,</span><br><span class=\"line\">                serviceName + <span class=\"string\">' &lt;- '</span> + path.join(<span class=\"string\">' &lt;- '</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache[serviceName];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      path.unshift(serviceName);</span><br><span class=\"line\">      cache[serviceName] = INSTANTIATING;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cache[serviceName] = factory(serviceName, caller);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cache[serviceName] === INSTANTIATING) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">delete</span> cache[serviceName];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">      path.shift();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码虽多，但基本就是干一件事，返回 <code>cache</code> 中的对象，如果没有，就用 <code>factory</code> 创建一个再返回。而调用的对象 <code>providerInjector</code> 的定义来看，<code>cache</code> 就等于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">providerCache = &#123;</span><br><span class=\"line\">  $provide: &#123;</span><br><span class=\"line\">      provider: supportObject(provider),</span><br><span class=\"line\">      factory: supportObject(factory),</span><br><span class=\"line\">      service: supportObject(service),</span><br><span class=\"line\">      value: supportObject(value),</span><br><span class=\"line\">      constant: supportObject(constant),</span><br><span class=\"line\">      decorator: decorator</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>OK，现在可以知道了那些被延迟初始化的模块元素会在这里被处理了。</p>\n<p>从上文可以知道，<code>invokeArgs[0]</code> 的值为 <code>$provider</code>，<code>invokeArgs[1]</code> 的值为 service / factory 等，<code>invokeArgs[2]</code> 则为参数数组。</p>\n<p>看看以下的示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如此使用</span></span><br><span class=\"line\">m.service( <span class=\"string\">'b'</span>, [<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> a </span>) </span>&#123; <span class=\"keyword\">this</span>.a = a &#125;] );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化的时候实际上调用</span></span><br><span class=\"line\">$provider.service( <span class=\"string\">'b'</span>, [<span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> a </span>) </span>&#123; <span class=\"keyword\">this</span>.a = a &#125;] );</span><br></pre></td></tr></table></figure>\n<p><a name=\"wrapup\"></a></p>\n<h2 id=\"统一包装↑\"><a href=\"#统一包装↑\" class=\"headerlink\" title=\"统一包装↑\"></a>统一包装<a href=\"#catalogue\">↑</a></h2><p>接下来就是分析模块元素（对外表现为 API）的代码了。</p>\n<p>函数有点多，但是还是能看得出来。<code>supportObject</code> 不用管，只是负责转换一下参数，基本的函数是 <code>provider</code>，<code>factory</code> 会调用它，然后 <code>value</code> 和 <code>service</code> 会调用 <code>factory</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">provider</span>(<span class=\"params\">name, provider_</span>) </span>&#123;</span><br><span class=\"line\">  assertNotHasOwnProperty(name, <span class=\"string\">'service'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isFunction(provider_) || isArray(provider_)) &#123;</span><br><span class=\"line\">    provider_ = providerInjector.instantiate(provider_);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!provider_.$<span class=\"keyword\">get</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> $injectorMinErr(<span class=\"string\">'pget'</span>, <span class=\"string\">\"Provider '&#123;0&#125;' must define $get factory method.\"</span>, name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> providerCache[name + providerSuffix] = provider_;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一个判断和第二个判断在 <code>factory</code> 调用的时候是无效的，因为 <code>factory</code> 调用 <code>provider</code> 的时候第二个参数是 Object，而且带有 <code>$get</code> 属性。实际上在本阶段做的是，就是将调用 API 传入的第二个参数（第一个参数是名字）再包装一层对象，再<strong>存储在 <code>providerCache</code> 中</strong>，对象统一拥有 <code>$get</code> 属性，或者说，接口。</p>\n<p>其中，<code>$get</code> 属性是一个可供调用的函数，功能是即使模块元素混杂存储，也能被统一的接口成功调用。</p>\n<p>对于 <code>value</code>，调用 API 的时候传入的是值，因此需要包装成返回这个值的函数才赋值给 <code>$get</code>。</p>\n<p>对于 <code>constant</code>，值是不变的，所以可以看到就直接存储了。</p>\n<p>对于 <code>decorator</code>，同样会定义 <code>$get</code> 属性。</p>\n<p>对于 <code>service</code>，设计上应该生成一个单例并存储下来。不过在这里，仍然是继续包装起来。</p>\n<p>源代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enforceReturnValue</span>(<span class=\"params\">name, factory</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enforcedReturnValue</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = instanceInjector.invoke(factory, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isUndefined(result)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> $injectorMinErr(<span class=\"string\">'undef'</span>, <span class=\"string\">\"Provider '&#123;0&#125;' must return a value from $get factory method.\"</span>, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factory</span>(<span class=\"params\">name, factoryFn, enforce</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> provider(name, &#123;</span><br><span class=\"line\">    $<span class=\"keyword\">get</span>: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function service(name, <span class=\"keyword\">constructor</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> factory(name, [<span class=\"string\">'$injector'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$injector</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> $injector.instantiate(<span class=\"keyword\">constructor</span>);</span><br><span class=\"line\">  &#125;]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际干了如下的事情：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> provider(name, &#123;  <span class=\"comment\">// 跟其他 API 一样调用 provider 函数</span></span><br><span class=\"line\">    $<span class=\"keyword\">get</span>: function () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> instanceInjector.invoke(</span><br><span class=\"line\">          [<span class=\"string\">'$injector'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$injector</span>) </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> $injector.instantiate(<span class=\"keyword\">constructor</span>);  // 注意 <span class=\"keyword\">constructor</span> 是用户自定义的‘可注入结构’</span><br><span class=\"line\">          &#125;]  // 这又是一个‘可注入结构’，注入的是 '$injector'，实际上就等于 instanceInjector</span><br><span class=\"line\">          , this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;)( 'serviceName' )</span><br></pre></td></tr></table></figure>\n<p>最后依然将包装好的函数存入 <code>$provider</code>。</p>\n<p>只是为什么还是存储在 <code>$provider</code>，而不是直接调用函数进行初始化？比如 <code>service</code>，为什么还要再包装上一层‘可注入结构’？</p>\n<p><a name=\"brief\"></a></p>\n<h2 id=\"小结↑\"><a href=\"#小结↑\" class=\"headerlink\" title=\"小结↑\"></a>小结<a href=\"#catalogue\">↑</a></h2><p>前文提到，使用延迟初始化实现了模块的依赖注入，使依赖的模块不需要提前定义。</p>\n<p>实际上模块内的元素（factory / service 等）也是可以使用依赖注入的。使用过 AngularJS 的肯定知道定义某一个 controller 的时候可以注入某个 service，然而 controller 和 service 的定义顺序应该不能对代码运行造成影响。</p>\n<p>因此，在此时，模块元素的“构造函数”（注意是用户自定义的那个函数而并非供<br> new 调用的那个函数）还并不具备运行的条件，因为还是需要等依赖的元素初始化。</p>\n<p>于是某种意义上，模块元素就需要<strong>第二重注入</strong>。把‘可注入结构’缓存在 <code>$provider</code> 中实际上就是对应了前文叙述的‘把模块先全部缓存’，包装上一个函数再统一放在 <code>$get</code> 属性下明显是方便供下一阶段的调用。</p>\n<p>万事俱备，只欠注入了。</p>\n<blockquote>\n<p>分析到现阶段，大家应该对平常使用频繁的 <code>service</code>、<code>factory</code> 等函数有了更深的认识了。</p>\n</blockquote>\n<p><a name=\"injector\"></a></p>\n<h2 id=\"注入器的奥秘↑\"><a href=\"#注入器的奥秘↑\" class=\"headerlink\" title=\"注入器的奥秘↑\"></a>注入器的奥秘<a href=\"#catalogue\">↑</a></h2><p>现在把精力放在 <code>createInternalInjector</code> 函数。</p>\n<p>此函数在<a href=\"#analyze\">开始分析</a>一节中已经提到了，作用只是返回一个对象。这个对象就是真正的注入器。</p>\n<p>此函数被调用了两次，分别是得到 <code>providerInjector</code> 和 <code>instanceInjector</code>。</p>\n<p>注入器中重要的函数有三个，分别是 <code>getService</code>、<code>invoke</code> 和 <code>instantiate</code>。</p>\n<p>在<a href=\"#analyze\">开始分析</a>中已经大致介绍了，<code>getService</code> 函数干一件事，返回 <code>cache</code> 中的对象，如果没有，就用 <code>factory</code> 创建一个再返回。</p>\n<p>对于 <code>providerInjector</code>，<code>factory</code> 函数是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">serviceName, caller</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (angular.isString(caller)) &#123;</span><br><span class=\"line\">    path.push(caller);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> $injectorMinErr(<span class=\"string\">'unpr'</span>, <span class=\"string\">\"Unknown provider: &#123;0&#125;\"</span>, path.join(<span class=\"string\">' &lt;- '</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不难理解，因为在调用 provider 的时候，<code>providerCache</code> 中的函数应该已经在上一个初始化模块阶段中被定义好，如果没找到，那么肯定是调用了未定义的 provider。</p>\n<p>对于 <code>instanceInjector</code>，<code>factory</code> 函数是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">serviceName, caller</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> provider = providerInjector.get(serviceName + providerSuffix, caller);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> instanceInjector.invoke(provider.$<span class=\"keyword\">get</span>, provider, undefined, serviceName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>instanceCache</code> 本身就是空的，因此在找不到的时候，就去 <code>providerInjector</code> 里找 provider，然后得到其调用的结果，就是真正需要的实例（instance）了。<code>$get</code> 在这里就凸显出统一调用的用处了。</p>\n<p><code>invoke</code> 函数则是处理<strong>‘可注入结构’</strong>和调用函数。从源码中也可以看到组装参数和调用函数，其中也会调用 <code>getService</code> 去得到实参的值来实现注入。从这里的 <code>getService</code> 出发，又有可能调用 <code>factory</code> 继而继续调用 <code>invoke</code> 来得到所依赖的实例，直到没有任何依赖需要实例化，从而完美的实现了自洽。</p>\n<p><code>instantiate</code> 函数是用来处理 ‘service’ 的，是用来模拟 <code>new</code> 的，从代码来看也是如此：复制一个函数的 prototype，绑定为函数的 <code>this</code>，然后调用函数。因此调用 <code>service</code> API 的时候，可以完全使用构造函数的写法，同时也能得到注入特性。</p>\n<p><a name=\"unexpected\"></a></p>\n<h2 id=\"读源码的意外发现↑\"><a href=\"#读源码的意外发现↑\" class=\"headerlink\" title=\"读源码的意外发现↑\"></a>读源码的意外发现<a href=\"#catalogue\">↑</a></h2><p>读源码一般都会有一定的收获，或是技巧上的，或是思想上的。</p>\n<p>当读完了 Angular 的依赖注入的代码后，才发现 Angular 虽然表明支持模块化，但是实际上所谓的模块化只是徒有其名，模块的定义只是方便框架自己做延迟初始化的工作，没有模块之实。模块只是依赖树上的节点，最终生成出来的命名空间跟模块没有一丁点的关系，所有模块里的东西，不论是 ‘value’、’service’ 和 ‘provider’ 等，都是平铺在 <code>instanceCache</code> 里面的。这样的做法明显的一个结果就是命名冲突，两个不同模块里面的同名对象，后实例化的会覆盖掉先实例化的。这一点非常的不好，因为完全不符合模块化的预期结果。</p>\n<p>在下一篇编（fu）写（zhi）注入功能的时候，我会修改这部分使其能满足模块化的实际预期。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Nov 08 2016 15:58:22 GMT+0800 (China Standard Time)","title":"FictionInjection-始动：Angular 依赖注入分析和源码抽取改造（上）","path":"fictioninjection-series-analyze-angular-dependence-injection-and-extract-it-part-1/","eyeCatchImage":null,"excerpt":null,"date":"2016-05-12T05:56:53.000Z","pv":0,"totalPV":0,"categories":"技术 > 前端 > 编程语言 > javascript","tags":["javascript","FictionInjection"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":5784},{"title":"i18n.js库的编写兼使用npm辅助开发","id":"40","updated":"2015-04-25T06:00:30.000Z","date":"2015-04-23T11:06:26.000Z","_content":"\n近来由于开发某页面需要支持多语言切换，遂写一个切换页面语言的JS库。\n\n## 编写库的既定事项\n\n写JS库也不是一两次了，当然只是小型或者微型的。不过思想和方法和大型库都是通用的。一般是直接在sublime text里打开一个JS文件，然后写下一个Self-Executing Anonymous Functions（自执行匿名函数？），接着在函数里面创造库的对象，最后将对象挂在`window`对象下。\n\nShow you the code的话就是以下所示：\n\n```javascript\n(function( window, undefined ){\n\nvar i18n = {};\n\ni18n.bar = function () {\n    return;\n};\n\nwindow.i18n = i18n;\n\n})( window );\n```\n\n学得这样的写法是来源于对jQuery源代码的阅读。\n\n通过将代码都包在一个匿名函数中，实现了一个闭包。如此一来在闭包内随便折腾，也不会污染到外部全局环境（当然是在编写可靠的代码的情况下）。\n\n不过，随着AMD和CommonJS标准的流行开来，越来越多JS库都将自己模块化。过程也不复杂，只要遵循一定的规则就可以了。\n\n而对于编写一个简单的JS库，将github上[UMD](https://github.com/umdjs/umd)项目给出的模板修改一下就OK。\n\n修改后代码：\n\n```javascript\n;(function( root, name, definition ) {\n    if ( typeof define === 'function' && define.amd ) {\n      define( [], definition );\n    } else if ( typeof module === 'object' && module.exports ) {\n      module.exports = definition();\n    } else {\n      root[name] = definition();\n    }\n})( this, 'i18n', function() {\n\nvar i18n = {};\n\ni18n.bar = function () {\n    return;\n};\n\n// Return this library\nreturn i18n;\n\n});\n```\n\n注意最后不再需要手动将库挂载在`window`对象下，而是只是返回对象。挂载方式已经转交给外部函数判断。\n\n## 思考多一点，代码少一点\n\n很久的以前，我曾经写过一个jQuery插件，功能是为表格添加分页和异步载入。然而在写之前并没有清晰地定下整个插件的功能和限制，导致最后写出来的插件身兼数职，连表格美化与自定义CSS等也做了进去。加进去的功能有可能只是随手实现的，也许并不适合此插件管辖，造成了“做得不好非要做”的尴尬。\n\n另外，功能的繁琐与代码段的反复抽象提取导致了代码的凌乱不堪，进而导致测试出bug的时候完全搞不清楚问题所在。\n\n最后代码膨胀到完全不能控制，自己写出来的代码连自己都不敢修改。\n\n> 在写jQuery插件的时候，十分容易变成了写“使用jQuery的代码集合”，缺少性能和架构的考虑。这跟jQuery本身十分强大和灵活的特性有很大的关系。\n\n写库或插件，目的应该是将通用或者复杂的逻辑实现封装起来，通过提供简洁的API来实现功能的调用。\n\n先将手从键盘上收回，拿出纸笔，好好列出对JS库的描述。\n\n* Q1：i18n.js要做什么？\n* A1：对页面上的文本进行语言切换。\n* Q2：如何定位文本？\n* A2：为DOM元素增加'data-i18n'属性进行标记。\n* Q3：如何找到标注DOM元素？\n* A3：从给出的DOM元素作为根进行深度优先/广度优先遍历。\n* Q4：译文的来源？\n* A4：用户遵循某一标准自定义每一套语言的字典。\n* Q5：如何将译文和元素对应？\n* A5：对每一条文本，以唯一ID标识。凡是'data-i18n'属性的值为此ID的元素，即使用此ID对应文本。\n\n思路是不是清晰了很多呢？可以看到核心逻辑就是一个有访问函数的DFS或BFS算法。\n\n## 工欲善其事，必先利其器？\n\n近年的前端大发展，也催生了很多自动化工具。node的流行更是让很多软件管理和后端开发的思想能应用到前端开发上。\n\n经典的前端开发不外乎就是写HTML、写CSS、写Javascript，然而在前端代码量越来越大的现在，一个自动化的构建工具则能大大提高工作效率。\n\n如果Google一下前端构建工具，那么基本就是Grunt和Gulp。\n\n本质上，Grunt和Gulp都是任务运行器，尝试将前端的代码生成甚至发布统合到几个甚至一个命令行中。它们本身作为npm的一个模块，并没有什么作用，真正做事的是以其为平台的大量插件。通过将各种各样的插件整合起来，Grunt和Gulp就能实现自动化的任务执行。\n\n但是慢着，以前不是很流行什么网页三剑客的吗？甚至用DreamWrear就能做网页啊。任务运行器、插件什么的是个什么鬼？！\n\n是这样的，现在的前端开发，虽然最终结果还是写HTML、写CSS、写Javascript，但是过程却已经变化多端，内容也逐渐丰富。\n\nHTML的话：\n\n切图输出其实也已经算一种自动化。然而现在还能使用jade、HAML或者各种模板引擎生成，也就是有可能不是直接手写HTML代码了。这个就需要依赖编译了。\n\nCSS的话：\n\nSASS、LESS和Stylus都已经存在了很久了，源代码产出CSS也是需要编译的。CSS文件也能够进行合并和版本控制，如此一来又需要额外的工具。\n\nJavascript的话：\n\n本身就是一个编程语言，有工具能对其语法进行排错，不能不用吧？流行又高效的模块化开发，需要工具合并吧？压缩源代码，又需要操作了吧？注释呢？文档呢？统统需要工具啊。\n\n总结起来，HTML要编译，CSS要编译、合并、压缩和，Javascript要编译/合并、压缩甚至生成文档。最后发布还要顾及CDN或者缓存或者bug跟踪进行版本管理如果以上每一步都要自己操作，那么即使只是打命令行也是够呛。\n\n而使用上自动化构建，则在设定好以上多种工具的使用流程之后（几乎）一劳永逸，只需要专心写好流程最开始的源代码就OK，构建工具会完全自动地生成最终结果。能少干活就少干活，那个程序员愿意做重复性工作？\n\n这也就是为什么自动化构建工具在一日发展千里、需求一日多改的前端如此受欢迎的原因了。\n\n### Grunt VS Gulp\n\n是个程序员总会遇到圣战的时候，或是Emacas VS Vim，或是C# VS Java，或是Python VS Ruby，或是AngularJS VS ReactJS，或是IOS VS Android……\n\n<del>当然，PHP是最好的语言所以不用战争。</del>\n\n也有人只是选择困难症后期患者，一旦选项多于一就会头痛欲裂、浑身不自在。\n\n那么，究竟Grunt or Gulp？\n\n为此很多人写过分析的文章，有[中文的][1]、[英文的][2]和[另一篇英文的][3]，总的来说就是，\n\nGrunt：插件比较多，社区成熟，风格偏配置，插件比较混乱，代码较长，过程有临时目录\n\nGulp：插件不够Grunt多，风格偏代码，插件功能单一专注，代码较短，流式工作无需临时目录\n\n个人选择是Gulp，那个插件数量不够多是个伪缺点，只是不过Grunt多，其实也有上千个，还不够用？！从其他优点来看都是完胜Grunt了。\n\n[1]: http://www.w3ctech.com/topic/114 \"谈谈Grunt,NPM,Gulp\"\n\n[2]: http://www.hongkiat.com/blog/gulp-vs-grunt/ \"The Battle Of Build Scripts: Gulp Vs Grunt\"\n\n[3]: http://jaysoo.ca/2014/01/27/gruntjs-vs-gulpjs/ \"Grunt vs Gulp - Beyond the Numbers\"\n\n### 逆袭的npm\n\n那是不是选择Gulp来构建i18n.js呢？\n\n并不是。\n\n如果有仔细看给出的分析文章，可以看到还有一个构建工具：npm。\n\n众所周知npm实际上是nodejs的包管理工具，然而在其配置文件package.json里面却也可以设置一些可运行项，然后通过`npm run xxx`来运行。从文章来看，也是能够胜任构建的任务。\n\n那么问题来了，从网上基本千篇一律的教程来看，Grunt和Gulp的使用都是装上了自带npm的node，然后通过npm来安装的。既然npm本身就能作为构建工具，那为啥要用Grunt和Gulp？\n\n注意到那篇中文的分析文章还提到“npm一般用在个人项目里,对于团队项目则不适用”，然而果真如此吗？\n\n使用英文搜索一下，不难发现国外也有人提出[停止使用Grunt和Gulp的主张][4]，在文中列出类似或同类构建工具的问题：\n\n1. Bloat\n1. Relying on plugins\n1. Separate pain in updating\n1. False Promises\n1. Bad behaviours\n\n接着提出了使用npm的主张，并且[还给出了详细方法][5]，可以看到使用npm更易懂更简洁。\n\n我使用Grunt和Gulp的经验并不多（实际也不是什么复杂的东西），对于文中提出的第一个问题已经深有感触。明明只是简单的工作，却要写一大堆罗嗦的配置。另外Grunt/Gulp插件使用都是local安装，于是明明只是写几个KB大小的库，却要将项目的文件夹弄成几十MB大。插件作用都很专一，更新频率很低，全局安装就好，每开一个项目就独立往项目塞一样的工具简直是闲得蛋疼，尤其npm下载插件经常由于网络原因而失败。\n\n> 当然独立安装项目依赖也有其存在的意义。当将项目发布给其他人使用或者开发的时候，独立安装项目依赖可以保证环境是一样的。\n\n所以结论是，__不要为使用Grunt/Gulp而使用Grunt/Gulp，很多情况下并不需要将事情弄复杂。__\n\n[4]: http://blog.keithcirkel.co.uk/why-we-should-stop-using-grunt \"Why we should stop using Grunt & Gulp\"\n\n[5]: http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/ \"How to Use npm as a Build Tool\"\n\n### package.json\n\n参考国外配置npm的文章，写好package.json。\n\n```javascript\n{\n  \"name\": \"i18n.js\",\n  \"devDependencies\": {\n    \"concat-cli\": \"latest\",\n    \"jade\": \"latest\",\n    \"jshint\": \"latest\",\n    \"rimraf\": \"latest\",\n    \"nodemon\": \"latest\",\n    \"parallelshell\": \"latest\"\n  },\n  \"scripts\": {\n    \"clean:test\": \"rimraf test/*\",\n    \"clean:dist\": \"rimraf dist/*\",\n\n    \"lint\": \"jshint src/js/main.js\",\n\n    \"test:html\": \"jade -P src/test.jade --out test\",\n    \"watch:html\": \"jade -w -P src/test.jade --out test\",\n\n    \"prebuild:js\": \"npm run lint\",\n    \"build:js\": \"concat-cli -f src/js/wrap/prefix.js src/js/main.js src/js/wrap/suffix.js -o dist/i18n.js\",\n    \"postbuild:js\": \"uglifyjs dist/i18n.js -o dist/i18n.min.js -m -c\",\n\n    \"pretest:js\": \"npm run lint\",\n    \"test:js\": \"concat-cli -f src/js/wrap/prefix.js src/js/main.js src/js/wrap/suffix.js -o test/i18n.js\",\n    \"watch:js\": \"nodemon --watch src/js --exec \\\"npm run test:js\\\"\",\n\n    \"pretest\": \"npm run clean:test\",\n    \"test\": \"npm run test:js && test:html\",\n    \"test:watch\": \"parallelshell \\\"npm run watch:js\\\" \\\"npm run watch:html\\\"\",\n\n    \"prebuild\": \"npm run clean:dist\",\n    \"build\": \"npm run build:js\"\n  }\n}\n```\n\n清晰明了。\n\n测试环境清理：rimraf\n\nHTML构建：jade\n\nJavascript排错：jshint\n\nJavascript合并：concat-cli（多个文件复制合并）\n\n全部都是一句话配置，直指命令行。多个任务最终又可以汇集在`test`/`test:watch`中。\n\n> 使用concat-cli构建Javascript比较少见，更多的是使用browserify配合require语法。然而i18n.js库实在太小了，真的不需要复杂的模块化管理。\n\n## 编写i18n.js\n\n### 拆分\n\n先将原js文件拆分成三个。\n\n```javascript\n// prefix.js\n;(function( root, name, definition ) {\n    if ( typeof define === 'function' && define.amd ) {\n      define( [], definition );\n    } else if ( typeof module === 'object' && module.exports ) {\n      module.exports = definition();\n    } else {\n      root[name] = definition();\n    }\n})( this, 'i18n', function() {\n\n```\n\n```javascript\n// suffix.js\n\n// Return this library\nreturn i18n;\n\n});\n```\n\n```javascript\n// main.js\nvar i18n = {};\n\ni18n.bar = function () {\n    return;\n};\n```\n\n接下来可以专心在'main.js'中写代码了。\n\n> 在敲入代码之前记得使用`npm run watch:js`，不然配置毫无意义。\n\n### 内部变量\n\n```javascript\n// Save the global object, which is window in browser / global in Node.js.\nvar root = this;\n\n// This library and internal object\nvar i18n = {},\n    _ = {};\n\n// Current version.\ni18n.version = '0.0.1';\n\n// Internel store\nvar TRANSLATION_TABLE = {};\n\n// Current language\nvar CURRENT_LANGUAGE = '';\n\n// Save the previous value of the `i18n` variable, can be restored later\n// if 'noConflict' is called.\nvar previousi18n = root.i18n;\n```\n\n`TRANSLATION_TABLE`保存翻译文本，`CURRENT_LANGUAGE`保存当前使用的语言，`_`是内部使用的命名空间。另外使用`root`保存全局对象，`previousi18n`保存之前已存在的'i18n'对象。\n\n### 库函数（API）\n\n```javascript\n// Restore the previous value of 'i18n' and return our own i18n object.\ni18n.noConflict = function () {\n    root.i18n = previousi18n;\n    return i18n;\n};\n```\n\nnoConflict函数，学jQuery的。\n\n```javascript\n// Load the translation table\ni18n.load = function ( table ) {\n    TRANSLATION_TABLE = _.deepCopy( TRANSLATION_TABLE, table );\n    return i18n;\n};\n```\n\n载入翻译文本，使用深复制（应对多层对象）。\n\n```javascript\n// Return the current set language\ni18n.current = function () {\n    return CURRENT_LANGUAGE;\n};\n```\n\n返回当前使用的语言。\n\n```javascript\n// Change the language, apply to all cached nodes or document.body\ni18n.use = function ( language ) {\n    var langTable = TRANSLATION_TABLE[language],\n        nodes;\n\n    if ( langTable ) {\n        nodes = _.filterNodes( root.document.body );\n        _.translate( nodes, langTable );\n        CURRENT_LANGUAGE = language;\n    }\n\n    return i18n;\n};\n```\n\n切换语言。流程是匹配出语言配置，再从body开始抓取出需要翻译的DOM元素（\\_.filterNodes函数），然后翻译（\\_.translate函数），最后设置当前语言。\n\n### 内部函数\n\nAPI函数的内容写得简单，主要是需要基于不少的内部函数。\n\n首先是深复制。\n\n> Javascript中的赋值都是复制，因此对于基本类型（primitive value）：Undefined、Null、Boolean、Number、String来说，直接赋值就是复制。其他的复杂类型，直接赋值同样是复制——然而，复制的是引用，并不是引用的对象。\n\n```javascript\n// can handle array and nested objects, not perfect\n_.deepCopy = function ( des, src ) {\n    var beCopiedIsArray = false,\n        target,\n        name,\n        clone,\n        beCopied;\n\n    target = des;\n\n    for ( name in src ) {\n        beCopied = src[name];\n\n        if ( beCopied === src ) {\n            continue;\n        }\n\n        if ( _.isObject( beCopied ) || ( beCopiedIsArray = _.isArray( beCopied ) ) ) {\n\n            if ( beCopiedIsArray ) {\n                beCopiedIsArray = false;\n                clone = [];\n            } else {\n                clone = {};\n            }\n\n            target[name] = _.deepCopy( clone, beCopied );\n\n        } else if ( beCopied !== undefined ) {\n            target[name] = beCopied;\n        }\n\n    }\n\n    return target;\n};\n```\n\n改写自jQuery1.7内部实现的对象深复制函数，只保留了识别数组和对象的功能。因为译文文本就是JSON格式的普通对象（plain object），无需要实现太复杂的复制。核心代码的思想就是检测在当前对象的每一个属性（省略了hasOwnProperty的检测），如果是数组（\\_.isArray）或者普通对象（\\_.isObject），则实实在在创建一个数组 / 对象以供复制。\n\n而数组 / 对象检测则是用以下代码：\n\n```javascript\n// figure out array\n_.isArray = Array.isArray || function( obj ) {\n    return Object.prototype.toString.call( obj ) === '[object Array]';\n};\n\n// figure out object\n_.isObject = function( obj ) {\n    return Object.prototype.toString.call( obj ) === '[object Object]';\n};\n```\n\n而库的核心，一个带访问函数的DFS。DOM操作自带取子元素和兄弟元素，写起来很简单。\n\n```javascript\n// Walk the DOM, call the visit\n_.walkDOM = function ( dom, visit ) {\n    var node;\n\n    // nodeType === 1 means element\n    // nodeType === 11 means DocumentFragment\n    if ( dom && 1 === dom.nodeType || 11 === dom.nodeType ) {\n        visit( dom ); // 访问当前DOM元素\n\n        node = dom.firstChild; // 取当前DOM元素的第一个子元素\n        while ( node ) {\n            _.walkDOM( node, visit ); // 对此子元素递归调用\n            node = node.nextSibling; // 从此子元素返回，处理下一个兄弟元素\n        }\n    }\n};\n```\n\n通过查看元素的属性来筛选出将要翻译的元素。\n\n```javascript\n// Returns array of elements that have attribute 'data-i18n'\n_.filterNodes = function ( root ) {\n    var nodes = [];\n\n    // traverse DOM tree and collect elements with 'data-i18n' attribute\n    _.walkDOM( root, function ( ele ) {\n        if ( _.hasAttr( ele, 'data-i18n' ) ) {\n            nodes.push( ele );\n        }\n    });\n\n    return nodes;\n};\n```\n\n上一个函数中用到的'_.hasAttr'，特别实现是因为IE的取属性方式跟其他浏览器不一样。\n\n```javascript\n// Return true if ele has attribute otherwise false\n_.hasAttr = function ( ele, attr ) {\n    return ele.hasAttribute ? ele.hasAttribute( attr ) : ele[attr] !== undefined;\n};\n```\n\n接下来是改变元素的文本。代码很简单，做的事情就是遍历DOM元素数组，取属性'data-i18n'的值作为key值，在译文表格中查询value值（\\_.getTranslatedText），最后改变元素的文本（\\_.setText）。\n\n```javascript\n// Translate each node in array with given language table\n_.translate = function ( nodes, table ) {\n    var key, text, i, length;\n\n    for ( i = 0, length = nodes.length; i < length; i++ ) {\n        key = nodes[i].getAttribute( 'data-i18n' );\n\n        if ( key ) {\n            text = _.getTranslation( key, table );\n\n            if ( typeof text === 'string' ) {\n                _.setText( nodes[i], text );\n            }\n        }\n    }\n};\n```\n\n\\_.getTranslatedText 支持使用点记法，代码直接用以前写过的。[参考](http://blog.e10t.net/implements-list-and-flag-in-simpletemplatejs/)\n\n```javascript\n// get translation via path, support dot\n_.getTranslatedText = function ( path, json ) {\n    var fieldPath = path.split( '.' ),\n        data = json,\n        index,\n        indexLength;\n\n    for ( index = 0, indexLength = fieldPath.length; index < indexLength; index++ ) {\n        data = data[fieldPath[index]];\n        if ( !data ) {\n            return '';\n        }\n    }\n\n    return data;\n};\n```\n\n\\_.setText 函数就是用'innerText'或'textContent'来设置元素文本。\n\n```javascript\n// cross-browser set text\n_.setText = function ( ele, text ) {\n    var nodeType = ele.nodeType,\n        textAttr;\n\n    if ( nodeType && 1 === nodeType ) {\n        textAttr = ( 'innerText' in ele ) ? 'innerText' : 'textContent';\n        ele[textAttr] = text;\n    }\n};\n```\n\n### 测试\n\n看起来大概写完了，来写一些测试。\n\n> 实际上应该先写测试，再写代码。但是一来库很小，二来我不太懂，所以……不过之后写比较大型的库的时候要好好地用mocha等的测试框架。\n\n用jade语法写一个HTML文件。\n\n```markup\ndoctype html\nhtml\n  head\n    meta(charset=\"UTF-8\")\n    title test\n    script(src=\"i18n.js\")\n  body\n    select#language(name=\"language\",onchange=\"toggle()\")\n      option(value=\"en\") English\n      option(value=\"zh\") 中文\n      option(value=\"jp\") 日本語\n\n    h1(data-i18n=\"TITLE\") Title\n    p(data-i18n=\"p.text\") This is test text.\n    button(data-i18n=\"BUTTON_TEXT\") change\n    button(data-i18n=\"BUTTON_ADD\",onclick=\"add()\") add\n\n  script.\n    i18n.load({\n      'en': {\n        'TITLE': 'Title',\n        'BUTTON_TEXT': 'change',\n        'BUTTON_ADD': 'add',\n        'p': {\n          'text': 'This is test text.'\n        }\n      },\n      'zh': {\n        'TITLE': '标题',\n        'BUTTON_TEXT': '变',\n        'BUTTON_ADD': '添加',\n        'p': {\n          'text': '这是测试文本。'\n        }\n      },\n      'jp': {\n        'TITLE': 'タイトル',\n        'BUTTON_TEXT': '変更',\n        'BUTTON_ADD': '追加する',\n        'p': {\n          'text': 'これはテストテキストです'\n        }\n      }\n    });\n\n    function toggle () {\n      var ele = document.getElementById( 'language' ),\n        value = ele.value;\n\n      i18n.use( value );\n    }\n```\n\n控制台运行`npm run test:html`生成HTML文件，用浏览器打开，切换一下语言，没问题。\n\n## 继续开发\n\n应用i18n.js的多语言页面，是有可能动态添加DOM元素的（AJAX拉取数据之类的操作），所以i18n.js库也需要将添加的DOM元素翻译一下。于是再添加一个名为'translate'的API好了。\n\n> 由于需要同时修改jade文件和js文件，所以使用`npm run test:watch`，同时监视jade文件和js文件的变化。\n\n```javascript\n// Translate nodes\ni18n.translate = function ( eles ) {\n    var langTable, nodeList, i, index, nodes;\n\n    langTable = TRANSLATION_TABLE[CURRENT_LANGUAGE];\n\n    if ( langTable ) {\n        nodeList = Object.prototype.toString.call( eles ) === '[object NodeList]' ||\n            'length' in eles ?\n            eles :\n            [eles];\n\n        for ( i = 0, index = nodeList.length; i < index; i++ ) {\n            nodes = _.filterNodes( nodeList[i] );\n            _.translate( nodes, langTable );\n        }\n    }\n\n    return nodes;\n};\n```\n\n做的事其实和`use`大同小异，只是目标DOM元素不一样。\n\n修改一下测试文件，增加一点代码。\n\n在 body 中添加两个按钮。\n\n```markup\n    button(data-i18n=\"BUTTON_ADD_1\",onclick=\"add(1)\") add one\n    button(data-i18n=\"BUTTON_ADD_2\",onclick=\"add(2)\") add two\n```\n\n在数据中增加按钮的文本。\n\n```javascript\n'BUTTON_ADD_1': 'add one line',\n'BUTTON_ADD_2': 'add two line',\n/* ... */\n'BUTTON_ADD_1': '添加一行',\n'BUTTON_ADD_2': '添加两行',\n/* ... */\n'BUTTON_ADD_1': '1行を追加する',\n'BUTTON_ADD_2': '2行を追加する',\n```\n\n在脚本中增加一个函数，用作模拟动态添加DOM元素。可以添加一个或多个DOM元素。\n\n```javascript\nfunction add ( num ) {\n  var p = document.getElementsByTagName( 'p' )\n    , newP = document.createElement( 'div' )\n    , i\n    , node\n    , fragment;\n\n  fragment = document.createDocumentFragment();\n  newP.innerHTML = '<p data-i18n=\"p.text\">This is test text.</p>';\n\n  for ( i = 0; i < num; i++ ) {\n    node = newP.firstChild.cloneNode( true );\n    fragment.appendChild( node );\n  }\n  i18n.translate( fragment );\n\n  p = p[p.length-1];\n  p.parentNode.insertBefore( fragment, p.nextSibling );\n}\n```\n\n再使用浏览器测试一下，同样没问题了。\n\n### 再拆分一下\n\n现在`main.js`文件看起来比较复杂，可以再分别拆分成`var.js`，存放顶层变量；`util.js`，包含内部的函数；`api.js`，包含库的API。\n\n稍微修改一下`package.json`文件，相关位置改成拆分后的文件。\n\n```javascript\n    \"lint\": \"jshint src/js/var.js && jshint src/js/util.js && jshint src/js/api.js\",\n/* ... */\n    \"build:js\": \"concat-cli -f src/js/wrap/prefix.js src/js/var.js src/js/util.js src/js/api.js src/js/wrap/suffix.js -o dist/i18n.js\",\n/* ... */\n    \"test:js\": \"concat-cli -f src/js/wrap/prefix.js src/js/var.js src/js/util.js src/js/api.js src/js/wrap/suffix.js -o test/i18n.js\",\n```\n\n最后运行`npm run build`将js库编译出来并压缩。","source":"_posts/i18n-js库的编写兼使用npm辅助开发.md","raw":"---\ntitle: i18n.js库的编写兼使用npm辅助开发\ncategories:\n  - [技术, 前端]\n  - [编程语言, javascript]\ntags: [javascript, i18n]\npermalink: write-i18n-js-with-help-of-npm-as-build-tool\nid: 40\nupdated: '2015-04-25 14:00:30'\ndate: 2015-04-23 19:06:26\n---\n\n近来由于开发某页面需要支持多语言切换，遂写一个切换页面语言的JS库。\n\n## 编写库的既定事项\n\n写JS库也不是一两次了，当然只是小型或者微型的。不过思想和方法和大型库都是通用的。一般是直接在sublime text里打开一个JS文件，然后写下一个Self-Executing Anonymous Functions（自执行匿名函数？），接着在函数里面创造库的对象，最后将对象挂在`window`对象下。\n\nShow you the code的话就是以下所示：\n\n```javascript\n(function( window, undefined ){\n\nvar i18n = {};\n\ni18n.bar = function () {\n    return;\n};\n\nwindow.i18n = i18n;\n\n})( window );\n```\n\n学得这样的写法是来源于对jQuery源代码的阅读。\n\n通过将代码都包在一个匿名函数中，实现了一个闭包。如此一来在闭包内随便折腾，也不会污染到外部全局环境（当然是在编写可靠的代码的情况下）。\n\n不过，随着AMD和CommonJS标准的流行开来，越来越多JS库都将自己模块化。过程也不复杂，只要遵循一定的规则就可以了。\n\n而对于编写一个简单的JS库，将github上[UMD](https://github.com/umdjs/umd)项目给出的模板修改一下就OK。\n\n修改后代码：\n\n```javascript\n;(function( root, name, definition ) {\n    if ( typeof define === 'function' && define.amd ) {\n      define( [], definition );\n    } else if ( typeof module === 'object' && module.exports ) {\n      module.exports = definition();\n    } else {\n      root[name] = definition();\n    }\n})( this, 'i18n', function() {\n\nvar i18n = {};\n\ni18n.bar = function () {\n    return;\n};\n\n// Return this library\nreturn i18n;\n\n});\n```\n\n注意最后不再需要手动将库挂载在`window`对象下，而是只是返回对象。挂载方式已经转交给外部函数判断。\n\n## 思考多一点，代码少一点\n\n很久的以前，我曾经写过一个jQuery插件，功能是为表格添加分页和异步载入。然而在写之前并没有清晰地定下整个插件的功能和限制，导致最后写出来的插件身兼数职，连表格美化与自定义CSS等也做了进去。加进去的功能有可能只是随手实现的，也许并不适合此插件管辖，造成了“做得不好非要做”的尴尬。\n\n另外，功能的繁琐与代码段的反复抽象提取导致了代码的凌乱不堪，进而导致测试出bug的时候完全搞不清楚问题所在。\n\n最后代码膨胀到完全不能控制，自己写出来的代码连自己都不敢修改。\n\n> 在写jQuery插件的时候，十分容易变成了写“使用jQuery的代码集合”，缺少性能和架构的考虑。这跟jQuery本身十分强大和灵活的特性有很大的关系。\n\n写库或插件，目的应该是将通用或者复杂的逻辑实现封装起来，通过提供简洁的API来实现功能的调用。\n\n先将手从键盘上收回，拿出纸笔，好好列出对JS库的描述。\n\n* Q1：i18n.js要做什么？\n* A1：对页面上的文本进行语言切换。\n* Q2：如何定位文本？\n* A2：为DOM元素增加'data-i18n'属性进行标记。\n* Q3：如何找到标注DOM元素？\n* A3：从给出的DOM元素作为根进行深度优先/广度优先遍历。\n* Q4：译文的来源？\n* A4：用户遵循某一标准自定义每一套语言的字典。\n* Q5：如何将译文和元素对应？\n* A5：对每一条文本，以唯一ID标识。凡是'data-i18n'属性的值为此ID的元素，即使用此ID对应文本。\n\n思路是不是清晰了很多呢？可以看到核心逻辑就是一个有访问函数的DFS或BFS算法。\n\n## 工欲善其事，必先利其器？\n\n近年的前端大发展，也催生了很多自动化工具。node的流行更是让很多软件管理和后端开发的思想能应用到前端开发上。\n\n经典的前端开发不外乎就是写HTML、写CSS、写Javascript，然而在前端代码量越来越大的现在，一个自动化的构建工具则能大大提高工作效率。\n\n如果Google一下前端构建工具，那么基本就是Grunt和Gulp。\n\n本质上，Grunt和Gulp都是任务运行器，尝试将前端的代码生成甚至发布统合到几个甚至一个命令行中。它们本身作为npm的一个模块，并没有什么作用，真正做事的是以其为平台的大量插件。通过将各种各样的插件整合起来，Grunt和Gulp就能实现自动化的任务执行。\n\n但是慢着，以前不是很流行什么网页三剑客的吗？甚至用DreamWrear就能做网页啊。任务运行器、插件什么的是个什么鬼？！\n\n是这样的，现在的前端开发，虽然最终结果还是写HTML、写CSS、写Javascript，但是过程却已经变化多端，内容也逐渐丰富。\n\nHTML的话：\n\n切图输出其实也已经算一种自动化。然而现在还能使用jade、HAML或者各种模板引擎生成，也就是有可能不是直接手写HTML代码了。这个就需要依赖编译了。\n\nCSS的话：\n\nSASS、LESS和Stylus都已经存在了很久了，源代码产出CSS也是需要编译的。CSS文件也能够进行合并和版本控制，如此一来又需要额外的工具。\n\nJavascript的话：\n\n本身就是一个编程语言，有工具能对其语法进行排错，不能不用吧？流行又高效的模块化开发，需要工具合并吧？压缩源代码，又需要操作了吧？注释呢？文档呢？统统需要工具啊。\n\n总结起来，HTML要编译，CSS要编译、合并、压缩和，Javascript要编译/合并、压缩甚至生成文档。最后发布还要顾及CDN或者缓存或者bug跟踪进行版本管理如果以上每一步都要自己操作，那么即使只是打命令行也是够呛。\n\n而使用上自动化构建，则在设定好以上多种工具的使用流程之后（几乎）一劳永逸，只需要专心写好流程最开始的源代码就OK，构建工具会完全自动地生成最终结果。能少干活就少干活，那个程序员愿意做重复性工作？\n\n这也就是为什么自动化构建工具在一日发展千里、需求一日多改的前端如此受欢迎的原因了。\n\n### Grunt VS Gulp\n\n是个程序员总会遇到圣战的时候，或是Emacas VS Vim，或是C# VS Java，或是Python VS Ruby，或是AngularJS VS ReactJS，或是IOS VS Android……\n\n<del>当然，PHP是最好的语言所以不用战争。</del>\n\n也有人只是选择困难症后期患者，一旦选项多于一就会头痛欲裂、浑身不自在。\n\n那么，究竟Grunt or Gulp？\n\n为此很多人写过分析的文章，有[中文的][1]、[英文的][2]和[另一篇英文的][3]，总的来说就是，\n\nGrunt：插件比较多，社区成熟，风格偏配置，插件比较混乱，代码较长，过程有临时目录\n\nGulp：插件不够Grunt多，风格偏代码，插件功能单一专注，代码较短，流式工作无需临时目录\n\n个人选择是Gulp，那个插件数量不够多是个伪缺点，只是不过Grunt多，其实也有上千个，还不够用？！从其他优点来看都是完胜Grunt了。\n\n[1]: http://www.w3ctech.com/topic/114 \"谈谈Grunt,NPM,Gulp\"\n\n[2]: http://www.hongkiat.com/blog/gulp-vs-grunt/ \"The Battle Of Build Scripts: Gulp Vs Grunt\"\n\n[3]: http://jaysoo.ca/2014/01/27/gruntjs-vs-gulpjs/ \"Grunt vs Gulp - Beyond the Numbers\"\n\n### 逆袭的npm\n\n那是不是选择Gulp来构建i18n.js呢？\n\n并不是。\n\n如果有仔细看给出的分析文章，可以看到还有一个构建工具：npm。\n\n众所周知npm实际上是nodejs的包管理工具，然而在其配置文件package.json里面却也可以设置一些可运行项，然后通过`npm run xxx`来运行。从文章来看，也是能够胜任构建的任务。\n\n那么问题来了，从网上基本千篇一律的教程来看，Grunt和Gulp的使用都是装上了自带npm的node，然后通过npm来安装的。既然npm本身就能作为构建工具，那为啥要用Grunt和Gulp？\n\n注意到那篇中文的分析文章还提到“npm一般用在个人项目里,对于团队项目则不适用”，然而果真如此吗？\n\n使用英文搜索一下，不难发现国外也有人提出[停止使用Grunt和Gulp的主张][4]，在文中列出类似或同类构建工具的问题：\n\n1. Bloat\n1. Relying on plugins\n1. Separate pain in updating\n1. False Promises\n1. Bad behaviours\n\n接着提出了使用npm的主张，并且[还给出了详细方法][5]，可以看到使用npm更易懂更简洁。\n\n我使用Grunt和Gulp的经验并不多（实际也不是什么复杂的东西），对于文中提出的第一个问题已经深有感触。明明只是简单的工作，却要写一大堆罗嗦的配置。另外Grunt/Gulp插件使用都是local安装，于是明明只是写几个KB大小的库，却要将项目的文件夹弄成几十MB大。插件作用都很专一，更新频率很低，全局安装就好，每开一个项目就独立往项目塞一样的工具简直是闲得蛋疼，尤其npm下载插件经常由于网络原因而失败。\n\n> 当然独立安装项目依赖也有其存在的意义。当将项目发布给其他人使用或者开发的时候，独立安装项目依赖可以保证环境是一样的。\n\n所以结论是，__不要为使用Grunt/Gulp而使用Grunt/Gulp，很多情况下并不需要将事情弄复杂。__\n\n[4]: http://blog.keithcirkel.co.uk/why-we-should-stop-using-grunt \"Why we should stop using Grunt & Gulp\"\n\n[5]: http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/ \"How to Use npm as a Build Tool\"\n\n### package.json\n\n参考国外配置npm的文章，写好package.json。\n\n```javascript\n{\n  \"name\": \"i18n.js\",\n  \"devDependencies\": {\n    \"concat-cli\": \"latest\",\n    \"jade\": \"latest\",\n    \"jshint\": \"latest\",\n    \"rimraf\": \"latest\",\n    \"nodemon\": \"latest\",\n    \"parallelshell\": \"latest\"\n  },\n  \"scripts\": {\n    \"clean:test\": \"rimraf test/*\",\n    \"clean:dist\": \"rimraf dist/*\",\n\n    \"lint\": \"jshint src/js/main.js\",\n\n    \"test:html\": \"jade -P src/test.jade --out test\",\n    \"watch:html\": \"jade -w -P src/test.jade --out test\",\n\n    \"prebuild:js\": \"npm run lint\",\n    \"build:js\": \"concat-cli -f src/js/wrap/prefix.js src/js/main.js src/js/wrap/suffix.js -o dist/i18n.js\",\n    \"postbuild:js\": \"uglifyjs dist/i18n.js -o dist/i18n.min.js -m -c\",\n\n    \"pretest:js\": \"npm run lint\",\n    \"test:js\": \"concat-cli -f src/js/wrap/prefix.js src/js/main.js src/js/wrap/suffix.js -o test/i18n.js\",\n    \"watch:js\": \"nodemon --watch src/js --exec \\\"npm run test:js\\\"\",\n\n    \"pretest\": \"npm run clean:test\",\n    \"test\": \"npm run test:js && test:html\",\n    \"test:watch\": \"parallelshell \\\"npm run watch:js\\\" \\\"npm run watch:html\\\"\",\n\n    \"prebuild\": \"npm run clean:dist\",\n    \"build\": \"npm run build:js\"\n  }\n}\n```\n\n清晰明了。\n\n测试环境清理：rimraf\n\nHTML构建：jade\n\nJavascript排错：jshint\n\nJavascript合并：concat-cli（多个文件复制合并）\n\n全部都是一句话配置，直指命令行。多个任务最终又可以汇集在`test`/`test:watch`中。\n\n> 使用concat-cli构建Javascript比较少见，更多的是使用browserify配合require语法。然而i18n.js库实在太小了，真的不需要复杂的模块化管理。\n\n## 编写i18n.js\n\n### 拆分\n\n先将原js文件拆分成三个。\n\n```javascript\n// prefix.js\n;(function( root, name, definition ) {\n    if ( typeof define === 'function' && define.amd ) {\n      define( [], definition );\n    } else if ( typeof module === 'object' && module.exports ) {\n      module.exports = definition();\n    } else {\n      root[name] = definition();\n    }\n})( this, 'i18n', function() {\n\n```\n\n```javascript\n// suffix.js\n\n// Return this library\nreturn i18n;\n\n});\n```\n\n```javascript\n// main.js\nvar i18n = {};\n\ni18n.bar = function () {\n    return;\n};\n```\n\n接下来可以专心在'main.js'中写代码了。\n\n> 在敲入代码之前记得使用`npm run watch:js`，不然配置毫无意义。\n\n### 内部变量\n\n```javascript\n// Save the global object, which is window in browser / global in Node.js.\nvar root = this;\n\n// This library and internal object\nvar i18n = {},\n    _ = {};\n\n// Current version.\ni18n.version = '0.0.1';\n\n// Internel store\nvar TRANSLATION_TABLE = {};\n\n// Current language\nvar CURRENT_LANGUAGE = '';\n\n// Save the previous value of the `i18n` variable, can be restored later\n// if 'noConflict' is called.\nvar previousi18n = root.i18n;\n```\n\n`TRANSLATION_TABLE`保存翻译文本，`CURRENT_LANGUAGE`保存当前使用的语言，`_`是内部使用的命名空间。另外使用`root`保存全局对象，`previousi18n`保存之前已存在的'i18n'对象。\n\n### 库函数（API）\n\n```javascript\n// Restore the previous value of 'i18n' and return our own i18n object.\ni18n.noConflict = function () {\n    root.i18n = previousi18n;\n    return i18n;\n};\n```\n\nnoConflict函数，学jQuery的。\n\n```javascript\n// Load the translation table\ni18n.load = function ( table ) {\n    TRANSLATION_TABLE = _.deepCopy( TRANSLATION_TABLE, table );\n    return i18n;\n};\n```\n\n载入翻译文本，使用深复制（应对多层对象）。\n\n```javascript\n// Return the current set language\ni18n.current = function () {\n    return CURRENT_LANGUAGE;\n};\n```\n\n返回当前使用的语言。\n\n```javascript\n// Change the language, apply to all cached nodes or document.body\ni18n.use = function ( language ) {\n    var langTable = TRANSLATION_TABLE[language],\n        nodes;\n\n    if ( langTable ) {\n        nodes = _.filterNodes( root.document.body );\n        _.translate( nodes, langTable );\n        CURRENT_LANGUAGE = language;\n    }\n\n    return i18n;\n};\n```\n\n切换语言。流程是匹配出语言配置，再从body开始抓取出需要翻译的DOM元素（\\_.filterNodes函数），然后翻译（\\_.translate函数），最后设置当前语言。\n\n### 内部函数\n\nAPI函数的内容写得简单，主要是需要基于不少的内部函数。\n\n首先是深复制。\n\n> Javascript中的赋值都是复制，因此对于基本类型（primitive value）：Undefined、Null、Boolean、Number、String来说，直接赋值就是复制。其他的复杂类型，直接赋值同样是复制——然而，复制的是引用，并不是引用的对象。\n\n```javascript\n// can handle array and nested objects, not perfect\n_.deepCopy = function ( des, src ) {\n    var beCopiedIsArray = false,\n        target,\n        name,\n        clone,\n        beCopied;\n\n    target = des;\n\n    for ( name in src ) {\n        beCopied = src[name];\n\n        if ( beCopied === src ) {\n            continue;\n        }\n\n        if ( _.isObject( beCopied ) || ( beCopiedIsArray = _.isArray( beCopied ) ) ) {\n\n            if ( beCopiedIsArray ) {\n                beCopiedIsArray = false;\n                clone = [];\n            } else {\n                clone = {};\n            }\n\n            target[name] = _.deepCopy( clone, beCopied );\n\n        } else if ( beCopied !== undefined ) {\n            target[name] = beCopied;\n        }\n\n    }\n\n    return target;\n};\n```\n\n改写自jQuery1.7内部实现的对象深复制函数，只保留了识别数组和对象的功能。因为译文文本就是JSON格式的普通对象（plain object），无需要实现太复杂的复制。核心代码的思想就是检测在当前对象的每一个属性（省略了hasOwnProperty的检测），如果是数组（\\_.isArray）或者普通对象（\\_.isObject），则实实在在创建一个数组 / 对象以供复制。\n\n而数组 / 对象检测则是用以下代码：\n\n```javascript\n// figure out array\n_.isArray = Array.isArray || function( obj ) {\n    return Object.prototype.toString.call( obj ) === '[object Array]';\n};\n\n// figure out object\n_.isObject = function( obj ) {\n    return Object.prototype.toString.call( obj ) === '[object Object]';\n};\n```\n\n而库的核心，一个带访问函数的DFS。DOM操作自带取子元素和兄弟元素，写起来很简单。\n\n```javascript\n// Walk the DOM, call the visit\n_.walkDOM = function ( dom, visit ) {\n    var node;\n\n    // nodeType === 1 means element\n    // nodeType === 11 means DocumentFragment\n    if ( dom && 1 === dom.nodeType || 11 === dom.nodeType ) {\n        visit( dom ); // 访问当前DOM元素\n\n        node = dom.firstChild; // 取当前DOM元素的第一个子元素\n        while ( node ) {\n            _.walkDOM( node, visit ); // 对此子元素递归调用\n            node = node.nextSibling; // 从此子元素返回，处理下一个兄弟元素\n        }\n    }\n};\n```\n\n通过查看元素的属性来筛选出将要翻译的元素。\n\n```javascript\n// Returns array of elements that have attribute 'data-i18n'\n_.filterNodes = function ( root ) {\n    var nodes = [];\n\n    // traverse DOM tree and collect elements with 'data-i18n' attribute\n    _.walkDOM( root, function ( ele ) {\n        if ( _.hasAttr( ele, 'data-i18n' ) ) {\n            nodes.push( ele );\n        }\n    });\n\n    return nodes;\n};\n```\n\n上一个函数中用到的'_.hasAttr'，特别实现是因为IE的取属性方式跟其他浏览器不一样。\n\n```javascript\n// Return true if ele has attribute otherwise false\n_.hasAttr = function ( ele, attr ) {\n    return ele.hasAttribute ? ele.hasAttribute( attr ) : ele[attr] !== undefined;\n};\n```\n\n接下来是改变元素的文本。代码很简单，做的事情就是遍历DOM元素数组，取属性'data-i18n'的值作为key值，在译文表格中查询value值（\\_.getTranslatedText），最后改变元素的文本（\\_.setText）。\n\n```javascript\n// Translate each node in array with given language table\n_.translate = function ( nodes, table ) {\n    var key, text, i, length;\n\n    for ( i = 0, length = nodes.length; i < length; i++ ) {\n        key = nodes[i].getAttribute( 'data-i18n' );\n\n        if ( key ) {\n            text = _.getTranslation( key, table );\n\n            if ( typeof text === 'string' ) {\n                _.setText( nodes[i], text );\n            }\n        }\n    }\n};\n```\n\n\\_.getTranslatedText 支持使用点记法，代码直接用以前写过的。[参考](http://blog.e10t.net/implements-list-and-flag-in-simpletemplatejs/)\n\n```javascript\n// get translation via path, support dot\n_.getTranslatedText = function ( path, json ) {\n    var fieldPath = path.split( '.' ),\n        data = json,\n        index,\n        indexLength;\n\n    for ( index = 0, indexLength = fieldPath.length; index < indexLength; index++ ) {\n        data = data[fieldPath[index]];\n        if ( !data ) {\n            return '';\n        }\n    }\n\n    return data;\n};\n```\n\n\\_.setText 函数就是用'innerText'或'textContent'来设置元素文本。\n\n```javascript\n// cross-browser set text\n_.setText = function ( ele, text ) {\n    var nodeType = ele.nodeType,\n        textAttr;\n\n    if ( nodeType && 1 === nodeType ) {\n        textAttr = ( 'innerText' in ele ) ? 'innerText' : 'textContent';\n        ele[textAttr] = text;\n    }\n};\n```\n\n### 测试\n\n看起来大概写完了，来写一些测试。\n\n> 实际上应该先写测试，再写代码。但是一来库很小，二来我不太懂，所以……不过之后写比较大型的库的时候要好好地用mocha等的测试框架。\n\n用jade语法写一个HTML文件。\n\n```markup\ndoctype html\nhtml\n  head\n    meta(charset=\"UTF-8\")\n    title test\n    script(src=\"i18n.js\")\n  body\n    select#language(name=\"language\",onchange=\"toggle()\")\n      option(value=\"en\") English\n      option(value=\"zh\") 中文\n      option(value=\"jp\") 日本語\n\n    h1(data-i18n=\"TITLE\") Title\n    p(data-i18n=\"p.text\") This is test text.\n    button(data-i18n=\"BUTTON_TEXT\") change\n    button(data-i18n=\"BUTTON_ADD\",onclick=\"add()\") add\n\n  script.\n    i18n.load({\n      'en': {\n        'TITLE': 'Title',\n        'BUTTON_TEXT': 'change',\n        'BUTTON_ADD': 'add',\n        'p': {\n          'text': 'This is test text.'\n        }\n      },\n      'zh': {\n        'TITLE': '标题',\n        'BUTTON_TEXT': '变',\n        'BUTTON_ADD': '添加',\n        'p': {\n          'text': '这是测试文本。'\n        }\n      },\n      'jp': {\n        'TITLE': 'タイトル',\n        'BUTTON_TEXT': '変更',\n        'BUTTON_ADD': '追加する',\n        'p': {\n          'text': 'これはテストテキストです'\n        }\n      }\n    });\n\n    function toggle () {\n      var ele = document.getElementById( 'language' ),\n        value = ele.value;\n\n      i18n.use( value );\n    }\n```\n\n控制台运行`npm run test:html`生成HTML文件，用浏览器打开，切换一下语言，没问题。\n\n## 继续开发\n\n应用i18n.js的多语言页面，是有可能动态添加DOM元素的（AJAX拉取数据之类的操作），所以i18n.js库也需要将添加的DOM元素翻译一下。于是再添加一个名为'translate'的API好了。\n\n> 由于需要同时修改jade文件和js文件，所以使用`npm run test:watch`，同时监视jade文件和js文件的变化。\n\n```javascript\n// Translate nodes\ni18n.translate = function ( eles ) {\n    var langTable, nodeList, i, index, nodes;\n\n    langTable = TRANSLATION_TABLE[CURRENT_LANGUAGE];\n\n    if ( langTable ) {\n        nodeList = Object.prototype.toString.call( eles ) === '[object NodeList]' ||\n            'length' in eles ?\n            eles :\n            [eles];\n\n        for ( i = 0, index = nodeList.length; i < index; i++ ) {\n            nodes = _.filterNodes( nodeList[i] );\n            _.translate( nodes, langTable );\n        }\n    }\n\n    return nodes;\n};\n```\n\n做的事其实和`use`大同小异，只是目标DOM元素不一样。\n\n修改一下测试文件，增加一点代码。\n\n在 body 中添加两个按钮。\n\n```markup\n    button(data-i18n=\"BUTTON_ADD_1\",onclick=\"add(1)\") add one\n    button(data-i18n=\"BUTTON_ADD_2\",onclick=\"add(2)\") add two\n```\n\n在数据中增加按钮的文本。\n\n```javascript\n'BUTTON_ADD_1': 'add one line',\n'BUTTON_ADD_2': 'add two line',\n/* ... */\n'BUTTON_ADD_1': '添加一行',\n'BUTTON_ADD_2': '添加两行',\n/* ... */\n'BUTTON_ADD_1': '1行を追加する',\n'BUTTON_ADD_2': '2行を追加する',\n```\n\n在脚本中增加一个函数，用作模拟动态添加DOM元素。可以添加一个或多个DOM元素。\n\n```javascript\nfunction add ( num ) {\n  var p = document.getElementsByTagName( 'p' )\n    , newP = document.createElement( 'div' )\n    , i\n    , node\n    , fragment;\n\n  fragment = document.createDocumentFragment();\n  newP.innerHTML = '<p data-i18n=\"p.text\">This is test text.</p>';\n\n  for ( i = 0; i < num; i++ ) {\n    node = newP.firstChild.cloneNode( true );\n    fragment.appendChild( node );\n  }\n  i18n.translate( fragment );\n\n  p = p[p.length-1];\n  p.parentNode.insertBefore( fragment, p.nextSibling );\n}\n```\n\n再使用浏览器测试一下，同样没问题了。\n\n### 再拆分一下\n\n现在`main.js`文件看起来比较复杂，可以再分别拆分成`var.js`，存放顶层变量；`util.js`，包含内部的函数；`api.js`，包含库的API。\n\n稍微修改一下`package.json`文件，相关位置改成拆分后的文件。\n\n```javascript\n    \"lint\": \"jshint src/js/var.js && jshint src/js/util.js && jshint src/js/api.js\",\n/* ... */\n    \"build:js\": \"concat-cli -f src/js/wrap/prefix.js src/js/var.js src/js/util.js src/js/api.js src/js/wrap/suffix.js -o dist/i18n.js\",\n/* ... */\n    \"test:js\": \"concat-cli -f src/js/wrap/prefix.js src/js/var.js src/js/util.js src/js/api.js src/js/wrap/suffix.js -o test/i18n.js\",\n```\n\n最后运行`npm run build`将js库编译出来并压缩。","slug":"write-i18n-js-with-help-of-npm-as-build-tool","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyutl007on7t4lgd4tfth","content":"<p>近来由于开发某页面需要支持多语言切换，遂写一个切换页面语言的JS库。</p>\n<h2 id=\"编写库的既定事项\"><a href=\"#编写库的既定事项\" class=\"headerlink\" title=\"编写库的既定事项\"></a>编写库的既定事项</h2><p>写JS库也不是一两次了，当然只是小型或者微型的。不过思想和方法和大型库都是通用的。一般是直接在sublime text里打开一个JS文件，然后写下一个Self-Executing Anonymous Functions（自执行匿名函数？），接着在函数里面创造库的对象，最后将对象挂在<code>window</code>对象下。</p>\n<p>Show you the code的话就是以下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> window, undefined </span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i18n = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">i18n.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.i18n = i18n;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)( <span class=\"built_in\">window</span> );</span><br></pre></td></tr></table></figure>\n<p>学得这样的写法是来源于对jQuery源代码的阅读。</p>\n<p>通过将代码都包在一个匿名函数中，实现了一个闭包。如此一来在闭包内随便折腾，也不会污染到外部全局环境（当然是在编写可靠的代码的情况下）。</p>\n<p>不过，随着AMD和CommonJS标准的流行开来，越来越多JS库都将自己模块化。过程也不复杂，只要遵循一定的规则就可以了。</p>\n<p>而对于编写一个简单的JS库，将github上<a href=\"https://github.com/umdjs/umd\" target=\"_blank\" rel=\"noopener\">UMD</a>项目给出的模板修改一下就OK。</p>\n<p>修改后代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> root, name, definition </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd ) &#123;</span><br><span class=\"line\">      define( [], definition );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"built_in\">module</span>.exports ) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">module</span>.exports = definition();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      root[name] = definition();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)( <span class=\"keyword\">this</span>, <span class=\"string\">'i18n'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i18n = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">i18n.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Return this library</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> i18n;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>注意最后不再需要手动将库挂载在<code>window</code>对象下，而是只是返回对象。挂载方式已经转交给外部函数判断。</p>\n<h2 id=\"思考多一点，代码少一点\"><a href=\"#思考多一点，代码少一点\" class=\"headerlink\" title=\"思考多一点，代码少一点\"></a>思考多一点，代码少一点</h2><p>很久的以前，我曾经写过一个jQuery插件，功能是为表格添加分页和异步载入。然而在写之前并没有清晰地定下整个插件的功能和限制，导致最后写出来的插件身兼数职，连表格美化与自定义CSS等也做了进去。加进去的功能有可能只是随手实现的，也许并不适合此插件管辖，造成了“做得不好非要做”的尴尬。</p>\n<p>另外，功能的繁琐与代码段的反复抽象提取导致了代码的凌乱不堪，进而导致测试出bug的时候完全搞不清楚问题所在。</p>\n<p>最后代码膨胀到完全不能控制，自己写出来的代码连自己都不敢修改。</p>\n<blockquote>\n<p>在写jQuery插件的时候，十分容易变成了写“使用jQuery的代码集合”，缺少性能和架构的考虑。这跟jQuery本身十分强大和灵活的特性有很大的关系。</p>\n</blockquote>\n<p>写库或插件，目的应该是将通用或者复杂的逻辑实现封装起来，通过提供简洁的API来实现功能的调用。</p>\n<p>先将手从键盘上收回，拿出纸笔，好好列出对JS库的描述。</p>\n<ul>\n<li>Q1：i18n.js要做什么？</li>\n<li>A1：对页面上的文本进行语言切换。</li>\n<li>Q2：如何定位文本？</li>\n<li>A2：为DOM元素增加’data-i18n’属性进行标记。</li>\n<li>Q3：如何找到标注DOM元素？</li>\n<li>A3：从给出的DOM元素作为根进行深度优先/广度优先遍历。</li>\n<li>Q4：译文的来源？</li>\n<li>A4：用户遵循某一标准自定义每一套语言的字典。</li>\n<li>Q5：如何将译文和元素对应？</li>\n<li>A5：对每一条文本，以唯一ID标识。凡是’data-i18n’属性的值为此ID的元素，即使用此ID对应文本。</li>\n</ul>\n<p>思路是不是清晰了很多呢？可以看到核心逻辑就是一个有访问函数的DFS或BFS算法。</p>\n<h2 id=\"工欲善其事，必先利其器？\"><a href=\"#工欲善其事，必先利其器？\" class=\"headerlink\" title=\"工欲善其事，必先利其器？\"></a>工欲善其事，必先利其器？</h2><p>近年的前端大发展，也催生了很多自动化工具。node的流行更是让很多软件管理和后端开发的思想能应用到前端开发上。</p>\n<p>经典的前端开发不外乎就是写HTML、写CSS、写Javascript，然而在前端代码量越来越大的现在，一个自动化的构建工具则能大大提高工作效率。</p>\n<p>如果Google一下前端构建工具，那么基本就是Grunt和Gulp。</p>\n<p>本质上，Grunt和Gulp都是任务运行器，尝试将前端的代码生成甚至发布统合到几个甚至一个命令行中。它们本身作为npm的一个模块，并没有什么作用，真正做事的是以其为平台的大量插件。通过将各种各样的插件整合起来，Grunt和Gulp就能实现自动化的任务执行。</p>\n<p>但是慢着，以前不是很流行什么网页三剑客的吗？甚至用DreamWrear就能做网页啊。任务运行器、插件什么的是个什么鬼？！</p>\n<p>是这样的，现在的前端开发，虽然最终结果还是写HTML、写CSS、写Javascript，但是过程却已经变化多端，内容也逐渐丰富。</p>\n<p>HTML的话：</p>\n<p>切图输出其实也已经算一种自动化。然而现在还能使用jade、HAML或者各种模板引擎生成，也就是有可能不是直接手写HTML代码了。这个就需要依赖编译了。</p>\n<p>CSS的话：</p>\n<p>SASS、LESS和Stylus都已经存在了很久了，源代码产出CSS也是需要编译的。CSS文件也能够进行合并和版本控制，如此一来又需要额外的工具。</p>\n<p>Javascript的话：</p>\n<p>本身就是一个编程语言，有工具能对其语法进行排错，不能不用吧？流行又高效的模块化开发，需要工具合并吧？压缩源代码，又需要操作了吧？注释呢？文档呢？统统需要工具啊。</p>\n<p>总结起来，HTML要编译，CSS要编译、合并、压缩和，Javascript要编译/合并、压缩甚至生成文档。最后发布还要顾及CDN或者缓存或者bug跟踪进行版本管理如果以上每一步都要自己操作，那么即使只是打命令行也是够呛。</p>\n<p>而使用上自动化构建，则在设定好以上多种工具的使用流程之后（几乎）一劳永逸，只需要专心写好流程最开始的源代码就OK，构建工具会完全自动地生成最终结果。能少干活就少干活，那个程序员愿意做重复性工作？</p>\n<p>这也就是为什么自动化构建工具在一日发展千里、需求一日多改的前端如此受欢迎的原因了。</p>\n<h3 id=\"Grunt-VS-Gulp\"><a href=\"#Grunt-VS-Gulp\" class=\"headerlink\" title=\"Grunt VS Gulp\"></a>Grunt VS Gulp</h3><p>是个程序员总会遇到圣战的时候，或是Emacas VS Vim，或是C# VS Java，或是Python VS Ruby，或是AngularJS VS ReactJS，或是IOS VS Android……</p>\n<p><del>当然，PHP是最好的语言所以不用战争。</del></p>\n<p>也有人只是选择困难症后期患者，一旦选项多于一就会头痛欲裂、浑身不自在。</p>\n<p>那么，究竟Grunt or Gulp？</p>\n<p>为此很多人写过分析的文章，有<a href=\"http://www.w3ctech.com/topic/114\" title=\"谈谈Grunt,NPM,Gulp\" target=\"_blank\" rel=\"noopener\">中文的</a>、<a href=\"http://www.hongkiat.com/blog/gulp-vs-grunt/\" title=\"The Battle Of Build Scripts: Gulp Vs Grunt\" target=\"_blank\" rel=\"noopener\">英文的</a>和<a href=\"http://jaysoo.ca/2014/01/27/gruntjs-vs-gulpjs/\" title=\"Grunt vs Gulp - Beyond the Numbers\" target=\"_blank\" rel=\"noopener\">另一篇英文的</a>，总的来说就是，</p>\n<p>Grunt：插件比较多，社区成熟，风格偏配置，插件比较混乱，代码较长，过程有临时目录</p>\n<p>Gulp：插件不够Grunt多，风格偏代码，插件功能单一专注，代码较短，流式工作无需临时目录</p>\n<p>个人选择是Gulp，那个插件数量不够多是个伪缺点，只是不过Grunt多，其实也有上千个，还不够用？！从其他优点来看都是完胜Grunt了。</p>\n<h3 id=\"逆袭的npm\"><a href=\"#逆袭的npm\" class=\"headerlink\" title=\"逆袭的npm\"></a>逆袭的npm</h3><p>那是不是选择Gulp来构建i18n.js呢？</p>\n<p>并不是。</p>\n<p>如果有仔细看给出的分析文章，可以看到还有一个构建工具：npm。</p>\n<p>众所周知npm实际上是nodejs的包管理工具，然而在其配置文件package.json里面却也可以设置一些可运行项，然后通过<code>npm run xxx</code>来运行。从文章来看，也是能够胜任构建的任务。</p>\n<p>那么问题来了，从网上基本千篇一律的教程来看，Grunt和Gulp的使用都是装上了自带npm的node，然后通过npm来安装的。既然npm本身就能作为构建工具，那为啥要用Grunt和Gulp？</p>\n<p>注意到那篇中文的分析文章还提到“npm一般用在个人项目里,对于团队项目则不适用”，然而果真如此吗？</p>\n<p>使用英文搜索一下，不难发现国外也有人提出<a href=\"http://blog.keithcirkel.co.uk/why-we-should-stop-using-grunt\" title=\"Why we should stop using Grunt &amp; Gulp\" target=\"_blank\" rel=\"noopener\">停止使用Grunt和Gulp的主张</a>，在文中列出类似或同类构建工具的问题：</p>\n<ol>\n<li>Bloat</li>\n<li>Relying on plugins</li>\n<li>Separate pain in updating</li>\n<li>False Promises</li>\n<li>Bad behaviours</li>\n</ol>\n<p>接着提出了使用npm的主张，并且<a href=\"http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/\" title=\"How to Use npm as a Build Tool\" target=\"_blank\" rel=\"noopener\">还给出了详细方法</a>，可以看到使用npm更易懂更简洁。</p>\n<p>我使用Grunt和Gulp的经验并不多（实际也不是什么复杂的东西），对于文中提出的第一个问题已经深有感触。明明只是简单的工作，却要写一大堆罗嗦的配置。另外Grunt/Gulp插件使用都是local安装，于是明明只是写几个KB大小的库，却要将项目的文件夹弄成几十MB大。插件作用都很专一，更新频率很低，全局安装就好，每开一个项目就独立往项目塞一样的工具简直是闲得蛋疼，尤其npm下载插件经常由于网络原因而失败。</p>\n<blockquote>\n<p>当然独立安装项目依赖也有其存在的意义。当将项目发布给其他人使用或者开发的时候，独立安装项目依赖可以保证环境是一样的。</p>\n</blockquote>\n<p>所以结论是，<strong>不要为使用Grunt/Gulp而使用Grunt/Gulp，很多情况下并不需要将事情弄复杂。</strong></p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><p>参考国外配置npm的文章，写好package.json。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"i18n.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"concat-cli\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"jade\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"jshint\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"rimraf\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"nodemon\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"parallelshell\"</span>: <span class=\"string\">\"latest\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"clean:test\"</span>: <span class=\"string\">\"rimraf test/*\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"clean:dist\"</span>: <span class=\"string\">\"rimraf dist/*\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"jshint src/js/main.js\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"test:html\"</span>: <span class=\"string\">\"jade -P src/test.jade --out test\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"watch:html\"</span>: <span class=\"string\">\"jade -w -P src/test.jade --out test\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"prebuild:js\"</span>: <span class=\"string\">\"npm run lint\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build:js\"</span>: <span class=\"string\">\"concat-cli -f src/js/wrap/prefix.js src/js/main.js src/js/wrap/suffix.js -o dist/i18n.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"postbuild:js\"</span>: <span class=\"string\">\"uglifyjs dist/i18n.js -o dist/i18n.min.js -m -c\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"pretest:js\"</span>: <span class=\"string\">\"npm run lint\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test:js\"</span>: <span class=\"string\">\"concat-cli -f src/js/wrap/prefix.js src/js/main.js src/js/wrap/suffix.js -o test/i18n.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"watch:js\"</span>: <span class=\"string\">\"nodemon --watch src/js --exec \\\"npm run test:js\\\"\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"pretest\"</span>: <span class=\"string\">\"npm run clean:test\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"npm run test:js &amp;&amp; test:html\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test:watch\"</span>: <span class=\"string\">\"parallelshell \\\"npm run watch:js\\\" \\\"npm run watch:html\\\"\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"prebuild\"</span>: <span class=\"string\">\"npm run clean:dist\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"npm run build:js\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>清晰明了。</p>\n<p>测试环境清理：rimraf</p>\n<p>HTML构建：jade</p>\n<p>Javascript排错：jshint</p>\n<p>Javascript合并：concat-cli（多个文件复制合并）</p>\n<p>全部都是一句话配置，直指命令行。多个任务最终又可以汇集在<code>test</code>/<code>test:watch</code>中。</p>\n<blockquote>\n<p>使用concat-cli构建Javascript比较少见，更多的是使用browserify配合require语法。然而i18n.js库实在太小了，真的不需要复杂的模块化管理。</p>\n</blockquote>\n<h2 id=\"编写i18n-js\"><a href=\"#编写i18n-js\" class=\"headerlink\" title=\"编写i18n.js\"></a>编写i18n.js</h2><h3 id=\"拆分\"><a href=\"#拆分\" class=\"headerlink\" title=\"拆分\"></a>拆分</h3><p>先将原js文件拆分成三个。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// prefix.js</span></span><br><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> root, name, definition </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd ) &#123;</span><br><span class=\"line\">      define( [], definition );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"built_in\">module</span>.exports ) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">module</span>.exports = definition();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      root[name] = definition();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)( <span class=\"keyword\">this</span>, <span class=\"string\">'i18n'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// suffix.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Return this library</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> i18n;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i18n = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">i18n.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>接下来可以专心在’main.js’中写代码了。</p>\n<blockquote>\n<p>在敲入代码之前记得使用<code>npm run watch:js</code>，不然配置毫无意义。</p>\n</blockquote>\n<h3 id=\"内部变量\"><a href=\"#内部变量\" class=\"headerlink\" title=\"内部变量\"></a>内部变量</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Save the global object, which is window in browser / global in Node.js.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This library and internal object</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i18n = &#123;&#125;,</span><br><span class=\"line\">    _ = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Current version.</span></span><br><span class=\"line\">i18n.version = <span class=\"string\">'0.0.1'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Internel store</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> TRANSLATION_TABLE = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Current language</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> CURRENT_LANGUAGE = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Save the previous value of the `i18n` variable, can be restored later</span></span><br><span class=\"line\"><span class=\"comment\">// if 'noConflict' is called.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> previousi18n = root.i18n;</span><br></pre></td></tr></table></figure>\n<p><code>TRANSLATION_TABLE</code>保存翻译文本，<code>CURRENT_LANGUAGE</code>保存当前使用的语言，<code>_</code>是内部使用的命名空间。另外使用<code>root</code>保存全局对象，<code>previousi18n</code>保存之前已存在的’i18n’对象。</p>\n<h3 id=\"库函数（API）\"><a href=\"#库函数（API）\" class=\"headerlink\" title=\"库函数（API）\"></a>库函数（API）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Restore the previous value of 'i18n' and return our own i18n object.</span></span><br><span class=\"line\">i18n.noConflict = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    root.i18n = previousi18n;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i18n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>noConflict函数，学jQuery的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Load the translation table</span></span><br><span class=\"line\">i18n.load = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> table </span>) </span>&#123;</span><br><span class=\"line\">    TRANSLATION_TABLE = _.deepCopy( TRANSLATION_TABLE, table );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i18n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>载入翻译文本，使用深复制（应对多层对象）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Return the current set language</span></span><br><span class=\"line\">i18n.current = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> CURRENT_LANGUAGE;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>返回当前使用的语言。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Change the language, apply to all cached nodes or document.body</span></span><br><span class=\"line\">i18n.use = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> language </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> langTable = TRANSLATION_TABLE[language],</span><br><span class=\"line\">        nodes;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( langTable ) &#123;</span><br><span class=\"line\">        nodes = _.filterNodes( root.document.body );</span><br><span class=\"line\">        _.translate( nodes, langTable );</span><br><span class=\"line\">        CURRENT_LANGUAGE = language;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i18n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>切换语言。流程是匹配出语言配置，再从body开始抓取出需要翻译的DOM元素（_.filterNodes函数），然后翻译（_.translate函数），最后设置当前语言。</p>\n<h3 id=\"内部函数\"><a href=\"#内部函数\" class=\"headerlink\" title=\"内部函数\"></a>内部函数</h3><p>API函数的内容写得简单，主要是需要基于不少的内部函数。</p>\n<p>首先是深复制。</p>\n<blockquote>\n<p>Javascript中的赋值都是复制，因此对于基本类型（primitive value）：Undefined、Null、Boolean、Number、String来说，直接赋值就是复制。其他的复杂类型，直接赋值同样是复制——然而，复制的是引用，并不是引用的对象。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// can handle array and nested objects, not perfect</span></span><br><span class=\"line\">_.deepCopy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> des, src </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> beCopiedIsArray = <span class=\"literal\">false</span>,</span><br><span class=\"line\">        target,</span><br><span class=\"line\">        name,</span><br><span class=\"line\">        clone,</span><br><span class=\"line\">        beCopied;</span><br><span class=\"line\"></span><br><span class=\"line\">    target = des;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( name <span class=\"keyword\">in</span> src ) &#123;</span><br><span class=\"line\">        beCopied = src[name];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( beCopied === src ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( _.isObject( beCopied ) || ( beCopiedIsArray = _.isArray( beCopied ) ) ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( beCopiedIsArray ) &#123;</span><br><span class=\"line\">                beCopiedIsArray = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                clone = [];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                clone = &#123;&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            target[name] = _.deepCopy( clone, beCopied );</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( beCopied !== <span class=\"literal\">undefined</span> ) &#123;</span><br><span class=\"line\">            target[name] = beCopied;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>改写自jQuery1.7内部实现的对象深复制函数，只保留了识别数组和对象的功能。因为译文文本就是JSON格式的普通对象（plain object），无需要实现太复杂的复制。核心代码的思想就是检测在当前对象的每一个属性（省略了hasOwnProperty的检测），如果是数组（_.isArray）或者普通对象（_.isObject），则实实在在创建一个数组 / 对象以供复制。</p>\n<p>而数组 / 对象检测则是用以下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// figure out array</span></span><br><span class=\"line\">_.isArray = <span class=\"built_in\">Array</span>.isArray || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call( obj ) === <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// figure out object</span></span><br><span class=\"line\">_.isObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call( obj ) === <span class=\"string\">'[object Object]'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>而库的核心，一个带访问函数的DFS。DOM操作自带取子元素和兄弟元素，写起来很简单。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Walk the DOM, call the visit</span></span><br><span class=\"line\">_.walkDOM = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> dom, visit </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// nodeType === 1 means element</span></span><br><span class=\"line\">    <span class=\"comment\">// nodeType === 11 means DocumentFragment</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( dom &amp;&amp; <span class=\"number\">1</span> === dom.nodeType || <span class=\"number\">11</span> === dom.nodeType ) &#123;</span><br><span class=\"line\">        visit( dom ); <span class=\"comment\">// 访问当前DOM元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">        node = dom.firstChild; <span class=\"comment\">// 取当前DOM元素的第一个子元素</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( node ) &#123;</span><br><span class=\"line\">            _.walkDOM( node, visit ); <span class=\"comment\">// 对此子元素递归调用</span></span><br><span class=\"line\">            node = node.nextSibling; <span class=\"comment\">// 从此子元素返回，处理下一个兄弟元素</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>通过查看元素的属性来筛选出将要翻译的元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Returns array of elements that have attribute 'data-i18n'</span></span><br><span class=\"line\">_.filterNodes = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> root </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nodes = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// traverse DOM tree and collect elements with 'data-i18n' attribute</span></span><br><span class=\"line\">    _.walkDOM( root, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> ele </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( _.hasAttr( ele, <span class=\"string\">'data-i18n'</span> ) ) &#123;</span><br><span class=\"line\">            nodes.push( ele );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nodes;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上一个函数中用到的’_.hasAttr’，特别实现是因为IE的取属性方式跟其他浏览器不一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Return true if ele has attribute otherwise false</span></span><br><span class=\"line\">_.hasAttr = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> ele, attr </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele.hasAttribute ? ele.hasAttribute( attr ) : ele[attr] !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>接下来是改变元素的文本。代码很简单，做的事情就是遍历DOM元素数组，取属性’data-i18n’的值作为key值，在译文表格中查询value值（_.getTranslatedText），最后改变元素的文本（_.setText）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Translate each node in array with given language table</span></span><br><span class=\"line\">_.translate = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> nodes, table </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key, text, i, length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>, length = nodes.length; i &lt; length; i++ ) &#123;</span><br><span class=\"line\">        key = nodes[i].getAttribute( <span class=\"string\">'data-i18n'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( key ) &#123;</span><br><span class=\"line\">            text = _.getTranslation( key, table );</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> text === <span class=\"string\">'string'</span> ) &#123;</span><br><span class=\"line\">                _.setText( nodes[i], text );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>_.getTranslatedText 支持使用点记法，代码直接用以前写过的。<a href=\"http://blog.e10t.net/implements-list-and-flag-in-simpletemplatejs/\">参考</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// get translation via path, support dot</span></span><br><span class=\"line\">_.getTranslatedText = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> path, json </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fieldPath = path.split( <span class=\"string\">'.'</span> ),</span><br><span class=\"line\">        data = json,</span><br><span class=\"line\">        index,</span><br><span class=\"line\">        indexLength;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( index = <span class=\"number\">0</span>, indexLength = fieldPath.length; index &lt; indexLength; index++ ) &#123;</span><br><span class=\"line\">        data = data[fieldPath[index]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !data ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>_.setText 函数就是用’innerText’或’textContent’来设置元素文本。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cross-browser set text</span></span><br><span class=\"line\">_.setText = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> ele, text </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nodeType = ele.nodeType,</span><br><span class=\"line\">        textAttr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( nodeType &amp;&amp; <span class=\"number\">1</span> === nodeType ) &#123;</span><br><span class=\"line\">        textAttr = ( <span class=\"string\">'innerText'</span> <span class=\"keyword\">in</span> ele ) ? <span class=\"string\">'innerText'</span> : <span class=\"string\">'textContent'</span>;</span><br><span class=\"line\">        ele[textAttr] = text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>看起来大概写完了，来写一些测试。</p>\n<blockquote>\n<p>实际上应该先写测试，再写代码。但是一来库很小，二来我不太懂，所以……不过之后写比较大型的库的时候要好好地用mocha等的测试框架。</p>\n</blockquote>\n<p>用jade语法写一个HTML文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doctype html</span><br><span class=\"line\">html</span><br><span class=\"line\">  head</span><br><span class=\"line\">    meta(charset=&quot;UTF-8&quot;)</span><br><span class=\"line\">    title test</span><br><span class=\"line\">    script(src=&quot;i18n.js&quot;)</span><br><span class=\"line\">  body</span><br><span class=\"line\">    select#language(name=&quot;language&quot;,onchange=&quot;toggle()&quot;)</span><br><span class=\"line\">      option(value=&quot;en&quot;) English</span><br><span class=\"line\">      option(value=&quot;zh&quot;) 中文</span><br><span class=\"line\">      option(value=&quot;jp&quot;) 日本語</span><br><span class=\"line\"></span><br><span class=\"line\">    h1(data-i18n=&quot;TITLE&quot;) Title</span><br><span class=\"line\">    p(data-i18n=&quot;p.text&quot;) This is test text.</span><br><span class=\"line\">    button(data-i18n=&quot;BUTTON_TEXT&quot;) change</span><br><span class=\"line\">    button(data-i18n=&quot;BUTTON_ADD&quot;,onclick=&quot;add()&quot;) add</span><br><span class=\"line\"></span><br><span class=\"line\">  script.</span><br><span class=\"line\">    i18n.load(&#123;</span><br><span class=\"line\">      &apos;en&apos;: &#123;</span><br><span class=\"line\">        &apos;TITLE&apos;: &apos;Title&apos;,</span><br><span class=\"line\">        &apos;BUTTON_TEXT&apos;: &apos;change&apos;,</span><br><span class=\"line\">        &apos;BUTTON_ADD&apos;: &apos;add&apos;,</span><br><span class=\"line\">        &apos;p&apos;: &#123;</span><br><span class=\"line\">          &apos;text&apos;: &apos;This is test text.&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &apos;zh&apos;: &#123;</span><br><span class=\"line\">        &apos;TITLE&apos;: &apos;标题&apos;,</span><br><span class=\"line\">        &apos;BUTTON_TEXT&apos;: &apos;变&apos;,</span><br><span class=\"line\">        &apos;BUTTON_ADD&apos;: &apos;添加&apos;,</span><br><span class=\"line\">        &apos;p&apos;: &#123;</span><br><span class=\"line\">          &apos;text&apos;: &apos;这是测试文本。&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &apos;jp&apos;: &#123;</span><br><span class=\"line\">        &apos;TITLE&apos;: &apos;タイトル&apos;,</span><br><span class=\"line\">        &apos;BUTTON_TEXT&apos;: &apos;変更&apos;,</span><br><span class=\"line\">        &apos;BUTTON_ADD&apos;: &apos;追加する&apos;,</span><br><span class=\"line\">        &apos;p&apos;: &#123;</span><br><span class=\"line\">          &apos;text&apos;: &apos;これはテストテキストです&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    function toggle () &#123;</span><br><span class=\"line\">      var ele = document.getElementById( &apos;language&apos; ),</span><br><span class=\"line\">        value = ele.value;</span><br><span class=\"line\"></span><br><span class=\"line\">      i18n.use( value );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>控制台运行<code>npm run test:html</code>生成HTML文件，用浏览器打开，切换一下语言，没问题。</p>\n<h2 id=\"继续开发\"><a href=\"#继续开发\" class=\"headerlink\" title=\"继续开发\"></a>继续开发</h2><p>应用i18n.js的多语言页面，是有可能动态添加DOM元素的（AJAX拉取数据之类的操作），所以i18n.js库也需要将添加的DOM元素翻译一下。于是再添加一个名为’translate’的API好了。</p>\n<blockquote>\n<p>由于需要同时修改jade文件和js文件，所以使用<code>npm run test:watch</code>，同时监视jade文件和js文件的变化。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Translate nodes</span></span><br><span class=\"line\">i18n.translate = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> eles </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> langTable, nodeList, i, index, nodes;</span><br><span class=\"line\"></span><br><span class=\"line\">    langTable = TRANSLATION_TABLE[CURRENT_LANGUAGE];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( langTable ) &#123;</span><br><span class=\"line\">        nodeList = <span class=\"built_in\">Object</span>.prototype.toString.call( eles ) === <span class=\"string\">'[object NodeList]'</span> ||</span><br><span class=\"line\">            <span class=\"string\">'length'</span> <span class=\"keyword\">in</span> eles ?</span><br><span class=\"line\">            eles :</span><br><span class=\"line\">            [eles];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>, index = nodeList.length; i &lt; index; i++ ) &#123;</span><br><span class=\"line\">            nodes = _.filterNodes( nodeList[i] );</span><br><span class=\"line\">            _.translate( nodes, langTable );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nodes;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>做的事其实和<code>use</code>大同小异，只是目标DOM元素不一样。</p>\n<p>修改一下测试文件，增加一点代码。</p>\n<p>在 body 中添加两个按钮。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button(data-i18n=&quot;BUTTON_ADD_1&quot;,onclick=&quot;add(1)&quot;) add one</span><br><span class=\"line\">button(data-i18n=&quot;BUTTON_ADD_2&quot;,onclick=&quot;add(2)&quot;) add two</span><br></pre></td></tr></table></figure>\n<p>在数据中增加按钮的文本。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'BUTTON_ADD_1'</span>: <span class=\"string\">'add one line'</span>,</span><br><span class=\"line\"><span class=\"string\">'BUTTON_ADD_2'</span>: <span class=\"string\">'add two line'</span>,</span><br><span class=\"line\"><span class=\"comment\">/* ... */</span></span><br><span class=\"line\"><span class=\"string\">'BUTTON_ADD_1'</span>: <span class=\"string\">'添加一行'</span>,</span><br><span class=\"line\"><span class=\"string\">'BUTTON_ADD_2'</span>: <span class=\"string\">'添加两行'</span>,</span><br><span class=\"line\"><span class=\"comment\">/* ... */</span></span><br><span class=\"line\"><span class=\"string\">'BUTTON_ADD_1'</span>: <span class=\"string\">'1行を追加する'</span>,</span><br><span class=\"line\"><span class=\"string\">'BUTTON_ADD_2'</span>: <span class=\"string\">'2行を追加する'</span>,</span><br></pre></td></tr></table></figure>\n<p>在脚本中增加一个函数，用作模拟动态添加DOM元素。可以添加一个或多个DOM元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\"> num </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.getElementsByTagName( <span class=\"string\">'p'</span> )</span><br><span class=\"line\">    , newP = <span class=\"built_in\">document</span>.createElement( <span class=\"string\">'div'</span> )</span><br><span class=\"line\">    , i</span><br><span class=\"line\">    , node</span><br><span class=\"line\">    , fragment;</span><br><span class=\"line\"></span><br><span class=\"line\">  fragment = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\">  newP.innerHTML = <span class=\"string\">'&lt;p data-i18n=\"p.text\"&gt;This is test text.&lt;/p&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; num; i++ ) &#123;</span><br><span class=\"line\">    node = newP.firstChild.cloneNode( <span class=\"literal\">true</span> );</span><br><span class=\"line\">    fragment.appendChild( node );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  i18n.translate( fragment );</span><br><span class=\"line\"></span><br><span class=\"line\">  p = p[p.length<span class=\"number\">-1</span>];</span><br><span class=\"line\">  p.parentNode.insertBefore( fragment, p.nextSibling );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再使用浏览器测试一下，同样没问题了。</p>\n<h3 id=\"再拆分一下\"><a href=\"#再拆分一下\" class=\"headerlink\" title=\"再拆分一下\"></a>再拆分一下</h3><p>现在<code>main.js</code>文件看起来比较复杂，可以再分别拆分成<code>var.js</code>，存放顶层变量；<code>util.js</code>，包含内部的函数；<code>api.js</code>，包含库的API。</p>\n<p>稍微修改一下<code>package.json</code>文件，相关位置改成拆分后的文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"jshint src/js/var.js &amp;&amp; jshint src/js/util.js &amp;&amp; jshint src/js/api.js\"</span>,</span><br><span class=\"line\"><span class=\"comment\">/* ... */</span></span><br><span class=\"line\">    <span class=\"string\">\"build:js\"</span>: <span class=\"string\">\"concat-cli -f src/js/wrap/prefix.js src/js/var.js src/js/util.js src/js/api.js src/js/wrap/suffix.js -o dist/i18n.js\"</span>,</span><br><span class=\"line\"><span class=\"comment\">/* ... */</span></span><br><span class=\"line\">    <span class=\"string\">\"test:js\"</span>: <span class=\"string\">\"concat-cli -f src/js/wrap/prefix.js src/js/var.js src/js/util.js src/js/api.js src/js/wrap/suffix.js -o test/i18n.js\"</span>,</span><br></pre></td></tr></table></figure>\n<p>最后运行<code>npm run build</code>将js库编译出来并压缩。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>近来由于开发某页面需要支持多语言切换，遂写一个切换页面语言的JS库。</p>\n<h2 id=\"编写库的既定事项\"><a href=\"#编写库的既定事项\" class=\"headerlink\" title=\"编写库的既定事项\"></a>编写库的既定事项</h2><p>写JS库也不是一两次了，当然只是小型或者微型的。不过思想和方法和大型库都是通用的。一般是直接在sublime text里打开一个JS文件，然后写下一个Self-Executing Anonymous Functions（自执行匿名函数？），接着在函数里面创造库的对象，最后将对象挂在<code>window</code>对象下。</p>\n<p>Show you the code的话就是以下所示：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> window, undefined </span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i18n = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">i18n.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">window</span>.i18n = i18n;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)( <span class=\"built_in\">window</span> );</span><br></pre></td></tr></table></figure>\n<p>学得这样的写法是来源于对jQuery源代码的阅读。</p>\n<p>通过将代码都包在一个匿名函数中，实现了一个闭包。如此一来在闭包内随便折腾，也不会污染到外部全局环境（当然是在编写可靠的代码的情况下）。</p>\n<p>不过，随着AMD和CommonJS标准的流行开来，越来越多JS库都将自己模块化。过程也不复杂，只要遵循一定的规则就可以了。</p>\n<p>而对于编写一个简单的JS库，将github上<a href=\"https://github.com/umdjs/umd\" target=\"_blank\" rel=\"noopener\">UMD</a>项目给出的模板修改一下就OK。</p>\n<p>修改后代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> root, name, definition </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd ) &#123;</span><br><span class=\"line\">      define( [], definition );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"built_in\">module</span>.exports ) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">module</span>.exports = definition();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      root[name] = definition();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)( <span class=\"keyword\">this</span>, <span class=\"string\">'i18n'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i18n = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">i18n.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Return this library</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> i18n;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>注意最后不再需要手动将库挂载在<code>window</code>对象下，而是只是返回对象。挂载方式已经转交给外部函数判断。</p>\n<h2 id=\"思考多一点，代码少一点\"><a href=\"#思考多一点，代码少一点\" class=\"headerlink\" title=\"思考多一点，代码少一点\"></a>思考多一点，代码少一点</h2><p>很久的以前，我曾经写过一个jQuery插件，功能是为表格添加分页和异步载入。然而在写之前并没有清晰地定下整个插件的功能和限制，导致最后写出来的插件身兼数职，连表格美化与自定义CSS等也做了进去。加进去的功能有可能只是随手实现的，也许并不适合此插件管辖，造成了“做得不好非要做”的尴尬。</p>\n<p>另外，功能的繁琐与代码段的反复抽象提取导致了代码的凌乱不堪，进而导致测试出bug的时候完全搞不清楚问题所在。</p>\n<p>最后代码膨胀到完全不能控制，自己写出来的代码连自己都不敢修改。</p>\n<blockquote>\n<p>在写jQuery插件的时候，十分容易变成了写“使用jQuery的代码集合”，缺少性能和架构的考虑。这跟jQuery本身十分强大和灵活的特性有很大的关系。</p>\n</blockquote>\n<p>写库或插件，目的应该是将通用或者复杂的逻辑实现封装起来，通过提供简洁的API来实现功能的调用。</p>\n<p>先将手从键盘上收回，拿出纸笔，好好列出对JS库的描述。</p>\n<ul>\n<li>Q1：i18n.js要做什么？</li>\n<li>A1：对页面上的文本进行语言切换。</li>\n<li>Q2：如何定位文本？</li>\n<li>A2：为DOM元素增加’data-i18n’属性进行标记。</li>\n<li>Q3：如何找到标注DOM元素？</li>\n<li>A3：从给出的DOM元素作为根进行深度优先/广度优先遍历。</li>\n<li>Q4：译文的来源？</li>\n<li>A4：用户遵循某一标准自定义每一套语言的字典。</li>\n<li>Q5：如何将译文和元素对应？</li>\n<li>A5：对每一条文本，以唯一ID标识。凡是’data-i18n’属性的值为此ID的元素，即使用此ID对应文本。</li>\n</ul>\n<p>思路是不是清晰了很多呢？可以看到核心逻辑就是一个有访问函数的DFS或BFS算法。</p>\n<h2 id=\"工欲善其事，必先利其器？\"><a href=\"#工欲善其事，必先利其器？\" class=\"headerlink\" title=\"工欲善其事，必先利其器？\"></a>工欲善其事，必先利其器？</h2><p>近年的前端大发展，也催生了很多自动化工具。node的流行更是让很多软件管理和后端开发的思想能应用到前端开发上。</p>\n<p>经典的前端开发不外乎就是写HTML、写CSS、写Javascript，然而在前端代码量越来越大的现在，一个自动化的构建工具则能大大提高工作效率。</p>\n<p>如果Google一下前端构建工具，那么基本就是Grunt和Gulp。</p>\n<p>本质上，Grunt和Gulp都是任务运行器，尝试将前端的代码生成甚至发布统合到几个甚至一个命令行中。它们本身作为npm的一个模块，并没有什么作用，真正做事的是以其为平台的大量插件。通过将各种各样的插件整合起来，Grunt和Gulp就能实现自动化的任务执行。</p>\n<p>但是慢着，以前不是很流行什么网页三剑客的吗？甚至用DreamWrear就能做网页啊。任务运行器、插件什么的是个什么鬼？！</p>\n<p>是这样的，现在的前端开发，虽然最终结果还是写HTML、写CSS、写Javascript，但是过程却已经变化多端，内容也逐渐丰富。</p>\n<p>HTML的话：</p>\n<p>切图输出其实也已经算一种自动化。然而现在还能使用jade、HAML或者各种模板引擎生成，也就是有可能不是直接手写HTML代码了。这个就需要依赖编译了。</p>\n<p>CSS的话：</p>\n<p>SASS、LESS和Stylus都已经存在了很久了，源代码产出CSS也是需要编译的。CSS文件也能够进行合并和版本控制，如此一来又需要额外的工具。</p>\n<p>Javascript的话：</p>\n<p>本身就是一个编程语言，有工具能对其语法进行排错，不能不用吧？流行又高效的模块化开发，需要工具合并吧？压缩源代码，又需要操作了吧？注释呢？文档呢？统统需要工具啊。</p>\n<p>总结起来，HTML要编译，CSS要编译、合并、压缩和，Javascript要编译/合并、压缩甚至生成文档。最后发布还要顾及CDN或者缓存或者bug跟踪进行版本管理如果以上每一步都要自己操作，那么即使只是打命令行也是够呛。</p>\n<p>而使用上自动化构建，则在设定好以上多种工具的使用流程之后（几乎）一劳永逸，只需要专心写好流程最开始的源代码就OK，构建工具会完全自动地生成最终结果。能少干活就少干活，那个程序员愿意做重复性工作？</p>\n<p>这也就是为什么自动化构建工具在一日发展千里、需求一日多改的前端如此受欢迎的原因了。</p>\n<h3 id=\"Grunt-VS-Gulp\"><a href=\"#Grunt-VS-Gulp\" class=\"headerlink\" title=\"Grunt VS Gulp\"></a>Grunt VS Gulp</h3><p>是个程序员总会遇到圣战的时候，或是Emacas VS Vim，或是C# VS Java，或是Python VS Ruby，或是AngularJS VS ReactJS，或是IOS VS Android……</p>\n<p><del>当然，PHP是最好的语言所以不用战争。</del></p>\n<p>也有人只是选择困难症后期患者，一旦选项多于一就会头痛欲裂、浑身不自在。</p>\n<p>那么，究竟Grunt or Gulp？</p>\n<p>为此很多人写过分析的文章，有<a href=\"http://www.w3ctech.com/topic/114\" title=\"谈谈Grunt,NPM,Gulp\" target=\"_blank\" rel=\"noopener\">中文的</a>、<a href=\"http://www.hongkiat.com/blog/gulp-vs-grunt/\" title=\"The Battle Of Build Scripts: Gulp Vs Grunt\" target=\"_blank\" rel=\"noopener\">英文的</a>和<a href=\"http://jaysoo.ca/2014/01/27/gruntjs-vs-gulpjs/\" title=\"Grunt vs Gulp - Beyond the Numbers\" target=\"_blank\" rel=\"noopener\">另一篇英文的</a>，总的来说就是，</p>\n<p>Grunt：插件比较多，社区成熟，风格偏配置，插件比较混乱，代码较长，过程有临时目录</p>\n<p>Gulp：插件不够Grunt多，风格偏代码，插件功能单一专注，代码较短，流式工作无需临时目录</p>\n<p>个人选择是Gulp，那个插件数量不够多是个伪缺点，只是不过Grunt多，其实也有上千个，还不够用？！从其他优点来看都是完胜Grunt了。</p>\n<h3 id=\"逆袭的npm\"><a href=\"#逆袭的npm\" class=\"headerlink\" title=\"逆袭的npm\"></a>逆袭的npm</h3><p>那是不是选择Gulp来构建i18n.js呢？</p>\n<p>并不是。</p>\n<p>如果有仔细看给出的分析文章，可以看到还有一个构建工具：npm。</p>\n<p>众所周知npm实际上是nodejs的包管理工具，然而在其配置文件package.json里面却也可以设置一些可运行项，然后通过<code>npm run xxx</code>来运行。从文章来看，也是能够胜任构建的任务。</p>\n<p>那么问题来了，从网上基本千篇一律的教程来看，Grunt和Gulp的使用都是装上了自带npm的node，然后通过npm来安装的。既然npm本身就能作为构建工具，那为啥要用Grunt和Gulp？</p>\n<p>注意到那篇中文的分析文章还提到“npm一般用在个人项目里,对于团队项目则不适用”，然而果真如此吗？</p>\n<p>使用英文搜索一下，不难发现国外也有人提出<a href=\"http://blog.keithcirkel.co.uk/why-we-should-stop-using-grunt\" title=\"Why we should stop using Grunt &amp; Gulp\" target=\"_blank\" rel=\"noopener\">停止使用Grunt和Gulp的主张</a>，在文中列出类似或同类构建工具的问题：</p>\n<ol>\n<li>Bloat</li>\n<li>Relying on plugins</li>\n<li>Separate pain in updating</li>\n<li>False Promises</li>\n<li>Bad behaviours</li>\n</ol>\n<p>接着提出了使用npm的主张，并且<a href=\"http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/\" title=\"How to Use npm as a Build Tool\" target=\"_blank\" rel=\"noopener\">还给出了详细方法</a>，可以看到使用npm更易懂更简洁。</p>\n<p>我使用Grunt和Gulp的经验并不多（实际也不是什么复杂的东西），对于文中提出的第一个问题已经深有感触。明明只是简单的工作，却要写一大堆罗嗦的配置。另外Grunt/Gulp插件使用都是local安装，于是明明只是写几个KB大小的库，却要将项目的文件夹弄成几十MB大。插件作用都很专一，更新频率很低，全局安装就好，每开一个项目就独立往项目塞一样的工具简直是闲得蛋疼，尤其npm下载插件经常由于网络原因而失败。</p>\n<blockquote>\n<p>当然独立安装项目依赖也有其存在的意义。当将项目发布给其他人使用或者开发的时候，独立安装项目依赖可以保证环境是一样的。</p>\n</blockquote>\n<p>所以结论是，<strong>不要为使用Grunt/Gulp而使用Grunt/Gulp，很多情况下并不需要将事情弄复杂。</strong></p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><p>参考国外配置npm的文章，写好package.json。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"i18n.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"concat-cli\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"jade\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"jshint\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"rimraf\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"nodemon\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"parallelshell\"</span>: <span class=\"string\">\"latest\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"clean:test\"</span>: <span class=\"string\">\"rimraf test/*\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"clean:dist\"</span>: <span class=\"string\">\"rimraf dist/*\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"jshint src/js/main.js\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"test:html\"</span>: <span class=\"string\">\"jade -P src/test.jade --out test\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"watch:html\"</span>: <span class=\"string\">\"jade -w -P src/test.jade --out test\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"prebuild:js\"</span>: <span class=\"string\">\"npm run lint\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build:js\"</span>: <span class=\"string\">\"concat-cli -f src/js/wrap/prefix.js src/js/main.js src/js/wrap/suffix.js -o dist/i18n.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"postbuild:js\"</span>: <span class=\"string\">\"uglifyjs dist/i18n.js -o dist/i18n.min.js -m -c\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"pretest:js\"</span>: <span class=\"string\">\"npm run lint\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test:js\"</span>: <span class=\"string\">\"concat-cli -f src/js/wrap/prefix.js src/js/main.js src/js/wrap/suffix.js -o test/i18n.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"watch:js\"</span>: <span class=\"string\">\"nodemon --watch src/js --exec \\\"npm run test:js\\\"\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"pretest\"</span>: <span class=\"string\">\"npm run clean:test\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"npm run test:js &amp;&amp; test:html\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test:watch\"</span>: <span class=\"string\">\"parallelshell \\\"npm run watch:js\\\" \\\"npm run watch:html\\\"\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">\"prebuild\"</span>: <span class=\"string\">\"npm run clean:dist\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"npm run build:js\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>清晰明了。</p>\n<p>测试环境清理：rimraf</p>\n<p>HTML构建：jade</p>\n<p>Javascript排错：jshint</p>\n<p>Javascript合并：concat-cli（多个文件复制合并）</p>\n<p>全部都是一句话配置，直指命令行。多个任务最终又可以汇集在<code>test</code>/<code>test:watch</code>中。</p>\n<blockquote>\n<p>使用concat-cli构建Javascript比较少见，更多的是使用browserify配合require语法。然而i18n.js库实在太小了，真的不需要复杂的模块化管理。</p>\n</blockquote>\n<h2 id=\"编写i18n-js\"><a href=\"#编写i18n-js\" class=\"headerlink\" title=\"编写i18n.js\"></a>编写i18n.js</h2><h3 id=\"拆分\"><a href=\"#拆分\" class=\"headerlink\" title=\"拆分\"></a>拆分</h3><p>先将原js文件拆分成三个。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// prefix.js</span></span><br><span class=\"line\">;(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> root, name, definition </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd ) &#123;</span><br><span class=\"line\">      define( [], definition );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"built_in\">module</span>.exports ) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">module</span>.exports = definition();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      root[name] = definition();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)( <span class=\"keyword\">this</span>, <span class=\"string\">'i18n'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// suffix.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Return this library</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> i18n;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i18n = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">i18n.bar = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>接下来可以专心在’main.js’中写代码了。</p>\n<blockquote>\n<p>在敲入代码之前记得使用<code>npm run watch:js</code>，不然配置毫无意义。</p>\n</blockquote>\n<h3 id=\"内部变量\"><a href=\"#内部变量\" class=\"headerlink\" title=\"内部变量\"></a>内部变量</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Save the global object, which is window in browser / global in Node.js.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> root = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This library and internal object</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i18n = &#123;&#125;,</span><br><span class=\"line\">    _ = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Current version.</span></span><br><span class=\"line\">i18n.version = <span class=\"string\">'0.0.1'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Internel store</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> TRANSLATION_TABLE = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Current language</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> CURRENT_LANGUAGE = <span class=\"string\">''</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Save the previous value of the `i18n` variable, can be restored later</span></span><br><span class=\"line\"><span class=\"comment\">// if 'noConflict' is called.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> previousi18n = root.i18n;</span><br></pre></td></tr></table></figure>\n<p><code>TRANSLATION_TABLE</code>保存翻译文本，<code>CURRENT_LANGUAGE</code>保存当前使用的语言，<code>_</code>是内部使用的命名空间。另外使用<code>root</code>保存全局对象，<code>previousi18n</code>保存之前已存在的’i18n’对象。</p>\n<h3 id=\"库函数（API）\"><a href=\"#库函数（API）\" class=\"headerlink\" title=\"库函数（API）\"></a>库函数（API）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Restore the previous value of 'i18n' and return our own i18n object.</span></span><br><span class=\"line\">i18n.noConflict = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    root.i18n = previousi18n;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i18n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>noConflict函数，学jQuery的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Load the translation table</span></span><br><span class=\"line\">i18n.load = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> table </span>) </span>&#123;</span><br><span class=\"line\">    TRANSLATION_TABLE = _.deepCopy( TRANSLATION_TABLE, table );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i18n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>载入翻译文本，使用深复制（应对多层对象）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Return the current set language</span></span><br><span class=\"line\">i18n.current = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> CURRENT_LANGUAGE;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>返回当前使用的语言。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Change the language, apply to all cached nodes or document.body</span></span><br><span class=\"line\">i18n.use = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> language </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> langTable = TRANSLATION_TABLE[language],</span><br><span class=\"line\">        nodes;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( langTable ) &#123;</span><br><span class=\"line\">        nodes = _.filterNodes( root.document.body );</span><br><span class=\"line\">        _.translate( nodes, langTable );</span><br><span class=\"line\">        CURRENT_LANGUAGE = language;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> i18n;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>切换语言。流程是匹配出语言配置，再从body开始抓取出需要翻译的DOM元素（_.filterNodes函数），然后翻译（_.translate函数），最后设置当前语言。</p>\n<h3 id=\"内部函数\"><a href=\"#内部函数\" class=\"headerlink\" title=\"内部函数\"></a>内部函数</h3><p>API函数的内容写得简单，主要是需要基于不少的内部函数。</p>\n<p>首先是深复制。</p>\n<blockquote>\n<p>Javascript中的赋值都是复制，因此对于基本类型（primitive value）：Undefined、Null、Boolean、Number、String来说，直接赋值就是复制。其他的复杂类型，直接赋值同样是复制——然而，复制的是引用，并不是引用的对象。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// can handle array and nested objects, not perfect</span></span><br><span class=\"line\">_.deepCopy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> des, src </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> beCopiedIsArray = <span class=\"literal\">false</span>,</span><br><span class=\"line\">        target,</span><br><span class=\"line\">        name,</span><br><span class=\"line\">        clone,</span><br><span class=\"line\">        beCopied;</span><br><span class=\"line\"></span><br><span class=\"line\">    target = des;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( name <span class=\"keyword\">in</span> src ) &#123;</span><br><span class=\"line\">        beCopied = src[name];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( beCopied === src ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( _.isObject( beCopied ) || ( beCopiedIsArray = _.isArray( beCopied ) ) ) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( beCopiedIsArray ) &#123;</span><br><span class=\"line\">                beCopiedIsArray = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                clone = [];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                clone = &#123;&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            target[name] = _.deepCopy( clone, beCopied );</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( beCopied !== <span class=\"literal\">undefined</span> ) &#123;</span><br><span class=\"line\">            target[name] = beCopied;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>改写自jQuery1.7内部实现的对象深复制函数，只保留了识别数组和对象的功能。因为译文文本就是JSON格式的普通对象（plain object），无需要实现太复杂的复制。核心代码的思想就是检测在当前对象的每一个属性（省略了hasOwnProperty的检测），如果是数组（_.isArray）或者普通对象（_.isObject），则实实在在创建一个数组 / 对象以供复制。</p>\n<p>而数组 / 对象检测则是用以下代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// figure out array</span></span><br><span class=\"line\">_.isArray = <span class=\"built_in\">Array</span>.isArray || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call( obj ) === <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// figure out object</span></span><br><span class=\"line\">_.isObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> obj </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call( obj ) === <span class=\"string\">'[object Object]'</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>而库的核心，一个带访问函数的DFS。DOM操作自带取子元素和兄弟元素，写起来很简单。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Walk the DOM, call the visit</span></span><br><span class=\"line\">_.walkDOM = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> dom, visit </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// nodeType === 1 means element</span></span><br><span class=\"line\">    <span class=\"comment\">// nodeType === 11 means DocumentFragment</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( dom &amp;&amp; <span class=\"number\">1</span> === dom.nodeType || <span class=\"number\">11</span> === dom.nodeType ) &#123;</span><br><span class=\"line\">        visit( dom ); <span class=\"comment\">// 访问当前DOM元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">        node = dom.firstChild; <span class=\"comment\">// 取当前DOM元素的第一个子元素</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( node ) &#123;</span><br><span class=\"line\">            _.walkDOM( node, visit ); <span class=\"comment\">// 对此子元素递归调用</span></span><br><span class=\"line\">            node = node.nextSibling; <span class=\"comment\">// 从此子元素返回，处理下一个兄弟元素</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>通过查看元素的属性来筛选出将要翻译的元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Returns array of elements that have attribute 'data-i18n'</span></span><br><span class=\"line\">_.filterNodes = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> root </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nodes = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// traverse DOM tree and collect elements with 'data-i18n' attribute</span></span><br><span class=\"line\">    _.walkDOM( root, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> ele </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( _.hasAttr( ele, <span class=\"string\">'data-i18n'</span> ) ) &#123;</span><br><span class=\"line\">            nodes.push( ele );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nodes;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上一个函数中用到的’_.hasAttr’，特别实现是因为IE的取属性方式跟其他浏览器不一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Return true if ele has attribute otherwise false</span></span><br><span class=\"line\">_.hasAttr = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> ele, attr </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ele.hasAttribute ? ele.hasAttribute( attr ) : ele[attr] !== <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>接下来是改变元素的文本。代码很简单，做的事情就是遍历DOM元素数组，取属性’data-i18n’的值作为key值，在译文表格中查询value值（_.getTranslatedText），最后改变元素的文本（_.setText）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Translate each node in array with given language table</span></span><br><span class=\"line\">_.translate = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> nodes, table </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key, text, i, length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>, length = nodes.length; i &lt; length; i++ ) &#123;</span><br><span class=\"line\">        key = nodes[i].getAttribute( <span class=\"string\">'data-i18n'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( key ) &#123;</span><br><span class=\"line\">            text = _.getTranslation( key, table );</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> text === <span class=\"string\">'string'</span> ) &#123;</span><br><span class=\"line\">                _.setText( nodes[i], text );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>_.getTranslatedText 支持使用点记法，代码直接用以前写过的。<a href=\"http://blog.e10t.net/implements-list-and-flag-in-simpletemplatejs/\">参考</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// get translation via path, support dot</span></span><br><span class=\"line\">_.getTranslatedText = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> path, json </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fieldPath = path.split( <span class=\"string\">'.'</span> ),</span><br><span class=\"line\">        data = json,</span><br><span class=\"line\">        index,</span><br><span class=\"line\">        indexLength;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( index = <span class=\"number\">0</span>, indexLength = fieldPath.length; index &lt; indexLength; index++ ) &#123;</span><br><span class=\"line\">        data = data[fieldPath[index]];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !data ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>_.setText 函数就是用’innerText’或’textContent’来设置元素文本。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// cross-browser set text</span></span><br><span class=\"line\">_.setText = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> ele, text </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nodeType = ele.nodeType,</span><br><span class=\"line\">        textAttr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( nodeType &amp;&amp; <span class=\"number\">1</span> === nodeType ) &#123;</span><br><span class=\"line\">        textAttr = ( <span class=\"string\">'innerText'</span> <span class=\"keyword\">in</span> ele ) ? <span class=\"string\">'innerText'</span> : <span class=\"string\">'textContent'</span>;</span><br><span class=\"line\">        ele[textAttr] = text;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>看起来大概写完了，来写一些测试。</p>\n<blockquote>\n<p>实际上应该先写测试，再写代码。但是一来库很小，二来我不太懂，所以……不过之后写比较大型的库的时候要好好地用mocha等的测试框架。</p>\n</blockquote>\n<p>用jade语法写一个HTML文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">doctype html</span><br><span class=\"line\">html</span><br><span class=\"line\">  head</span><br><span class=\"line\">    meta(charset=&quot;UTF-8&quot;)</span><br><span class=\"line\">    title test</span><br><span class=\"line\">    script(src=&quot;i18n.js&quot;)</span><br><span class=\"line\">  body</span><br><span class=\"line\">    select#language(name=&quot;language&quot;,onchange=&quot;toggle()&quot;)</span><br><span class=\"line\">      option(value=&quot;en&quot;) English</span><br><span class=\"line\">      option(value=&quot;zh&quot;) 中文</span><br><span class=\"line\">      option(value=&quot;jp&quot;) 日本語</span><br><span class=\"line\"></span><br><span class=\"line\">    h1(data-i18n=&quot;TITLE&quot;) Title</span><br><span class=\"line\">    p(data-i18n=&quot;p.text&quot;) This is test text.</span><br><span class=\"line\">    button(data-i18n=&quot;BUTTON_TEXT&quot;) change</span><br><span class=\"line\">    button(data-i18n=&quot;BUTTON_ADD&quot;,onclick=&quot;add()&quot;) add</span><br><span class=\"line\"></span><br><span class=\"line\">  script.</span><br><span class=\"line\">    i18n.load(&#123;</span><br><span class=\"line\">      &apos;en&apos;: &#123;</span><br><span class=\"line\">        &apos;TITLE&apos;: &apos;Title&apos;,</span><br><span class=\"line\">        &apos;BUTTON_TEXT&apos;: &apos;change&apos;,</span><br><span class=\"line\">        &apos;BUTTON_ADD&apos;: &apos;add&apos;,</span><br><span class=\"line\">        &apos;p&apos;: &#123;</span><br><span class=\"line\">          &apos;text&apos;: &apos;This is test text.&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &apos;zh&apos;: &#123;</span><br><span class=\"line\">        &apos;TITLE&apos;: &apos;标题&apos;,</span><br><span class=\"line\">        &apos;BUTTON_TEXT&apos;: &apos;变&apos;,</span><br><span class=\"line\">        &apos;BUTTON_ADD&apos;: &apos;添加&apos;,</span><br><span class=\"line\">        &apos;p&apos;: &#123;</span><br><span class=\"line\">          &apos;text&apos;: &apos;这是测试文本。&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &apos;jp&apos;: &#123;</span><br><span class=\"line\">        &apos;TITLE&apos;: &apos;タイトル&apos;,</span><br><span class=\"line\">        &apos;BUTTON_TEXT&apos;: &apos;変更&apos;,</span><br><span class=\"line\">        &apos;BUTTON_ADD&apos;: &apos;追加する&apos;,</span><br><span class=\"line\">        &apos;p&apos;: &#123;</span><br><span class=\"line\">          &apos;text&apos;: &apos;これはテストテキストです&apos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    function toggle () &#123;</span><br><span class=\"line\">      var ele = document.getElementById( &apos;language&apos; ),</span><br><span class=\"line\">        value = ele.value;</span><br><span class=\"line\"></span><br><span class=\"line\">      i18n.use( value );</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>控制台运行<code>npm run test:html</code>生成HTML文件，用浏览器打开，切换一下语言，没问题。</p>\n<h2 id=\"继续开发\"><a href=\"#继续开发\" class=\"headerlink\" title=\"继续开发\"></a>继续开发</h2><p>应用i18n.js的多语言页面，是有可能动态添加DOM元素的（AJAX拉取数据之类的操作），所以i18n.js库也需要将添加的DOM元素翻译一下。于是再添加一个名为’translate’的API好了。</p>\n<blockquote>\n<p>由于需要同时修改jade文件和js文件，所以使用<code>npm run test:watch</code>，同时监视jade文件和js文件的变化。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Translate nodes</span></span><br><span class=\"line\">i18n.translate = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> eles </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> langTable, nodeList, i, index, nodes;</span><br><span class=\"line\"></span><br><span class=\"line\">    langTable = TRANSLATION_TABLE[CURRENT_LANGUAGE];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( langTable ) &#123;</span><br><span class=\"line\">        nodeList = <span class=\"built_in\">Object</span>.prototype.toString.call( eles ) === <span class=\"string\">'[object NodeList]'</span> ||</span><br><span class=\"line\">            <span class=\"string\">'length'</span> <span class=\"keyword\">in</span> eles ?</span><br><span class=\"line\">            eles :</span><br><span class=\"line\">            [eles];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>, index = nodeList.length; i &lt; index; i++ ) &#123;</span><br><span class=\"line\">            nodes = _.filterNodes( nodeList[i] );</span><br><span class=\"line\">            _.translate( nodes, langTable );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nodes;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>做的事其实和<code>use</code>大同小异，只是目标DOM元素不一样。</p>\n<p>修改一下测试文件，增加一点代码。</p>\n<p>在 body 中添加两个按钮。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button(data-i18n=&quot;BUTTON_ADD_1&quot;,onclick=&quot;add(1)&quot;) add one</span><br><span class=\"line\">button(data-i18n=&quot;BUTTON_ADD_2&quot;,onclick=&quot;add(2)&quot;) add two</span><br></pre></td></tr></table></figure>\n<p>在数据中增加按钮的文本。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'BUTTON_ADD_1'</span>: <span class=\"string\">'add one line'</span>,</span><br><span class=\"line\"><span class=\"string\">'BUTTON_ADD_2'</span>: <span class=\"string\">'add two line'</span>,</span><br><span class=\"line\"><span class=\"comment\">/* ... */</span></span><br><span class=\"line\"><span class=\"string\">'BUTTON_ADD_1'</span>: <span class=\"string\">'添加一行'</span>,</span><br><span class=\"line\"><span class=\"string\">'BUTTON_ADD_2'</span>: <span class=\"string\">'添加两行'</span>,</span><br><span class=\"line\"><span class=\"comment\">/* ... */</span></span><br><span class=\"line\"><span class=\"string\">'BUTTON_ADD_1'</span>: <span class=\"string\">'1行を追加する'</span>,</span><br><span class=\"line\"><span class=\"string\">'BUTTON_ADD_2'</span>: <span class=\"string\">'2行を追加する'</span>,</span><br></pre></td></tr></table></figure>\n<p>在脚本中增加一个函数，用作模拟动态添加DOM元素。可以添加一个或多个DOM元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span> (<span class=\"params\"> num </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> p = <span class=\"built_in\">document</span>.getElementsByTagName( <span class=\"string\">'p'</span> )</span><br><span class=\"line\">    , newP = <span class=\"built_in\">document</span>.createElement( <span class=\"string\">'div'</span> )</span><br><span class=\"line\">    , i</span><br><span class=\"line\">    , node</span><br><span class=\"line\">    , fragment;</span><br><span class=\"line\"></span><br><span class=\"line\">  fragment = <span class=\"built_in\">document</span>.createDocumentFragment();</span><br><span class=\"line\">  newP.innerHTML = <span class=\"string\">'&lt;p data-i18n=\"p.text\"&gt;This is test text.&lt;/p&gt;'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; num; i++ ) &#123;</span><br><span class=\"line\">    node = newP.firstChild.cloneNode( <span class=\"literal\">true</span> );</span><br><span class=\"line\">    fragment.appendChild( node );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  i18n.translate( fragment );</span><br><span class=\"line\"></span><br><span class=\"line\">  p = p[p.length<span class=\"number\">-1</span>];</span><br><span class=\"line\">  p.parentNode.insertBefore( fragment, p.nextSibling );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再使用浏览器测试一下，同样没问题了。</p>\n<h3 id=\"再拆分一下\"><a href=\"#再拆分一下\" class=\"headerlink\" title=\"再拆分一下\"></a>再拆分一下</h3><p>现在<code>main.js</code>文件看起来比较复杂，可以再分别拆分成<code>var.js</code>，存放顶层变量；<code>util.js</code>，包含内部的函数；<code>api.js</code>，包含库的API。</p>\n<p>稍微修改一下<code>package.json</code>文件，相关位置改成拆分后的文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"jshint src/js/var.js &amp;&amp; jshint src/js/util.js &amp;&amp; jshint src/js/api.js\"</span>,</span><br><span class=\"line\"><span class=\"comment\">/* ... */</span></span><br><span class=\"line\">    <span class=\"string\">\"build:js\"</span>: <span class=\"string\">\"concat-cli -f src/js/wrap/prefix.js src/js/var.js src/js/util.js src/js/api.js src/js/wrap/suffix.js -o dist/i18n.js\"</span>,</span><br><span class=\"line\"><span class=\"comment\">/* ... */</span></span><br><span class=\"line\">    <span class=\"string\">\"test:js\"</span>: <span class=\"string\">\"concat-cli -f src/js/wrap/prefix.js src/js/var.js src/js/util.js src/js/api.js src/js/wrap/suffix.js -o test/i18n.js\"</span>,</span><br></pre></td></tr></table></figure>\n<p>最后运行<code>npm run build</code>将js库编译出来并压缩。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sat Apr 25 2015 14:00:30 GMT+0800 (China Standard Time)","title":"i18n.js库的编写兼使用npm辅助开发","path":"write-i18n-js-with-help-of-npm-as-build-tool/","eyeCatchImage":null,"excerpt":null,"date":"2015-04-23T11:06:26.000Z","pv":0,"totalPV":0,"categories":"技术 > 前端 > 编程语言 > javascript","tags":["javascript","i18n"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":5219},{"title":"《Understanding ECMAScript 6》笔记","id":"48","updated":"2015-11-06T06:44:52.000Z","date":"2015-10-21T14:17:05.000Z","_content":"\n> 在线免费阅读：https://leanpub.com/understandinges6/read/\n\n> 部分代码使用原书，代码版权归原书所有\n\n<a name=\"catalogue\"></a>\n\n1. [块级绑定（Block Bindings）](#block-bindings)\n1. [字符串](#string)\n1. [正则](#regex)\n1. [字符串模板（template strings）](#template-strings)\n1. [标签模板（tagged templates）](#tagged-templates)\n1. [函数](#function)\n1. [对象](#object)\n1. [解构（Destructuring）](#destructuring)\n1. [Symbols](#symbols)\n1. [生成器（Generators）](#generators)\n1. [迭代器（Iterators）](#iterators)\n1. [类](#class)\n1. [Promises](#promises)\n1. [模块（Modules）](#modules)\n1. [杂七杂八](#miscellaneous)\n\n<a name=\"block-bindings\"></a>\n## 块级绑定（Block Bindings）[↑](#catalogue)\n\n### let\n\n块级{}中有效\n\n同块级不可重复声明\n\n没有变量提升\n\n> 块级会形成暂时性死区（TDZ，Temporal Dead Zone）\n\n### const\n\n基本和 `let` 相同，值不可修改\n\n> `let` 和 `const` 最好不要在全局下使用\n\n<a name=\"string\"></a>\n## 字符串[↑](#catalogue)\n\n### unicode 支持更好\n\n### 新增部分函数，支持双字节\n\n`codePointAt`，双字节版的 `charCodeAt`，得到字符 unicode\n\n`fromCodePoint`，双字节版的 `fromCharCode`，从 unicode 得出字符\n\n`includes`，包含某字符串\n\n`startsWith`，以某字符串开始\n\n`endsWith`，以某字符串结束\n\n`repeat`，重复字符串\n\n`normalize`，unicode 正规化，举个例子：两个 unicode 字符合成一个\n\n<a name=\"regex\"></a>\n## 正则[↑](#catalogue)\n\n### 新增标志 `u`\n\n正则识别 unicode 字符\n\n### 新增标志 `y`\n\nsticky，部分浏览器早就实现了\n\n<a name=\"template-strings\"></a>\n## 字符串模板（template strings）[↑](#catalogue)\n\n```javascript\nlet a = 1\nlet b = 2\nlet s = `${a} ${a + b}`  // '1 3'\n```\n\n<a name=\"tagged-templates\"></a>\n## 标签模板（tagged templates）[↑](#catalogue)\n\n```javascript\nlet a = 1\nfunction tag ( strings, ...values ) {\n  console.log( strings )\n  console.log( values )\n  return values[0]\n}\nlet s = tag`a ${a}`  // 'a 1'\n// [\"a \", \"\", raw: Array[2]]\n// [1]\n```\n\n<a name=\"function\"></a>\n## 函数[↑](#catalogue)\n\n### 默认参数\n\n```javascript\nfunction foo ( bar = 1 ) {\n  console.log( bar )\n}\n```\n\n### 剩余参数\n\n```javascript\nfunction foo ( bar, ...rest ) {  // ✓\n  ;\n}\n\nfunction foo ( bar, ...rest, last ) {  // ×\n  ;\n}\n```\n\n### 函数属性 name\n\n各种例子\n\n```javascript\nfunction doSomething() {\n    // ...\n}\nconsole.log( doSomething.name );          // \"doSomething\"\n\nvar doAnotherThing = function () {\n    // ...\n};\nconsole.log( doAnotherThing.name );       // \"doAnotherThing\"\n\nvar doSomethingAgain = function doSomethingElse () {\n    // ...\n};\nconsole.log( doSomethingAgain.name );      // \"doSomethingElse\"\n\nvar person = {\n    get firstName () {\n        return \"Nicholas\"\n    },\n    sayName: function () {\n        console.log( this.name );\n    }\n}\nconsole.log( person.sayName.name );   // \"sayName\"\nconsole.log( person.firstName.name ); // \"get firstName\"\n\nconsole.log( doSomething.bind().name );   // \"bound doSomething\"\n\nconsole.log( ( new Function() ).name );     // \"anonymous\"\n```\n\n### new.target\n\n避免了很多使用 `new` 的坑\n\n```javascript\nfunction Foo () {\n  if ( typeof new.target !== \"undefined\" ) {\n    console.log( 'good' );  // using new\n  } else {\n    throw new Error( 'You must use new with Person.' )  // not using new\n  }\n}\n\nvar foo = new Foo();  // good\nfoo = Foo.call( foo );  // error!\n```\n\n### 块级函数\n\n块级中可定义函数\n\n### 箭头函数\n\n`this`, `super`, `arguments` 和 `new.target` 的值都在定义函数时绑定而非运行时绑定\n\n不可 `new`\n\n不可改变 `this` 的值\n\n没有 `arguments`\n\n> 跟普通函数一样拥有 name 属性\n\n```javascript\nvar foo = value => value;  // input value, output value\nvar foo = () => {};\nvar foo = ( x, y ) => x + y;\nvar foo = id => ({ x: 'x' });\n```\n\n```javascript\n// this 的绑定\nvar foo = {\n  init: function () {\n    document.addEventListener( 'click', (function ( e ) {\n      console.log( e.type );\n    }).bind( this ), false);\n  }\n};\n\n\n// ------------------------\n\nvar foo = {\n  init: function () {\n    document.addEventListener( 'click', e => {console.log( e.type )}, false);\n  }\n};\n```\n\n### 立即调用函数表达式（Immediately-Invoked Function Expressions (IIFEs)）\n\n```javascript\nlet foo = function ( s ) {\n  console.log( s );\n}( 'text' )  // text\n\n// -------------------------\n\nlet foo = ( s => {\n  console.log( s );\n})( 'text' )  // text\n```\n\n### 新增尾递归优化\n\n<a name=\"object\"></a>\n## 对象[↑](#catalogue)\n\n### 对象字面属性值简写（Property Initializer Shorthand）\n\n```javascript\nfunction foo ( text ) {\n  return {\n    name  // name: name\n  }\n}\n```\n\n### 对象方法简写（Method Initializer Shorthand）\n\n```javascript\nvar foo = {\n  bar () {}\n}\n```\n\n### 计算属性名语法\n\n对象的属性可以使用中括号 `[]` 表示需要「被计算」，结果转换为字符串作为属性名使用。\n\n```javascript\nlet a = function () {}\nlet foo = {\n  a: 'text a',\n  [a]: 'function a'\n}\nconsole.log( foo['a'] )  // text a\nconsole.log( foo[a] )  // function a\n```\n\n### Object.is()\n\n和经典的 `===` 几乎一样，区别在于：\n\n```javascript\nconsole.log( +0 === -0);             // true\nconsole.log( Object.is( +0, -0 ) );     // false\n\nconsole.log( NaN === NaN );           // false\nconsole.log( Object.is( NaN, NaN ) );   // true\n```\n\n### Object.assign()\n\n```javascript\nObject.assign( target, ...source )\n```\n\n读取源对象可列举的、自身的属性，将其赋值到目标对象上，覆盖旧属性，并非通常意义的复制。\n\n### 复制存取器属性\n\n> 此小节查询 MDN 后补充上\n\n使用 `Object.getOwnPropertyDescriptor(source, key)` 读取，使用 `Object.defineProperties` 定义。\n\n### 属性允许重复定义\n\n属性以最后一个定义的值为准\n\n### 修改原型\n\n`Object.getPrototypeOf`，得到原型\n\n`Object.setPrototypeOf`，设置原型\n\n### super\n\n用以访问对象的 prototype\n\n<a name=\"destructuring\"></a>\n## 解构（Destructuring）[↑](#catalogue)\n\n```javascript\nvar {a, b: { c, d }} = c\n( {a, b: { c, d }} = c )\n\nvar [a, [b, c]] = d\nvar [a, , [b, c]] = d  // 跳过一个\n\nfunction foo ( { bar1, bar2 } = {} ) {\n  ;\n}\n```\n\n解构可以有默认值，但只会在需要的时候求值。\n\n[2ality](http://www.2ality.com/2015/01/es6-destructuring.html) 有更详细清晰的解释：\n\n```javascript\nlet {prop: y=someFunc()} = someValue;\n\nlet x, y;\n[x=3, y=x] = [];     // x=3; y=3\n[x=3, y=x] = [7];    // x=7; y=7\n[x=3, y=x] = [7, 2]; // x=7; y=2\n```\n\n<a name=\"symbols\"></a>\n## Symbols（不知道如何翻译，是第七种原始类型）[↑](#catalogue)\n\n```javascript\nvar foo = Symbol()\nvar foo = Symbol( 'bar' )\n```\n\n`Symbol( 'description' )` 生成局部 Symbol，即使 `description` 相同生成的 Symbol 也不一样\n\n`Symbol.for( 'description' )` 生成全局 Symbol，`description` 相同则 Symbol 相同\n\n### 获取对象的 Symbol 数组\n\n`Object.getOwnPropertySymbols( object )`\n\n### 强制转换 Symbol 为 String\n\n> 原书本节未完成\n\n### 有名的预定义 Symbol\n\n> 原书本节大部分未完成\n\n<a name=\"generators\"></a>\n## 生成器（Generators）[↑](#catalogue)\n\n生成迭代器的函数\n\n```javascript\nfunction *createIterator() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar o = {\n  *createIterator ( items ) {\n    for ( let i=0; i < items.length; i++ ) {\n      yield items[i];\n    }\n  }\n};\n\nlet iterator = o.createIterator( [1, 2, 3] );\n```\n\n<a name=\"iterators\"></a>\n## 迭代器（Iterators）[↑](#catalogue)\n\n### for-of 语法\n\n数组、字符串、映射（Map）、集合（Set）和元素数组（NodeList）都可迭代（iterable），可使用 for-of 语法\n\n### 得到内置迭代器\n\nSymbol.iterator 指向得到迭代器的函数\n\n```javascript\nlet values = [1, 2, 3];\nlet iterator = values[Symbol.iterator]();\niterator.next();  // 1\n```\n\n### 自定义迭代器\n\n```javascript\nlet collection = {\n  items: [],\n  *[Symbol.iterator]() {\n    yield *this.items.values();  // `yield *` 语法，委托了数组 `items` 的内置迭代器\n  }\n};\n```\n\n### 对象、数组、映射、集合都具有的默认迭代器\n\n`ertries()`，返回键值对迭代器\n\n`keys()`，返回键迭代器\n\n`values()`，返回值迭代器\n\n### 字符串迭代器\n\n通过 `[]` 的访问是 code unit 方式\n\n通过迭代器则是字符方式（几乎是，某些 unicode 支持不足）\n\n### 元素数组（NodeList）迭代器\n\n返回的是数组中的单个元素\n\n### 向迭代器传参数\n\n```javascript\nfunction *foo () {\n  let bar = yield 1;\n}\n\nlet it = foo()\nconsole.log( it.next() )  // Object {value: 1, done: false}，执行语句 `yield 1` 然后暂停\nconsole.log( it.next( 2 ) )  // Object {value: undefined, done: true}，将 2 作为 `yield 1` 的返回值，\n                             // 迭代器内部继续执行语句 `let bar = 2`，\n                             // 之后执行完毕，无返回值，`value` 为 `undefined`，`done` 为 `true`\nconsole.log( it.next() )  // Object {value: undefined, done: true}\n```\n\n### 生成器使用 return 提前返回\n\n```javascript\nfunction *createIterator() {\n  yield 1;\n  return 42;\n  yield 2;\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next());           // \"{ value: 1, done: false }\"\nconsole.log(iterator.next());           // \"{ value: 42, done: true }\"\nconsole.log(iterator.next());           // \"{ value: undefined, done: true }\"\n```\n\n### 委托生成器\n\n使用 `yield *`\n\n```javascript\nfunction *createNumberIterator() {\n  yield 1;\n  yield 2;\n  return 3;\n}\n\nfunction *createRepeatingIterator(count) {\n  for (let i=0; i < count; i++) {\n    yield \"repeat\";\n  }\n}\n\nfunction *createCombinedIterator() {\n  let result = yield *createNumberIterator();\n  yield *createRepeatingIterator(result);\n}\n\nvar iterator = createCombinedIterator();\n\nconsole.log(iterator.next());           // \"{ value: 1, done: false }\"\nconsole.log(iterator.next());           // \"{ value: 2, done: false }\"\nconsole.log(iterator.next());           // \"{ value: \"repeat\", done: false }\"\nconsole.log(iterator.next());           // \"{ value: \"repeat\", done: false }\"\nconsole.log(iterator.next());           // \"{ value: \"repeat\", done: false }\"\nconsole.log(iterator.next());           // \"{ value: undefined, done: true }\"\n```\n\n可以 `yield *\"string\"`，会调用字符串的默认迭代器\n\n```javascript\nfunction *foo () {\n  yield * \"hello\"\n}\nlet it = foo()\nconsole.log( it.next() )  // Object {value: \"h\", done: false}\nconsole.log( it.next() )  // Object {value: \"e\", done: false}\n```\n\n### 异步任务调度\n\n以下是书中的例子，写得并不好，变量 `task` 的管理容易出问题：\n\n```javascript\nvar fs = require(\"fs\");\n\nvar task;\n\nfunction readConfigFile() {\n    fs.readFile(\"config.json\", function(err, contents) {\n        if (err) {\n            task.throw(err);\n        } else {\n            task.next(contents);\n        }\n    });\n}\n\nfunction *init() {\n    var contents = yield readConfigFile();\n    doSomethingWith(contents);\n    console.log(\"Done\");\n}\n\ntask = init();\ntask.next();\n```\n\n<a name=\"class\"></a>\n## 类[↑](#catalogue)\n\n### 类声明\n\n```javascript\nclass foo {\n  // 相当于构造函数\n  constructor ( name ) {\n    this.name = name;\n  }\n  // 相当于 foo.prototype.bar\n  bar () {\n    console.log( this.name );\n  }\n}\n```\n\n类的属性最好都在构造函数里面创建。\n\n类声明本质上就是以前的函数声明，除了以下有所不同：\n\n1. 类声明不会像函数声明那样被提升\n1. 类内部的代码全部以 `strict mode` 运行\n1. 所有方法都是不可列举的，相当于使用了 `Object.defineProperty()`\n1. 不使用 `new` 会抛异常\n1. 以类名命名方法来覆盖类名会抛异常（类名对于类内部来说是以 `const` 定义的，对于外部则不是）\n\n### 类表达式\n\n```javascript\nlet foo = class {}\n```\n\n```javascript\nlet foo = class foo2 {}  // foo === foo2\n```\n\n匿名类作为参数\n\n```javascript\nfunction createFoo ( c ) {\n  return new c()\n}\n\ncreateFoo( class {\n  constructor () {\n    ;\n  }\n})\n```\n\n立即调用类表达式（有点像立即调用函数表达式）\n\n```javascript\nlet foo = new class {\n  constructor ( name ) {\n    this.name = name\n  }\n}( 'foo' )\n```\n\n### 存取器属性\n\n```javascript\nclass foo {\n  constructor ( name ) {\n    this.name = name\n  }\n\n  get className () {\n    return 'class ' + this.name\n  }\n\n  set className ( value ) {\n    this.name = 'class' + value\n  }\n}\n```\n\n### 静态成员\n\n```javascript\nclass foo {\n  constructor ( name ) {\n    this.name = name\n  }\n\n  // 相当于 foo.prototype.bar\n  bar () {\n    console.log( this.name )\n  }\n\n  // 相当于 foo.staticBar\n  static staticBar () {\n    console.log( this.name )\n  }\n\n  // get / set 也可以用\n  static get barName () {\n    return 'bar'\n  }\n}\n```\n\n> 静态成员同样不可列举\n\n### 派生类\n\n比起 ECMAScript5，ECMAScript6 的派生方便了很多\n\n```javascript\nclass Rectangle {\n  constructor ( length, width ) {\n    this.length = length;\n    this.width = width;\n  }\n\n  getArea () {\n    return this.length * this.width;\n  }\n}\n\nclass Square extends Rectangle {\n  constructor ( length ) {\n    super( length, length );\n  }\n}\n```\n\n在派生类的构造函数中，调用 `super` 是必须的。如果连构造函数都没有，则：\n\n```javascript\nclass Square extends Rectangle {\n  // 无构造函数\n}\n\n// 相当于\nclass Square extends Rectangle {\n  constructor ( ...args ) {\n    super( ...args )\n  }\n}\n```\n\n> 1. 只能在派生类中用 `super()`\n> 1. 使用 `this` 前必先调用 `super()` 来**初始化** `this`\n> 1. 只有在构造函数返回一个对象的时候才可以不用 `super()`\n\n### 类方法\n\n覆盖、隐藏父类方法\n\n```javascript\nclass Square extends Rectangle {\n  constructor ( length ) {\n    super( length, length );\n  }\n  getArea () {\n    return this.length * this.length;\n  }\n}\n```\n\n仍然可以使用 `super` 调用父类方法\n\n```javascript\nclass Square extends Rectangle {\n    constructor ( length ) {\n        super( length, length );\n    }\n    getArea () {\n        return super.getArea();\n    }\n}\n```\n\n类方法没有 `[[Construct]]` 这个内部方法，所以不能被 `new`。（[什么是`[[Construct]]`](http://www.ecma-international.org/ecma-262/5.1/#sec-13.2.2)）\n\n### 静态成员\n\n相当于 ES5 中定义在构造函数上的方法（注意不是定义在构造函数的原型上），派生类显然也能调用\n\n### extends 关键字后面可以使用表达式\n\n除了 `null` 和生成器函数外\n\n```javascript\n// 使用函数\nfunction base () {}\nclass foo extends base {}\n\n// 使用表达式\nfunction base () {}\nfunction getBase () {\n  return base\n}\nclass foo extends getBase() {}\n\n// 混合模式（多继承？!）\nlet AMinin = {\n  aF = function () {}\n}\nlet BMinin = {\n  bF = function () {}\n}\nfunction mixin ( ...mixins ) {\n  var base = function () {}\n  Object.assign( base.prototype, ...mixins )\n  return base\n}\nclass foo extends mixin( AMinin, BMinin ) {}\n\n// 内置类型\nclass foo extends Array {}\nclass foo extends String {}\n```\n\n### new.target\n\n能够得知类的调用状态，应用例如：阻止抽象类被实例化\n\n```javascript\nclass Shape {\n  constructor() {\n    if (new.target === Shape) {\n      throw new Error(\"This class cannot be instantiated directly.\")\n    }\n  }\n}\n```\n\n<a name=\"promises\"></a>\n## Promises[↑](#catalogue)\n\nPromise 是老朋友了，所以没有什么好记录的，就记一下语法。\n\n```javascript\nlet p1 = new Promise( function ( resolve, reject ) {\n    resolve( 42 );\n});\n\nlet p2 = Promise.resolve( 42 );\n\nlet p3 = Promise.reject( 43 );\n\nlet p4 = Promise.all( [p1, p2, p3] );  // 等待所有 Promise 返回\n\nlet p5 = Promise.race( [p1, p2, p3] );  // 最快的一个 Promise 返回就返回\n\np4.then( function ( value ) {\n    console.log( value );\n}).catch( function ( value ) {\n    console.log( value );\n})\n```\n\n<a name=\"modules\"></a>\n## 模块（Modules）[↑](#catalogue)\n\n> 注：本章的代码似乎有一些问题，基本参考 MDN 为准\n\n1. 模块中的代码自动以严格模式运行\n1. 模块中的顶层变量只是模块中顶层，并非全局顶层\n1. 顶层中的 `this` 的值为 `undefined`\n1. 代码中不允许 HTML 风格的注释\n1. 模块必须有导出的东西\n\n### 基本导入导出\n\n直接使用原书代码：\n\n```javascript\n// 导出数据\nexport var color = \"red\";\nexport let name = \"Nicholas\";\nexport const magicNumber = 7;\n\n// 导出函数\nexport function sum(num1, num2) {\n    return num1 + num1;\n}\n\n// 导出类\nexport class Rectangle {\n    constructor(length, width) {\n        this.length = length;\n        this.width = width;\n    }\n}\n\n// 导出引用\nfunction multiply(num1, num2) {\n    return num1 * num2;\n}\nexport multiply;\n\n// 默认导出\nexport default function () {\n    return;\n}\n\n// export as\nexport { multiply as foo }\n```\n\n1. 除非使用 `default` 语法，否则函数和类都不能使用匿名\n1. `export` 只能用在顶层中\n\n`as` 和 `default` 语法的情况，给出一个来自 [2ality](http://www.2ality.com/2015/07/es6-module-exports.html) 的表格\n\n|Statement                      |Local name  |Export name|\n|-------------------------------|------------|-----------|\n|export {v as x};               | 'v'        | 'x'       |\n|export default function f() {} | 'f'        | 'default' |\n|export default function () {}  | '*default*'| 'default' |\n|export default 123;            | '*default*'| 'default' |\n\n可以看出，所谓的默认导出其实就是用了 `default` 作为名字罢了。\n\n还能够将其他模块重新导出\n\n|Statement                  | Module|Import name|Export name|\n|---------------------------|-------|-----------|-----------|\n|export {v} from 'mod';     |'mod'  |'v'        |'v'        |\n|export {v as x} from 'mod';|'mod'  |'v'        |'x'        |\n|export * from 'mod';       |'mod'  |'*'        |null       |\n\n导入有很多方法，基本使用到的其实只有几种，以下来自 MDN：\n\n```javascript\nimport name from \"module-name\";\nimport * as name from \"module-name\";\nimport { member } from \"module-name\";\nimport { member as alias } from \"module-name\";\nimport { member1 , member2 } from \"module-name\";\nimport { member1 , member2 as alias2 , [...] } from \"module-name\";\nimport defaultMember, { member [ , [...] ] } from \"module-name\";\nimport defaultMember, * as alias from \"module-name\";\nimport defaultMember from \"module-name\";\nimport \"module-name\";\n```\n\n最后那种导入是相当于将代码执行了一次。通常可以用来做 `polyfills` 和 `shims`。\n\n<a name=\"miscellaneous\"></a>\n## 杂七杂八[↑](#catalogue)\n\n`Number.isInteger`，判断整数\n\n`Number.isSafeInteger`，判断是否是有效整数\n\nMath 中加入很多函数，例如双曲正弦、双曲余弦之类的\n\n","source":"_posts/《Understanding-ECMAScript-6》笔记.md","raw":"---\ntitle: 《Understanding ECMAScript 6》笔记\ncategories:\n  - [技术, 前端]\n  - [编程语言, javascript]\ntags: [javascript, ECMAScript6, note]\npermalink: understanding-ecmascript6-note\nid: 48\nupdated: '2015-11-06 14:44:52'\ndate: 2015-10-21 22:17:05\n---\n\n> 在线免费阅读：https://leanpub.com/understandinges6/read/\n\n> 部分代码使用原书，代码版权归原书所有\n\n<a name=\"catalogue\"></a>\n\n1. [块级绑定（Block Bindings）](#block-bindings)\n1. [字符串](#string)\n1. [正则](#regex)\n1. [字符串模板（template strings）](#template-strings)\n1. [标签模板（tagged templates）](#tagged-templates)\n1. [函数](#function)\n1. [对象](#object)\n1. [解构（Destructuring）](#destructuring)\n1. [Symbols](#symbols)\n1. [生成器（Generators）](#generators)\n1. [迭代器（Iterators）](#iterators)\n1. [类](#class)\n1. [Promises](#promises)\n1. [模块（Modules）](#modules)\n1. [杂七杂八](#miscellaneous)\n\n<a name=\"block-bindings\"></a>\n## 块级绑定（Block Bindings）[↑](#catalogue)\n\n### let\n\n块级{}中有效\n\n同块级不可重复声明\n\n没有变量提升\n\n> 块级会形成暂时性死区（TDZ，Temporal Dead Zone）\n\n### const\n\n基本和 `let` 相同，值不可修改\n\n> `let` 和 `const` 最好不要在全局下使用\n\n<a name=\"string\"></a>\n## 字符串[↑](#catalogue)\n\n### unicode 支持更好\n\n### 新增部分函数，支持双字节\n\n`codePointAt`，双字节版的 `charCodeAt`，得到字符 unicode\n\n`fromCodePoint`，双字节版的 `fromCharCode`，从 unicode 得出字符\n\n`includes`，包含某字符串\n\n`startsWith`，以某字符串开始\n\n`endsWith`，以某字符串结束\n\n`repeat`，重复字符串\n\n`normalize`，unicode 正规化，举个例子：两个 unicode 字符合成一个\n\n<a name=\"regex\"></a>\n## 正则[↑](#catalogue)\n\n### 新增标志 `u`\n\n正则识别 unicode 字符\n\n### 新增标志 `y`\n\nsticky，部分浏览器早就实现了\n\n<a name=\"template-strings\"></a>\n## 字符串模板（template strings）[↑](#catalogue)\n\n```javascript\nlet a = 1\nlet b = 2\nlet s = `${a} ${a + b}`  // '1 3'\n```\n\n<a name=\"tagged-templates\"></a>\n## 标签模板（tagged templates）[↑](#catalogue)\n\n```javascript\nlet a = 1\nfunction tag ( strings, ...values ) {\n  console.log( strings )\n  console.log( values )\n  return values[0]\n}\nlet s = tag`a ${a}`  // 'a 1'\n// [\"a \", \"\", raw: Array[2]]\n// [1]\n```\n\n<a name=\"function\"></a>\n## 函数[↑](#catalogue)\n\n### 默认参数\n\n```javascript\nfunction foo ( bar = 1 ) {\n  console.log( bar )\n}\n```\n\n### 剩余参数\n\n```javascript\nfunction foo ( bar, ...rest ) {  // ✓\n  ;\n}\n\nfunction foo ( bar, ...rest, last ) {  // ×\n  ;\n}\n```\n\n### 函数属性 name\n\n各种例子\n\n```javascript\nfunction doSomething() {\n    // ...\n}\nconsole.log( doSomething.name );          // \"doSomething\"\n\nvar doAnotherThing = function () {\n    // ...\n};\nconsole.log( doAnotherThing.name );       // \"doAnotherThing\"\n\nvar doSomethingAgain = function doSomethingElse () {\n    // ...\n};\nconsole.log( doSomethingAgain.name );      // \"doSomethingElse\"\n\nvar person = {\n    get firstName () {\n        return \"Nicholas\"\n    },\n    sayName: function () {\n        console.log( this.name );\n    }\n}\nconsole.log( person.sayName.name );   // \"sayName\"\nconsole.log( person.firstName.name ); // \"get firstName\"\n\nconsole.log( doSomething.bind().name );   // \"bound doSomething\"\n\nconsole.log( ( new Function() ).name );     // \"anonymous\"\n```\n\n### new.target\n\n避免了很多使用 `new` 的坑\n\n```javascript\nfunction Foo () {\n  if ( typeof new.target !== \"undefined\" ) {\n    console.log( 'good' );  // using new\n  } else {\n    throw new Error( 'You must use new with Person.' )  // not using new\n  }\n}\n\nvar foo = new Foo();  // good\nfoo = Foo.call( foo );  // error!\n```\n\n### 块级函数\n\n块级中可定义函数\n\n### 箭头函数\n\n`this`, `super`, `arguments` 和 `new.target` 的值都在定义函数时绑定而非运行时绑定\n\n不可 `new`\n\n不可改变 `this` 的值\n\n没有 `arguments`\n\n> 跟普通函数一样拥有 name 属性\n\n```javascript\nvar foo = value => value;  // input value, output value\nvar foo = () => {};\nvar foo = ( x, y ) => x + y;\nvar foo = id => ({ x: 'x' });\n```\n\n```javascript\n// this 的绑定\nvar foo = {\n  init: function () {\n    document.addEventListener( 'click', (function ( e ) {\n      console.log( e.type );\n    }).bind( this ), false);\n  }\n};\n\n\n// ------------------------\n\nvar foo = {\n  init: function () {\n    document.addEventListener( 'click', e => {console.log( e.type )}, false);\n  }\n};\n```\n\n### 立即调用函数表达式（Immediately-Invoked Function Expressions (IIFEs)）\n\n```javascript\nlet foo = function ( s ) {\n  console.log( s );\n}( 'text' )  // text\n\n// -------------------------\n\nlet foo = ( s => {\n  console.log( s );\n})( 'text' )  // text\n```\n\n### 新增尾递归优化\n\n<a name=\"object\"></a>\n## 对象[↑](#catalogue)\n\n### 对象字面属性值简写（Property Initializer Shorthand）\n\n```javascript\nfunction foo ( text ) {\n  return {\n    name  // name: name\n  }\n}\n```\n\n### 对象方法简写（Method Initializer Shorthand）\n\n```javascript\nvar foo = {\n  bar () {}\n}\n```\n\n### 计算属性名语法\n\n对象的属性可以使用中括号 `[]` 表示需要「被计算」，结果转换为字符串作为属性名使用。\n\n```javascript\nlet a = function () {}\nlet foo = {\n  a: 'text a',\n  [a]: 'function a'\n}\nconsole.log( foo['a'] )  // text a\nconsole.log( foo[a] )  // function a\n```\n\n### Object.is()\n\n和经典的 `===` 几乎一样，区别在于：\n\n```javascript\nconsole.log( +0 === -0);             // true\nconsole.log( Object.is( +0, -0 ) );     // false\n\nconsole.log( NaN === NaN );           // false\nconsole.log( Object.is( NaN, NaN ) );   // true\n```\n\n### Object.assign()\n\n```javascript\nObject.assign( target, ...source )\n```\n\n读取源对象可列举的、自身的属性，将其赋值到目标对象上，覆盖旧属性，并非通常意义的复制。\n\n### 复制存取器属性\n\n> 此小节查询 MDN 后补充上\n\n使用 `Object.getOwnPropertyDescriptor(source, key)` 读取，使用 `Object.defineProperties` 定义。\n\n### 属性允许重复定义\n\n属性以最后一个定义的值为准\n\n### 修改原型\n\n`Object.getPrototypeOf`，得到原型\n\n`Object.setPrototypeOf`，设置原型\n\n### super\n\n用以访问对象的 prototype\n\n<a name=\"destructuring\"></a>\n## 解构（Destructuring）[↑](#catalogue)\n\n```javascript\nvar {a, b: { c, d }} = c\n( {a, b: { c, d }} = c )\n\nvar [a, [b, c]] = d\nvar [a, , [b, c]] = d  // 跳过一个\n\nfunction foo ( { bar1, bar2 } = {} ) {\n  ;\n}\n```\n\n解构可以有默认值，但只会在需要的时候求值。\n\n[2ality](http://www.2ality.com/2015/01/es6-destructuring.html) 有更详细清晰的解释：\n\n```javascript\nlet {prop: y=someFunc()} = someValue;\n\nlet x, y;\n[x=3, y=x] = [];     // x=3; y=3\n[x=3, y=x] = [7];    // x=7; y=7\n[x=3, y=x] = [7, 2]; // x=7; y=2\n```\n\n<a name=\"symbols\"></a>\n## Symbols（不知道如何翻译，是第七种原始类型）[↑](#catalogue)\n\n```javascript\nvar foo = Symbol()\nvar foo = Symbol( 'bar' )\n```\n\n`Symbol( 'description' )` 生成局部 Symbol，即使 `description` 相同生成的 Symbol 也不一样\n\n`Symbol.for( 'description' )` 生成全局 Symbol，`description` 相同则 Symbol 相同\n\n### 获取对象的 Symbol 数组\n\n`Object.getOwnPropertySymbols( object )`\n\n### 强制转换 Symbol 为 String\n\n> 原书本节未完成\n\n### 有名的预定义 Symbol\n\n> 原书本节大部分未完成\n\n<a name=\"generators\"></a>\n## 生成器（Generators）[↑](#catalogue)\n\n生成迭代器的函数\n\n```javascript\nfunction *createIterator() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nvar o = {\n  *createIterator ( items ) {\n    for ( let i=0; i < items.length; i++ ) {\n      yield items[i];\n    }\n  }\n};\n\nlet iterator = o.createIterator( [1, 2, 3] );\n```\n\n<a name=\"iterators\"></a>\n## 迭代器（Iterators）[↑](#catalogue)\n\n### for-of 语法\n\n数组、字符串、映射（Map）、集合（Set）和元素数组（NodeList）都可迭代（iterable），可使用 for-of 语法\n\n### 得到内置迭代器\n\nSymbol.iterator 指向得到迭代器的函数\n\n```javascript\nlet values = [1, 2, 3];\nlet iterator = values[Symbol.iterator]();\niterator.next();  // 1\n```\n\n### 自定义迭代器\n\n```javascript\nlet collection = {\n  items: [],\n  *[Symbol.iterator]() {\n    yield *this.items.values();  // `yield *` 语法，委托了数组 `items` 的内置迭代器\n  }\n};\n```\n\n### 对象、数组、映射、集合都具有的默认迭代器\n\n`ertries()`，返回键值对迭代器\n\n`keys()`，返回键迭代器\n\n`values()`，返回值迭代器\n\n### 字符串迭代器\n\n通过 `[]` 的访问是 code unit 方式\n\n通过迭代器则是字符方式（几乎是，某些 unicode 支持不足）\n\n### 元素数组（NodeList）迭代器\n\n返回的是数组中的单个元素\n\n### 向迭代器传参数\n\n```javascript\nfunction *foo () {\n  let bar = yield 1;\n}\n\nlet it = foo()\nconsole.log( it.next() )  // Object {value: 1, done: false}，执行语句 `yield 1` 然后暂停\nconsole.log( it.next( 2 ) )  // Object {value: undefined, done: true}，将 2 作为 `yield 1` 的返回值，\n                             // 迭代器内部继续执行语句 `let bar = 2`，\n                             // 之后执行完毕，无返回值，`value` 为 `undefined`，`done` 为 `true`\nconsole.log( it.next() )  // Object {value: undefined, done: true}\n```\n\n### 生成器使用 return 提前返回\n\n```javascript\nfunction *createIterator() {\n  yield 1;\n  return 42;\n  yield 2;\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next());           // \"{ value: 1, done: false }\"\nconsole.log(iterator.next());           // \"{ value: 42, done: true }\"\nconsole.log(iterator.next());           // \"{ value: undefined, done: true }\"\n```\n\n### 委托生成器\n\n使用 `yield *`\n\n```javascript\nfunction *createNumberIterator() {\n  yield 1;\n  yield 2;\n  return 3;\n}\n\nfunction *createRepeatingIterator(count) {\n  for (let i=0; i < count; i++) {\n    yield \"repeat\";\n  }\n}\n\nfunction *createCombinedIterator() {\n  let result = yield *createNumberIterator();\n  yield *createRepeatingIterator(result);\n}\n\nvar iterator = createCombinedIterator();\n\nconsole.log(iterator.next());           // \"{ value: 1, done: false }\"\nconsole.log(iterator.next());           // \"{ value: 2, done: false }\"\nconsole.log(iterator.next());           // \"{ value: \"repeat\", done: false }\"\nconsole.log(iterator.next());           // \"{ value: \"repeat\", done: false }\"\nconsole.log(iterator.next());           // \"{ value: \"repeat\", done: false }\"\nconsole.log(iterator.next());           // \"{ value: undefined, done: true }\"\n```\n\n可以 `yield *\"string\"`，会调用字符串的默认迭代器\n\n```javascript\nfunction *foo () {\n  yield * \"hello\"\n}\nlet it = foo()\nconsole.log( it.next() )  // Object {value: \"h\", done: false}\nconsole.log( it.next() )  // Object {value: \"e\", done: false}\n```\n\n### 异步任务调度\n\n以下是书中的例子，写得并不好，变量 `task` 的管理容易出问题：\n\n```javascript\nvar fs = require(\"fs\");\n\nvar task;\n\nfunction readConfigFile() {\n    fs.readFile(\"config.json\", function(err, contents) {\n        if (err) {\n            task.throw(err);\n        } else {\n            task.next(contents);\n        }\n    });\n}\n\nfunction *init() {\n    var contents = yield readConfigFile();\n    doSomethingWith(contents);\n    console.log(\"Done\");\n}\n\ntask = init();\ntask.next();\n```\n\n<a name=\"class\"></a>\n## 类[↑](#catalogue)\n\n### 类声明\n\n```javascript\nclass foo {\n  // 相当于构造函数\n  constructor ( name ) {\n    this.name = name;\n  }\n  // 相当于 foo.prototype.bar\n  bar () {\n    console.log( this.name );\n  }\n}\n```\n\n类的属性最好都在构造函数里面创建。\n\n类声明本质上就是以前的函数声明，除了以下有所不同：\n\n1. 类声明不会像函数声明那样被提升\n1. 类内部的代码全部以 `strict mode` 运行\n1. 所有方法都是不可列举的，相当于使用了 `Object.defineProperty()`\n1. 不使用 `new` 会抛异常\n1. 以类名命名方法来覆盖类名会抛异常（类名对于类内部来说是以 `const` 定义的，对于外部则不是）\n\n### 类表达式\n\n```javascript\nlet foo = class {}\n```\n\n```javascript\nlet foo = class foo2 {}  // foo === foo2\n```\n\n匿名类作为参数\n\n```javascript\nfunction createFoo ( c ) {\n  return new c()\n}\n\ncreateFoo( class {\n  constructor () {\n    ;\n  }\n})\n```\n\n立即调用类表达式（有点像立即调用函数表达式）\n\n```javascript\nlet foo = new class {\n  constructor ( name ) {\n    this.name = name\n  }\n}( 'foo' )\n```\n\n### 存取器属性\n\n```javascript\nclass foo {\n  constructor ( name ) {\n    this.name = name\n  }\n\n  get className () {\n    return 'class ' + this.name\n  }\n\n  set className ( value ) {\n    this.name = 'class' + value\n  }\n}\n```\n\n### 静态成员\n\n```javascript\nclass foo {\n  constructor ( name ) {\n    this.name = name\n  }\n\n  // 相当于 foo.prototype.bar\n  bar () {\n    console.log( this.name )\n  }\n\n  // 相当于 foo.staticBar\n  static staticBar () {\n    console.log( this.name )\n  }\n\n  // get / set 也可以用\n  static get barName () {\n    return 'bar'\n  }\n}\n```\n\n> 静态成员同样不可列举\n\n### 派生类\n\n比起 ECMAScript5，ECMAScript6 的派生方便了很多\n\n```javascript\nclass Rectangle {\n  constructor ( length, width ) {\n    this.length = length;\n    this.width = width;\n  }\n\n  getArea () {\n    return this.length * this.width;\n  }\n}\n\nclass Square extends Rectangle {\n  constructor ( length ) {\n    super( length, length );\n  }\n}\n```\n\n在派生类的构造函数中，调用 `super` 是必须的。如果连构造函数都没有，则：\n\n```javascript\nclass Square extends Rectangle {\n  // 无构造函数\n}\n\n// 相当于\nclass Square extends Rectangle {\n  constructor ( ...args ) {\n    super( ...args )\n  }\n}\n```\n\n> 1. 只能在派生类中用 `super()`\n> 1. 使用 `this` 前必先调用 `super()` 来**初始化** `this`\n> 1. 只有在构造函数返回一个对象的时候才可以不用 `super()`\n\n### 类方法\n\n覆盖、隐藏父类方法\n\n```javascript\nclass Square extends Rectangle {\n  constructor ( length ) {\n    super( length, length );\n  }\n  getArea () {\n    return this.length * this.length;\n  }\n}\n```\n\n仍然可以使用 `super` 调用父类方法\n\n```javascript\nclass Square extends Rectangle {\n    constructor ( length ) {\n        super( length, length );\n    }\n    getArea () {\n        return super.getArea();\n    }\n}\n```\n\n类方法没有 `[[Construct]]` 这个内部方法，所以不能被 `new`。（[什么是`[[Construct]]`](http://www.ecma-international.org/ecma-262/5.1/#sec-13.2.2)）\n\n### 静态成员\n\n相当于 ES5 中定义在构造函数上的方法（注意不是定义在构造函数的原型上），派生类显然也能调用\n\n### extends 关键字后面可以使用表达式\n\n除了 `null` 和生成器函数外\n\n```javascript\n// 使用函数\nfunction base () {}\nclass foo extends base {}\n\n// 使用表达式\nfunction base () {}\nfunction getBase () {\n  return base\n}\nclass foo extends getBase() {}\n\n// 混合模式（多继承？!）\nlet AMinin = {\n  aF = function () {}\n}\nlet BMinin = {\n  bF = function () {}\n}\nfunction mixin ( ...mixins ) {\n  var base = function () {}\n  Object.assign( base.prototype, ...mixins )\n  return base\n}\nclass foo extends mixin( AMinin, BMinin ) {}\n\n// 内置类型\nclass foo extends Array {}\nclass foo extends String {}\n```\n\n### new.target\n\n能够得知类的调用状态，应用例如：阻止抽象类被实例化\n\n```javascript\nclass Shape {\n  constructor() {\n    if (new.target === Shape) {\n      throw new Error(\"This class cannot be instantiated directly.\")\n    }\n  }\n}\n```\n\n<a name=\"promises\"></a>\n## Promises[↑](#catalogue)\n\nPromise 是老朋友了，所以没有什么好记录的，就记一下语法。\n\n```javascript\nlet p1 = new Promise( function ( resolve, reject ) {\n    resolve( 42 );\n});\n\nlet p2 = Promise.resolve( 42 );\n\nlet p3 = Promise.reject( 43 );\n\nlet p4 = Promise.all( [p1, p2, p3] );  // 等待所有 Promise 返回\n\nlet p5 = Promise.race( [p1, p2, p3] );  // 最快的一个 Promise 返回就返回\n\np4.then( function ( value ) {\n    console.log( value );\n}).catch( function ( value ) {\n    console.log( value );\n})\n```\n\n<a name=\"modules\"></a>\n## 模块（Modules）[↑](#catalogue)\n\n> 注：本章的代码似乎有一些问题，基本参考 MDN 为准\n\n1. 模块中的代码自动以严格模式运行\n1. 模块中的顶层变量只是模块中顶层，并非全局顶层\n1. 顶层中的 `this` 的值为 `undefined`\n1. 代码中不允许 HTML 风格的注释\n1. 模块必须有导出的东西\n\n### 基本导入导出\n\n直接使用原书代码：\n\n```javascript\n// 导出数据\nexport var color = \"red\";\nexport let name = \"Nicholas\";\nexport const magicNumber = 7;\n\n// 导出函数\nexport function sum(num1, num2) {\n    return num1 + num1;\n}\n\n// 导出类\nexport class Rectangle {\n    constructor(length, width) {\n        this.length = length;\n        this.width = width;\n    }\n}\n\n// 导出引用\nfunction multiply(num1, num2) {\n    return num1 * num2;\n}\nexport multiply;\n\n// 默认导出\nexport default function () {\n    return;\n}\n\n// export as\nexport { multiply as foo }\n```\n\n1. 除非使用 `default` 语法，否则函数和类都不能使用匿名\n1. `export` 只能用在顶层中\n\n`as` 和 `default` 语法的情况，给出一个来自 [2ality](http://www.2ality.com/2015/07/es6-module-exports.html) 的表格\n\n|Statement                      |Local name  |Export name|\n|-------------------------------|------------|-----------|\n|export {v as x};               | 'v'        | 'x'       |\n|export default function f() {} | 'f'        | 'default' |\n|export default function () {}  | '*default*'| 'default' |\n|export default 123;            | '*default*'| 'default' |\n\n可以看出，所谓的默认导出其实就是用了 `default` 作为名字罢了。\n\n还能够将其他模块重新导出\n\n|Statement                  | Module|Import name|Export name|\n|---------------------------|-------|-----------|-----------|\n|export {v} from 'mod';     |'mod'  |'v'        |'v'        |\n|export {v as x} from 'mod';|'mod'  |'v'        |'x'        |\n|export * from 'mod';       |'mod'  |'*'        |null       |\n\n导入有很多方法，基本使用到的其实只有几种，以下来自 MDN：\n\n```javascript\nimport name from \"module-name\";\nimport * as name from \"module-name\";\nimport { member } from \"module-name\";\nimport { member as alias } from \"module-name\";\nimport { member1 , member2 } from \"module-name\";\nimport { member1 , member2 as alias2 , [...] } from \"module-name\";\nimport defaultMember, { member [ , [...] ] } from \"module-name\";\nimport defaultMember, * as alias from \"module-name\";\nimport defaultMember from \"module-name\";\nimport \"module-name\";\n```\n\n最后那种导入是相当于将代码执行了一次。通常可以用来做 `polyfills` 和 `shims`。\n\n<a name=\"miscellaneous\"></a>\n## 杂七杂八[↑](#catalogue)\n\n`Number.isInteger`，判断整数\n\n`Number.isSafeInteger`，判断是否是有效整数\n\nMath 中加入很多函数，例如双曲正弦、双曲余弦之类的\n\n","slug":"understanding-ecmascript6-note","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyutm007qn7t48v4j0g7u","content":"<blockquote>\n<p>在线免费阅读：<a href=\"https://leanpub.com/understandinges6/read/\" target=\"_blank\" rel=\"noopener\">https://leanpub.com/understandinges6/read/</a></p>\n<p>部分代码使用原书，代码版权归原书所有</p>\n</blockquote>\n<p><a name=\"catalogue\"></a></p>\n<ol>\n<li><a href=\"#block-bindings\">块级绑定（Block Bindings）</a></li>\n<li><a href=\"#string\">字符串</a></li>\n<li><a href=\"#regex\">正则</a></li>\n<li><a href=\"#template-strings\">字符串模板（template strings）</a></li>\n<li><a href=\"#tagged-templates\">标签模板（tagged templates）</a></li>\n<li><a href=\"#function\">函数</a></li>\n<li><a href=\"#object\">对象</a></li>\n<li><a href=\"#destructuring\">解构（Destructuring）</a></li>\n<li><a href=\"#symbols\">Symbols</a></li>\n<li><a href=\"#generators\">生成器（Generators）</a></li>\n<li><a href=\"#iterators\">迭代器（Iterators）</a></li>\n<li><a href=\"#class\">类</a></li>\n<li><a href=\"#promises\">Promises</a></li>\n<li><a href=\"#modules\">模块（Modules）</a></li>\n<li><a href=\"#miscellaneous\">杂七杂八</a></li>\n</ol>\n<p><a name=\"block-bindings\"></a></p>\n<h2 id=\"块级绑定（Block-Bindings）↑\"><a href=\"#块级绑定（Block-Bindings）↑\" class=\"headerlink\" title=\"块级绑定（Block Bindings）↑\"></a>块级绑定（Block Bindings）<a href=\"#catalogue\">↑</a></h2><h3 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h3><p>块级{}中有效</p>\n<p>同块级不可重复声明</p>\n<p>没有变量提升</p>\n<blockquote>\n<p>块级会形成暂时性死区（TDZ，Temporal Dead Zone）</p>\n</blockquote>\n<h3 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h3><p>基本和 <code>let</code> 相同，值不可修改</p>\n<blockquote>\n<p><code>let</code> 和 <code>const</code> 最好不要在全局下使用</p>\n</blockquote>\n<p><a name=\"string\"></a></p>\n<h2 id=\"字符串↑\"><a href=\"#字符串↑\" class=\"headerlink\" title=\"字符串↑\"></a>字符串<a href=\"#catalogue\">↑</a></h2><h3 id=\"unicode-支持更好\"><a href=\"#unicode-支持更好\" class=\"headerlink\" title=\"unicode 支持更好\"></a>unicode 支持更好</h3><h3 id=\"新增部分函数，支持双字节\"><a href=\"#新增部分函数，支持双字节\" class=\"headerlink\" title=\"新增部分函数，支持双字节\"></a>新增部分函数，支持双字节</h3><p><code>codePointAt</code>，双字节版的 <code>charCodeAt</code>，得到字符 unicode</p>\n<p><code>fromCodePoint</code>，双字节版的 <code>fromCharCode</code>，从 unicode 得出字符</p>\n<p><code>includes</code>，包含某字符串</p>\n<p><code>startsWith</code>，以某字符串开始</p>\n<p><code>endsWith</code>，以某字符串结束</p>\n<p><code>repeat</code>，重复字符串</p>\n<p><code>normalize</code>，unicode 正规化，举个例子：两个 unicode 字符合成一个</p>\n<p><a name=\"regex\"></a></p>\n<h2 id=\"正则↑\"><a href=\"#正则↑\" class=\"headerlink\" title=\"正则↑\"></a>正则<a href=\"#catalogue\">↑</a></h2><h3 id=\"新增标志-u\"><a href=\"#新增标志-u\" class=\"headerlink\" title=\"新增标志 u\"></a>新增标志 <code>u</code></h3><p>正则识别 unicode 字符</p>\n<h3 id=\"新增标志-y\"><a href=\"#新增标志-y\" class=\"headerlink\" title=\"新增标志 y\"></a>新增标志 <code>y</code></h3><p>sticky，部分浏览器早就实现了</p>\n<p><a name=\"template-strings\"></a></p>\n<h2 id=\"字符串模板（template-strings）↑\"><a href=\"#字符串模板（template-strings）↑\" class=\"headerlink\" title=\"字符串模板（template strings）↑\"></a>字符串模板（template strings）<a href=\"#catalogue\">↑</a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">`<span class=\"subst\">$&#123;a&#125;</span> <span class=\"subst\">$&#123;a + b&#125;</span>`</span>  <span class=\"comment\">// '1 3'</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"tagged-templates\"></a></p>\n<h2 id=\"标签模板（tagged-templates）↑\"><a href=\"#标签模板（tagged-templates）↑\" class=\"headerlink\" title=\"标签模板（tagged templates）↑\"></a>标签模板（tagged templates）<a href=\"#catalogue\">↑</a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tag</span> (<span class=\"params\"> strings, ...values </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( strings )</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( values )</span><br><span class=\"line\">  <span class=\"keyword\">return</span> values[<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s = tag<span class=\"string\">`a <span class=\"subst\">$&#123;a&#125;</span>`</span>  <span class=\"comment\">// 'a 1'</span></span><br><span class=\"line\"><span class=\"comment\">// [\"a \", \"\", raw: Array[2]]</span></span><br><span class=\"line\"><span class=\"comment\">// [1]</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"function\"></a></p>\n<h2 id=\"函数↑\"><a href=\"#函数↑\" class=\"headerlink\" title=\"函数↑\"></a>函数<a href=\"#catalogue\">↑</a></h2><h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"> bar = <span class=\"number\">1</span> </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( bar )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"> bar, ...rest </span>) </span>&#123;  <span class=\"comment\">// ✓</span></span><br><span class=\"line\">  ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"> bar, ...rest, last </span>) </span>&#123;  <span class=\"comment\">// ×</span></span><br><span class=\"line\">  ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数属性-name\"><a href=\"#函数属性-name\" class=\"headerlink\" title=\"函数属性 name\"></a>函数属性 name</h3><p>各种例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( doSomething.name );          <span class=\"comment\">// \"doSomething\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> doAnotherThing = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( doAnotherThing.name );       <span class=\"comment\">// \"doAnotherThing\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> doSomethingAgain = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomethingElse</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( doSomethingAgain.name );      <span class=\"comment\">// \"doSomethingElse\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> firstName () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Nicholas\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.name );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( person.sayName.name );   <span class=\"comment\">// \"sayName\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( person.firstName.name ); <span class=\"comment\">// \"get firstName\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( doSomething.bind().name );   <span class=\"comment\">// \"bound doSomething\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( ( <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>() ).name );     <span class=\"comment\">// \"anonymous\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"new-target\"><a href=\"#new-target\" class=\"headerlink\" title=\"new.target\"></a>new.target</h3><p>避免了很多使用 <code>new</code> 的坑</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"keyword\">new</span>.target !== <span class=\"string\">\"undefined\"</span> ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">'good'</span> );  <span class=\"comment\">// using new</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>( <span class=\"string\">'You must use new with Person.'</span> )  <span class=\"comment\">// not using new</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();  <span class=\"comment\">// good</span></span><br><span class=\"line\">foo = Foo.call( foo );  <span class=\"comment\">// error!</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"块级函数\"><a href=\"#块级函数\" class=\"headerlink\" title=\"块级函数\"></a>块级函数</h3><p>块级中可定义函数</p>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p><code>this</code>, <code>super</code>, <code>arguments</code> 和 <code>new.target</code> 的值都在定义函数时绑定而非运行时绑定</p>\n<p>不可 <code>new</code></p>\n<p>不可改变 <code>this</code> 的值</p>\n<p>没有 <code>arguments</code></p>\n<blockquote>\n<p>跟普通函数一样拥有 name 属性</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;  <span class=\"comment\">// input value, output value</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\">(<span class=\"params\"> x, y </span>) =&gt;</span> x + y;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"params\">id</span> =&gt;</span> (&#123; <span class=\"attr\">x</span>: <span class=\"string\">'x'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this 的绑定</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener( <span class=\"string\">'click'</span>, (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> e </span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log( e.type );</span><br><span class=\"line\">    &#125;).bind( <span class=\"keyword\">this</span> ), <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener( <span class=\"string\">'click'</span>, e =&gt; &#123;<span class=\"built_in\">console</span>.log( e.type )&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"立即调用函数表达式（Immediately-Invoked-Function-Expressions-IIFEs-）\"><a href=\"#立即调用函数表达式（Immediately-Invoked-Function-Expressions-IIFEs-）\" class=\"headerlink\" title=\"立即调用函数表达式（Immediately-Invoked Function Expressions (IIFEs)）\"></a>立即调用函数表达式（Immediately-Invoked Function Expressions (IIFEs)）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> s </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( s );</span><br><span class=\"line\">&#125;( <span class=\"string\">'text'</span> )  <span class=\"comment\">// text</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = ( <span class=\"function\"><span class=\"params\">s</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( s );</span><br><span class=\"line\">&#125;)( <span class=\"string\">'text'</span> )  <span class=\"comment\">// text</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"新增尾递归优化\"><a href=\"#新增尾递归优化\" class=\"headerlink\" title=\"新增尾递归优化\"></a>新增尾递归优化</h3><p><a name=\"object\"></a></p>\n<h2 id=\"对象↑\"><a href=\"#对象↑\" class=\"headerlink\" title=\"对象↑\"></a>对象<a href=\"#catalogue\">↑</a></h2><h3 id=\"对象字面属性值简写（Property-Initializer-Shorthand）\"><a href=\"#对象字面属性值简写（Property-Initializer-Shorthand）\" class=\"headerlink\" title=\"对象字面属性值简写（Property Initializer Shorthand）\"></a>对象字面属性值简写（Property Initializer Shorthand）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"> text </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    name  <span class=\"comment\">// name: name</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象方法简写（Method-Initializer-Shorthand）\"><a href=\"#对象方法简写（Method-Initializer-Shorthand）\" class=\"headerlink\" title=\"对象方法简写（Method Initializer Shorthand）\"></a>对象方法简写（Method Initializer Shorthand）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  bar () &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"计算属性名语法\"><a href=\"#计算属性名语法\" class=\"headerlink\" title=\"计算属性名语法\"></a>计算属性名语法</h3><p>对象的属性可以使用中括号 <code>[]</code> 表示需要「被计算」，结果转换为字符串作为属性名使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">'text a'</span>,</span><br><span class=\"line\">  [a]: <span class=\"string\">'function a'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( foo[<span class=\"string\">'a'</span>] )  <span class=\"comment\">// text a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( foo[a] )  <span class=\"comment\">// function a</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Object-is\"><a href=\"#Object-is\" class=\"headerlink\" title=\"Object.is()\"></a>Object.is()</h3><p>和经典的 <code>===</code> 几乎一样，区别在于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log( +<span class=\"number\">0</span> === <span class=\"number\">-0</span>);             <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"built_in\">Object</span>.is( +<span class=\"number\">0</span>, <span class=\"number\">-0</span> ) );     <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> );           <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"built_in\">Object</span>.is( <span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span> ) );   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign()\"></a>Object.assign()</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign( target, ...source )</span><br></pre></td></tr></table></figure>\n<p>读取源对象可列举的、自身的属性，将其赋值到目标对象上，覆盖旧属性，并非通常意义的复制。</p>\n<h3 id=\"复制存取器属性\"><a href=\"#复制存取器属性\" class=\"headerlink\" title=\"复制存取器属性\"></a>复制存取器属性</h3><blockquote>\n<p>此小节查询 MDN 后补充上</p>\n</blockquote>\n<p>使用 <code>Object.getOwnPropertyDescriptor(source, key)</code> 读取，使用 <code>Object.defineProperties</code> 定义。</p>\n<h3 id=\"属性允许重复定义\"><a href=\"#属性允许重复定义\" class=\"headerlink\" title=\"属性允许重复定义\"></a>属性允许重复定义</h3><p>属性以最后一个定义的值为准</p>\n<h3 id=\"修改原型\"><a href=\"#修改原型\" class=\"headerlink\" title=\"修改原型\"></a>修改原型</h3><p><code>Object.getPrototypeOf</code>，得到原型</p>\n<p><code>Object.setPrototypeOf</code>，设置原型</p>\n<h3 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super\"></a>super</h3><p>用以访问对象的 prototype</p>\n<p><a name=\"destructuring\"></a></p>\n<h2 id=\"解构（Destructuring）↑\"><a href=\"#解构（Destructuring）↑\" class=\"headerlink\" title=\"解构（Destructuring）↑\"></a>解构（Destructuring）<a href=\"#catalogue\">↑</a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123;a, <span class=\"attr\">b</span>: &#123; c, d &#125;&#125; = c</span><br><span class=\"line\">( &#123;a, <span class=\"attr\">b</span>: &#123; c, d &#125;&#125; = c )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, [b, c]] = d</span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, , [b, c]] = d  <span class=\"comment\">// 跳过一个</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"> &#123; bar1, bar2 &#125; = &#123;&#125; </span>) </span>&#123;</span><br><span class=\"line\">  ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解构可以有默认值，但只会在需要的时候求值。</p>\n<p><a href=\"http://www.2ality.com/2015/01/es6-destructuring.html\" target=\"_blank\" rel=\"noopener\">2ality</a> 有更详细清晰的解释：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">prop</span>: y=someFunc()&#125; = someValue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x, y;</span><br><span class=\"line\">[x=<span class=\"number\">3</span>, y=x] = [];     <span class=\"comment\">// x=3; y=3</span></span><br><span class=\"line\">[x=<span class=\"number\">3</span>, y=x] = [<span class=\"number\">7</span>];    <span class=\"comment\">// x=7; y=7</span></span><br><span class=\"line\">[x=<span class=\"number\">3</span>, y=x] = [<span class=\"number\">7</span>, <span class=\"number\">2</span>]; <span class=\"comment\">// x=7; y=2</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"symbols\"></a></p>\n<h2 id=\"Symbols（不知道如何翻译，是第七种原始类型）↑\"><a href=\"#Symbols（不知道如何翻译，是第七种原始类型）↑\" class=\"headerlink\" title=\"Symbols（不知道如何翻译，是第七种原始类型）↑\"></a>Symbols（不知道如何翻译，是第七种原始类型）<a href=\"#catalogue\">↑</a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"built_in\">Symbol</span>( <span class=\"string\">'bar'</span> )</span><br></pre></td></tr></table></figure>\n<p><code>Symbol( &#39;description&#39; )</code> 生成局部 Symbol，即使 <code>description</code> 相同生成的 Symbol 也不一样</p>\n<p><code>Symbol.for( &#39;description&#39; )</code> 生成全局 Symbol，<code>description</code> 相同则 Symbol 相同</p>\n<h3 id=\"获取对象的-Symbol-数组\"><a href=\"#获取对象的-Symbol-数组\" class=\"headerlink\" title=\"获取对象的 Symbol 数组\"></a>获取对象的 Symbol 数组</h3><p><code>Object.getOwnPropertySymbols( object )</code></p>\n<h3 id=\"强制转换-Symbol-为-String\"><a href=\"#强制转换-Symbol-为-String\" class=\"headerlink\" title=\"强制转换 Symbol 为 String\"></a>强制转换 Symbol 为 String</h3><blockquote>\n<p>原书本节未完成</p>\n</blockquote>\n<h3 id=\"有名的预定义-Symbol\"><a href=\"#有名的预定义-Symbol\" class=\"headerlink\" title=\"有名的预定义 Symbol\"></a>有名的预定义 Symbol</h3><blockquote>\n<p>原书本节大部分未完成</p>\n</blockquote>\n<p><a name=\"generators\"></a></p>\n<h2 id=\"生成器（Generators）↑\"><a href=\"#生成器（Generators）↑\" class=\"headerlink\" title=\"生成器（Generators）↑\"></a>生成器（Generators）<a href=\"#catalogue\">↑</a></h2><p>生成迭代器的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  *createIterator ( items ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i &lt; items.length; i++ ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = o.createIterator( [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] );</span><br></pre></td></tr></table></figure>\n<p><a name=\"iterators\"></a></p>\n<h2 id=\"迭代器（Iterators）↑\"><a href=\"#迭代器（Iterators）↑\" class=\"headerlink\" title=\"迭代器（Iterators）↑\"></a>迭代器（Iterators）<a href=\"#catalogue\">↑</a></h2><h3 id=\"for-of-语法\"><a href=\"#for-of-语法\" class=\"headerlink\" title=\"for-of 语法\"></a>for-of 语法</h3><p>数组、字符串、映射（Map）、集合（Set）和元素数组（NodeList）都可迭代（iterable），可使用 for-of 语法</p>\n<h3 id=\"得到内置迭代器\"><a href=\"#得到内置迭代器\" class=\"headerlink\" title=\"得到内置迭代器\"></a>得到内置迭代器</h3><p>Symbol.iterator 指向得到迭代器的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = values[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\">iterator.next();  <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义迭代器\"><a href=\"#自定义迭代器\" class=\"headerlink\" title=\"自定义迭代器\"></a>自定义迭代器</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> collection = &#123;</span><br><span class=\"line\">  items: [],</span><br><span class=\"line\">  *[<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> *<span class=\"keyword\">this</span>.items.values();  <span class=\"comment\">// `yield *` 语法，委托了数组 `items` 的内置迭代器</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象、数组、映射、集合都具有的默认迭代器\"><a href=\"#对象、数组、映射、集合都具有的默认迭代器\" class=\"headerlink\" title=\"对象、数组、映射、集合都具有的默认迭代器\"></a>对象、数组、映射、集合都具有的默认迭代器</h3><p><code>ertries()</code>，返回键值对迭代器</p>\n<p><code>keys()</code>，返回键迭代器</p>\n<p><code>values()</code>，返回值迭代器</p>\n<h3 id=\"字符串迭代器\"><a href=\"#字符串迭代器\" class=\"headerlink\" title=\"字符串迭代器\"></a>字符串迭代器</h3><p>通过 <code>[]</code> 的访问是 code unit 方式</p>\n<p>通过迭代器则是字符方式（几乎是，某些 unicode 支持不足）</p>\n<h3 id=\"元素数组（NodeList）迭代器\"><a href=\"#元素数组（NodeList）迭代器\" class=\"headerlink\" title=\"元素数组（NodeList）迭代器\"></a>元素数组（NodeList）迭代器</h3><p>返回的是数组中的单个元素</p>\n<h3 id=\"向迭代器传参数\"><a href=\"#向迭代器传参数\" class=\"headerlink\" title=\"向迭代器传参数\"></a>向迭代器传参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bar = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> it = foo()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( it.next() )  <span class=\"comment\">// Object &#123;value: 1, done: false&#125;，执行语句 `yield 1` 然后暂停</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( it.next( <span class=\"number\">2</span> ) )  <span class=\"comment\">// Object &#123;value: undefined, done: true&#125;，将 2 作为 `yield 1` 的返回值，</span></span><br><span class=\"line\">                             <span class=\"comment\">// 迭代器内部继续执行语句 `let bar = 2`，</span></span><br><span class=\"line\">                             <span class=\"comment\">// 之后执行完毕，无返回值，`value` 为 `undefined`，`done` 为 `true`</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( it.next() )  <span class=\"comment\">// Object &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"生成器使用-return-提前返回\"><a href=\"#生成器使用-return-提前返回\" class=\"headerlink\" title=\"生成器使用 return 提前返回\"></a>生成器使用 return 提前返回</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: 42, done: true &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"委托生成器\"><a href=\"#委托生成器\" class=\"headerlink\" title=\"委托生成器\"></a>委托生成器</h3><p>使用 <code>yield *</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">createNumberIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">createRepeatingIterator</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">\"repeat\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">createCombinedIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">yield</span> *createNumberIterator();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> *createRepeatingIterator(result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = createCombinedIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: 2, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: \"repeat\", done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: \"repeat\", done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: \"repeat\", done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<p>可以 <code>yield *&quot;string&quot;</code>，会调用字符串的默认迭代器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> * <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> it = foo()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( it.next() )  <span class=\"comment\">// Object &#123;value: \"h\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( it.next() )  <span class=\"comment\">// Object &#123;value: \"e\", done: false&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"异步任务调度\"><a href=\"#异步任务调度\" class=\"headerlink\" title=\"异步任务调度\"></a>异步任务调度</h3><p>以下是书中的例子，写得并不好，变量 <code>task</code> 的管理容易出问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> task;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readConfigFile</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">\"config.json\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, contents</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            task.throw(err);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            task.next(contents);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> contents = <span class=\"keyword\">yield</span> readConfigFile();</span><br><span class=\"line\">    doSomethingWith(contents);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Done\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task = init();</span><br><span class=\"line\">task.next();</span><br></pre></td></tr></table></figure>\n<p><a name=\"class\"></a></p>\n<h2 id=\"类↑\"><a href=\"#类↑\" class=\"headerlink\" title=\"类↑\"></a>类<a href=\"#catalogue\">↑</a></h2><h3 id=\"类声明\"><a href=\"#类声明\" class=\"headerlink\" title=\"类声明\"></a>类声明</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 相当于构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( name ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 相当于 foo.prototype.bar</span></span><br><span class=\"line\">  bar () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.name );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类的属性最好都在构造函数里面创建。</p>\n<p>类声明本质上就是以前的函数声明，除了以下有所不同：</p>\n<ol>\n<li>类声明不会像函数声明那样被提升</li>\n<li>类内部的代码全部以 <code>strict mode</code> 运行</li>\n<li>所有方法都是不可列举的，相当于使用了 <code>Object.defineProperty()</code></li>\n<li>不使用 <code>new</code> 会抛异常</li>\n<li>以类名命名方法来覆盖类名会抛异常（类名对于类内部来说是以 <code>const</code> 定义的，对于外部则不是）</li>\n</ol>\n<h3 id=\"类表达式\"><a href=\"#类表达式\" class=\"headerlink\" title=\"类表达式\"></a>类表达式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo2</span> </span>&#123;&#125;  <span class=\"comment\">// foo === foo2</span></span><br></pre></td></tr></table></figure>\n<p>匿名类作为参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFoo</span> (<span class=\"params\"> c </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> c()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createFoo( <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    ;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>立即调用类表达式（有点像立即调用函数表达式）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"keyword\">new</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( name ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;( <span class=\"string\">'foo'</span> )</span><br></pre></td></tr></table></figure>\n<h3 id=\"存取器属性\"><a href=\"#存取器属性\" class=\"headerlink\" title=\"存取器属性\"></a>存取器属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( name ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> className () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'class '</span> + <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">set</span> className ( value ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'class'</span> + value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( name ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 相当于 foo.prototype.bar</span></span><br><span class=\"line\">  bar () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.name )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 相当于 foo.staticBar</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> staticBar () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.name )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// get / set 也可以用</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> barName () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'bar'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>静态成员同样不可列举</p>\n</blockquote>\n<h3 id=\"派生类\"><a href=\"#派生类\" class=\"headerlink\" title=\"派生类\"></a>派生类</h3><p>比起 ECMAScript5，ECMAScript6 的派生方便了很多</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( length, width ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.width = width;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getArea () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length * <span class=\"keyword\">this</span>.width;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( length ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>( length, length );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在派生类的构造函数中，调用 <code>super</code> 是必须的。如果连构造函数都没有，则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 无构造函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 相当于</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( ...args ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>( ...args )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>只能在派生类中用 <code>super()</code></li>\n<li>使用 <code>this</code> 前必先调用 <code>super()</code> 来<strong>初始化</strong> <code>this</code></li>\n<li>只有在构造函数返回一个对象的时候才可以不用 <code>super()</code></li>\n</ol>\n</blockquote>\n<h3 id=\"类方法\"><a href=\"#类方法\" class=\"headerlink\" title=\"类方法\"></a>类方法</h3><p>覆盖、隐藏父类方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( length ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>( length, length );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getArea () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length * <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>仍然可以使用 <code>super</code> 调用父类方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> ( length ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>( length, length );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getArea () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getArea();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类方法没有 <code>[[Construct]]</code> 这个内部方法，所以不能被 <code>new</code>。（<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-13.2.2\" target=\"_blank\" rel=\"noopener\">什么是<code>[[Construct]]</code></a>）</p>\n<h3 id=\"静态成员-1\"><a href=\"#静态成员-1\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><p>相当于 ES5 中定义在构造函数上的方法（注意不是定义在构造函数的原型上），派生类显然也能调用</p>\n<h3 id=\"extends-关键字后面可以使用表达式\"><a href=\"#extends-关键字后面可以使用表达式\" class=\"headerlink\" title=\"extends 关键字后面可以使用表达式\"></a>extends 关键字后面可以使用表达式</h3><p>除了 <code>null</code> 和生成器函数外</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">base</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> <span class=\"keyword\">extends</span> <span class=\"title\">base</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用表达式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">base</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBase</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> base</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> <span class=\"keyword\">extends</span> <span class=\"title\">getBase</span>() </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 混合模式（多继承？!）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> AMinin = &#123;</span><br><span class=\"line\">  aF = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> BMinin = &#123;</span><br><span class=\"line\">  bF = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixin</span> (<span class=\"params\"> ...mixins </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> base = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.assign( base.prototype, ...mixins )</span><br><span class=\"line\">  <span class=\"keyword\">return</span> base</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> <span class=\"keyword\">extends</span> <span class=\"title\">mixin</span>( <span class=\"title\">AMinin</span>, <span class=\"title\">BMinin</span> ) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内置类型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Array</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> <span class=\"keyword\">extends</span> <span class=\"title\">String</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"new-target-1\"><a href=\"#new-target-1\" class=\"headerlink\" title=\"new.target\"></a>new.target</h3><p>能够得知类的调用状态，应用例如：阻止抽象类被实例化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span>.target === Shape) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"This class cannot be instantiated directly.\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"promises\"></a></p>\n<h2 id=\"Promises↑\"><a href=\"#Promises↑\" class=\"headerlink\" title=\"Promises↑\"></a>Promises<a href=\"#catalogue\">↑</a></h2><p>Promise 是老朋友了，所以没有什么好记录的，就记一下语法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> resolve, reject </span>) </span>&#123;</span><br><span class=\"line\">    resolve( <span class=\"number\">42</span> );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"built_in\">Promise</span>.resolve( <span class=\"number\">42</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = <span class=\"built_in\">Promise</span>.reject( <span class=\"number\">43</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p4 = <span class=\"built_in\">Promise</span>.all( [p1, p2, p3] );  <span class=\"comment\">// 等待所有 Promise 返回</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p5 = <span class=\"built_in\">Promise</span>.race( [p1, p2, p3] );  <span class=\"comment\">// 最快的一个 Promise 返回就返回</span></span><br><span class=\"line\"></span><br><span class=\"line\">p4.then( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( value );</span><br><span class=\"line\">&#125;).catch( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( value );</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><a name=\"modules\"></a></p>\n<h2 id=\"模块（Modules）↑\"><a href=\"#模块（Modules）↑\" class=\"headerlink\" title=\"模块（Modules）↑\"></a>模块（Modules）<a href=\"#catalogue\">↑</a></h2><blockquote>\n<p>注：本章的代码似乎有一些问题，基本参考 MDN 为准</p>\n</blockquote>\n<ol>\n<li>模块中的代码自动以严格模式运行</li>\n<li>模块中的顶层变量只是模块中顶层，并非全局顶层</li>\n<li>顶层中的 <code>this</code> 的值为 <code>undefined</code></li>\n<li>代码中不允许 HTML 风格的注释</li>\n<li>模块必须有导出的东西</li>\n</ol>\n<h3 id=\"基本导入导出\"><a href=\"#基本导入导出\" class=\"headerlink\" title=\"基本导入导出\"></a>基本导入导出</h3><p>直接使用原书代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导出数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> color = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> name = <span class=\"string\">\"Nicholas\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> magicNumber = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导出函数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导出类</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(length, width) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.width = width;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导出引用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 * num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> multiply;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认导出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export as</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; multiply <span class=\"keyword\">as</span> foo &#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>除非使用 <code>default</code> 语法，否则函数和类都不能使用匿名</li>\n<li><code>export</code> 只能用在顶层中</li>\n</ol>\n<p><code>as</code> 和 <code>default</code> 语法的情况，给出一个来自 <a href=\"http://www.2ality.com/2015/07/es6-module-exports.html\" target=\"_blank\" rel=\"noopener\">2ality</a> 的表格</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Statement</th>\n<th>Local name</th>\n<th>Export name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>export {v as x};</td>\n<td>‘v’</td>\n<td>‘x’</td>\n</tr>\n<tr>\n<td>export default function f() {}</td>\n<td>‘f’</td>\n<td>‘default’</td>\n</tr>\n<tr>\n<td>export default function () {}</td>\n<td>‘<em>default</em>‘</td>\n<td>‘default’</td>\n</tr>\n<tr>\n<td>export default 123;</td>\n<td>‘<em>default</em>‘</td>\n<td>‘default’</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>可以看出，所谓的默认导出其实就是用了 <code>default</code> 作为名字罢了。</p>\n<p>还能够将其他模块重新导出</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Statement</th>\n<th>Module</th>\n<th>Import name</th>\n<th>Export name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>export {v} from ‘mod’;</td>\n<td>‘mod’</td>\n<td>‘v’</td>\n<td>‘v’</td>\n</tr>\n<tr>\n<td>export {v as x} from ‘mod’;</td>\n<td>‘mod’</td>\n<td>‘v’</td>\n<td>‘x’</td>\n</tr>\n<tr>\n<td>export * from ‘mod’;</td>\n<td>‘mod’</td>\n<td>‘*’</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>导入有很多方法，基本使用到的其实只有几种，以下来自 MDN：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> name <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> name <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; member &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; member <span class=\"keyword\">as</span> alias &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; member1 , member2 &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; member1 , member2 <span class=\"keyword\">as</span> alias2 , [...] &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> defaultMember, &#123; member [ , [...] ] &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> defaultMember, * <span class=\"keyword\">as</span> alias <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> defaultMember <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"module-name\"</span>;</span><br></pre></td></tr></table></figure>\n<p>最后那种导入是相当于将代码执行了一次。通常可以用来做 <code>polyfills</code> 和 <code>shims</code>。</p>\n<p><a name=\"miscellaneous\"></a></p>\n<h2 id=\"杂七杂八↑\"><a href=\"#杂七杂八↑\" class=\"headerlink\" title=\"杂七杂八↑\"></a>杂七杂八<a href=\"#catalogue\">↑</a></h2><p><code>Number.isInteger</code>，判断整数</p>\n<p><code>Number.isSafeInteger</code>，判断是否是有效整数</p>\n<p>Math 中加入很多函数，例如双曲正弦、双曲余弦之类的</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在线免费阅读：<a href=\"https://leanpub.com/understandinges6/read/\" target=\"_blank\" rel=\"noopener\">https://leanpub.com/understandinges6/read/</a></p>\n<p>部分代码使用原书，代码版权归原书所有</p>\n</blockquote>\n<p><a name=\"catalogue\"></a></p>\n<ol>\n<li><a href=\"#block-bindings\">块级绑定（Block Bindings）</a></li>\n<li><a href=\"#string\">字符串</a></li>\n<li><a href=\"#regex\">正则</a></li>\n<li><a href=\"#template-strings\">字符串模板（template strings）</a></li>\n<li><a href=\"#tagged-templates\">标签模板（tagged templates）</a></li>\n<li><a href=\"#function\">函数</a></li>\n<li><a href=\"#object\">对象</a></li>\n<li><a href=\"#destructuring\">解构（Destructuring）</a></li>\n<li><a href=\"#symbols\">Symbols</a></li>\n<li><a href=\"#generators\">生成器（Generators）</a></li>\n<li><a href=\"#iterators\">迭代器（Iterators）</a></li>\n<li><a href=\"#class\">类</a></li>\n<li><a href=\"#promises\">Promises</a></li>\n<li><a href=\"#modules\">模块（Modules）</a></li>\n<li><a href=\"#miscellaneous\">杂七杂八</a></li>\n</ol>\n<p><a name=\"block-bindings\"></a></p>\n<h2 id=\"块级绑定（Block-Bindings）↑\"><a href=\"#块级绑定（Block-Bindings）↑\" class=\"headerlink\" title=\"块级绑定（Block Bindings）↑\"></a>块级绑定（Block Bindings）<a href=\"#catalogue\">↑</a></h2><h3 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h3><p>块级{}中有效</p>\n<p>同块级不可重复声明</p>\n<p>没有变量提升</p>\n<blockquote>\n<p>块级会形成暂时性死区（TDZ，Temporal Dead Zone）</p>\n</blockquote>\n<h3 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h3><p>基本和 <code>let</code> 相同，值不可修改</p>\n<blockquote>\n<p><code>let</code> 和 <code>const</code> 最好不要在全局下使用</p>\n</blockquote>\n<p><a name=\"string\"></a></p>\n<h2 id=\"字符串↑\"><a href=\"#字符串↑\" class=\"headerlink\" title=\"字符串↑\"></a>字符串<a href=\"#catalogue\">↑</a></h2><h3 id=\"unicode-支持更好\"><a href=\"#unicode-支持更好\" class=\"headerlink\" title=\"unicode 支持更好\"></a>unicode 支持更好</h3><h3 id=\"新增部分函数，支持双字节\"><a href=\"#新增部分函数，支持双字节\" class=\"headerlink\" title=\"新增部分函数，支持双字节\"></a>新增部分函数，支持双字节</h3><p><code>codePointAt</code>，双字节版的 <code>charCodeAt</code>，得到字符 unicode</p>\n<p><code>fromCodePoint</code>，双字节版的 <code>fromCharCode</code>，从 unicode 得出字符</p>\n<p><code>includes</code>，包含某字符串</p>\n<p><code>startsWith</code>，以某字符串开始</p>\n<p><code>endsWith</code>，以某字符串结束</p>\n<p><code>repeat</code>，重复字符串</p>\n<p><code>normalize</code>，unicode 正规化，举个例子：两个 unicode 字符合成一个</p>\n<p><a name=\"regex\"></a></p>\n<h2 id=\"正则↑\"><a href=\"#正则↑\" class=\"headerlink\" title=\"正则↑\"></a>正则<a href=\"#catalogue\">↑</a></h2><h3 id=\"新增标志-u\"><a href=\"#新增标志-u\" class=\"headerlink\" title=\"新增标志 u\"></a>新增标志 <code>u</code></h3><p>正则识别 unicode 字符</p>\n<h3 id=\"新增标志-y\"><a href=\"#新增标志-y\" class=\"headerlink\" title=\"新增标志 y\"></a>新增标志 <code>y</code></h3><p>sticky，部分浏览器早就实现了</p>\n<p><a name=\"template-strings\"></a></p>\n<h2 id=\"字符串模板（template-strings）↑\"><a href=\"#字符串模板（template-strings）↑\" class=\"headerlink\" title=\"字符串模板（template strings）↑\"></a>字符串模板（template strings）<a href=\"#catalogue\">↑</a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> s = <span class=\"string\">`<span class=\"subst\">$&#123;a&#125;</span> <span class=\"subst\">$&#123;a + b&#125;</span>`</span>  <span class=\"comment\">// '1 3'</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"tagged-templates\"></a></p>\n<h2 id=\"标签模板（tagged-templates）↑\"><a href=\"#标签模板（tagged-templates）↑\" class=\"headerlink\" title=\"标签模板（tagged templates）↑\"></a>标签模板（tagged templates）<a href=\"#catalogue\">↑</a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tag</span> (<span class=\"params\"> strings, ...values </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( strings )</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( values )</span><br><span class=\"line\">  <span class=\"keyword\">return</span> values[<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> s = tag<span class=\"string\">`a <span class=\"subst\">$&#123;a&#125;</span>`</span>  <span class=\"comment\">// 'a 1'</span></span><br><span class=\"line\"><span class=\"comment\">// [\"a \", \"\", raw: Array[2]]</span></span><br><span class=\"line\"><span class=\"comment\">// [1]</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"function\"></a></p>\n<h2 id=\"函数↑\"><a href=\"#函数↑\" class=\"headerlink\" title=\"函数↑\"></a>函数<a href=\"#catalogue\">↑</a></h2><h3 id=\"默认参数\"><a href=\"#默认参数\" class=\"headerlink\" title=\"默认参数\"></a>默认参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"> bar = <span class=\"number\">1</span> </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( bar )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"剩余参数\"><a href=\"#剩余参数\" class=\"headerlink\" title=\"剩余参数\"></a>剩余参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"> bar, ...rest </span>) </span>&#123;  <span class=\"comment\">// ✓</span></span><br><span class=\"line\">  ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"> bar, ...rest, last </span>) </span>&#123;  <span class=\"comment\">// ×</span></span><br><span class=\"line\">  ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"函数属性-name\"><a href=\"#函数属性-name\" class=\"headerlink\" title=\"函数属性 name\"></a>函数属性 name</h3><p>各种例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomething</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( doSomething.name );          <span class=\"comment\">// \"doSomething\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> doAnotherThing = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( doAnotherThing.name );       <span class=\"comment\">// \"doAnotherThing\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> doSomethingAgain = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doSomethingElse</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( doSomethingAgain.name );      <span class=\"comment\">// \"doSomethingElse\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> firstName () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Nicholas\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.name );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( person.sayName.name );   <span class=\"comment\">// \"sayName\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( person.firstName.name ); <span class=\"comment\">// \"get firstName\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( doSomething.bind().name );   <span class=\"comment\">// \"bound doSomething\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( ( <span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>() ).name );     <span class=\"comment\">// \"anonymous\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"new-target\"><a href=\"#new-target\" class=\"headerlink\" title=\"new.target\"></a>new.target</h3><p>避免了很多使用 <code>new</code> 的坑</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"keyword\">new</span>.target !== <span class=\"string\">\"undefined\"</span> ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"string\">'good'</span> );  <span class=\"comment\">// using new</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>( <span class=\"string\">'You must use new with Person.'</span> )  <span class=\"comment\">// not using new</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"keyword\">new</span> Foo();  <span class=\"comment\">// good</span></span><br><span class=\"line\">foo = Foo.call( foo );  <span class=\"comment\">// error!</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"块级函数\"><a href=\"#块级函数\" class=\"headerlink\" title=\"块级函数\"></a>块级函数</h3><p>块级中可定义函数</p>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p><code>this</code>, <code>super</code>, <code>arguments</code> 和 <code>new.target</code> 的值都在定义函数时绑定而非运行时绑定</p>\n<p>不可 <code>new</code></p>\n<p>不可改变 <code>this</code> 的值</p>\n<p>没有 <code>arguments</code></p>\n<blockquote>\n<p>跟普通函数一样拥有 name 属性</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"params\">value</span> =&gt;</span> value;  <span class=\"comment\">// input value, output value</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\">(<span class=\"params\"> x, y </span>) =&gt;</span> x + y;</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"params\">id</span> =&gt;</span> (&#123; <span class=\"attr\">x</span>: <span class=\"string\">'x'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this 的绑定</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener( <span class=\"string\">'click'</span>, (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> e </span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log( e.type );</span><br><span class=\"line\">    &#125;).bind( <span class=\"keyword\">this</span> ), <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.addEventListener( <span class=\"string\">'click'</span>, e =&gt; &#123;<span class=\"built_in\">console</span>.log( e.type )&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"立即调用函数表达式（Immediately-Invoked-Function-Expressions-IIFEs-）\"><a href=\"#立即调用函数表达式（Immediately-Invoked-Function-Expressions-IIFEs-）\" class=\"headerlink\" title=\"立即调用函数表达式（Immediately-Invoked Function Expressions (IIFEs)）\"></a>立即调用函数表达式（Immediately-Invoked Function Expressions (IIFEs)）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> s </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( s );</span><br><span class=\"line\">&#125;( <span class=\"string\">'text'</span> )  <span class=\"comment\">// text</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = ( <span class=\"function\"><span class=\"params\">s</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log( s );</span><br><span class=\"line\">&#125;)( <span class=\"string\">'text'</span> )  <span class=\"comment\">// text</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"新增尾递归优化\"><a href=\"#新增尾递归优化\" class=\"headerlink\" title=\"新增尾递归优化\"></a>新增尾递归优化</h3><p><a name=\"object\"></a></p>\n<h2 id=\"对象↑\"><a href=\"#对象↑\" class=\"headerlink\" title=\"对象↑\"></a>对象<a href=\"#catalogue\">↑</a></h2><h3 id=\"对象字面属性值简写（Property-Initializer-Shorthand）\"><a href=\"#对象字面属性值简写（Property-Initializer-Shorthand）\" class=\"headerlink\" title=\"对象字面属性值简写（Property Initializer Shorthand）\"></a>对象字面属性值简写（Property Initializer Shorthand）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"> text </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    name  <span class=\"comment\">// name: name</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象方法简写（Method-Initializer-Shorthand）\"><a href=\"#对象方法简写（Method-Initializer-Shorthand）\" class=\"headerlink\" title=\"对象方法简写（Method Initializer Shorthand）\"></a>对象方法简写（Method Initializer Shorthand）</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = &#123;</span><br><span class=\"line\">  bar () &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"计算属性名语法\"><a href=\"#计算属性名语法\" class=\"headerlink\" title=\"计算属性名语法\"></a>计算属性名语法</h3><p>对象的属性可以使用中括号 <code>[]</code> 表示需要「被计算」，结果转换为字符串作为属性名使用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">  a: <span class=\"string\">'text a'</span>,</span><br><span class=\"line\">  [a]: <span class=\"string\">'function a'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( foo[<span class=\"string\">'a'</span>] )  <span class=\"comment\">// text a</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( foo[a] )  <span class=\"comment\">// function a</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Object-is\"><a href=\"#Object-is\" class=\"headerlink\" title=\"Object.is()\"></a>Object.is()</h3><p>和经典的 <code>===</code> 几乎一样，区别在于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log( +<span class=\"number\">0</span> === <span class=\"number\">-0</span>);             <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"built_in\">Object</span>.is( +<span class=\"number\">0</span>, <span class=\"number\">-0</span> ) );     <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"literal\">NaN</span> === <span class=\"literal\">NaN</span> );           <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( <span class=\"built_in\">Object</span>.is( <span class=\"literal\">NaN</span>, <span class=\"literal\">NaN</span> ) );   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign()\"></a>Object.assign()</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign( target, ...source )</span><br></pre></td></tr></table></figure>\n<p>读取源对象可列举的、自身的属性，将其赋值到目标对象上，覆盖旧属性，并非通常意义的复制。</p>\n<h3 id=\"复制存取器属性\"><a href=\"#复制存取器属性\" class=\"headerlink\" title=\"复制存取器属性\"></a>复制存取器属性</h3><blockquote>\n<p>此小节查询 MDN 后补充上</p>\n</blockquote>\n<p>使用 <code>Object.getOwnPropertyDescriptor(source, key)</code> 读取，使用 <code>Object.defineProperties</code> 定义。</p>\n<h3 id=\"属性允许重复定义\"><a href=\"#属性允许重复定义\" class=\"headerlink\" title=\"属性允许重复定义\"></a>属性允许重复定义</h3><p>属性以最后一个定义的值为准</p>\n<h3 id=\"修改原型\"><a href=\"#修改原型\" class=\"headerlink\" title=\"修改原型\"></a>修改原型</h3><p><code>Object.getPrototypeOf</code>，得到原型</p>\n<p><code>Object.setPrototypeOf</code>，设置原型</p>\n<h3 id=\"super\"><a href=\"#super\" class=\"headerlink\" title=\"super\"></a>super</h3><p>用以访问对象的 prototype</p>\n<p><a name=\"destructuring\"></a></p>\n<h2 id=\"解构（Destructuring）↑\"><a href=\"#解构（Destructuring）↑\" class=\"headerlink\" title=\"解构（Destructuring）↑\"></a>解构（Destructuring）<a href=\"#catalogue\">↑</a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123;a, <span class=\"attr\">b</span>: &#123; c, d &#125;&#125; = c</span><br><span class=\"line\">( &#123;a, <span class=\"attr\">b</span>: &#123; c, d &#125;&#125; = c )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, [b, c]] = d</span><br><span class=\"line\"><span class=\"keyword\">var</span> [a, , [b, c]] = d  <span class=\"comment\">// 跳过一个</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span> (<span class=\"params\"> &#123; bar1, bar2 &#125; = &#123;&#125; </span>) </span>&#123;</span><br><span class=\"line\">  ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解构可以有默认值，但只会在需要的时候求值。</p>\n<p><a href=\"http://www.2ality.com/2015/01/es6-destructuring.html\" target=\"_blank\" rel=\"noopener\">2ality</a> 有更详细清晰的解释：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">prop</span>: y=someFunc()&#125; = someValue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x, y;</span><br><span class=\"line\">[x=<span class=\"number\">3</span>, y=x] = [];     <span class=\"comment\">// x=3; y=3</span></span><br><span class=\"line\">[x=<span class=\"number\">3</span>, y=x] = [<span class=\"number\">7</span>];    <span class=\"comment\">// x=7; y=7</span></span><br><span class=\"line\">[x=<span class=\"number\">3</span>, y=x] = [<span class=\"number\">7</span>, <span class=\"number\">2</span>]; <span class=\"comment\">// x=7; y=2</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"symbols\"></a></p>\n<h2 id=\"Symbols（不知道如何翻译，是第七种原始类型）↑\"><a href=\"#Symbols（不知道如何翻译，是第七种原始类型）↑\" class=\"headerlink\" title=\"Symbols（不知道如何翻译，是第七种原始类型）↑\"></a>Symbols（不知道如何翻译，是第七种原始类型）<a href=\"#catalogue\">↑</a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"built_in\">Symbol</span>()</span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"built_in\">Symbol</span>( <span class=\"string\">'bar'</span> )</span><br></pre></td></tr></table></figure>\n<p><code>Symbol( &#39;description&#39; )</code> 生成局部 Symbol，即使 <code>description</code> 相同生成的 Symbol 也不一样</p>\n<p><code>Symbol.for( &#39;description&#39; )</code> 生成全局 Symbol，<code>description</code> 相同则 Symbol 相同</p>\n<h3 id=\"获取对象的-Symbol-数组\"><a href=\"#获取对象的-Symbol-数组\" class=\"headerlink\" title=\"获取对象的 Symbol 数组\"></a>获取对象的 Symbol 数组</h3><p><code>Object.getOwnPropertySymbols( object )</code></p>\n<h3 id=\"强制转换-Symbol-为-String\"><a href=\"#强制转换-Symbol-为-String\" class=\"headerlink\" title=\"强制转换 Symbol 为 String\"></a>强制转换 Symbol 为 String</h3><blockquote>\n<p>原书本节未完成</p>\n</blockquote>\n<h3 id=\"有名的预定义-Symbol\"><a href=\"#有名的预定义-Symbol\" class=\"headerlink\" title=\"有名的预定义 Symbol\"></a>有名的预定义 Symbol</h3><blockquote>\n<p>原书本节大部分未完成</p>\n</blockquote>\n<p><a name=\"generators\"></a></p>\n<h2 id=\"生成器（Generators）↑\"><a href=\"#生成器（Generators）↑\" class=\"headerlink\" title=\"生成器（Generators）↑\"></a>生成器（Generators）<a href=\"#catalogue\">↑</a></h2><p>生成迭代器的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  *createIterator ( items ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i &lt; items.length; i++ ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = o.createIterator( [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] );</span><br></pre></td></tr></table></figure>\n<p><a name=\"iterators\"></a></p>\n<h2 id=\"迭代器（Iterators）↑\"><a href=\"#迭代器（Iterators）↑\" class=\"headerlink\" title=\"迭代器（Iterators）↑\"></a>迭代器（Iterators）<a href=\"#catalogue\">↑</a></h2><h3 id=\"for-of-语法\"><a href=\"#for-of-语法\" class=\"headerlink\" title=\"for-of 语法\"></a>for-of 语法</h3><p>数组、字符串、映射（Map）、集合（Set）和元素数组（NodeList）都可迭代（iterable），可使用 for-of 语法</p>\n<h3 id=\"得到内置迭代器\"><a href=\"#得到内置迭代器\" class=\"headerlink\" title=\"得到内置迭代器\"></a>得到内置迭代器</h3><p>Symbol.iterator 指向得到迭代器的函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = values[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\">iterator.next();  <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"自定义迭代器\"><a href=\"#自定义迭代器\" class=\"headerlink\" title=\"自定义迭代器\"></a>自定义迭代器</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> collection = &#123;</span><br><span class=\"line\">  items: [],</span><br><span class=\"line\">  *[<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> *<span class=\"keyword\">this</span>.items.values();  <span class=\"comment\">// `yield *` 语法，委托了数组 `items` 的内置迭代器</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对象、数组、映射、集合都具有的默认迭代器\"><a href=\"#对象、数组、映射、集合都具有的默认迭代器\" class=\"headerlink\" title=\"对象、数组、映射、集合都具有的默认迭代器\"></a>对象、数组、映射、集合都具有的默认迭代器</h3><p><code>ertries()</code>，返回键值对迭代器</p>\n<p><code>keys()</code>，返回键迭代器</p>\n<p><code>values()</code>，返回值迭代器</p>\n<h3 id=\"字符串迭代器\"><a href=\"#字符串迭代器\" class=\"headerlink\" title=\"字符串迭代器\"></a>字符串迭代器</h3><p>通过 <code>[]</code> 的访问是 code unit 方式</p>\n<p>通过迭代器则是字符方式（几乎是，某些 unicode 支持不足）</p>\n<h3 id=\"元素数组（NodeList）迭代器\"><a href=\"#元素数组（NodeList）迭代器\" class=\"headerlink\" title=\"元素数组（NodeList）迭代器\"></a>元素数组（NodeList）迭代器</h3><p>返回的是数组中的单个元素</p>\n<h3 id=\"向迭代器传参数\"><a href=\"#向迭代器传参数\" class=\"headerlink\" title=\"向迭代器传参数\"></a>向迭代器传参数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> bar = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> it = foo()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( it.next() )  <span class=\"comment\">// Object &#123;value: 1, done: false&#125;，执行语句 `yield 1` 然后暂停</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( it.next( <span class=\"number\">2</span> ) )  <span class=\"comment\">// Object &#123;value: undefined, done: true&#125;，将 2 作为 `yield 1` 的返回值，</span></span><br><span class=\"line\">                             <span class=\"comment\">// 迭代器内部继续执行语句 `let bar = 2`，</span></span><br><span class=\"line\">                             <span class=\"comment\">// 之后执行完毕，无返回值，`value` 为 `undefined`，`done` 为 `true`</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( it.next() )  <span class=\"comment\">// Object &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"生成器使用-return-提前返回\"><a href=\"#生成器使用-return-提前返回\" class=\"headerlink\" title=\"生成器使用 return 提前返回\"></a>生成器使用 return 提前返回</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: 42, done: true &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"委托生成器\"><a href=\"#委托生成器\" class=\"headerlink\" title=\"委托生成器\"></a>委托生成器</h3><p>使用 <code>yield *</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">createNumberIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">createRepeatingIterator</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">\"repeat\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">createCombinedIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"keyword\">yield</span> *createNumberIterator();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> *createRepeatingIterator(result);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = createCombinedIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: 2, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: \"repeat\", done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: \"repeat\", done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: \"repeat\", done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());           <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<p>可以 <code>yield *&quot;string&quot;</code>，会调用字符串的默认迭代器</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> * <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> it = foo()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( it.next() )  <span class=\"comment\">// Object &#123;value: \"h\", done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log( it.next() )  <span class=\"comment\">// Object &#123;value: \"e\", done: false&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"异步任务调度\"><a href=\"#异步任务调度\" class=\"headerlink\" title=\"异步任务调度\"></a>异步任务调度</h3><p>以下是书中的例子，写得并不好，变量 <code>task</code> 的管理容易出问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> task;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readConfigFile</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(<span class=\"string\">\"config.json\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, contents</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            task.throw(err);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            task.next(contents);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">init</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> contents = <span class=\"keyword\">yield</span> readConfigFile();</span><br><span class=\"line\">    doSomethingWith(contents);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Done\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">task = init();</span><br><span class=\"line\">task.next();</span><br></pre></td></tr></table></figure>\n<p><a name=\"class\"></a></p>\n<h2 id=\"类↑\"><a href=\"#类↑\" class=\"headerlink\" title=\"类↑\"></a>类<a href=\"#catalogue\">↑</a></h2><h3 id=\"类声明\"><a href=\"#类声明\" class=\"headerlink\" title=\"类声明\"></a>类声明</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 相当于构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( name ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 相当于 foo.prototype.bar</span></span><br><span class=\"line\">  bar () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.name );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类的属性最好都在构造函数里面创建。</p>\n<p>类声明本质上就是以前的函数声明，除了以下有所不同：</p>\n<ol>\n<li>类声明不会像函数声明那样被提升</li>\n<li>类内部的代码全部以 <code>strict mode</code> 运行</li>\n<li>所有方法都是不可列举的，相当于使用了 <code>Object.defineProperty()</code></li>\n<li>不使用 <code>new</code> 会抛异常</li>\n<li>以类名命名方法来覆盖类名会抛异常（类名对于类内部来说是以 <code>const</code> 定义的，对于外部则不是）</li>\n</ol>\n<h3 id=\"类表达式\"><a href=\"#类表达式\" class=\"headerlink\" title=\"类表达式\"></a>类表达式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo2</span> </span>&#123;&#125;  <span class=\"comment\">// foo === foo2</span></span><br></pre></td></tr></table></figure>\n<p>匿名类作为参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFoo</span> (<span class=\"params\"> c </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> c()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createFoo( <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">    ;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>立即调用类表达式（有点像立即调用函数表达式）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"keyword\">new</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( name ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;( <span class=\"string\">'foo'</span> )</span><br></pre></td></tr></table></figure>\n<h3 id=\"存取器属性\"><a href=\"#存取器属性\" class=\"headerlink\" title=\"存取器属性\"></a>存取器属性</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( name ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> className () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'class '</span> + <span class=\"keyword\">this</span>.name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">set</span> className ( value ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'class'</span> + value</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态成员\"><a href=\"#静态成员\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( name ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 相当于 foo.prototype.bar</span></span><br><span class=\"line\">  bar () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.name )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 相当于 foo.staticBar</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> staticBar () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( <span class=\"keyword\">this</span>.name )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// get / set 也可以用</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">get</span> barName () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'bar'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>静态成员同样不可列举</p>\n</blockquote>\n<h3 id=\"派生类\"><a href=\"#派生类\" class=\"headerlink\" title=\"派生类\"></a>派生类</h3><p>比起 ECMAScript5，ECMAScript6 的派生方便了很多</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( length, width ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.width = width;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getArea () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length * <span class=\"keyword\">this</span>.width;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( length ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>( length, length );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在派生类的构造函数中，调用 <code>super</code> 是必须的。如果连构造函数都没有，则：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 无构造函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 相当于</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( ...args ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>( ...args )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>只能在派生类中用 <code>super()</code></li>\n<li>使用 <code>this</code> 前必先调用 <code>super()</code> 来<strong>初始化</strong> <code>this</code></li>\n<li>只有在构造函数返回一个对象的时候才可以不用 <code>super()</code></li>\n</ol>\n</blockquote>\n<h3 id=\"类方法\"><a href=\"#类方法\" class=\"headerlink\" title=\"类方法\"></a>类方法</h3><p>覆盖、隐藏父类方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( length ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>( length, length );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  getArea () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length * <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>仍然可以使用 <code>super</code> 调用父类方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Square</span> <span class=\"keyword\">extends</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> ( length ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>( length, length );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getArea () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getArea();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>类方法没有 <code>[[Construct]]</code> 这个内部方法，所以不能被 <code>new</code>。（<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-13.2.2\" target=\"_blank\" rel=\"noopener\">什么是<code>[[Construct]]</code></a>）</p>\n<h3 id=\"静态成员-1\"><a href=\"#静态成员-1\" class=\"headerlink\" title=\"静态成员\"></a>静态成员</h3><p>相当于 ES5 中定义在构造函数上的方法（注意不是定义在构造函数的原型上），派生类显然也能调用</p>\n<h3 id=\"extends-关键字后面可以使用表达式\"><a href=\"#extends-关键字后面可以使用表达式\" class=\"headerlink\" title=\"extends 关键字后面可以使用表达式\"></a>extends 关键字后面可以使用表达式</h3><p>除了 <code>null</code> 和生成器函数外</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">base</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> <span class=\"keyword\">extends</span> <span class=\"title\">base</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用表达式</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">base</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBase</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> base</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> <span class=\"keyword\">extends</span> <span class=\"title\">getBase</span>() </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 混合模式（多继承？!）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> AMinin = &#123;</span><br><span class=\"line\">  aF = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> BMinin = &#123;</span><br><span class=\"line\">  bF = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixin</span> (<span class=\"params\"> ...mixins </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> base = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.assign( base.prototype, ...mixins )</span><br><span class=\"line\">  <span class=\"keyword\">return</span> base</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> <span class=\"keyword\">extends</span> <span class=\"title\">mixin</span>( <span class=\"title\">AMinin</span>, <span class=\"title\">BMinin</span> ) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 内置类型</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Array</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> <span class=\"keyword\">extends</span> <span class=\"title\">String</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"new-target-1\"><a href=\"#new-target-1\" class=\"headerlink\" title=\"new.target\"></a>new.target</h3><p>能够得知类的调用状态，应用例如：阻止抽象类被实例化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Shape</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span>.target === Shape) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">\"This class cannot be instantiated directly.\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"promises\"></a></p>\n<h2 id=\"Promises↑\"><a href=\"#Promises↑\" class=\"headerlink\" title=\"Promises↑\"></a>Promises<a href=\"#catalogue\">↑</a></h2><p>Promise 是老朋友了，所以没有什么好记录的，就记一下语法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> resolve, reject </span>) </span>&#123;</span><br><span class=\"line\">    resolve( <span class=\"number\">42</span> );</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p2 = <span class=\"built_in\">Promise</span>.resolve( <span class=\"number\">42</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p3 = <span class=\"built_in\">Promise</span>.reject( <span class=\"number\">43</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p4 = <span class=\"built_in\">Promise</span>.all( [p1, p2, p3] );  <span class=\"comment\">// 等待所有 Promise 返回</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p5 = <span class=\"built_in\">Promise</span>.race( [p1, p2, p3] );  <span class=\"comment\">// 最快的一个 Promise 返回就返回</span></span><br><span class=\"line\"></span><br><span class=\"line\">p4.then( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( value );</span><br><span class=\"line\">&#125;).catch( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> value </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( value );</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><a name=\"modules\"></a></p>\n<h2 id=\"模块（Modules）↑\"><a href=\"#模块（Modules）↑\" class=\"headerlink\" title=\"模块（Modules）↑\"></a>模块（Modules）<a href=\"#catalogue\">↑</a></h2><blockquote>\n<p>注：本章的代码似乎有一些问题，基本参考 MDN 为准</p>\n</blockquote>\n<ol>\n<li>模块中的代码自动以严格模式运行</li>\n<li>模块中的顶层变量只是模块中顶层，并非全局顶层</li>\n<li>顶层中的 <code>this</code> 的值为 <code>undefined</code></li>\n<li>代码中不允许 HTML 风格的注释</li>\n<li>模块必须有导出的东西</li>\n</ol>\n<h3 id=\"基本导入导出\"><a href=\"#基本导入导出\" class=\"headerlink\" title=\"基本导入导出\"></a>基本导入导出</h3><p>直接使用原书代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导出数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> color = <span class=\"string\">\"red\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> name = <span class=\"string\">\"Nicholas\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> magicNumber = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导出函数</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 + num1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导出类</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(length, width) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.length = length;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.width = width;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导出引用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span>(<span class=\"params\">num1, num2</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1 * num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> multiply;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 默认导出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export as</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; multiply <span class=\"keyword\">as</span> foo &#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>除非使用 <code>default</code> 语法，否则函数和类都不能使用匿名</li>\n<li><code>export</code> 只能用在顶层中</li>\n</ol>\n<p><code>as</code> 和 <code>default</code> 语法的情况，给出一个来自 <a href=\"http://www.2ality.com/2015/07/es6-module-exports.html\" target=\"_blank\" rel=\"noopener\">2ality</a> 的表格</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Statement</th>\n<th>Local name</th>\n<th>Export name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>export {v as x};</td>\n<td>‘v’</td>\n<td>‘x’</td>\n</tr>\n<tr>\n<td>export default function f() {}</td>\n<td>‘f’</td>\n<td>‘default’</td>\n</tr>\n<tr>\n<td>export default function () {}</td>\n<td>‘<em>default</em>‘</td>\n<td>‘default’</td>\n</tr>\n<tr>\n<td>export default 123;</td>\n<td>‘<em>default</em>‘</td>\n<td>‘default’</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>可以看出，所谓的默认导出其实就是用了 <code>default</code> 作为名字罢了。</p>\n<p>还能够将其他模块重新导出</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Statement</th>\n<th>Module</th>\n<th>Import name</th>\n<th>Export name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>export {v} from ‘mod’;</td>\n<td>‘mod’</td>\n<td>‘v’</td>\n<td>‘v’</td>\n</tr>\n<tr>\n<td>export {v as x} from ‘mod’;</td>\n<td>‘mod’</td>\n<td>‘v’</td>\n<td>‘x’</td>\n</tr>\n<tr>\n<td>export * from ‘mod’;</td>\n<td>‘mod’</td>\n<td>‘*’</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>导入有很多方法，基本使用到的其实只有几种，以下来自 MDN：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> name <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> name <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; member &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; member <span class=\"keyword\">as</span> alias &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; member1 , member2 &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; member1 , member2 <span class=\"keyword\">as</span> alias2 , [...] &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> defaultMember, &#123; member [ , [...] ] &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> defaultMember, * <span class=\"keyword\">as</span> alias <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> defaultMember <span class=\"keyword\">from</span> <span class=\"string\">\"module-name\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"module-name\"</span>;</span><br></pre></td></tr></table></figure>\n<p>最后那种导入是相当于将代码执行了一次。通常可以用来做 <code>polyfills</code> 和 <code>shims</code>。</p>\n<p><a name=\"miscellaneous\"></a></p>\n<h2 id=\"杂七杂八↑\"><a href=\"#杂七杂八↑\" class=\"headerlink\" title=\"杂七杂八↑\"></a>杂七杂八<a href=\"#catalogue\">↑</a></h2><p><code>Number.isInteger</code>，判断整数</p>\n<p><code>Number.isSafeInteger</code>，判断是否是有效整数</p>\n<p>Math 中加入很多函数，例如双曲正弦、双曲余弦之类的</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Fri Nov 06 2015 14:44:52 GMT+0800 (China Standard Time)","title":"《Understanding ECMAScript 6》笔记","path":"understanding-ecmascript6-note/","eyeCatchImage":null,"excerpt":null,"date":"2015-10-21T14:17:05.000Z","pv":0,"totalPV":0,"categories":"技术 > 前端 > 编程语言 > javascript","tags":["javascript","ECMAScript6","note"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3704},{"title":"使用 ES6 编写一个生命游戏","id":"49","updated":"2015-11-27T04:31:33.000Z","date":"2015-11-26T16:38:57.000Z","_content":"\n> [GitHub 地址](https://github.com/exoticknight/gol.js)\n\n![gif](https://i.imgur.com/fLKUaVL.gif)\n\n## 缘起\n\n前段时间看了《Understanding ECMAScript 6》，因为有 JavaScript 的基础，很快就上手了，还写了 [笔记](http://blog.e10t.net/understanding-ecmascript6-note/)。然而编程只看书是不够的，还需要让身体熟悉起来。刚好最近在看「全部成为 F」这部新番，看到 ED 采用了「生命游戏」的表现形式，于是便有了用 ES6 来写一个的主意。\n\n## 「生命游戏」\n\n「生命游戏」的英文原文是「Game of Life」，是细胞自动机的一种形式，每个细胞的未来状态只取决于以其为中心周围八格细胞的当前状态。更详细的信息请看 [wiki 条目](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)，给出一个有意思的动画图。\n\n![gif 动画图](https://upload.wikimedia.org/wikipedia/commons/e/e5/Gospers_glider_gun.gif)\n\n而状态判断只有四条：\n\n1. 当前细胞为存活状态时，当周围低于 2 个（不包含 2 个）存活细胞时， 该细胞变成死亡状态。（模拟生命数量稀少）\n1. 当前细胞为存活状态时，当周围有 2 个或 3 个存活细胞时， 该细胞保持原样。\n1. 当前细胞为存活状态时，当周围有 3 个以上的存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）\n1. 当前细胞为死亡状态时，当周围有 3 个存活细胞时，该细胞变成存活状态。 （模拟繁殖）\n\n### 算法思考\n\n假设有一个棋盘，每一个格子代表一个细胞。在每一次生成下一代细胞，先遍历每一个细胞，查询它周围八格细胞的状态，设置本细胞下一代的状态。\n\n显然这样的算法基本毫无意义，因为显然棋盘是不定大小的，细胞也不是每一代都一定会变化的，遍历整个棋盘也是浪费时间的。\n\n实际上，发生变化或者有可能发生变化的细胞，基本是聚集在活细胞周围的。如果一个死细胞附近没有活细胞，那么这个细胞就不会发生变化。所以，可以换个思路，每一个曾经活过或者在活细胞周围的细胞都维持一个它的邻居细胞的数目记录。每当一个细胞活过来了，就通知周围八格的细胞，让它们的活邻居细胞的数目记录增加 1；相反每当一个细胞死了，就通知周围八格的细胞，让它们的活邻居细胞的数目记录减少 1。显然在更新完之后，周围八格的细胞不论生死都清楚自己周围的活细胞数，也就是能够得到自己的未来状态了。同时，在通知周围八个邻居的时候，也可以统计出对于本细胞来说的活邻居数，于是本细胞的未来状态也能够得到了。\n\n于是算法能描述如下：\n\n```markup\n1) 在某一次生成本次状态中，有将改变状态的细胞集合 S\n2) 遍历集合 S，对于细胞 i：\n    改变细胞 i 的状态\n    细胞 i 的活邻居数置零\n    遍历 8 个邻居细胞，对于邻居细胞 j：\n        如果细胞 i 改变后的状态 == 存活，细胞 j 的活邻居数增加 1\n        如果细胞 i 改变后的状态 == 死亡，细胞 j 的活邻居数减少 1\n        计算细胞 j 的未来状态并记录在将改变状态的细胞集合 S' 中\n        如果细胞 j 是活细胞：\n            细胞 i 的活邻居数增加 1\n    计算细胞 i 的未来状态并记录在将改变状态的细胞集合 S' 中\n3)S = S'，重复 1)、2)\n```\n\n## ES6 写起来\n\nES6 中有 class 的概念，虽然实现方式其实就是 function 和原型，但是在写的时候就不用像以前用「模拟」的手段来编写啦。\n\n### 基本对象\n\n基本来说，分三个主要对象：提供算法的 class Life，提供单元格绘制的 class Grid，提供 DOM 动画控制的 class Game。Game 从算法中得到需要重绘的单元格，通过 Grid 来绘制单元格。\n\n### class Life\n\n已经有算法描述了，写起来并不复杂。新建一个 `life.js` 文件，导出 `Life` 类。\n\n```javascript\nexport default class Life {\n  constructor ( row, col ) {\n    this.row = row;\n    this.column = col;\n\n    this.generation = 0;\n\n    /*\n     * this.world = {\n     *   '0,0':  // 'x,y'\n     *   [\n     *     1,  // alive 1, dead 0\n     *     0,  // count of neighbour\n     *   ]\n     * }\n     */\n    this.world = {};\n    /*\n     * '0,0':  // 'x,y'\n     * 1  // to be alive 1, to be dead -1, 0 not change\n     */\n    this.changedState = {};\n  }\n}\n```\n\n构造函数只需要得到世界（棋盘）的长宽就行了，`this.world` 记录世界中受关注细胞的状态，`this.changedState` 记录将要改变状态的细胞。\n\n算法本体代码，相当于描述 2) 中循环中的操作：\n\n```javascript\n  _processLife ( x, y, state ) {\n    let currentCellHash = x + ',' + y;\n    if ( this.world[currentCellHash] ) {\n      // 根据 state 改变状态\n      this.world[currentCellHash][0] = state ? 1 : 0;\n    } else {\n      // 如果世界中不存在记录，则肯定是新的活细胞\n      this.world[currentCellHash] = [1, 0];\n    }\n\n    // 更新邻居细胞并统计活邻居数\n    let aliveNeighBours = 0;\n    let neighbours = [\n      // 左边的邻居\n      [x - 1, y - 1],\n      [x - 1, y],\n      [x - 1, y + 1],\n      // 上下邻居\n      [x, y - 1],\n      [x, y + 1],\n      // 右边的邻居\n      [x + 1, y - 1],\n      [x + 1, y],\n      [x + 1, y + 1],\n    ];\n    let counter = state ? +1 : -1;\n\n    // 循环 8 个邻居\n    for ( let i = 0; i < 8; i++ ) {\n      let [nx, ny] = neighbours[i];\n\n      // 一些世界中的约束\n      if ( 0 <= nx && nx < this.column && 0 <= ny && ny < this.row ) {\n        let hash = nx + ',' + ny;\n        let oldState = this.world[hash];\n\n        // oldState[0] alive or dead, oldState[1] count of neighbour\n        if ( oldState ) {  // 邻居已经存在于世界中了\n          oldState[1] += counter;  // 更新邻居的邻居数\n\n          // 顺便统计活邻居数\n          if ( oldState[0] ) {\n            aliveNeighBours++;\n          }\n        } else {  // 边缘开拓新的细胞，肯定是死细胞\n          oldState = this.world[hash] = [0, 1];\n        }\n        // 计算邻居细胞的未来状态\n        switch ( oldState[1] ) {\n          case 8:\n          case 7:\n          case 6:\n          case 5:\n          case 4:\n          case 1:\n          case 0:\n            this.changedState[hash] = -1;  // if alive, then to be dead\n            break;\n          case 3:\n            this.changedState[hash] = 1;  // if dead, then to be alive\n            break;\n          case 2:\n            this.changedState[hash] = 0;\n            break;\n        }\n      }\n    }\n\n    // 计算当前细胞的未来状态\n    this.world[currentCellHash][1] = aliveNeighBours;\n    switch ( aliveNeighBours ) {\n      case 8:\n      case 7:\n      case 6:\n      case 5:\n      case 4:\n      case 1:\n      case 0:\n        this.changedState[currentCellHash] = -1;  // if alive, then to be dead\n        break;\n      case 3:\n        this.changedState[currentCellHash] = 1;  // if dead, then to be alive\n        break;\n      case 2:\n        this.changedState[currentCellHash] = 0;\n        break;\n    }\n  }\n```\n\n2) 的循环其实就是得到下一代的状态：\n\n```javascript\n  nextGeneration () {\n    let state = Object.assign( {}, this.changedState );  // 复制将要改变的状态集以便清空\n    let changedCells = { 0: [], 1:[] };\n\n    // reset next state\n    this.changedState = {};\n\n    // 2) 的循环\n    for ( let key in state ) {\n      let [x, y] = key.split( ',' ).map( x => parseInt( x ) );\n\n      if ( state[key] === 1 && ( !this.world[key] || this.world[key][0] === 0 ) ) {\n        this.aliveAt( x, y );  // 会调用 _processLife( x, y, true )\n        changedCells[1].push( [x, y] );  // 记录重绘的细胞\n      } if ( state[key] === -1 && this.world[key][0] === 1 ) {\n        this.killAt( x, y );  // 会调用 _processLife( x, y, false )\n        changedCells[0].push( [x, y] );  // 记录重绘的细胞\n      }\n    }\n    return changedCells;\n  }\n```\n\n其他函数可以在 GiiHub 查看。\n\n### class Grid\n\n确定使用 `HTML5` 中的 `Canvas` 元素来绘制整个世界（棋盘），`Canvas` 元素的操作使用另一个类 `C`，后面再写。\n\n新建 `grid.js` 文件，导出 `Grid` 类。\n\n```javascript\nexport default class Grid {\n  constructor ( canvas, row, col, displayScheme, colorScheme ) {\n    this.view = canvas;\n    this.canvas = new C( canvas );\n\n    this.displayScheme = displayScheme;\n    this.colorScheme = colorScheme;\n  }\n}\n```\n\n构造函数要传入 canvas DOM 元素，棋盘的长宽，显示的选项和颜色选项。\n\n绘制单元格的主要函数。\n\n```javascript\n  drawCells( redrawCells ) {\n    // draw alive cells\n    this.canvas.setPenColor( this.colorScheme.aliveColor );\n    for ( let x, y, i = 0, len = redrawCells[1].length; i < len; i++ ) {\n      [x, y] = redrawCells[1][i];\n      this.drawCellAt( x, y );\n    }\n\n    // draw dead cells\n    this.canvas.setPenColor( this.colorScheme.deadColor );\n    for ( let x, y, i = 0, len = redrawCells[0].length; i < len; i++ ) {\n      [x, y] = redrawCells[0][i];\n      this.drawCellAt( x, y );\n    }\n  }\n\n  drawCellAt ( x, y ) {\n    this.canvas.drawRect(\n      x * ( this.displayScheme.borderWidth + this.displayScheme.cellWidth ),\n      y * ( this.displayScheme.borderWidth + this.displayScheme.cellWidth ),\n      this.displayScheme.cellWidth,\n      this.displayScheme.cellWidth );\n  }\n```\n\n`drawCells` 函数是用来批量画细胞的函数，同样颜色的细胞放在一起画，就不需要频繁改变画笔的颜色。\n\n`drawCellAt` 函数就是找到单元格的左上角距离 `Canvas` 元素左上角的距离，距离左边是第 x 个细胞宽度加细胞边框宽度，距离上边也是同样道理。\n\n其中调用的 `setPenColor` 和 `drawRect` 还没有，于是就新增一个 `c.js` 文件，导出 `C` 类。其实就是 `Canvas` 元素的操作的封装而已。\n\n```javascript\nexport default class C {\n  constructor ( ele ) {\n    this.cxt = ele.getContext( '2d' );\n    this.fillStyle = '#000000';\n  }\n\n  setPenColor ( hex ) {\n    this.cxt.fillStyle = this.fillStyle = '#' + hex;\n  }\n\n  drawRect ( ox, oy, width, height ) {\n    this.cxt.fillRect( ox, oy, width, height );\n  }\n\n  clear () {\n    this.cxt.clearRect( 0, 0, this.cxt.canvas.width, this.cxt.canvas.height );\n  }\n}\n```\n\n### class Game\n\n不复杂，直接看代码吧。\n\n```javascript\nimport Life from './life.js';\nimport Grid from './grid.js';\n\nexport default class Game {\n  constructor ( canvas, row, col, displayScheme, colorScheme, gps ) {\n    this.grid = new Grid( canvas, row, col, displayScheme, colorScheme );\n    this.life = new Life( row, col );\n\n    this.speed = 1000 / gps;\n\n    this.enable = false;\n    this.running = false;\n  }\n\n  init ( x ) {\n    this.stop();\n    this.life.init( x );\n    this.grid.init();\n    this.enable = true;\n  }\n\n  stop () {\n    this.running = false;\n    this.enable = false;\n    this.life.reset();\n    this.grid.claer();\n  }\n\n  pause () {\n    if ( this.enable ) {\n      this.running = false;\n    }\n  }\n\n  resume () {\n    if ( this.enable ) {\n      this.run();\n    }\n  }\n\n  step () {\n    if ( this.enable ) {\n      // run algorithm\n      let redrawCells = this.life.nextGeneration();\n      // redraw cells\n      this.grid.drawCells( redrawCells );\n    }\n  }\n\n  run () {\n    if ( this.enable && !this.running ) {\n      this.running = true;\n\n      let _run = () => {\n        if ( this.running ) {\n          this.step();\n          setTimeout( _run, this.speed );\n        }\n      };\n\n      setTimeout( _run, 0 );\n    }\n  }\n}\n```\n\n就是一些简单的动画控制方法，跟普通 JavaScript 写起来没什么不同。需要注意的是 `enable` 状态和 `running` 状态是不一样的，前者是指整个游戏的响应，后者是指动画的响应。\n\n`step` 方法是迭代一步，`run` 方法就是用 `setTimeout` 来循环调用 `step` 了。在 `run` 方法中使用了箭头函数来隐含设定了 `this` 的值，ES6 的优势就体现出来了。\n\n### gol.js\n\n整个程序的主体是 Game 的实例，然而还是需要有人去创造一个实例出来，也就是说需要一个工厂函数。于是，新建 `gol.js` 文件，导出 `GOL` 类。里面写一个静态方法，用作创建 Game 实例的工厂方法。\n\n```javascript\nimport Game from './game.js';\n\nexport default class GOL {\n  static createGame ( canvas, row, col, options ) {\n    let param = Object.assign( {\n      displayScheme: {\n        borderWidth: 1,\n        cellWidth: 10\n      },\n      colorScheme: {\n        aliveColor: '000000',\n        deadColor: 'FFFFFF',\n        worldColor: 'FFFFFF',\n        borderColor: 'FFFFFF'\n      },\n      gps: 15\n    }, options );\n\n    return new Game( canvas, row, col, param.displayScheme, param.colorScheme, param.gps );\n  }\n}\n```\n\n不过在 `createGame` 方法上就不要用 ES6 的语法了，因为方法是要在页面上调用的，目前还没有哪个浏览器完全支持 ES6。但是在方法里面用是没问题的，因为编译器会帮我们转换好。于是可以看到方法里面直接用 `Object.assign( des, src )` 的函数来合并参数，类似 jQuery 的 `extends` 函数。\n\n### boot.js\n\n到此还没完，回忆一下在写普通 JavaScript 库的时候，我们通常会直接包裹上一层适应各种环境的模块注册代码，本人最喜欢就是直接使用 [UMD](https://github.com/umdjs/umd) 了。\n\n新建 `boot.js` 文件，执行非 ES6 形式的导出。\n\n```javascript\nimport GOL from './gol.js';\n\n(function ( root, name, definition ) {\n  if ( typeof define === 'function' && define.amd ) {\n    define( [], function () {\n        return ( root[name] = definition( root ) );\n    });\n  } else if ( typeof module === 'object' && module.exports ) {\n    module.exports = definition( root );\n  } else {\n    root[name] = definition( root );\n  }\n})( window, 'GOL', function ( root ) {\n  return GOL;\n});\n```\n\n## 代码打包\n\nOK，到此代码基本写好了，然而到在浏览器上执行还是有一段距离，主要是基本没有浏览器默认支持 ES6，我们还是需要将 ES6 的代码编译一下以便能放到浏览器上运行。比较有名的编译器就是 [Babel](https://github.com/babel/babel) 和 Google 的 [Traceur](https://github.com/google/traceur-compiler) 了。在编译的同时，还需要将所有文件打包成 bundle。\n\n在进行了各种尝试之后（包括主流的 npm / browserify / jspm 等），最后发现使用 `webpack` 和 `Babel` 的结合是比较理想的。\n\n### 配置\n\n先来把需要的东西都装上。\n\n```bash\nnpm i --save-dev webpack babel babel-core babel-loader babel-preset-es2015\n```\n\n> 个人其实非常讨厌安装到本地，明明都是可以全局安装的插件和工具。\n> 而且每次开一个新的项目就要安装几十 MB 的重复东西实在无聊，npm 本身的树状依赖也是容易造成目录过深的情况。（据说新版 npm 有改善，但是不稳定）\n> 个人的解决方法是固定一个开发目录，代码随便迁移。\n\n### webpack.config.js\n\n`webpack` 我就不详细解释了。直接上 `webpack.config.js`。\n\n```javascript\nmodule.exports = {\n    entry: './src/boot.js',\n    output: {\n        path: __dirname,\n        filename: './dist/bundle.js'\n    },\n    module: {\n        loaders: [\n            {\n                test: /\\.js$/,\n                loader: 'babel',\n                query: {\n                    cacheDirectory: true,\n                    presets: ['es2015']\n                }\n            }\n        ]\n    }\n};\n```\n\n目前来说，这样写就能让 `Babel` 编译 ES6 的代码的同时，也运用 `webpack` 自己的打包功能 ** 根据 ES6 的模块语法 ** 将文件都打包成一个 bundle。\n\n打包出来的代码有点大，压缩一下，再写一个 `webpack.config.min.js`。\n\n```javascript\n// webpack.config.min.js\nvar webpack = require(\"webpack\");\nmodule.exports = exports = Object.create(require(\"./webpack.config.js\"));\nexports.plugins = [new webpack.optimize.UglifyJsPlugin()];\nexports.output = Object.create(exports.output);\nexports.output.filename = exports.output.filename.replace(/\\.js$/, \".min.js\");\n```\n\n就能用 `webpack` 自带的压缩插件压缩代码了。\n\n## 添加功能\n\n算法、绘图和动画控制都写好了，但是还不够，缺少了交互，还应该允许方便的自定义世界中的活细胞。比较好的交互方式就是允许通过在世界（棋盘）点击来放置活细胞或者死细胞。\n\n于是考虑监听 `Canvas` 元素的 `mousedown`、`mousemove` 和 `mouseup` 事件，做出类似画图那样的效果（每个细胞可以看成是一个像素点）。\n\n### grid.js\n\n先改造负责绘制的模块。\n\n在 `Grid` 类中新增 `drawAliveCellAt`、`drawDeadCellAt` 函数，负责独立绘制细胞。\n\n```javascript\n  drawAliveCellAt( x, y ) {\n    this.canvas.setPenColor( this.colorScheme.aliveColor );\n    this.drawCellAt( x, y );\n  }\n\n  drawDeadCellAt( x, y ) {\n    this.canvas.setPenColor( this.colorScheme.deadColor );\n    this.drawCellAt( x, y );\n  }\n```\n\n新增 `on`、`off` 函数，负责绑定监听方法。\n\n```javascript\n  on ( event, handler ) {\n    this.view.addEventListener( event, handler, false );\n  }\n\n  off ( event, handler ) {\n    this.view.removeEventListener( event, handler );\n  }\n```\n\n新增 `getXFromPixel`、`getYFromPixel` 函数，负责将像素点转换为单元格位置。\n\n```javascript\n  getXFromPixel ( pixel ) {\n    let d = this.displayScheme.borderWidth + this.displayScheme.cellWidth;\n    let x = ~~( ( pixel - this.canvas.left ) / d );\n    return x % d <= this.displayScheme.cellWidth ? x : -1;\n  }\n\n  getYFromPixel ( pixel ) {\n    let d = this.displayScheme.borderWidth + this.displayScheme.cellWidth;\n    let y = ~~( ( pixel - this.canvas.top ) / d );\n    return y % d <= this.displayScheme.cellWidth ? y : -1;\n  }\n```\n\n`~~` 是快速取整数。`this.canvas.left` 和 `this.canvas.top` 来自于类 `C` 的实例，因为鼠标点击事件取得的坐标点并非一定是相对于 `Canvas` 元素的左上角，还要减去 `Canvas` 元素的边框等。在 `c.js` 中将构造函数修改一下。\n\n```javascript\n  constructor ( ele ) {\n    this.cxt = ele.getContext( '2d' );\n    this.fillStyle = '#000000';\n    this.left = ele.getBoundingClientRect().left;\n    this.top = ele.getBoundingClientRect().top;\n  }\n```\n\n### game.js\n\n类 `Game` 的修改有点复杂。先在类的构造函数中增加一个属性，负责记录鼠标状态。\n\n```javascript\n    this._mouseState = {\n      press: false,\n      lastX: -1,\n      lastY: -1\n    };\n```\n\n再增加三个方法。\n\n```javascript\n  _onMouseDown ( e ) {\n    this._mouseState.press = true;\n    this._toggleCell( e.clientX, e.clientY );\n  }\n\n  _onMouseMove ( e ) {\n    if ( this._mouseState.press ) {\n      this._toggleCell( e.clientX, e.clientY );\n    }\n  }\n\n  _onMouseUp ( e ) {\n    this._mouseState.press = false;\n    this._mouseState.lastX = this._mouseState.lastY = -1;\n  }\n```\n\n鼠标按下，就在鼠标按下的位置改变细胞的状态，并记录鼠标状态为按下。接着如果鼠标弹起，那么就重置鼠标状态；如果鼠标移动并且状态是按下，那么就一直改变路过的细胞的状态。\n\n`_toggleCell` 方法这样写：\n\n```javascript\n  _toggleCell ( px, py ) {\n    let x = this.grid.getXFromPixel( px );\n    let y = this.grid.getYFromPixel( py );\n\n    if ( x !== -1 && y !== -1  && ( this._mouseState.lastX !== x || this._mouseState.lastY !== y ) ) {\n      this._mouseState.lastX = x;\n      this._mouseState.lastY = y;\n      if ( this.life.isAlive( x, y ) ) {\n        this.life.killAt( x, y );\n        this.grid.drawDeadCellAt( x, y );\n      } else {\n        this.life.aliveAt( x, y );\n        this.grid.drawAliveCellAt( x, y );\n      }\n    }\n  }\n```\n\n大概意思就是先将鼠标的位置转化为单元格位置，再反置此单元格细胞的状态。记录下 `lastX` 和 `lastY` 是为了不会循环反置，一定要有坐标变化才反置。\n\n接下来就是将那三个函数绑定在事件上。新增 `_setupLinsteners` 函数。\n\n```javascript\n  _setupLinsteners () {\n    this.grid.on( 'mousedown', e => this._onMouseDown( e );\n    this.grid.on( 'mousemove', e => this._onMouseMove( e );\n    this.grid.on( 'mouseup', e => this._onMouseUp( e );\n  }\n```\n\n虽然使用了箭头函数优雅地绑定了 `this` 的值，但是这样写并不好，因为没办法解绑了，容易造成内存泄漏。改一下。\n\n```javascript\n  _setupLinsteners () {\n    this._boundMethod['_onMouseDown'] = e => this._onMouseDown( e );\n    this._boundMethod['_onMouseMove'] = e => this._onMouseMove( e );\n    this._boundMethod['_onMouseUp'] = e => this._onMouseUp( e );\n\n    this.grid.on( 'mousedown', this._boundMethod['_onMouseDown'] );\n    this.grid.on( 'mousemove', this._boundMethod['_onMouseMove'] );\n    this.grid.on( 'mouseup', this._boundMethod['_onMouseUp'] );\n  }\n\n  _teardownLinsteners () {\n    this.grid.off( 'mousedown', this._boundMethod['_onMouseDown'] );\n    this.grid.off( 'mousemove', this._boundMethod['_onMouseMove'] );\n    this.grid.off( 'mouseup', this._boundMethod['_onMouseUp'] );\n\n    this._boundMethod = {};\n  }\n```\n\n通过将匿名函数的引用保存起来就能解绑了。\n\n最后给个 demo 吧。或者玩玩 [在线 demo](https://exoticknight.github.io/gol.js/)\n\n```markup\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Game of Life</title>\n  <script src=\"dist/bundle.js\"></script>\n</head>\n<body>\n  <canvas id=\"grid\" width=\"1000\" height=\"500\" style=\"border:1px solid\"></canvas>\n  <button onclick=\"test()\">init</button>\n  <button onclick=\"g.step()\">setp</button>\n  <button onclick=\"g.run()\">run</button>\n  <button onclick=\"g.stop()\">stop</button>\n  <button onclick=\"g.pause()\">pause</button>\n  <button onclick=\"g.resume()\">resume</button>\n  <script>\nvar options = {\n  displayScheme: {\n    borderWidth: 1,\n    cellWidth: 4\n  },\n  colorScheme: {\n    aliveColor: '000000',\n    deadColor: 'efefef',\n    worldColor: 'ffffff'\n  }\n};\nvar g=GOL.createGame(document.getElementById('grid'), 100, 200, options);\nfunction test(){\n  g.init([[10,10],[11,10],[10,11],[13,12],[12,13],[13,13]]);\n  g.step();\n}\n  </script>\n\n</body>\n</html>\n```","source":"_posts/使用ES6编写一个生命游戏.md","raw":"---\ntitle: 使用 ES6 编写一个生命游戏\ncategories:\n  - [技术, 前端]\n  - [编程语言, javascript]\ntags: [javascript, ECMAScript6]\npermalink: write-a-game-of-life-using-es6\nid: 49\nupdated: '2015-11-27 12:31:33'\ndate: 2015-11-27 00:38:57\n---\n\n> [GitHub 地址](https://github.com/exoticknight/gol.js)\n\n![gif](https://i.imgur.com/fLKUaVL.gif)\n\n## 缘起\n\n前段时间看了《Understanding ECMAScript 6》，因为有 JavaScript 的基础，很快就上手了，还写了 [笔记](http://blog.e10t.net/understanding-ecmascript6-note/)。然而编程只看书是不够的，还需要让身体熟悉起来。刚好最近在看「全部成为 F」这部新番，看到 ED 采用了「生命游戏」的表现形式，于是便有了用 ES6 来写一个的主意。\n\n## 「生命游戏」\n\n「生命游戏」的英文原文是「Game of Life」，是细胞自动机的一种形式，每个细胞的未来状态只取决于以其为中心周围八格细胞的当前状态。更详细的信息请看 [wiki 条目](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)，给出一个有意思的动画图。\n\n![gif 动画图](https://upload.wikimedia.org/wikipedia/commons/e/e5/Gospers_glider_gun.gif)\n\n而状态判断只有四条：\n\n1. 当前细胞为存活状态时，当周围低于 2 个（不包含 2 个）存活细胞时， 该细胞变成死亡状态。（模拟生命数量稀少）\n1. 当前细胞为存活状态时，当周围有 2 个或 3 个存活细胞时， 该细胞保持原样。\n1. 当前细胞为存活状态时，当周围有 3 个以上的存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）\n1. 当前细胞为死亡状态时，当周围有 3 个存活细胞时，该细胞变成存活状态。 （模拟繁殖）\n\n### 算法思考\n\n假设有一个棋盘，每一个格子代表一个细胞。在每一次生成下一代细胞，先遍历每一个细胞，查询它周围八格细胞的状态，设置本细胞下一代的状态。\n\n显然这样的算法基本毫无意义，因为显然棋盘是不定大小的，细胞也不是每一代都一定会变化的，遍历整个棋盘也是浪费时间的。\n\n实际上，发生变化或者有可能发生变化的细胞，基本是聚集在活细胞周围的。如果一个死细胞附近没有活细胞，那么这个细胞就不会发生变化。所以，可以换个思路，每一个曾经活过或者在活细胞周围的细胞都维持一个它的邻居细胞的数目记录。每当一个细胞活过来了，就通知周围八格的细胞，让它们的活邻居细胞的数目记录增加 1；相反每当一个细胞死了，就通知周围八格的细胞，让它们的活邻居细胞的数目记录减少 1。显然在更新完之后，周围八格的细胞不论生死都清楚自己周围的活细胞数，也就是能够得到自己的未来状态了。同时，在通知周围八个邻居的时候，也可以统计出对于本细胞来说的活邻居数，于是本细胞的未来状态也能够得到了。\n\n于是算法能描述如下：\n\n```markup\n1) 在某一次生成本次状态中，有将改变状态的细胞集合 S\n2) 遍历集合 S，对于细胞 i：\n    改变细胞 i 的状态\n    细胞 i 的活邻居数置零\n    遍历 8 个邻居细胞，对于邻居细胞 j：\n        如果细胞 i 改变后的状态 == 存活，细胞 j 的活邻居数增加 1\n        如果细胞 i 改变后的状态 == 死亡，细胞 j 的活邻居数减少 1\n        计算细胞 j 的未来状态并记录在将改变状态的细胞集合 S' 中\n        如果细胞 j 是活细胞：\n            细胞 i 的活邻居数增加 1\n    计算细胞 i 的未来状态并记录在将改变状态的细胞集合 S' 中\n3)S = S'，重复 1)、2)\n```\n\n## ES6 写起来\n\nES6 中有 class 的概念，虽然实现方式其实就是 function 和原型，但是在写的时候就不用像以前用「模拟」的手段来编写啦。\n\n### 基本对象\n\n基本来说，分三个主要对象：提供算法的 class Life，提供单元格绘制的 class Grid，提供 DOM 动画控制的 class Game。Game 从算法中得到需要重绘的单元格，通过 Grid 来绘制单元格。\n\n### class Life\n\n已经有算法描述了，写起来并不复杂。新建一个 `life.js` 文件，导出 `Life` 类。\n\n```javascript\nexport default class Life {\n  constructor ( row, col ) {\n    this.row = row;\n    this.column = col;\n\n    this.generation = 0;\n\n    /*\n     * this.world = {\n     *   '0,0':  // 'x,y'\n     *   [\n     *     1,  // alive 1, dead 0\n     *     0,  // count of neighbour\n     *   ]\n     * }\n     */\n    this.world = {};\n    /*\n     * '0,0':  // 'x,y'\n     * 1  // to be alive 1, to be dead -1, 0 not change\n     */\n    this.changedState = {};\n  }\n}\n```\n\n构造函数只需要得到世界（棋盘）的长宽就行了，`this.world` 记录世界中受关注细胞的状态，`this.changedState` 记录将要改变状态的细胞。\n\n算法本体代码，相当于描述 2) 中循环中的操作：\n\n```javascript\n  _processLife ( x, y, state ) {\n    let currentCellHash = x + ',' + y;\n    if ( this.world[currentCellHash] ) {\n      // 根据 state 改变状态\n      this.world[currentCellHash][0] = state ? 1 : 0;\n    } else {\n      // 如果世界中不存在记录，则肯定是新的活细胞\n      this.world[currentCellHash] = [1, 0];\n    }\n\n    // 更新邻居细胞并统计活邻居数\n    let aliveNeighBours = 0;\n    let neighbours = [\n      // 左边的邻居\n      [x - 1, y - 1],\n      [x - 1, y],\n      [x - 1, y + 1],\n      // 上下邻居\n      [x, y - 1],\n      [x, y + 1],\n      // 右边的邻居\n      [x + 1, y - 1],\n      [x + 1, y],\n      [x + 1, y + 1],\n    ];\n    let counter = state ? +1 : -1;\n\n    // 循环 8 个邻居\n    for ( let i = 0; i < 8; i++ ) {\n      let [nx, ny] = neighbours[i];\n\n      // 一些世界中的约束\n      if ( 0 <= nx && nx < this.column && 0 <= ny && ny < this.row ) {\n        let hash = nx + ',' + ny;\n        let oldState = this.world[hash];\n\n        // oldState[0] alive or dead, oldState[1] count of neighbour\n        if ( oldState ) {  // 邻居已经存在于世界中了\n          oldState[1] += counter;  // 更新邻居的邻居数\n\n          // 顺便统计活邻居数\n          if ( oldState[0] ) {\n            aliveNeighBours++;\n          }\n        } else {  // 边缘开拓新的细胞，肯定是死细胞\n          oldState = this.world[hash] = [0, 1];\n        }\n        // 计算邻居细胞的未来状态\n        switch ( oldState[1] ) {\n          case 8:\n          case 7:\n          case 6:\n          case 5:\n          case 4:\n          case 1:\n          case 0:\n            this.changedState[hash] = -1;  // if alive, then to be dead\n            break;\n          case 3:\n            this.changedState[hash] = 1;  // if dead, then to be alive\n            break;\n          case 2:\n            this.changedState[hash] = 0;\n            break;\n        }\n      }\n    }\n\n    // 计算当前细胞的未来状态\n    this.world[currentCellHash][1] = aliveNeighBours;\n    switch ( aliveNeighBours ) {\n      case 8:\n      case 7:\n      case 6:\n      case 5:\n      case 4:\n      case 1:\n      case 0:\n        this.changedState[currentCellHash] = -1;  // if alive, then to be dead\n        break;\n      case 3:\n        this.changedState[currentCellHash] = 1;  // if dead, then to be alive\n        break;\n      case 2:\n        this.changedState[currentCellHash] = 0;\n        break;\n    }\n  }\n```\n\n2) 的循环其实就是得到下一代的状态：\n\n```javascript\n  nextGeneration () {\n    let state = Object.assign( {}, this.changedState );  // 复制将要改变的状态集以便清空\n    let changedCells = { 0: [], 1:[] };\n\n    // reset next state\n    this.changedState = {};\n\n    // 2) 的循环\n    for ( let key in state ) {\n      let [x, y] = key.split( ',' ).map( x => parseInt( x ) );\n\n      if ( state[key] === 1 && ( !this.world[key] || this.world[key][0] === 0 ) ) {\n        this.aliveAt( x, y );  // 会调用 _processLife( x, y, true )\n        changedCells[1].push( [x, y] );  // 记录重绘的细胞\n      } if ( state[key] === -1 && this.world[key][0] === 1 ) {\n        this.killAt( x, y );  // 会调用 _processLife( x, y, false )\n        changedCells[0].push( [x, y] );  // 记录重绘的细胞\n      }\n    }\n    return changedCells;\n  }\n```\n\n其他函数可以在 GiiHub 查看。\n\n### class Grid\n\n确定使用 `HTML5` 中的 `Canvas` 元素来绘制整个世界（棋盘），`Canvas` 元素的操作使用另一个类 `C`，后面再写。\n\n新建 `grid.js` 文件，导出 `Grid` 类。\n\n```javascript\nexport default class Grid {\n  constructor ( canvas, row, col, displayScheme, colorScheme ) {\n    this.view = canvas;\n    this.canvas = new C( canvas );\n\n    this.displayScheme = displayScheme;\n    this.colorScheme = colorScheme;\n  }\n}\n```\n\n构造函数要传入 canvas DOM 元素，棋盘的长宽，显示的选项和颜色选项。\n\n绘制单元格的主要函数。\n\n```javascript\n  drawCells( redrawCells ) {\n    // draw alive cells\n    this.canvas.setPenColor( this.colorScheme.aliveColor );\n    for ( let x, y, i = 0, len = redrawCells[1].length; i < len; i++ ) {\n      [x, y] = redrawCells[1][i];\n      this.drawCellAt( x, y );\n    }\n\n    // draw dead cells\n    this.canvas.setPenColor( this.colorScheme.deadColor );\n    for ( let x, y, i = 0, len = redrawCells[0].length; i < len; i++ ) {\n      [x, y] = redrawCells[0][i];\n      this.drawCellAt( x, y );\n    }\n  }\n\n  drawCellAt ( x, y ) {\n    this.canvas.drawRect(\n      x * ( this.displayScheme.borderWidth + this.displayScheme.cellWidth ),\n      y * ( this.displayScheme.borderWidth + this.displayScheme.cellWidth ),\n      this.displayScheme.cellWidth,\n      this.displayScheme.cellWidth );\n  }\n```\n\n`drawCells` 函数是用来批量画细胞的函数，同样颜色的细胞放在一起画，就不需要频繁改变画笔的颜色。\n\n`drawCellAt` 函数就是找到单元格的左上角距离 `Canvas` 元素左上角的距离，距离左边是第 x 个细胞宽度加细胞边框宽度，距离上边也是同样道理。\n\n其中调用的 `setPenColor` 和 `drawRect` 还没有，于是就新增一个 `c.js` 文件，导出 `C` 类。其实就是 `Canvas` 元素的操作的封装而已。\n\n```javascript\nexport default class C {\n  constructor ( ele ) {\n    this.cxt = ele.getContext( '2d' );\n    this.fillStyle = '#000000';\n  }\n\n  setPenColor ( hex ) {\n    this.cxt.fillStyle = this.fillStyle = '#' + hex;\n  }\n\n  drawRect ( ox, oy, width, height ) {\n    this.cxt.fillRect( ox, oy, width, height );\n  }\n\n  clear () {\n    this.cxt.clearRect( 0, 0, this.cxt.canvas.width, this.cxt.canvas.height );\n  }\n}\n```\n\n### class Game\n\n不复杂，直接看代码吧。\n\n```javascript\nimport Life from './life.js';\nimport Grid from './grid.js';\n\nexport default class Game {\n  constructor ( canvas, row, col, displayScheme, colorScheme, gps ) {\n    this.grid = new Grid( canvas, row, col, displayScheme, colorScheme );\n    this.life = new Life( row, col );\n\n    this.speed = 1000 / gps;\n\n    this.enable = false;\n    this.running = false;\n  }\n\n  init ( x ) {\n    this.stop();\n    this.life.init( x );\n    this.grid.init();\n    this.enable = true;\n  }\n\n  stop () {\n    this.running = false;\n    this.enable = false;\n    this.life.reset();\n    this.grid.claer();\n  }\n\n  pause () {\n    if ( this.enable ) {\n      this.running = false;\n    }\n  }\n\n  resume () {\n    if ( this.enable ) {\n      this.run();\n    }\n  }\n\n  step () {\n    if ( this.enable ) {\n      // run algorithm\n      let redrawCells = this.life.nextGeneration();\n      // redraw cells\n      this.grid.drawCells( redrawCells );\n    }\n  }\n\n  run () {\n    if ( this.enable && !this.running ) {\n      this.running = true;\n\n      let _run = () => {\n        if ( this.running ) {\n          this.step();\n          setTimeout( _run, this.speed );\n        }\n      };\n\n      setTimeout( _run, 0 );\n    }\n  }\n}\n```\n\n就是一些简单的动画控制方法，跟普通 JavaScript 写起来没什么不同。需要注意的是 `enable` 状态和 `running` 状态是不一样的，前者是指整个游戏的响应，后者是指动画的响应。\n\n`step` 方法是迭代一步，`run` 方法就是用 `setTimeout` 来循环调用 `step` 了。在 `run` 方法中使用了箭头函数来隐含设定了 `this` 的值，ES6 的优势就体现出来了。\n\n### gol.js\n\n整个程序的主体是 Game 的实例，然而还是需要有人去创造一个实例出来，也就是说需要一个工厂函数。于是，新建 `gol.js` 文件，导出 `GOL` 类。里面写一个静态方法，用作创建 Game 实例的工厂方法。\n\n```javascript\nimport Game from './game.js';\n\nexport default class GOL {\n  static createGame ( canvas, row, col, options ) {\n    let param = Object.assign( {\n      displayScheme: {\n        borderWidth: 1,\n        cellWidth: 10\n      },\n      colorScheme: {\n        aliveColor: '000000',\n        deadColor: 'FFFFFF',\n        worldColor: 'FFFFFF',\n        borderColor: 'FFFFFF'\n      },\n      gps: 15\n    }, options );\n\n    return new Game( canvas, row, col, param.displayScheme, param.colorScheme, param.gps );\n  }\n}\n```\n\n不过在 `createGame` 方法上就不要用 ES6 的语法了，因为方法是要在页面上调用的，目前还没有哪个浏览器完全支持 ES6。但是在方法里面用是没问题的，因为编译器会帮我们转换好。于是可以看到方法里面直接用 `Object.assign( des, src )` 的函数来合并参数，类似 jQuery 的 `extends` 函数。\n\n### boot.js\n\n到此还没完，回忆一下在写普通 JavaScript 库的时候，我们通常会直接包裹上一层适应各种环境的模块注册代码，本人最喜欢就是直接使用 [UMD](https://github.com/umdjs/umd) 了。\n\n新建 `boot.js` 文件，执行非 ES6 形式的导出。\n\n```javascript\nimport GOL from './gol.js';\n\n(function ( root, name, definition ) {\n  if ( typeof define === 'function' && define.amd ) {\n    define( [], function () {\n        return ( root[name] = definition( root ) );\n    });\n  } else if ( typeof module === 'object' && module.exports ) {\n    module.exports = definition( root );\n  } else {\n    root[name] = definition( root );\n  }\n})( window, 'GOL', function ( root ) {\n  return GOL;\n});\n```\n\n## 代码打包\n\nOK，到此代码基本写好了，然而到在浏览器上执行还是有一段距离，主要是基本没有浏览器默认支持 ES6，我们还是需要将 ES6 的代码编译一下以便能放到浏览器上运行。比较有名的编译器就是 [Babel](https://github.com/babel/babel) 和 Google 的 [Traceur](https://github.com/google/traceur-compiler) 了。在编译的同时，还需要将所有文件打包成 bundle。\n\n在进行了各种尝试之后（包括主流的 npm / browserify / jspm 等），最后发现使用 `webpack` 和 `Babel` 的结合是比较理想的。\n\n### 配置\n\n先来把需要的东西都装上。\n\n```bash\nnpm i --save-dev webpack babel babel-core babel-loader babel-preset-es2015\n```\n\n> 个人其实非常讨厌安装到本地，明明都是可以全局安装的插件和工具。\n> 而且每次开一个新的项目就要安装几十 MB 的重复东西实在无聊，npm 本身的树状依赖也是容易造成目录过深的情况。（据说新版 npm 有改善，但是不稳定）\n> 个人的解决方法是固定一个开发目录，代码随便迁移。\n\n### webpack.config.js\n\n`webpack` 我就不详细解释了。直接上 `webpack.config.js`。\n\n```javascript\nmodule.exports = {\n    entry: './src/boot.js',\n    output: {\n        path: __dirname,\n        filename: './dist/bundle.js'\n    },\n    module: {\n        loaders: [\n            {\n                test: /\\.js$/,\n                loader: 'babel',\n                query: {\n                    cacheDirectory: true,\n                    presets: ['es2015']\n                }\n            }\n        ]\n    }\n};\n```\n\n目前来说，这样写就能让 `Babel` 编译 ES6 的代码的同时，也运用 `webpack` 自己的打包功能 ** 根据 ES6 的模块语法 ** 将文件都打包成一个 bundle。\n\n打包出来的代码有点大，压缩一下，再写一个 `webpack.config.min.js`。\n\n```javascript\n// webpack.config.min.js\nvar webpack = require(\"webpack\");\nmodule.exports = exports = Object.create(require(\"./webpack.config.js\"));\nexports.plugins = [new webpack.optimize.UglifyJsPlugin()];\nexports.output = Object.create(exports.output);\nexports.output.filename = exports.output.filename.replace(/\\.js$/, \".min.js\");\n```\n\n就能用 `webpack` 自带的压缩插件压缩代码了。\n\n## 添加功能\n\n算法、绘图和动画控制都写好了，但是还不够，缺少了交互，还应该允许方便的自定义世界中的活细胞。比较好的交互方式就是允许通过在世界（棋盘）点击来放置活细胞或者死细胞。\n\n于是考虑监听 `Canvas` 元素的 `mousedown`、`mousemove` 和 `mouseup` 事件，做出类似画图那样的效果（每个细胞可以看成是一个像素点）。\n\n### grid.js\n\n先改造负责绘制的模块。\n\n在 `Grid` 类中新增 `drawAliveCellAt`、`drawDeadCellAt` 函数，负责独立绘制细胞。\n\n```javascript\n  drawAliveCellAt( x, y ) {\n    this.canvas.setPenColor( this.colorScheme.aliveColor );\n    this.drawCellAt( x, y );\n  }\n\n  drawDeadCellAt( x, y ) {\n    this.canvas.setPenColor( this.colorScheme.deadColor );\n    this.drawCellAt( x, y );\n  }\n```\n\n新增 `on`、`off` 函数，负责绑定监听方法。\n\n```javascript\n  on ( event, handler ) {\n    this.view.addEventListener( event, handler, false );\n  }\n\n  off ( event, handler ) {\n    this.view.removeEventListener( event, handler );\n  }\n```\n\n新增 `getXFromPixel`、`getYFromPixel` 函数，负责将像素点转换为单元格位置。\n\n```javascript\n  getXFromPixel ( pixel ) {\n    let d = this.displayScheme.borderWidth + this.displayScheme.cellWidth;\n    let x = ~~( ( pixel - this.canvas.left ) / d );\n    return x % d <= this.displayScheme.cellWidth ? x : -1;\n  }\n\n  getYFromPixel ( pixel ) {\n    let d = this.displayScheme.borderWidth + this.displayScheme.cellWidth;\n    let y = ~~( ( pixel - this.canvas.top ) / d );\n    return y % d <= this.displayScheme.cellWidth ? y : -1;\n  }\n```\n\n`~~` 是快速取整数。`this.canvas.left` 和 `this.canvas.top` 来自于类 `C` 的实例，因为鼠标点击事件取得的坐标点并非一定是相对于 `Canvas` 元素的左上角，还要减去 `Canvas` 元素的边框等。在 `c.js` 中将构造函数修改一下。\n\n```javascript\n  constructor ( ele ) {\n    this.cxt = ele.getContext( '2d' );\n    this.fillStyle = '#000000';\n    this.left = ele.getBoundingClientRect().left;\n    this.top = ele.getBoundingClientRect().top;\n  }\n```\n\n### game.js\n\n类 `Game` 的修改有点复杂。先在类的构造函数中增加一个属性，负责记录鼠标状态。\n\n```javascript\n    this._mouseState = {\n      press: false,\n      lastX: -1,\n      lastY: -1\n    };\n```\n\n再增加三个方法。\n\n```javascript\n  _onMouseDown ( e ) {\n    this._mouseState.press = true;\n    this._toggleCell( e.clientX, e.clientY );\n  }\n\n  _onMouseMove ( e ) {\n    if ( this._mouseState.press ) {\n      this._toggleCell( e.clientX, e.clientY );\n    }\n  }\n\n  _onMouseUp ( e ) {\n    this._mouseState.press = false;\n    this._mouseState.lastX = this._mouseState.lastY = -1;\n  }\n```\n\n鼠标按下，就在鼠标按下的位置改变细胞的状态，并记录鼠标状态为按下。接着如果鼠标弹起，那么就重置鼠标状态；如果鼠标移动并且状态是按下，那么就一直改变路过的细胞的状态。\n\n`_toggleCell` 方法这样写：\n\n```javascript\n  _toggleCell ( px, py ) {\n    let x = this.grid.getXFromPixel( px );\n    let y = this.grid.getYFromPixel( py );\n\n    if ( x !== -1 && y !== -1  && ( this._mouseState.lastX !== x || this._mouseState.lastY !== y ) ) {\n      this._mouseState.lastX = x;\n      this._mouseState.lastY = y;\n      if ( this.life.isAlive( x, y ) ) {\n        this.life.killAt( x, y );\n        this.grid.drawDeadCellAt( x, y );\n      } else {\n        this.life.aliveAt( x, y );\n        this.grid.drawAliveCellAt( x, y );\n      }\n    }\n  }\n```\n\n大概意思就是先将鼠标的位置转化为单元格位置，再反置此单元格细胞的状态。记录下 `lastX` 和 `lastY` 是为了不会循环反置，一定要有坐标变化才反置。\n\n接下来就是将那三个函数绑定在事件上。新增 `_setupLinsteners` 函数。\n\n```javascript\n  _setupLinsteners () {\n    this.grid.on( 'mousedown', e => this._onMouseDown( e );\n    this.grid.on( 'mousemove', e => this._onMouseMove( e );\n    this.grid.on( 'mouseup', e => this._onMouseUp( e );\n  }\n```\n\n虽然使用了箭头函数优雅地绑定了 `this` 的值，但是这样写并不好，因为没办法解绑了，容易造成内存泄漏。改一下。\n\n```javascript\n  _setupLinsteners () {\n    this._boundMethod['_onMouseDown'] = e => this._onMouseDown( e );\n    this._boundMethod['_onMouseMove'] = e => this._onMouseMove( e );\n    this._boundMethod['_onMouseUp'] = e => this._onMouseUp( e );\n\n    this.grid.on( 'mousedown', this._boundMethod['_onMouseDown'] );\n    this.grid.on( 'mousemove', this._boundMethod['_onMouseMove'] );\n    this.grid.on( 'mouseup', this._boundMethod['_onMouseUp'] );\n  }\n\n  _teardownLinsteners () {\n    this.grid.off( 'mousedown', this._boundMethod['_onMouseDown'] );\n    this.grid.off( 'mousemove', this._boundMethod['_onMouseMove'] );\n    this.grid.off( 'mouseup', this._boundMethod['_onMouseUp'] );\n\n    this._boundMethod = {};\n  }\n```\n\n通过将匿名函数的引用保存起来就能解绑了。\n\n最后给个 demo 吧。或者玩玩 [在线 demo](https://exoticknight.github.io/gol.js/)\n\n```markup\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Game of Life</title>\n  <script src=\"dist/bundle.js\"></script>\n</head>\n<body>\n  <canvas id=\"grid\" width=\"1000\" height=\"500\" style=\"border:1px solid\"></canvas>\n  <button onclick=\"test()\">init</button>\n  <button onclick=\"g.step()\">setp</button>\n  <button onclick=\"g.run()\">run</button>\n  <button onclick=\"g.stop()\">stop</button>\n  <button onclick=\"g.pause()\">pause</button>\n  <button onclick=\"g.resume()\">resume</button>\n  <script>\nvar options = {\n  displayScheme: {\n    borderWidth: 1,\n    cellWidth: 4\n  },\n  colorScheme: {\n    aliveColor: '000000',\n    deadColor: 'efefef',\n    worldColor: 'ffffff'\n  }\n};\nvar g=GOL.createGame(document.getElementById('grid'), 100, 200, options);\nfunction test(){\n  g.init([[10,10],[11,10],[10,11],[13,12],[12,13],[13,13]]);\n  g.step();\n}\n  </script>\n\n</body>\n</html>\n```","slug":"write-a-game-of-life-using-es6","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyutn007rn7t4meb9n8e7","content":"<blockquote>\n<p><a href=\"https://github.com/exoticknight/gol.js\" target=\"_blank\" rel=\"noopener\">GitHub 地址</a></p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/fLKUaVL.gif\" alt=\"gif\"></p>\n<h2 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h2><p>前段时间看了《Understanding ECMAScript 6》，因为有 JavaScript 的基础，很快就上手了，还写了 <a href=\"http://blog.e10t.net/understanding-ecmascript6-note/\">笔记</a>。然而编程只看书是不够的，还需要让身体熟悉起来。刚好最近在看「全部成为 F」这部新番，看到 ED 采用了「生命游戏」的表现形式，于是便有了用 ES6 来写一个的主意。</p>\n<h2 id=\"「生命游戏」\"><a href=\"#「生命游戏」\" class=\"headerlink\" title=\"「生命游戏」\"></a>「生命游戏」</h2><p>「生命游戏」的英文原文是「Game of Life」，是细胞自动机的一种形式，每个细胞的未来状态只取决于以其为中心周围八格细胞的当前状态。更详细的信息请看 <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\" rel=\"noopener\">wiki 条目</a>，给出一个有意思的动画图。</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/e/e5/Gospers_glider_gun.gif\" alt=\"gif 动画图\"></p>\n<p>而状态判断只有四条：</p>\n<ol>\n<li>当前细胞为存活状态时，当周围低于 2 个（不包含 2 个）存活细胞时， 该细胞变成死亡状态。（模拟生命数量稀少）</li>\n<li>当前细胞为存活状态时，当周围有 2 个或 3 个存活细胞时， 该细胞保持原样。</li>\n<li>当前细胞为存活状态时，当周围有 3 个以上的存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）</li>\n<li>当前细胞为死亡状态时，当周围有 3 个存活细胞时，该细胞变成存活状态。 （模拟繁殖）</li>\n</ol>\n<h3 id=\"算法思考\"><a href=\"#算法思考\" class=\"headerlink\" title=\"算法思考\"></a>算法思考</h3><p>假设有一个棋盘，每一个格子代表一个细胞。在每一次生成下一代细胞，先遍历每一个细胞，查询它周围八格细胞的状态，设置本细胞下一代的状态。</p>\n<p>显然这样的算法基本毫无意义，因为显然棋盘是不定大小的，细胞也不是每一代都一定会变化的，遍历整个棋盘也是浪费时间的。</p>\n<p>实际上，发生变化或者有可能发生变化的细胞，基本是聚集在活细胞周围的。如果一个死细胞附近没有活细胞，那么这个细胞就不会发生变化。所以，可以换个思路，每一个曾经活过或者在活细胞周围的细胞都维持一个它的邻居细胞的数目记录。每当一个细胞活过来了，就通知周围八格的细胞，让它们的活邻居细胞的数目记录增加 1；相反每当一个细胞死了，就通知周围八格的细胞，让它们的活邻居细胞的数目记录减少 1。显然在更新完之后，周围八格的细胞不论生死都清楚自己周围的活细胞数，也就是能够得到自己的未来状态了。同时，在通知周围八个邻居的时候，也可以统计出对于本细胞来说的活邻居数，于是本细胞的未来状态也能够得到了。</p>\n<p>于是算法能描述如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) 在某一次生成本次状态中，有将改变状态的细胞集合 S</span><br><span class=\"line\">2) 遍历集合 S，对于细胞 i：</span><br><span class=\"line\">    改变细胞 i 的状态</span><br><span class=\"line\">    细胞 i 的活邻居数置零</span><br><span class=\"line\">    遍历 8 个邻居细胞，对于邻居细胞 j：</span><br><span class=\"line\">        如果细胞 i 改变后的状态 == 存活，细胞 j 的活邻居数增加 1</span><br><span class=\"line\">        如果细胞 i 改变后的状态 == 死亡，细胞 j 的活邻居数减少 1</span><br><span class=\"line\">        计算细胞 j 的未来状态并记录在将改变状态的细胞集合 S&apos; 中</span><br><span class=\"line\">        如果细胞 j 是活细胞：</span><br><span class=\"line\">            细胞 i 的活邻居数增加 1</span><br><span class=\"line\">    计算细胞 i 的未来状态并记录在将改变状态的细胞集合 S&apos; 中</span><br><span class=\"line\">3)S = S&apos;，重复 1)、2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES6-写起来\"><a href=\"#ES6-写起来\" class=\"headerlink\" title=\"ES6 写起来\"></a>ES6 写起来</h2><p>ES6 中有 class 的概念，虽然实现方式其实就是 function 和原型，但是在写的时候就不用像以前用「模拟」的手段来编写啦。</p>\n<h3 id=\"基本对象\"><a href=\"#基本对象\" class=\"headerlink\" title=\"基本对象\"></a>基本对象</h3><p>基本来说，分三个主要对象：提供算法的 class Life，提供单元格绘制的 class Grid，提供 DOM 动画控制的 class Game。Game 从算法中得到需要重绘的单元格，通过 Grid 来绘制单元格。</p>\n<h3 id=\"class-Life\"><a href=\"#class-Life\" class=\"headerlink\" title=\"class Life\"></a>class Life</h3><p>已经有算法描述了，写起来并不复杂。新建一个 <code>life.js</code> 文件，导出 <code>Life</code> 类。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Life</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( row, col ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.row = row;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.column = col;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.generation = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * this.world = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">     *   '0,0':  // 'x,y'</span></span><br><span class=\"line\"><span class=\"comment\">     *   [</span></span><br><span class=\"line\"><span class=\"comment\">     *     1,  // alive 1, dead 0</span></span><br><span class=\"line\"><span class=\"comment\">     *     0,  // count of neighbour</span></span><br><span class=\"line\"><span class=\"comment\">     *   ]</span></span><br><span class=\"line\"><span class=\"comment\">     * &#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.world = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * '0,0':  // 'x,y'</span></span><br><span class=\"line\"><span class=\"comment\">     * 1  // to be alive 1, to be dead -1, 0 not change</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.changedState = &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构造函数只需要得到世界（棋盘）的长宽就行了，<code>this.world</code> 记录世界中受关注细胞的状态，<code>this.changedState</code> 记录将要改变状态的细胞。</p>\n<p>算法本体代码，相当于描述 2) 中循环中的操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_processLife ( x, y, state ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentCellHash = x + <span class=\"string\">','</span> + y;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.world[currentCellHash] ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据 state 改变状态</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.world[currentCellHash][<span class=\"number\">0</span>] = state ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果世界中不存在记录，则肯定是新的活细胞</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.world[currentCellHash] = [<span class=\"number\">1</span>, <span class=\"number\">0</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 更新邻居细胞并统计活邻居数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> aliveNeighBours = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> neighbours = [</span><br><span class=\"line\">    <span class=\"comment\">// 左边的邻居</span></span><br><span class=\"line\">    [x - <span class=\"number\">1</span>, y - <span class=\"number\">1</span>],</span><br><span class=\"line\">    [x - <span class=\"number\">1</span>, y],</span><br><span class=\"line\">    [x - <span class=\"number\">1</span>, y + <span class=\"number\">1</span>],</span><br><span class=\"line\">    <span class=\"comment\">// 上下邻居</span></span><br><span class=\"line\">    [x, y - <span class=\"number\">1</span>],</span><br><span class=\"line\">    [x, y + <span class=\"number\">1</span>],</span><br><span class=\"line\">    <span class=\"comment\">// 右边的邻居</span></span><br><span class=\"line\">    [x + <span class=\"number\">1</span>, y - <span class=\"number\">1</span>],</span><br><span class=\"line\">    [x + <span class=\"number\">1</span>, y],</span><br><span class=\"line\">    [x + <span class=\"number\">1</span>, y + <span class=\"number\">1</span>],</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = state ? +<span class=\"number\">1</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 循环 8 个邻居</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++ ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [nx, ny] = neighbours[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 一些世界中的约束</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"number\">0</span> &lt;= nx &amp;&amp; nx &lt; <span class=\"keyword\">this</span>.column &amp;&amp; <span class=\"number\">0</span> &lt;= ny &amp;&amp; ny &lt; <span class=\"keyword\">this</span>.row ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> hash = nx + <span class=\"string\">','</span> + ny;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> oldState = <span class=\"keyword\">this</span>.world[hash];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// oldState[0] alive or dead, oldState[1] count of neighbour</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( oldState ) &#123;  <span class=\"comment\">// 邻居已经存在于世界中了</span></span><br><span class=\"line\">        oldState[<span class=\"number\">1</span>] += counter;  <span class=\"comment\">// 更新邻居的邻居数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 顺便统计活邻居数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( oldState[<span class=\"number\">0</span>] ) &#123;</span><br><span class=\"line\">          aliveNeighBours++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 边缘开拓新的细胞，肯定是死细胞</span></span><br><span class=\"line\">        oldState = <span class=\"keyword\">this</span>.world[hash] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 计算邻居细胞的未来状态</span></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> ( oldState[<span class=\"number\">1</span>] ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.changedState[hash] = <span class=\"number\">-1</span>;  <span class=\"comment\">// if alive, then to be dead</span></span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.changedState[hash] = <span class=\"number\">1</span>;  <span class=\"comment\">// if dead, then to be alive</span></span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.changedState[hash] = <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 计算当前细胞的未来状态</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.world[currentCellHash][<span class=\"number\">1</span>] = aliveNeighBours;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> ( aliveNeighBours ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.changedState[currentCellHash] = <span class=\"number\">-1</span>;  <span class=\"comment\">// if alive, then to be dead</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.changedState[currentCellHash] = <span class=\"number\">1</span>;  <span class=\"comment\">// if dead, then to be alive</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.changedState[currentCellHash] = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2) 的循环其实就是得到下一代的状态：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nextGeneration () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = <span class=\"built_in\">Object</span>.assign( &#123;&#125;, <span class=\"keyword\">this</span>.changedState );  <span class=\"comment\">// 复制将要改变的状态集以便清空</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> changedCells = &#123; <span class=\"number\">0</span>: [], <span class=\"number\">1</span>:[] &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// reset next state</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.changedState = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2) 的循环</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> state ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [x, y] = key.split( <span class=\"string\">','</span> ).map( <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"built_in\">parseInt</span>( x ) );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( state[key] === <span class=\"number\">1</span> &amp;&amp; ( !<span class=\"keyword\">this</span>.world[key] || <span class=\"keyword\">this</span>.world[key][<span class=\"number\">0</span>] === <span class=\"number\">0</span> ) ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.aliveAt( x, y );  <span class=\"comment\">// 会调用 _processLife( x, y, true )</span></span><br><span class=\"line\">      changedCells[<span class=\"number\">1</span>].push( [x, y] );  <span class=\"comment\">// 记录重绘的细胞</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">if</span> ( state[key] === <span class=\"number\">-1</span> &amp;&amp; <span class=\"keyword\">this</span>.world[key][<span class=\"number\">0</span>] === <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.killAt( x, y );  <span class=\"comment\">// 会调用 _processLife( x, y, false )</span></span><br><span class=\"line\">      changedCells[<span class=\"number\">0</span>].push( [x, y] );  <span class=\"comment\">// 记录重绘的细胞</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> changedCells;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其他函数可以在 GiiHub 查看。</p>\n<h3 id=\"class-Grid\"><a href=\"#class-Grid\" class=\"headerlink\" title=\"class Grid\"></a>class Grid</h3><p>确定使用 <code>HTML5</code> 中的 <code>Canvas</code> 元素来绘制整个世界（棋盘），<code>Canvas</code> 元素的操作使用另一个类 <code>C</code>，后面再写。</p>\n<p>新建 <code>grid.js</code> 文件，导出 <code>Grid</code> 类。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Grid</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( canvas, row, col, displayScheme, colorScheme ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.view = canvas;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.canvas = <span class=\"keyword\">new</span> C( canvas );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.displayScheme = displayScheme;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.colorScheme = colorScheme;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构造函数要传入 canvas DOM 元素，棋盘的长宽，显示的选项和颜色选项。</p>\n<p>绘制单元格的主要函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drawCells( redrawCells ) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// draw alive cells</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.canvas.setPenColor( <span class=\"keyword\">this</span>.colorScheme.aliveColor );</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> x, y, i = <span class=\"number\">0</span>, len = redrawCells[<span class=\"number\">1</span>].length; i &lt; len; i++ ) &#123;</span><br><span class=\"line\">    [x, y] = redrawCells[<span class=\"number\">1</span>][i];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawCellAt( x, y );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// draw dead cells</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.canvas.setPenColor( <span class=\"keyword\">this</span>.colorScheme.deadColor );</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> x, y, i = <span class=\"number\">0</span>, len = redrawCells[<span class=\"number\">0</span>].length; i &lt; len; i++ ) &#123;</span><br><span class=\"line\">    [x, y] = redrawCells[<span class=\"number\">0</span>][i];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawCellAt( x, y );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">drawCellAt ( x, y ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.canvas.drawRect(</span><br><span class=\"line\">    x * ( <span class=\"keyword\">this</span>.displayScheme.borderWidth + <span class=\"keyword\">this</span>.displayScheme.cellWidth ),</span><br><span class=\"line\">    y * ( <span class=\"keyword\">this</span>.displayScheme.borderWidth + <span class=\"keyword\">this</span>.displayScheme.cellWidth ),</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.displayScheme.cellWidth,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.displayScheme.cellWidth );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>drawCells</code> 函数是用来批量画细胞的函数，同样颜色的细胞放在一起画，就不需要频繁改变画笔的颜色。</p>\n<p><code>drawCellAt</code> 函数就是找到单元格的左上角距离 <code>Canvas</code> 元素左上角的距离，距离左边是第 x 个细胞宽度加细胞边框宽度，距离上边也是同样道理。</p>\n<p>其中调用的 <code>setPenColor</code> 和 <code>drawRect</code> 还没有，于是就新增一个 <code>c.js</code> 文件，导出 <code>C</code> 类。其实就是 <code>Canvas</code> 元素的操作的封装而已。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( ele ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cxt = ele.getContext( <span class=\"string\">'2d'</span> );</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fillStyle = <span class=\"string\">'#000000'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  setPenColor ( hex ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cxt.fillStyle = <span class=\"keyword\">this</span>.fillStyle = <span class=\"string\">'#'</span> + hex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  drawRect ( ox, oy, width, height ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cxt.fillRect( ox, oy, width, height );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  clear () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cxt.clearRect( <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.cxt.canvas.width, <span class=\"keyword\">this</span>.cxt.canvas.height );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"class-Game\"><a href=\"#class-Game\" class=\"headerlink\" title=\"class Game\"></a>class Game</h3><p>不复杂，直接看代码吧。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Life <span class=\"keyword\">from</span> <span class=\"string\">'./life.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Grid <span class=\"keyword\">from</span> <span class=\"string\">'./grid.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Game</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( canvas, row, col, displayScheme, colorScheme, gps ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.grid = <span class=\"keyword\">new</span> Grid( canvas, row, col, displayScheme, colorScheme );</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.life = <span class=\"keyword\">new</span> Life( row, col );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.speed = <span class=\"number\">1000</span> / gps;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.enable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.running = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  init ( x ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stop();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.life.init( x );</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.grid.init();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.enable = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  stop () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.running = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.enable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.life.reset();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.grid.claer();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  pause () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.enable ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.running = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  resume () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.enable ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  step () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.enable ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// run algorithm</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> redrawCells = <span class=\"keyword\">this</span>.life.nextGeneration();</span><br><span class=\"line\">      <span class=\"comment\">// redraw cells</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.grid.drawCells( redrawCells );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  run () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.enable &amp;&amp; !<span class=\"keyword\">this</span>.running ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.running = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> _run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.running ) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.step();</span><br><span class=\"line\">          setTimeout( _run, <span class=\"keyword\">this</span>.speed );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      setTimeout( _run, <span class=\"number\">0</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就是一些简单的动画控制方法，跟普通 JavaScript 写起来没什么不同。需要注意的是 <code>enable</code> 状态和 <code>running</code> 状态是不一样的，前者是指整个游戏的响应，后者是指动画的响应。</p>\n<p><code>step</code> 方法是迭代一步，<code>run</code> 方法就是用 <code>setTimeout</code> 来循环调用 <code>step</code> 了。在 <code>run</code> 方法中使用了箭头函数来隐含设定了 <code>this</code> 的值，ES6 的优势就体现出来了。</p>\n<h3 id=\"gol-js\"><a href=\"#gol-js\" class=\"headerlink\" title=\"gol.js\"></a>gol.js</h3><p>整个程序的主体是 Game 的实例，然而还是需要有人去创造一个实例出来，也就是说需要一个工厂函数。于是，新建 <code>gol.js</code> 文件，导出 <code>GOL</code> 类。里面写一个静态方法，用作创建 Game 实例的工厂方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Game <span class=\"keyword\">from</span> <span class=\"string\">'./game.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GOL</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> createGame ( canvas, row, col, options ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> param = <span class=\"built_in\">Object</span>.assign( &#123;</span><br><span class=\"line\">      displayScheme: &#123;</span><br><span class=\"line\">        borderWidth: <span class=\"number\">1</span>,</span><br><span class=\"line\">        cellWidth: <span class=\"number\">10</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      colorScheme: &#123;</span><br><span class=\"line\">        aliveColor: <span class=\"string\">'000000'</span>,</span><br><span class=\"line\">        deadColor: <span class=\"string\">'FFFFFF'</span>,</span><br><span class=\"line\">        worldColor: <span class=\"string\">'FFFFFF'</span>,</span><br><span class=\"line\">        borderColor: <span class=\"string\">'FFFFFF'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      gps: <span class=\"number\">15</span></span><br><span class=\"line\">    &#125;, options );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Game( canvas, row, col, param.displayScheme, param.colorScheme, param.gps );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不过在 <code>createGame</code> 方法上就不要用 ES6 的语法了，因为方法是要在页面上调用的，目前还没有哪个浏览器完全支持 ES6。但是在方法里面用是没问题的，因为编译器会帮我们转换好。于是可以看到方法里面直接用 <code>Object.assign( des, src )</code> 的函数来合并参数，类似 jQuery 的 <code>extends</code> 函数。</p>\n<h3 id=\"boot-js\"><a href=\"#boot-js\" class=\"headerlink\" title=\"boot.js\"></a>boot.js</h3><p>到此还没完，回忆一下在写普通 JavaScript 库的时候，我们通常会直接包裹上一层适应各种环境的模块注册代码，本人最喜欢就是直接使用 <a href=\"https://github.com/umdjs/umd\" target=\"_blank\" rel=\"noopener\">UMD</a> 了。</p>\n<p>新建 <code>boot.js</code> 文件，执行非 ES6 形式的导出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> GOL <span class=\"keyword\">from</span> <span class=\"string\">'./gol.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> root, name, definition </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd ) &#123;</span><br><span class=\"line\">    define( [], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ( root[name] = definition( root ) );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"built_in\">module</span>.exports ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = definition( root );</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    root[name] = definition( root );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)( <span class=\"built_in\">window</span>, <span class=\"string\">'GOL'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> root </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> GOL;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码打包\"><a href=\"#代码打包\" class=\"headerlink\" title=\"代码打包\"></a>代码打包</h2><p>OK，到此代码基本写好了，然而到在浏览器上执行还是有一段距离，主要是基本没有浏览器默认支持 ES6，我们还是需要将 ES6 的代码编译一下以便能放到浏览器上运行。比较有名的编译器就是 <a href=\"https://github.com/babel/babel\" target=\"_blank\" rel=\"noopener\">Babel</a> 和 Google 的 <a href=\"https://github.com/google/traceur-compiler\" target=\"_blank\" rel=\"noopener\">Traceur</a> 了。在编译的同时，还需要将所有文件打包成 bundle。</p>\n<p>在进行了各种尝试之后（包括主流的 npm / browserify / jspm 等），最后发现使用 <code>webpack</code> 和 <code>Babel</code> 的结合是比较理想的。</p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>先来把需要的东西都装上。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev webpack babel babel-core babel-loader babel-preset-es2015</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>个人其实非常讨厌安装到本地，明明都是可以全局安装的插件和工具。<br>而且每次开一个新的项目就要安装几十 MB 的重复东西实在无聊，npm 本身的树状依赖也是容易造成目录过深的情况。（据说新版 npm 有改善，但是不稳定）<br>个人的解决方法是固定一个开发目录，代码随便迁移。</p>\n</blockquote>\n<h3 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h3><p><code>webpack</code> 我就不详细解释了。直接上 <code>webpack.config.js</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/boot.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname,</span><br><span class=\"line\">        filename: <span class=\"string\">'./dist/bundle.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">                query: &#123;</span><br><span class=\"line\">                    cacheDirectory: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>目前来说，这样写就能让 <code>Babel</code> 编译 ES6 的代码的同时，也运用 <code>webpack</code> 自己的打包功能 <strong> 根据 ES6 的模块语法 </strong> 将文件都打包成一个 bundle。</p>\n<p>打包出来的代码有点大，压缩一下，再写一个 <code>webpack.config.min.js</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.min.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = exports = <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">require</span>(<span class=\"string\">\"./webpack.config.js\"</span>));</span><br><span class=\"line\">exports.plugins = [<span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin()];</span><br><span class=\"line\">exports.output = <span class=\"built_in\">Object</span>.create(exports.output);</span><br><span class=\"line\">exports.output.filename = exports.output.filename.replace(<span class=\"regexp\">/\\.js$/</span>, <span class=\"string\">\".min.js\"</span>);</span><br></pre></td></tr></table></figure>\n<p>就能用 <code>webpack</code> 自带的压缩插件压缩代码了。</p>\n<h2 id=\"添加功能\"><a href=\"#添加功能\" class=\"headerlink\" title=\"添加功能\"></a>添加功能</h2><p>算法、绘图和动画控制都写好了，但是还不够，缺少了交互，还应该允许方便的自定义世界中的活细胞。比较好的交互方式就是允许通过在世界（棋盘）点击来放置活细胞或者死细胞。</p>\n<p>于是考虑监听 <code>Canvas</code> 元素的 <code>mousedown</code>、<code>mousemove</code> 和 <code>mouseup</code> 事件，做出类似画图那样的效果（每个细胞可以看成是一个像素点）。</p>\n<h3 id=\"grid-js\"><a href=\"#grid-js\" class=\"headerlink\" title=\"grid.js\"></a>grid.js</h3><p>先改造负责绘制的模块。</p>\n<p>在 <code>Grid</code> 类中新增 <code>drawAliveCellAt</code>、<code>drawDeadCellAt</code> 函数，负责独立绘制细胞。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drawAliveCellAt( x, y ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.canvas.setPenColor( <span class=\"keyword\">this</span>.colorScheme.aliveColor );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.drawCellAt( x, y );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">drawDeadCellAt( x, y ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.canvas.setPenColor( <span class=\"keyword\">this</span>.colorScheme.deadColor );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.drawCellAt( x, y );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新增 <code>on</code>、<code>off</code> 函数，负责绑定监听方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on ( event, handler ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.view.addEventListener( event, handler, <span class=\"literal\">false</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">off ( event, handler ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.view.removeEventListener( event, handler );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新增 <code>getXFromPixel</code>、<code>getYFromPixel</code> 函数，负责将像素点转换为单元格位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getXFromPixel ( pixel ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> d = <span class=\"keyword\">this</span>.displayScheme.borderWidth + <span class=\"keyword\">this</span>.displayScheme.cellWidth;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = ~~( ( pixel - <span class=\"keyword\">this</span>.canvas.left ) / d );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x % d &lt;= <span class=\"keyword\">this</span>.displayScheme.cellWidth ? x : <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getYFromPixel ( pixel ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> d = <span class=\"keyword\">this</span>.displayScheme.borderWidth + <span class=\"keyword\">this</span>.displayScheme.cellWidth;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> y = ~~( ( pixel - <span class=\"keyword\">this</span>.canvas.top ) / d );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> y % d &lt;= <span class=\"keyword\">this</span>.displayScheme.cellWidth ? y : <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>~~</code> 是快速取整数。<code>this.canvas.left</code> 和 <code>this.canvas.top</code> 来自于类 <code>C</code> 的实例，因为鼠标点击事件取得的坐标点并非一定是相对于 <code>Canvas</code> 元素的左上角，还要减去 <code>Canvas</code> 元素的边框等。在 <code>c.js</code> 中将构造函数修改一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span> ( ele ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.cxt = ele.getContext( <span class=\"string\">'2d'</span> );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.fillStyle = <span class=\"string\">'#000000'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.left = ele.getBoundingClientRect().left;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.top = ele.getBoundingClientRect().top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"game-js\"><a href=\"#game-js\" class=\"headerlink\" title=\"game.js\"></a>game.js</h3><p>类 <code>Game</code> 的修改有点复杂。先在类的构造函数中增加一个属性，负责记录鼠标状态。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>._mouseState = &#123;</span><br><span class=\"line\">  press: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  lastX: <span class=\"number\">-1</span>,</span><br><span class=\"line\">  lastY: <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>再增加三个方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_onMouseDown ( e ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._mouseState.press = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._toggleCell( e.clientX, e.clientY );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_onMouseMove ( e ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>._mouseState.press ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._toggleCell( e.clientX, e.clientY );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_onMouseUp ( e ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._mouseState.press = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._mouseState.lastX = <span class=\"keyword\">this</span>._mouseState.lastY = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>鼠标按下，就在鼠标按下的位置改变细胞的状态，并记录鼠标状态为按下。接着如果鼠标弹起，那么就重置鼠标状态；如果鼠标移动并且状态是按下，那么就一直改变路过的细胞的状态。</p>\n<p><code>_toggleCell</code> 方法这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_toggleCell ( px, py ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"keyword\">this</span>.grid.getXFromPixel( px );</span><br><span class=\"line\">  <span class=\"keyword\">let</span> y = <span class=\"keyword\">this</span>.grid.getYFromPixel( py );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( x !== <span class=\"number\">-1</span> &amp;&amp; y !== <span class=\"number\">-1</span>  &amp;&amp; ( <span class=\"keyword\">this</span>._mouseState.lastX !== x || <span class=\"keyword\">this</span>._mouseState.lastY !== y ) ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._mouseState.lastX = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._mouseState.lastY = y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.life.isAlive( x, y ) ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.life.killAt( x, y );</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.grid.drawDeadCellAt( x, y );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.life.aliveAt( x, y );</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.grid.drawAliveCellAt( x, y );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大概意思就是先将鼠标的位置转化为单元格位置，再反置此单元格细胞的状态。记录下 <code>lastX</code> 和 <code>lastY</code> 是为了不会循环反置，一定要有坐标变化才反置。</p>\n<p>接下来就是将那三个函数绑定在事件上。新增 <code>_setupLinsteners</code> 函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_setupLinsteners () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.on( <span class=\"string\">'mousedown'</span>, e =&gt; <span class=\"keyword\">this</span>._onMouseDown( e );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.on( <span class=\"string\">'mousemove'</span>, e =&gt; <span class=\"keyword\">this</span>._onMouseMove( e );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.on( <span class=\"string\">'mouseup'</span>, e =&gt; <span class=\"keyword\">this</span>._onMouseUp( e );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然使用了箭头函数优雅地绑定了 <code>this</code> 的值，但是这样写并不好，因为没办法解绑了，容易造成内存泄漏。改一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_setupLinsteners () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseDown'</span>] = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"keyword\">this</span>._onMouseDown( e );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseMove'</span>] = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"keyword\">this</span>._onMouseMove( e );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseUp'</span>] = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"keyword\">this</span>._onMouseUp( e );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.on( <span class=\"string\">'mousedown'</span>, <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseDown'</span>] );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.on( <span class=\"string\">'mousemove'</span>, <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseMove'</span>] );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.on( <span class=\"string\">'mouseup'</span>, <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseUp'</span>] );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_teardownLinsteners () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.off( <span class=\"string\">'mousedown'</span>, <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseDown'</span>] );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.off( <span class=\"string\">'mousemove'</span>, <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseMove'</span>] );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.off( <span class=\"string\">'mouseup'</span>, <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseUp'</span>] );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._boundMethod = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过将匿名函数的引用保存起来就能解绑了。</p>\n<p>最后给个 demo 吧。或者玩玩 <a href=\"https://exoticknight.github.io/gol.js/\" target=\"_blank\" rel=\"noopener\">在线 demo</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">  &lt;title&gt;Game of Life&lt;/title&gt;</span><br><span class=\"line\">  &lt;script src=&quot;dist/bundle.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;canvas id=&quot;grid&quot; width=&quot;1000&quot; height=&quot;500&quot; style=&quot;border:1px solid&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">  &lt;button onclick=&quot;test()&quot;&gt;init&lt;/button&gt;</span><br><span class=\"line\">  &lt;button onclick=&quot;g.step()&quot;&gt;setp&lt;/button&gt;</span><br><span class=\"line\">  &lt;button onclick=&quot;g.run()&quot;&gt;run&lt;/button&gt;</span><br><span class=\"line\">  &lt;button onclick=&quot;g.stop()&quot;&gt;stop&lt;/button&gt;</span><br><span class=\"line\">  &lt;button onclick=&quot;g.pause()&quot;&gt;pause&lt;/button&gt;</span><br><span class=\"line\">  &lt;button onclick=&quot;g.resume()&quot;&gt;resume&lt;/button&gt;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">var options = &#123;</span><br><span class=\"line\">  displayScheme: &#123;</span><br><span class=\"line\">    borderWidth: 1,</span><br><span class=\"line\">    cellWidth: 4</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  colorScheme: &#123;</span><br><span class=\"line\">    aliveColor: &apos;000000&apos;,</span><br><span class=\"line\">    deadColor: &apos;efefef&apos;,</span><br><span class=\"line\">    worldColor: &apos;ffffff&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var g=GOL.createGame(document.getElementById(&apos;grid&apos;), 100, 200, options);</span><br><span class=\"line\">function test()&#123;</span><br><span class=\"line\">  g.init([[10,10],[11,10],[10,11],[13,12],[12,13],[13,13]]);</span><br><span class=\"line\">  g.step();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"https://github.com/exoticknight/gol.js\" target=\"_blank\" rel=\"noopener\">GitHub 地址</a></p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/fLKUaVL.gif\" alt=\"gif\"></p>\n<h2 id=\"缘起\"><a href=\"#缘起\" class=\"headerlink\" title=\"缘起\"></a>缘起</h2><p>前段时间看了《Understanding ECMAScript 6》，因为有 JavaScript 的基础，很快就上手了，还写了 <a href=\"http://blog.e10t.net/understanding-ecmascript6-note/\">笔记</a>。然而编程只看书是不够的，还需要让身体熟悉起来。刚好最近在看「全部成为 F」这部新番，看到 ED 采用了「生命游戏」的表现形式，于是便有了用 ES6 来写一个的主意。</p>\n<h2 id=\"「生命游戏」\"><a href=\"#「生命游戏」\" class=\"headerlink\" title=\"「生命游戏」\"></a>「生命游戏」</h2><p>「生命游戏」的英文原文是「Game of Life」，是细胞自动机的一种形式，每个细胞的未来状态只取决于以其为中心周围八格细胞的当前状态。更详细的信息请看 <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" target=\"_blank\" rel=\"noopener\">wiki 条目</a>，给出一个有意思的动画图。</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/e/e5/Gospers_glider_gun.gif\" alt=\"gif 动画图\"></p>\n<p>而状态判断只有四条：</p>\n<ol>\n<li>当前细胞为存活状态时，当周围低于 2 个（不包含 2 个）存活细胞时， 该细胞变成死亡状态。（模拟生命数量稀少）</li>\n<li>当前细胞为存活状态时，当周围有 2 个或 3 个存活细胞时， 该细胞保持原样。</li>\n<li>当前细胞为存活状态时，当周围有 3 个以上的存活细胞时，该细胞变成死亡状态。（模拟生命数量过多）</li>\n<li>当前细胞为死亡状态时，当周围有 3 个存活细胞时，该细胞变成存活状态。 （模拟繁殖）</li>\n</ol>\n<h3 id=\"算法思考\"><a href=\"#算法思考\" class=\"headerlink\" title=\"算法思考\"></a>算法思考</h3><p>假设有一个棋盘，每一个格子代表一个细胞。在每一次生成下一代细胞，先遍历每一个细胞，查询它周围八格细胞的状态，设置本细胞下一代的状态。</p>\n<p>显然这样的算法基本毫无意义，因为显然棋盘是不定大小的，细胞也不是每一代都一定会变化的，遍历整个棋盘也是浪费时间的。</p>\n<p>实际上，发生变化或者有可能发生变化的细胞，基本是聚集在活细胞周围的。如果一个死细胞附近没有活细胞，那么这个细胞就不会发生变化。所以，可以换个思路，每一个曾经活过或者在活细胞周围的细胞都维持一个它的邻居细胞的数目记录。每当一个细胞活过来了，就通知周围八格的细胞，让它们的活邻居细胞的数目记录增加 1；相反每当一个细胞死了，就通知周围八格的细胞，让它们的活邻居细胞的数目记录减少 1。显然在更新完之后，周围八格的细胞不论生死都清楚自己周围的活细胞数，也就是能够得到自己的未来状态了。同时，在通知周围八个邻居的时候，也可以统计出对于本细胞来说的活邻居数，于是本细胞的未来状态也能够得到了。</p>\n<p>于是算法能描述如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) 在某一次生成本次状态中，有将改变状态的细胞集合 S</span><br><span class=\"line\">2) 遍历集合 S，对于细胞 i：</span><br><span class=\"line\">    改变细胞 i 的状态</span><br><span class=\"line\">    细胞 i 的活邻居数置零</span><br><span class=\"line\">    遍历 8 个邻居细胞，对于邻居细胞 j：</span><br><span class=\"line\">        如果细胞 i 改变后的状态 == 存活，细胞 j 的活邻居数增加 1</span><br><span class=\"line\">        如果细胞 i 改变后的状态 == 死亡，细胞 j 的活邻居数减少 1</span><br><span class=\"line\">        计算细胞 j 的未来状态并记录在将改变状态的细胞集合 S&apos; 中</span><br><span class=\"line\">        如果细胞 j 是活细胞：</span><br><span class=\"line\">            细胞 i 的活邻居数增加 1</span><br><span class=\"line\">    计算细胞 i 的未来状态并记录在将改变状态的细胞集合 S&apos; 中</span><br><span class=\"line\">3)S = S&apos;，重复 1)、2)</span><br></pre></td></tr></table></figure>\n<h2 id=\"ES6-写起来\"><a href=\"#ES6-写起来\" class=\"headerlink\" title=\"ES6 写起来\"></a>ES6 写起来</h2><p>ES6 中有 class 的概念，虽然实现方式其实就是 function 和原型，但是在写的时候就不用像以前用「模拟」的手段来编写啦。</p>\n<h3 id=\"基本对象\"><a href=\"#基本对象\" class=\"headerlink\" title=\"基本对象\"></a>基本对象</h3><p>基本来说，分三个主要对象：提供算法的 class Life，提供单元格绘制的 class Grid，提供 DOM 动画控制的 class Game。Game 从算法中得到需要重绘的单元格，通过 Grid 来绘制单元格。</p>\n<h3 id=\"class-Life\"><a href=\"#class-Life\" class=\"headerlink\" title=\"class Life\"></a>class Life</h3><p>已经有算法描述了，写起来并不复杂。新建一个 <code>life.js</code> 文件，导出 <code>Life</code> 类。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Life</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( row, col ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.row = row;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.column = col;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.generation = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * this.world = &#123;</span></span><br><span class=\"line\"><span class=\"comment\">     *   '0,0':  // 'x,y'</span></span><br><span class=\"line\"><span class=\"comment\">     *   [</span></span><br><span class=\"line\"><span class=\"comment\">     *     1,  // alive 1, dead 0</span></span><br><span class=\"line\"><span class=\"comment\">     *     0,  // count of neighbour</span></span><br><span class=\"line\"><span class=\"comment\">     *   ]</span></span><br><span class=\"line\"><span class=\"comment\">     * &#125;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.world = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * '0,0':  // 'x,y'</span></span><br><span class=\"line\"><span class=\"comment\">     * 1  // to be alive 1, to be dead -1, 0 not change</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.changedState = &#123;&#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构造函数只需要得到世界（棋盘）的长宽就行了，<code>this.world</code> 记录世界中受关注细胞的状态，<code>this.changedState</code> 记录将要改变状态的细胞。</p>\n<p>算法本体代码，相当于描述 2) 中循环中的操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_processLife ( x, y, state ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentCellHash = x + <span class=\"string\">','</span> + y;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.world[currentCellHash] ) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据 state 改变状态</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.world[currentCellHash][<span class=\"number\">0</span>] = state ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果世界中不存在记录，则肯定是新的活细胞</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.world[currentCellHash] = [<span class=\"number\">1</span>, <span class=\"number\">0</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 更新邻居细胞并统计活邻居数</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> aliveNeighBours = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> neighbours = [</span><br><span class=\"line\">    <span class=\"comment\">// 左边的邻居</span></span><br><span class=\"line\">    [x - <span class=\"number\">1</span>, y - <span class=\"number\">1</span>],</span><br><span class=\"line\">    [x - <span class=\"number\">1</span>, y],</span><br><span class=\"line\">    [x - <span class=\"number\">1</span>, y + <span class=\"number\">1</span>],</span><br><span class=\"line\">    <span class=\"comment\">// 上下邻居</span></span><br><span class=\"line\">    [x, y - <span class=\"number\">1</span>],</span><br><span class=\"line\">    [x, y + <span class=\"number\">1</span>],</span><br><span class=\"line\">    <span class=\"comment\">// 右边的邻居</span></span><br><span class=\"line\">    [x + <span class=\"number\">1</span>, y - <span class=\"number\">1</span>],</span><br><span class=\"line\">    [x + <span class=\"number\">1</span>, y],</span><br><span class=\"line\">    [x + <span class=\"number\">1</span>, y + <span class=\"number\">1</span>],</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> counter = state ? +<span class=\"number\">1</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 循环 8 个邻居</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; i++ ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [nx, ny] = neighbours[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 一些世界中的约束</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"number\">0</span> &lt;= nx &amp;&amp; nx &lt; <span class=\"keyword\">this</span>.column &amp;&amp; <span class=\"number\">0</span> &lt;= ny &amp;&amp; ny &lt; <span class=\"keyword\">this</span>.row ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> hash = nx + <span class=\"string\">','</span> + ny;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> oldState = <span class=\"keyword\">this</span>.world[hash];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// oldState[0] alive or dead, oldState[1] count of neighbour</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( oldState ) &#123;  <span class=\"comment\">// 邻居已经存在于世界中了</span></span><br><span class=\"line\">        oldState[<span class=\"number\">1</span>] += counter;  <span class=\"comment\">// 更新邻居的邻居数</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 顺便统计活邻居数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( oldState[<span class=\"number\">0</span>] ) &#123;</span><br><span class=\"line\">          aliveNeighBours++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;  <span class=\"comment\">// 边缘开拓新的细胞，肯定是死细胞</span></span><br><span class=\"line\">        oldState = <span class=\"keyword\">this</span>.world[hash] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 计算邻居细胞的未来状态</span></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> ( oldState[<span class=\"number\">1</span>] ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.changedState[hash] = <span class=\"number\">-1</span>;  <span class=\"comment\">// if alive, then to be dead</span></span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.changedState[hash] = <span class=\"number\">1</span>;  <span class=\"comment\">// if dead, then to be alive</span></span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.changedState[hash] = <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 计算当前细胞的未来状态</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.world[currentCellHash][<span class=\"number\">1</span>] = aliveNeighBours;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> ( aliveNeighBours ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.changedState[currentCellHash] = <span class=\"number\">-1</span>;  <span class=\"comment\">// if alive, then to be dead</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.changedState[currentCellHash] = <span class=\"number\">1</span>;  <span class=\"comment\">// if dead, then to be alive</span></span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.changedState[currentCellHash] = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2) 的循环其实就是得到下一代的状态：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nextGeneration () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> state = <span class=\"built_in\">Object</span>.assign( &#123;&#125;, <span class=\"keyword\">this</span>.changedState );  <span class=\"comment\">// 复制将要改变的状态集以便清空</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> changedCells = &#123; <span class=\"number\">0</span>: [], <span class=\"number\">1</span>:[] &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// reset next state</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.changedState = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 2) 的循环</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> state ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [x, y] = key.split( <span class=\"string\">','</span> ).map( <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> <span class=\"built_in\">parseInt</span>( x ) );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( state[key] === <span class=\"number\">1</span> &amp;&amp; ( !<span class=\"keyword\">this</span>.world[key] || <span class=\"keyword\">this</span>.world[key][<span class=\"number\">0</span>] === <span class=\"number\">0</span> ) ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.aliveAt( x, y );  <span class=\"comment\">// 会调用 _processLife( x, y, true )</span></span><br><span class=\"line\">      changedCells[<span class=\"number\">1</span>].push( [x, y] );  <span class=\"comment\">// 记录重绘的细胞</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">if</span> ( state[key] === <span class=\"number\">-1</span> &amp;&amp; <span class=\"keyword\">this</span>.world[key][<span class=\"number\">0</span>] === <span class=\"number\">1</span> ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.killAt( x, y );  <span class=\"comment\">// 会调用 _processLife( x, y, false )</span></span><br><span class=\"line\">      changedCells[<span class=\"number\">0</span>].push( [x, y] );  <span class=\"comment\">// 记录重绘的细胞</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> changedCells;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其他函数可以在 GiiHub 查看。</p>\n<h3 id=\"class-Grid\"><a href=\"#class-Grid\" class=\"headerlink\" title=\"class Grid\"></a>class Grid</h3><p>确定使用 <code>HTML5</code> 中的 <code>Canvas</code> 元素来绘制整个世界（棋盘），<code>Canvas</code> 元素的操作使用另一个类 <code>C</code>，后面再写。</p>\n<p>新建 <code>grid.js</code> 文件，导出 <code>Grid</code> 类。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Grid</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( canvas, row, col, displayScheme, colorScheme ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.view = canvas;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.canvas = <span class=\"keyword\">new</span> C( canvas );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.displayScheme = displayScheme;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.colorScheme = colorScheme;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构造函数要传入 canvas DOM 元素，棋盘的长宽，显示的选项和颜色选项。</p>\n<p>绘制单元格的主要函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drawCells( redrawCells ) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// draw alive cells</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.canvas.setPenColor( <span class=\"keyword\">this</span>.colorScheme.aliveColor );</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> x, y, i = <span class=\"number\">0</span>, len = redrawCells[<span class=\"number\">1</span>].length; i &lt; len; i++ ) &#123;</span><br><span class=\"line\">    [x, y] = redrawCells[<span class=\"number\">1</span>][i];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawCellAt( x, y );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// draw dead cells</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.canvas.setPenColor( <span class=\"keyword\">this</span>.colorScheme.deadColor );</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( <span class=\"keyword\">let</span> x, y, i = <span class=\"number\">0</span>, len = redrawCells[<span class=\"number\">0</span>].length; i &lt; len; i++ ) &#123;</span><br><span class=\"line\">    [x, y] = redrawCells[<span class=\"number\">0</span>][i];</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.drawCellAt( x, y );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">drawCellAt ( x, y ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.canvas.drawRect(</span><br><span class=\"line\">    x * ( <span class=\"keyword\">this</span>.displayScheme.borderWidth + <span class=\"keyword\">this</span>.displayScheme.cellWidth ),</span><br><span class=\"line\">    y * ( <span class=\"keyword\">this</span>.displayScheme.borderWidth + <span class=\"keyword\">this</span>.displayScheme.cellWidth ),</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.displayScheme.cellWidth,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.displayScheme.cellWidth );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>drawCells</code> 函数是用来批量画细胞的函数，同样颜色的细胞放在一起画，就不需要频繁改变画笔的颜色。</p>\n<p><code>drawCellAt</code> 函数就是找到单元格的左上角距离 <code>Canvas</code> 元素左上角的距离，距离左边是第 x 个细胞宽度加细胞边框宽度，距离上边也是同样道理。</p>\n<p>其中调用的 <code>setPenColor</code> 和 <code>drawRect</code> 还没有，于是就新增一个 <code>c.js</code> 文件，导出 <code>C</code> 类。其实就是 <code>Canvas</code> 元素的操作的封装而已。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( ele ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cxt = ele.getContext( <span class=\"string\">'2d'</span> );</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.fillStyle = <span class=\"string\">'#000000'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  setPenColor ( hex ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cxt.fillStyle = <span class=\"keyword\">this</span>.fillStyle = <span class=\"string\">'#'</span> + hex;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  drawRect ( ox, oy, width, height ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cxt.fillRect( ox, oy, width, height );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  clear () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cxt.clearRect( <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">this</span>.cxt.canvas.width, <span class=\"keyword\">this</span>.cxt.canvas.height );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"class-Game\"><a href=\"#class-Game\" class=\"headerlink\" title=\"class Game\"></a>class Game</h3><p>不复杂，直接看代码吧。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Life <span class=\"keyword\">from</span> <span class=\"string\">'./life.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Grid <span class=\"keyword\">from</span> <span class=\"string\">'./grid.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Game</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span> ( canvas, row, col, displayScheme, colorScheme, gps ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.grid = <span class=\"keyword\">new</span> Grid( canvas, row, col, displayScheme, colorScheme );</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.life = <span class=\"keyword\">new</span> Life( row, col );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.speed = <span class=\"number\">1000</span> / gps;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.enable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.running = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  init ( x ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.stop();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.life.init( x );</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.grid.init();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.enable = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  stop () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.running = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.enable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.life.reset();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.grid.claer();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  pause () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.enable ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.running = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  resume () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.enable ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  step () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.enable ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// run algorithm</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> redrawCells = <span class=\"keyword\">this</span>.life.nextGeneration();</span><br><span class=\"line\">      <span class=\"comment\">// redraw cells</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.grid.drawCells( redrawCells );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  run () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.enable &amp;&amp; !<span class=\"keyword\">this</span>.running ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.running = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> _run = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.running ) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.step();</span><br><span class=\"line\">          setTimeout( _run, <span class=\"keyword\">this</span>.speed );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">      setTimeout( _run, <span class=\"number\">0</span> );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就是一些简单的动画控制方法，跟普通 JavaScript 写起来没什么不同。需要注意的是 <code>enable</code> 状态和 <code>running</code> 状态是不一样的，前者是指整个游戏的响应，后者是指动画的响应。</p>\n<p><code>step</code> 方法是迭代一步，<code>run</code> 方法就是用 <code>setTimeout</code> 来循环调用 <code>step</code> 了。在 <code>run</code> 方法中使用了箭头函数来隐含设定了 <code>this</code> 的值，ES6 的优势就体现出来了。</p>\n<h3 id=\"gol-js\"><a href=\"#gol-js\" class=\"headerlink\" title=\"gol.js\"></a>gol.js</h3><p>整个程序的主体是 Game 的实例，然而还是需要有人去创造一个实例出来，也就是说需要一个工厂函数。于是，新建 <code>gol.js</code> 文件，导出 <code>GOL</code> 类。里面写一个静态方法，用作创建 Game 实例的工厂方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Game <span class=\"keyword\">from</span> <span class=\"string\">'./game.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GOL</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> createGame ( canvas, row, col, options ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> param = <span class=\"built_in\">Object</span>.assign( &#123;</span><br><span class=\"line\">      displayScheme: &#123;</span><br><span class=\"line\">        borderWidth: <span class=\"number\">1</span>,</span><br><span class=\"line\">        cellWidth: <span class=\"number\">10</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      colorScheme: &#123;</span><br><span class=\"line\">        aliveColor: <span class=\"string\">'000000'</span>,</span><br><span class=\"line\">        deadColor: <span class=\"string\">'FFFFFF'</span>,</span><br><span class=\"line\">        worldColor: <span class=\"string\">'FFFFFF'</span>,</span><br><span class=\"line\">        borderColor: <span class=\"string\">'FFFFFF'</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      gps: <span class=\"number\">15</span></span><br><span class=\"line\">    &#125;, options );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Game( canvas, row, col, param.displayScheme, param.colorScheme, param.gps );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>不过在 <code>createGame</code> 方法上就不要用 ES6 的语法了，因为方法是要在页面上调用的，目前还没有哪个浏览器完全支持 ES6。但是在方法里面用是没问题的，因为编译器会帮我们转换好。于是可以看到方法里面直接用 <code>Object.assign( des, src )</code> 的函数来合并参数，类似 jQuery 的 <code>extends</code> 函数。</p>\n<h3 id=\"boot-js\"><a href=\"#boot-js\" class=\"headerlink\" title=\"boot.js\"></a>boot.js</h3><p>到此还没完，回忆一下在写普通 JavaScript 库的时候，我们通常会直接包裹上一层适应各种环境的模块注册代码，本人最喜欢就是直接使用 <a href=\"https://github.com/umdjs/umd\" target=\"_blank\" rel=\"noopener\">UMD</a> 了。</p>\n<p>新建 <code>boot.js</code> 文件，执行非 ES6 形式的导出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> GOL <span class=\"keyword\">from</span> <span class=\"string\">'./gol.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> root, name, definition </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd ) &#123;</span><br><span class=\"line\">    define( [], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ( root[name] = definition( root ) );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"built_in\">module</span>.exports ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">module</span>.exports = definition( root );</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    root[name] = definition( root );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)( <span class=\"built_in\">window</span>, <span class=\"string\">'GOL'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> root </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> GOL;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"代码打包\"><a href=\"#代码打包\" class=\"headerlink\" title=\"代码打包\"></a>代码打包</h2><p>OK，到此代码基本写好了，然而到在浏览器上执行还是有一段距离，主要是基本没有浏览器默认支持 ES6，我们还是需要将 ES6 的代码编译一下以便能放到浏览器上运行。比较有名的编译器就是 <a href=\"https://github.com/babel/babel\" target=\"_blank\" rel=\"noopener\">Babel</a> 和 Google 的 <a href=\"https://github.com/google/traceur-compiler\" target=\"_blank\" rel=\"noopener\">Traceur</a> 了。在编译的同时，还需要将所有文件打包成 bundle。</p>\n<p>在进行了各种尝试之后（包括主流的 npm / browserify / jspm 等），最后发现使用 <code>webpack</code> 和 <code>Babel</code> 的结合是比较理想的。</p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>先来把需要的东西都装上。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save-dev webpack babel babel-core babel-loader babel-preset-es2015</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>个人其实非常讨厌安装到本地，明明都是可以全局安装的插件和工具。<br>而且每次开一个新的项目就要安装几十 MB 的重复东西实在无聊，npm 本身的树状依赖也是容易造成目录过深的情况。（据说新版 npm 有改善，但是不稳定）<br>个人的解决方法是固定一个开发目录，代码随便迁移。</p>\n</blockquote>\n<h3 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h3><p><code>webpack</code> 我就不详细解释了。直接上 <code>webpack.config.js</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/boot.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: __dirname,</span><br><span class=\"line\">        filename: <span class=\"string\">'./dist/bundle.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">                loader: <span class=\"string\">'babel'</span>,</span><br><span class=\"line\">                query: &#123;</span><br><span class=\"line\">                    cacheDirectory: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>目前来说，这样写就能让 <code>Babel</code> 编译 ES6 的代码的同时，也运用 <code>webpack</code> 自己的打包功能 <strong> 根据 ES6 的模块语法 </strong> 将文件都打包成一个 bundle。</p>\n<p>打包出来的代码有点大，压缩一下，再写一个 <code>webpack.config.min.js</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.min.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">\"webpack\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = exports = <span class=\"built_in\">Object</span>.create(<span class=\"built_in\">require</span>(<span class=\"string\">\"./webpack.config.js\"</span>));</span><br><span class=\"line\">exports.plugins = [<span class=\"keyword\">new</span> webpack.optimize.UglifyJsPlugin()];</span><br><span class=\"line\">exports.output = <span class=\"built_in\">Object</span>.create(exports.output);</span><br><span class=\"line\">exports.output.filename = exports.output.filename.replace(<span class=\"regexp\">/\\.js$/</span>, <span class=\"string\">\".min.js\"</span>);</span><br></pre></td></tr></table></figure>\n<p>就能用 <code>webpack</code> 自带的压缩插件压缩代码了。</p>\n<h2 id=\"添加功能\"><a href=\"#添加功能\" class=\"headerlink\" title=\"添加功能\"></a>添加功能</h2><p>算法、绘图和动画控制都写好了，但是还不够，缺少了交互，还应该允许方便的自定义世界中的活细胞。比较好的交互方式就是允许通过在世界（棋盘）点击来放置活细胞或者死细胞。</p>\n<p>于是考虑监听 <code>Canvas</code> 元素的 <code>mousedown</code>、<code>mousemove</code> 和 <code>mouseup</code> 事件，做出类似画图那样的效果（每个细胞可以看成是一个像素点）。</p>\n<h3 id=\"grid-js\"><a href=\"#grid-js\" class=\"headerlink\" title=\"grid.js\"></a>grid.js</h3><p>先改造负责绘制的模块。</p>\n<p>在 <code>Grid</code> 类中新增 <code>drawAliveCellAt</code>、<code>drawDeadCellAt</code> 函数，负责独立绘制细胞。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drawAliveCellAt( x, y ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.canvas.setPenColor( <span class=\"keyword\">this</span>.colorScheme.aliveColor );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.drawCellAt( x, y );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">drawDeadCellAt( x, y ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.canvas.setPenColor( <span class=\"keyword\">this</span>.colorScheme.deadColor );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.drawCellAt( x, y );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新增 <code>on</code>、<code>off</code> 函数，负责绑定监听方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">on ( event, handler ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.view.addEventListener( event, handler, <span class=\"literal\">false</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">off ( event, handler ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.view.removeEventListener( event, handler );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新增 <code>getXFromPixel</code>、<code>getYFromPixel</code> 函数，负责将像素点转换为单元格位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getXFromPixel ( pixel ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> d = <span class=\"keyword\">this</span>.displayScheme.borderWidth + <span class=\"keyword\">this</span>.displayScheme.cellWidth;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = ~~( ( pixel - <span class=\"keyword\">this</span>.canvas.left ) / d );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x % d &lt;= <span class=\"keyword\">this</span>.displayScheme.cellWidth ? x : <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getYFromPixel ( pixel ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> d = <span class=\"keyword\">this</span>.displayScheme.borderWidth + <span class=\"keyword\">this</span>.displayScheme.cellWidth;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> y = ~~( ( pixel - <span class=\"keyword\">this</span>.canvas.top ) / d );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> y % d &lt;= <span class=\"keyword\">this</span>.displayScheme.cellWidth ? y : <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>~~</code> 是快速取整数。<code>this.canvas.left</code> 和 <code>this.canvas.top</code> 来自于类 <code>C</code> 的实例，因为鼠标点击事件取得的坐标点并非一定是相对于 <code>Canvas</code> 元素的左上角，还要减去 <code>Canvas</code> 元素的边框等。在 <code>c.js</code> 中将构造函数修改一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">constructor</span> ( ele ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.cxt = ele.getContext( <span class=\"string\">'2d'</span> );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.fillStyle = <span class=\"string\">'#000000'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.left = ele.getBoundingClientRect().left;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.top = ele.getBoundingClientRect().top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"game-js\"><a href=\"#game-js\" class=\"headerlink\" title=\"game.js\"></a>game.js</h3><p>类 <code>Game</code> 的修改有点复杂。先在类的构造函数中增加一个属性，负责记录鼠标状态。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>._mouseState = &#123;</span><br><span class=\"line\">  press: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  lastX: <span class=\"number\">-1</span>,</span><br><span class=\"line\">  lastY: <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>再增加三个方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_onMouseDown ( e ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._mouseState.press = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._toggleCell( e.clientX, e.clientY );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_onMouseMove ( e ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>._mouseState.press ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._toggleCell( e.clientX, e.clientY );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_onMouseUp ( e ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._mouseState.press = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._mouseState.lastX = <span class=\"keyword\">this</span>._mouseState.lastY = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>鼠标按下，就在鼠标按下的位置改变细胞的状态，并记录鼠标状态为按下。接着如果鼠标弹起，那么就重置鼠标状态；如果鼠标移动并且状态是按下，那么就一直改变路过的细胞的状态。</p>\n<p><code>_toggleCell</code> 方法这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_toggleCell ( px, py ) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"keyword\">this</span>.grid.getXFromPixel( px );</span><br><span class=\"line\">  <span class=\"keyword\">let</span> y = <span class=\"keyword\">this</span>.grid.getYFromPixel( py );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( x !== <span class=\"number\">-1</span> &amp;&amp; y !== <span class=\"number\">-1</span>  &amp;&amp; ( <span class=\"keyword\">this</span>._mouseState.lastX !== x || <span class=\"keyword\">this</span>._mouseState.lastY !== y ) ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._mouseState.lastX = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._mouseState.lastY = y;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">this</span>.life.isAlive( x, y ) ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.life.killAt( x, y );</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.grid.drawDeadCellAt( x, y );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.life.aliveAt( x, y );</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.grid.drawAliveCellAt( x, y );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>大概意思就是先将鼠标的位置转化为单元格位置，再反置此单元格细胞的状态。记录下 <code>lastX</code> 和 <code>lastY</code> 是为了不会循环反置，一定要有坐标变化才反置。</p>\n<p>接下来就是将那三个函数绑定在事件上。新增 <code>_setupLinsteners</code> 函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_setupLinsteners () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.on( <span class=\"string\">'mousedown'</span>, e =&gt; <span class=\"keyword\">this</span>._onMouseDown( e );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.on( <span class=\"string\">'mousemove'</span>, e =&gt; <span class=\"keyword\">this</span>._onMouseMove( e );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.on( <span class=\"string\">'mouseup'</span>, e =&gt; <span class=\"keyword\">this</span>._onMouseUp( e );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然使用了箭头函数优雅地绑定了 <code>this</code> 的值，但是这样写并不好，因为没办法解绑了，容易造成内存泄漏。改一下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_setupLinsteners () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseDown'</span>] = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"keyword\">this</span>._onMouseDown( e );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseMove'</span>] = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"keyword\">this</span>._onMouseMove( e );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseUp'</span>] = <span class=\"function\"><span class=\"params\">e</span> =&gt;</span> <span class=\"keyword\">this</span>._onMouseUp( e );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.on( <span class=\"string\">'mousedown'</span>, <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseDown'</span>] );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.on( <span class=\"string\">'mousemove'</span>, <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseMove'</span>] );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.on( <span class=\"string\">'mouseup'</span>, <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseUp'</span>] );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_teardownLinsteners () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.off( <span class=\"string\">'mousedown'</span>, <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseDown'</span>] );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.off( <span class=\"string\">'mousemove'</span>, <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseMove'</span>] );</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid.off( <span class=\"string\">'mouseup'</span>, <span class=\"keyword\">this</span>._boundMethod[<span class=\"string\">'_onMouseUp'</span>] );</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._boundMethod = &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过将匿名函数的引用保存起来就能解绑了。</p>\n<p>最后给个 demo 吧。或者玩玩 <a href=\"https://exoticknight.github.io/gol.js/\" target=\"_blank\" rel=\"noopener\">在线 demo</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class=\"line\">  &lt;title&gt;Game of Life&lt;/title&gt;</span><br><span class=\"line\">  &lt;script src=&quot;dist/bundle.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;canvas id=&quot;grid&quot; width=&quot;1000&quot; height=&quot;500&quot; style=&quot;border:1px solid&quot;&gt;&lt;/canvas&gt;</span><br><span class=\"line\">  &lt;button onclick=&quot;test()&quot;&gt;init&lt;/button&gt;</span><br><span class=\"line\">  &lt;button onclick=&quot;g.step()&quot;&gt;setp&lt;/button&gt;</span><br><span class=\"line\">  &lt;button onclick=&quot;g.run()&quot;&gt;run&lt;/button&gt;</span><br><span class=\"line\">  &lt;button onclick=&quot;g.stop()&quot;&gt;stop&lt;/button&gt;</span><br><span class=\"line\">  &lt;button onclick=&quot;g.pause()&quot;&gt;pause&lt;/button&gt;</span><br><span class=\"line\">  &lt;button onclick=&quot;g.resume()&quot;&gt;resume&lt;/button&gt;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">var options = &#123;</span><br><span class=\"line\">  displayScheme: &#123;</span><br><span class=\"line\">    borderWidth: 1,</span><br><span class=\"line\">    cellWidth: 4</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  colorScheme: &#123;</span><br><span class=\"line\">    aliveColor: &apos;000000&apos;,</span><br><span class=\"line\">    deadColor: &apos;efefef&apos;,</span><br><span class=\"line\">    worldColor: &apos;ffffff&apos;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">var g=GOL.createGame(document.getElementById(&apos;grid&apos;), 100, 200, options);</span><br><span class=\"line\">function test()&#123;</span><br><span class=\"line\">  g.init([[10,10],[11,10],[10,11],[13,12],[12,13],[13,13]]);</span><br><span class=\"line\">  g.step();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"eyeCatchImage":"https://i.imgur.com/fLKUaVL.gif","popularPost_tmp_gaData":{"updated":"Fri Nov 27 2015 12:31:33 GMT+0800 (China Standard Time)","title":"使用 ES6 编写一个生命游戏","path":"write-a-game-of-life-using-es6/","eyeCatchImage":"https://i.imgur.com/fLKUaVL.gif","excerpt":null,"date":"2015-11-26T16:38:57.000Z","pv":0,"totalPV":0,"categories":"技术 > 前端 > 编程语言 > javascript","tags":["javascript","ECMAScript6"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3680},{"title":"如何保存一些网络广播","id":"19","updated":"2014-07-19T11:13:07.000Z","date":"2014-07-19T11:05:47.000Z","_content":"\n近来一直有在网上听一些动画的广播以及网络广播。而因为广播每周都有放送，如果错过了这周，下一周就没得再听了（有些可以付费重新听，相当于不可能再听了）。那么本周的广播其实可以先保存下来，等到有时间的时候再听。经过了一段时间的摸索，的确摸到了一些门路，于是总结一下整个流程的技术。这些广播实质上就是一些网络媒体，和平常在音乐网站听音乐等其实是一样的，因此这些获取方法应该也基本适用。\n\n1. [边用边分析——響篇](#use-and-analyze-hibiki)\n1. [提取媒体位置——響篇](#extract-hibiki)\n1. [使用特定的工具](#tool)\n1. [另一个例子——音泉篇](#another-example-onsen)\n1. [使用插件或工具下载](#download)\n1. [编写脚本](#program)\n1. [福利](#some-website)\n\n<a name=\"use-and-analyze-hibiki\"></a>\n## 边用边分析——響篇\n\n下面以我经常去的 [響 - HiBiKi Radio Station -](http://hibiki-radio.jp/) 为例子。\n\n打开网站。\n\n![网站状况](http://i.imgur.com/xoce2hN.jpg)\n\n大概浏览一下整个页面，可以看到分成几个区域，新闻区、播放器区、节目列表区、广告区。\n\n![分区](http://i.imgur.com/cPU6MLI.jpg)\n\n新闻区会更新广播的信息，一般是得知新广播推出的来源。\n\n播放器区，这个是重点。一般看播放器就大概知道获取广播的难度。\n\n节目列表区，这种涉及和网站交互的区域是搞懂网站架构的好地方。\n\n广告区，并非没用，有时会出现一些新广播或者新广播站的消息。\n\n随便点一个广播，就这个吧，妹ちょ。らじお。\n\n按 F12 打开 chrome 的开发者工具。什么？你不是在用 chrome？那你自己看着办。\n\n![开发者工具](http://i.imgur.com/q9Ntgky.png)\n\n来看看控制台输出了什么？（红色的是资源获取失败，是我的网络原因，可以忽略）\n\n看起来是一些调试信息。这应该不是 javascript 输出的信息，一般 js 代码输出的信息在右边会有代码行数提示。\n\n看到两行比较感兴趣的输出：\n\n1. connectiong Stream->rtmpe://cp209391.edgefcs.net/ondemand/\n1. DetailsLoad->urlhttp://image.hibiki-radio.jp/uploads/data/channel/imocyo/description.xml\n\n第一个有单词 stream，而且后面的网址使用 rtmpe 协议。（什么协议，我没看过……）\n\n第二个看到一个 xml 文件位置，url 中有 imocyo，是广播题目妹ちょ的罗马拼写，看来就是跟广播有关的东西，点进去看看。\n\n可以看到这么一些 xml 文件内容。\n\n```markup\n<data>\n<title > 妹ちょ。らじお</title>\n<cast>\n<name > 橋本ちなみ</name>\n<name > 金元寿子</name>\n</cast>\n<outline>\n絶賛放送中の TV アニメ『最近、妹のようすがちょっとおかしいんだが。』のラジオ番組！ 神前美月役の橋本ちなみさんと桐谷雪那役の金元寿子さんが番組を担当。 第 5 回より「妹ちょ。らじお」は毎週土曜日の更新へ変更となります。 ラジオ大阪 OBC [1314kHz]では毎週金曜日 24 時 30 分～25 時にて放送！\n</outline>\n<link>http://hibiki-radio.jp/description/imocyo</link>\n</data>\n```\n\n看起来就是一些配置信息。\n\n回头再来看首页的播放器，右边的是不是就是 xml 文件里面的内容啊？看来这个 xml 就是播放器请求的了。\n\n顺手右击一下播放器，看看弹出的菜单。嗯，看来是 flash 了，可能就比较麻烦了。\n\n![播放器信息](http://i.imgur.com/gdct7EK.jpg)\n\n为什么说是 flash 就比较麻烦呢？因为 flash 作为组件，内部是对浏览器屏蔽的，也就是说它搞了什么，浏览器基本是不清楚的，包括它向哪里请求了什么。通常情况下，flash 请求的是流媒体，很多是没有缓存的。\n\n比较幸运的是这个 flash 自己输出了一些调试信息，也算有迹可寻。\n\n> 如果连控制台输出都没有，那怎么办呢？其中一种方法是可以用硕思闪客精灵反汇编这个 flash 的 swf 文件，在文件内部找 url。这个方法可能涉及到版权或法律问题，就不在这叙述。另外一种方法操作上比较难，就是监听网卡。这个算是终极手段，因为所有的网络进出信息都可以捕捉到，但是技术要求也是最高的（我自己尝试过，收获不多就另辟蹊径了）。\n\nok，现在保持控制台打开的状况，点击播放。\n\n听到了橋本ちなみ和金元寿子的声音。\n\n再看控制台，哦真给力，呕吐一样输出一堆东西。\n\n![播放时输出](http://i.imgur.com/3yMoQg7.png)\n\n显然最有用的就是那一行。\n\n```bash\nstream->mp4:140614_imocyo_140614_imocyo.mp4?di=910&si=609&pi=2806&gi=6498&gc=6&bi=57971&bc=imocyo&ei=717045&ec=140614_imocyo&vi=4102269&vc=140614_imocyo&msi=516&mc=&ni=1625?1405751016018\n```\n\n一看到 mp4，感觉已经摸到了这个资源了，而且名字很明显是 `140614_imocyo_140614_imocyo.mp4`，后面的形似? xx=xxx&xx=xxx 的东西是一些请求的参数。\n\n这名字，一看就知道格式是：` 日期_名字_日期_名字_.mp4`，也就是说 14 年 6 月 14 日的妹ちょ广播。这些信息说不定有用，先记录下来。\n\n尝试和前面的网址结合起来得到 `cp209391.edgefcs.net/ondemand/140614_imocyo_140614_imocyo.mp4`，放到地址栏访问一下，啥都没有。嗯，预料之内，有可能是协议问题，也有可能是路径不对。\n\n上网搜索一下 `rtmpe 协议 `，发现叫实时消息传送协议协议，是 Adobe 公司的（好吧又是你）。搜索出来的结果基本都是有关怎么下载这些协议的流媒体的。基本就是介绍什么软件什么软件的，个人比较讨厌这些使用乱七八糟软件的方法，而且基本也是不凑效的。\n\n将关键字改为 `download rtmpe` 一搜，发现一个 `rtmpdump` 的命令行工具，声称通杀这类协议。但是一看[文档](https://rtmpdump.mplayerhq.hu/rtmpdump.1.html)，嗯，暂时不想深究。看看有没有其他方法吧。\n\n留意到播放器里面有个“详细”，点击一下跳转到一个网页 `http://hibiki-radio.jp/description/imocyo`。\n\n![节目页](http://i.imgur.com/hHfFJoI.jpg)\n\n看来就是个节目的详细介绍页面，估计网址格式是：`hibiki-radio.jp/description / 节目名字 `。\n\n拉到最下面，终于发现突破口！\n\n![WMP](http://i.imgur.com/YYfvxB1.jpg)\n\n<a name=\"extract-hibiki\"></a>\n## 提取媒体位置——響篇\n\n页面中内嵌了一个 WMP（Windows Media Player）组件，虽然这个也是跟 flash 一样的组件，但是并没有 flash 那样让人讨厌。根据我的经验，WMP 播放的媒体是可以手动提取的。现在就来试试。\n\n打开开发者工具，审查这个插件元素，可以看到是一个 `<embed>` 标签，属性 src 就是一个网址 `http://www2.uliza.jp/IF/WMVDisplay.aspx?clientid=910&playerid=2869&episodeid=140614_imocyo&videoid=140614_imocyo-wm&vid=4102271&memberid=&membersiteid=516&nickname=&sex=&birthday=&local=&mode=1`。\n\n![嵌入](http://i.imgur.com/6ISMvV9.jpg)\n\n点击访问发现下载了一个文件 `140614_imocyo-wm.asx`。\n\n用记事本打开，内容如下：\n\n```markup\n<ASX version = \"3.0\"><entry><title>[毎]140614_妹ちょ。らじお #23</title><Ref href =\"mms://wms.uliza.jp/uliza/910/140614_imocyo_140614_imocyo-wm.wma\"/></entry></ASX>\n```\n\n出来了！看到那个 `mms://wms.uliza.jp/uliza/910/140614_imocyo_140614_imocyo-wm.wma` 了吗？wma 就是一个音乐文件。mms 协议的文件是能够使用迅雷来下载的。Mission completed.\n\n<a name=\"tool\"></a>\n## 使用特定的工具\n\n在分析的时候不是发现了一个叫 `rtmpdump` 的命令行工具吗？现在来看看怎么使用。\n\n尝试以各种关键字组合起来搜索，比如 `download rtmpe mp4`、`how to downlaod rtmpe with rtmpdump`……\n\n最后得到一个可用的命令：`rtmpdump -r \"rtmpe://cp209391.edgefcs.net/ondemand/\" -y \"mp4:140614_imocyo_140614_imocyo\" -o test.flv`\n\n可以看到，其实就是组合了一直分析下来的网址。下图就是正在下载的窗口。\n\n![rtmp 下载](http://i.imgur.com/KAeGdol.png)\n\nBoom! 这可比乱七八糟的软件好用多了。\n\n<a name=\"another-example-onsen\"></a>\n## 另一个例子——音泉篇\n\n现在再来看另外一个例子，另一个广播比较多的网站，[音泉](http://www.onsen.ag/)。\n\n先看一下网站，嗯比 hibiki 好看多了。\n\n![音泉整站](http://i.imgur.com/ftwHPQP.jpg)\n\n网站的区域分布也跟 hibiki 大同小异。播放器也是 flash。\n\n![音泉播放](http://i.imgur.com/HwFI84S.jpg)\n\n播放之后看不到什么输出，只是看到一个请求：`http://www.onsen.ag/data/api/getMovieInfo/aldnoah?callback=callback&_=1405758148110`。\n\n可以看得出格式是：`www.onsen.ag/data/api/getMovieInfo / 节目名字 `。后面的参数是代码回调和当前的时间。\n\n直接访问这个网址，得到：\n\n```javascript\ncallback({\"type\":\"sound\",\"thumbnailPath\":\"\\/program\\/aldnoah\\/image\\/128_pgi01_m.jpg\",\"moviePath\":{\"pc\":\"http:\\/\\/onsen.b-ch.com\\/radio\\/aldnoah140712Zf8j.mp3\",\"iPhone\":\"http:\\/\\/onsen.b-ch.com\\/radio\\/aldnoah140712Zf8j.mp3\",\"Android\":\"http:\\/\\/onsen.b-ch.com\\/radio\\/aldnoah140712Zf8j.mp3\"},\"title\":\"\\u30a2\\u30eb\\u30c9\\u30ce\\u30a2\\u30fb\\u30e9\\u30b8\\u30aa\",\"personality\":\"\\u96e8\\u5bae\\u5929\\uff08\\u30a2\\u30bb\\u30a4\\u30e9\\u30e0\\u30fb\\u30f4\\u30a1\\u30fc\\u30b9\\u30fb\\u30a2\\u30ea\\u30e5\\u30fc\\u30b7\\u30a2 \\u5f79\\uff09 \\/ \\u6c34\\u702c\\u3044\\u306e\\u308a\\uff08\\u30a8\\u30c7\\u30eb\\u30ea\\u30c3\\u30be \\u5f79\\uff09\",\"guest\":\"\",\"update\":\"2014.7.12\",\"count\":\"03\",\"schedule\":\"\\u6bce\\u9031\\u571f\\u66dc\\u65e524:30\\uff5e\\u66f4\\u65b0\",\"optionText\":\"\\u30a2\\u30cb\\u30d7\\u30ec\\u30c3\\u30af\\u30b9\",\"mail\":\"aldnoah@onsen.ag\",\"copyright\":\"\\u00a9Olympus Knights\\uff0fAniplex\\u30fbProject AZ\",\"url\":\"aldnoah\",\"link\":[],\"recommendGoods\":[],\"recommendMovie\":[{\"imagePath\":\"\\/program\\/gochiusa\\/image\\/34_pgi01_b.jpg\",\"url\":\"\\/program\\/gochiusa\\/\"}],\"cm\":[],\"allowExpand\":\"false\"});\n```\n\n就是个 json 而已，上 [jsnice](http://www.jsnice.org/) 整理一下得：\n\n```javascript\ncallback({\n  \"type\" : \"sound\",\n  \"thumbnailPath\" : \"/program/aldnoah/image/128_pgi01_m.jpg\",\n  \"moviePath\" : {\n    \"pc\" : \"http://onsen.b-ch.com/radio/aldnoah140712Zf8j.mp3\",\n    \"iPhone\" : \"http://onsen.b-ch.com/radio/aldnoah140712Zf8j.mp3\",\n    \"Android\" : \"http://onsen.b-ch.com/radio/aldnoah140712Zf8j.mp3\"\n  },\n  \"title\" : \"\\u30a2\\u30eb\\u30c9\\u30ce\\u30a2\\u30fb\\u30e9\\u30b8\\u30aa\",\n  \"personality\" : \"\\u96e8\\u5bae\\u5929\\uff08\\u30a2\\u30bb\\u30a4\\u30e9\\u30e0\\u30fb\\u30f4\\u30a1\\u30fc\\u30b9\\u30fb\\u30a2\\u30ea\\u30e5\\u30fc\\u30b7\\u30a2 \\u5f79\\uff09 / \\u6c34\\u702c\\u3044\\u306e\\u308a\\uff08\\u30a8\\u30c7\\u30eb\\u30ea\\u30c3\\u30be \\u5f79\\uff09\",\n  \"guest\" : \"\",\"update\":\"2014.7.12\",\"count\":\"03\",\"schedule\":\"\\u6bce\\u9031\\u571f\\u66dc\\u65e524:30\\uff5e\\u66f4\\u65b0\",\"optionText\":\"\\u30a2\\u30cb\\u30d7\\u30ec\\u30c3\\u30af\\u30b9\",\"mail\":\"aldnoah@onsen.ag\",\"copyright\":\"\\u00a9Olympus Knights\\uff0fAniplex\\u30fbProject AZ\",\"url\":\"aldnoah\",\"link\": [],\"recommendGoods\": [],\"recommendMovie\": [{\"imagePath\":\"/program/gochiusa/image/34_pgi01_b.jpg\",\"url\":\"/program/gochiusa/\"}],\"cm\": [],\"allowExpand\":\"false\"\n});\n```\n\n看到第四行 `\"moviePath\"` 下的 `http://onsen.b-ch.com/radio/aldnoah140712Zf8j.mp3` 了吗？熟悉的 mp3 格式。\n\n文件位置格式是：`onsen.b-ch.com/radio/` + 节目名字 + 6 位日期 + 4 位随机字符 + `.mp3`。\n\n于是广播也 get だぜ～\n\n> 举了两个详细的例子，一些更简单的就不再详述了。只要你活用开发者工具，很容易就找到地址的。有的广播比如 Aniplex 旗下的动画，会做一个官网，查看网页的源代码就直接能找到音频的地址。\n\n<a name=\"download\"></a>\n## 使用插件或工具下载\n\n浏览器能帮我们做到很多事情。因为从网络上来的东西，最后都是交给浏览器来解析的（flash 这类内嵌的组件除外）。也就是说，浏览器是知道我们想保存的下来的资源的位置和内容的，只要告诉浏览器给我们就行了，这也就是比较早期的时候，一些教程教授的从缓存文件夹中复制出文件的技术基础。不过现代浏览器有插件，就不用那么复杂了。安装上了插件，会自动给你提取出网页中可能存在的多媒体文件（音乐 / 视频 / 图片 /...）。\n\n比如[音泉](http://www.onsen.ag/)\n\n随便点击一个节目，在播放的同时，能够捕捉多媒体的插件就抓到资源了。\n\n![抓到播放资源](http://i.imgur.com/bjjQzNC.jpg)\n\n直接点击下载就 ok 了，容易吧。这些插件在 chrome 商店一搜一大堆，其他现代浏览器比如 FireFox 和 Opera 也是有这类插件。IE…… 我就不太清楚了。\n\nBTW，这个网站访问是没问题的，但是媒体资源例如 mp3 和 mp4 等是限定日本 IP 的，请自备梯子。\n\n<a name=\"program\"></a>\n## 编写脚本\n\n以下是比较高阶的使用，电脑小白可以跳过了。\n\n### 为什么在已经能够下载媒体的情况下，还要写脚本？\n\n~~ 装逼~~\n\n~~ 懒~~\n\n咳咳，不是啦，其实是使用脚本能够快速和自动化啦（诶偷懒好像说对了……\n\n鉴于访问外国网站的不稳定性（为了能截到博文中的漂亮的大图，我整个下午在不断地刷新……），这些广播网站经常是比较卡的。使用脚本能够只请求最小的资源就能提取出媒体的位置，比起每次打开网页快多了。当然你听一个两个广播还好，我要听十来个广播我是受不了的。如果能做到高度自动化，鼠标点两下，资源就自动躺在你面前了岂不妙哉？\n\n废话不多说，直接上代码。\n\n```python\n#!/usr/bin/env python\n# _*_ coding: utf-8 _*_\n\nfrom bs4 import BeautifulSoup\nimport urllib2\nimport sys\n\ndef mms_extract(url):\n    soup = BeautifulSoup(urllib2.urlopen(url))\n    return soup.select(\"ref\")[0][\"href\"]\n\nname_list = sys.argv[1].split(\",\")\n\nfor name in name_list:\n    soup = BeautifulSoup(urllib2.urlopen(u\"http://hibiki-radio.jp/description/{name}\".format(name=name), timeout=30))\n    mms = soup.select(\"div.hbkDescriptonContents embed\")[0][\"src\"]\n    print mms_extract(mms)\n```\n\n这个是提取广播站響的广播音频地址，简单易懂吧？\n\n先通过请求地址 `http://hibiki-radio.jp/description / 节目名字 ` 来获得节目详细页面。还记得这里的地址吗？是在分析的过程得知的。\n\n注意这里获得到的网页文件只是一些代码和文字，** 没有图片或者这个页面再请求的其他资源 **。\n\n接着是用 BeautifulSoup 在这个页面中提取出 `<embed>` 标签中的 src 属性值，再请求一次那个 asx 文件，在 asx 文件中取到最终要得到的 mms 协议地址。\n\n使用的时候可以这样用：\n\n```bash\npython hibiki.py 节目名字[, 节目名字]\n```\n\n而如果你想使用 rtmpdump 来下载，也不是不可能，但是思维就完全不一样。先来看看 rtmpdump 的使用：\n\n```bash\nrtmpdump -r \"rtmpe://cp209391.edgefcs.net/ondemand/\" -y \"mp4:140614_imocyo_140614_imocyo\" -o test.flv\n```\n\n重点是要得到 `-y` 参数里面的名字，这就需要你清楚节目更新的日期和节目名字的代号。\n\n```python\n#!/usr/bin/env python\n# _*_ coding: utf-8 _*_\n\nfrom datetime import date\n\ndef get_date(delta=0):\n    \"\"\"\n    :return:\n        formatted date, i.e. 140505\n    \"\"\"format =\"%y%m%d\"\n    day = date.today()\n    if delta != 0 and isinstance(delta, int):\n        day = day + timedelta(days=delta)\n\n    return day.strftime(format)\n\ndef get_download_command(bangumi, output_name):\n    return \"rtmpdump -r \\\"rtmpe://cp209391.edgefcs.net/ondemand/\\\"-y \\\"mp4:{date}_{bangumi}_{date}_{bangumi}\\\"-o {output}.flv\".format(bangumi=bangumi, date=get_date(), output=output_name)\n```\n\n<a name=\"some-website\"></a>\n## 福利：一些广播网站地址\n\n[インターネットラジオ ·TV の番組表](http://www.geek-p.com/)\n\n[響 - HiBiKi Radio Station -](http://hibiki-radio.jp/)\n\n[インターネットラジオステーション＜音泉＞](http://www.onsen.ag/)\n\n[Lantis web radio](http://lantis-net.com/)\n\n[超！A&G | AM1134kHz 文化放送 JOQR](http://www.agqr.jp/)","source":"_posts/如何保存一些网络广播.md","raw":"---\ntitle: 如何保存一些网络广播\ncategories:\n  - [技术, 黑客]\n  - [技术, 杂谈]\n  - [编程语言, python]\ntags: [python, script, spider, scraper, bytalk]\npermalink: how-to-save-internet-radio\nid: 19\nupdated: '2014-07-19 19:13:07'\ndate: 2014-07-19 19:05:47\n---\n\n近来一直有在网上听一些动画的广播以及网络广播。而因为广播每周都有放送，如果错过了这周，下一周就没得再听了（有些可以付费重新听，相当于不可能再听了）。那么本周的广播其实可以先保存下来，等到有时间的时候再听。经过了一段时间的摸索，的确摸到了一些门路，于是总结一下整个流程的技术。这些广播实质上就是一些网络媒体，和平常在音乐网站听音乐等其实是一样的，因此这些获取方法应该也基本适用。\n\n1. [边用边分析——響篇](#use-and-analyze-hibiki)\n1. [提取媒体位置——響篇](#extract-hibiki)\n1. [使用特定的工具](#tool)\n1. [另一个例子——音泉篇](#another-example-onsen)\n1. [使用插件或工具下载](#download)\n1. [编写脚本](#program)\n1. [福利](#some-website)\n\n<a name=\"use-and-analyze-hibiki\"></a>\n## 边用边分析——響篇\n\n下面以我经常去的 [響 - HiBiKi Radio Station -](http://hibiki-radio.jp/) 为例子。\n\n打开网站。\n\n![网站状况](http://i.imgur.com/xoce2hN.jpg)\n\n大概浏览一下整个页面，可以看到分成几个区域，新闻区、播放器区、节目列表区、广告区。\n\n![分区](http://i.imgur.com/cPU6MLI.jpg)\n\n新闻区会更新广播的信息，一般是得知新广播推出的来源。\n\n播放器区，这个是重点。一般看播放器就大概知道获取广播的难度。\n\n节目列表区，这种涉及和网站交互的区域是搞懂网站架构的好地方。\n\n广告区，并非没用，有时会出现一些新广播或者新广播站的消息。\n\n随便点一个广播，就这个吧，妹ちょ。らじお。\n\n按 F12 打开 chrome 的开发者工具。什么？你不是在用 chrome？那你自己看着办。\n\n![开发者工具](http://i.imgur.com/q9Ntgky.png)\n\n来看看控制台输出了什么？（红色的是资源获取失败，是我的网络原因，可以忽略）\n\n看起来是一些调试信息。这应该不是 javascript 输出的信息，一般 js 代码输出的信息在右边会有代码行数提示。\n\n看到两行比较感兴趣的输出：\n\n1. connectiong Stream->rtmpe://cp209391.edgefcs.net/ondemand/\n1. DetailsLoad->urlhttp://image.hibiki-radio.jp/uploads/data/channel/imocyo/description.xml\n\n第一个有单词 stream，而且后面的网址使用 rtmpe 协议。（什么协议，我没看过……）\n\n第二个看到一个 xml 文件位置，url 中有 imocyo，是广播题目妹ちょ的罗马拼写，看来就是跟广播有关的东西，点进去看看。\n\n可以看到这么一些 xml 文件内容。\n\n```markup\n<data>\n<title > 妹ちょ。らじお</title>\n<cast>\n<name > 橋本ちなみ</name>\n<name > 金元寿子</name>\n</cast>\n<outline>\n絶賛放送中の TV アニメ『最近、妹のようすがちょっとおかしいんだが。』のラジオ番組！ 神前美月役の橋本ちなみさんと桐谷雪那役の金元寿子さんが番組を担当。 第 5 回より「妹ちょ。らじお」は毎週土曜日の更新へ変更となります。 ラジオ大阪 OBC [1314kHz]では毎週金曜日 24 時 30 分～25 時にて放送！\n</outline>\n<link>http://hibiki-radio.jp/description/imocyo</link>\n</data>\n```\n\n看起来就是一些配置信息。\n\n回头再来看首页的播放器，右边的是不是就是 xml 文件里面的内容啊？看来这个 xml 就是播放器请求的了。\n\n顺手右击一下播放器，看看弹出的菜单。嗯，看来是 flash 了，可能就比较麻烦了。\n\n![播放器信息](http://i.imgur.com/gdct7EK.jpg)\n\n为什么说是 flash 就比较麻烦呢？因为 flash 作为组件，内部是对浏览器屏蔽的，也就是说它搞了什么，浏览器基本是不清楚的，包括它向哪里请求了什么。通常情况下，flash 请求的是流媒体，很多是没有缓存的。\n\n比较幸运的是这个 flash 自己输出了一些调试信息，也算有迹可寻。\n\n> 如果连控制台输出都没有，那怎么办呢？其中一种方法是可以用硕思闪客精灵反汇编这个 flash 的 swf 文件，在文件内部找 url。这个方法可能涉及到版权或法律问题，就不在这叙述。另外一种方法操作上比较难，就是监听网卡。这个算是终极手段，因为所有的网络进出信息都可以捕捉到，但是技术要求也是最高的（我自己尝试过，收获不多就另辟蹊径了）。\n\nok，现在保持控制台打开的状况，点击播放。\n\n听到了橋本ちなみ和金元寿子的声音。\n\n再看控制台，哦真给力，呕吐一样输出一堆东西。\n\n![播放时输出](http://i.imgur.com/3yMoQg7.png)\n\n显然最有用的就是那一行。\n\n```bash\nstream->mp4:140614_imocyo_140614_imocyo.mp4?di=910&si=609&pi=2806&gi=6498&gc=6&bi=57971&bc=imocyo&ei=717045&ec=140614_imocyo&vi=4102269&vc=140614_imocyo&msi=516&mc=&ni=1625?1405751016018\n```\n\n一看到 mp4，感觉已经摸到了这个资源了，而且名字很明显是 `140614_imocyo_140614_imocyo.mp4`，后面的形似? xx=xxx&xx=xxx 的东西是一些请求的参数。\n\n这名字，一看就知道格式是：` 日期_名字_日期_名字_.mp4`，也就是说 14 年 6 月 14 日的妹ちょ广播。这些信息说不定有用，先记录下来。\n\n尝试和前面的网址结合起来得到 `cp209391.edgefcs.net/ondemand/140614_imocyo_140614_imocyo.mp4`，放到地址栏访问一下，啥都没有。嗯，预料之内，有可能是协议问题，也有可能是路径不对。\n\n上网搜索一下 `rtmpe 协议 `，发现叫实时消息传送协议协议，是 Adobe 公司的（好吧又是你）。搜索出来的结果基本都是有关怎么下载这些协议的流媒体的。基本就是介绍什么软件什么软件的，个人比较讨厌这些使用乱七八糟软件的方法，而且基本也是不凑效的。\n\n将关键字改为 `download rtmpe` 一搜，发现一个 `rtmpdump` 的命令行工具，声称通杀这类协议。但是一看[文档](https://rtmpdump.mplayerhq.hu/rtmpdump.1.html)，嗯，暂时不想深究。看看有没有其他方法吧。\n\n留意到播放器里面有个“详细”，点击一下跳转到一个网页 `http://hibiki-radio.jp/description/imocyo`。\n\n![节目页](http://i.imgur.com/hHfFJoI.jpg)\n\n看来就是个节目的详细介绍页面，估计网址格式是：`hibiki-radio.jp/description / 节目名字 `。\n\n拉到最下面，终于发现突破口！\n\n![WMP](http://i.imgur.com/YYfvxB1.jpg)\n\n<a name=\"extract-hibiki\"></a>\n## 提取媒体位置——響篇\n\n页面中内嵌了一个 WMP（Windows Media Player）组件，虽然这个也是跟 flash 一样的组件，但是并没有 flash 那样让人讨厌。根据我的经验，WMP 播放的媒体是可以手动提取的。现在就来试试。\n\n打开开发者工具，审查这个插件元素，可以看到是一个 `<embed>` 标签，属性 src 就是一个网址 `http://www2.uliza.jp/IF/WMVDisplay.aspx?clientid=910&playerid=2869&episodeid=140614_imocyo&videoid=140614_imocyo-wm&vid=4102271&memberid=&membersiteid=516&nickname=&sex=&birthday=&local=&mode=1`。\n\n![嵌入](http://i.imgur.com/6ISMvV9.jpg)\n\n点击访问发现下载了一个文件 `140614_imocyo-wm.asx`。\n\n用记事本打开，内容如下：\n\n```markup\n<ASX version = \"3.0\"><entry><title>[毎]140614_妹ちょ。らじお #23</title><Ref href =\"mms://wms.uliza.jp/uliza/910/140614_imocyo_140614_imocyo-wm.wma\"/></entry></ASX>\n```\n\n出来了！看到那个 `mms://wms.uliza.jp/uliza/910/140614_imocyo_140614_imocyo-wm.wma` 了吗？wma 就是一个音乐文件。mms 协议的文件是能够使用迅雷来下载的。Mission completed.\n\n<a name=\"tool\"></a>\n## 使用特定的工具\n\n在分析的时候不是发现了一个叫 `rtmpdump` 的命令行工具吗？现在来看看怎么使用。\n\n尝试以各种关键字组合起来搜索，比如 `download rtmpe mp4`、`how to downlaod rtmpe with rtmpdump`……\n\n最后得到一个可用的命令：`rtmpdump -r \"rtmpe://cp209391.edgefcs.net/ondemand/\" -y \"mp4:140614_imocyo_140614_imocyo\" -o test.flv`\n\n可以看到，其实就是组合了一直分析下来的网址。下图就是正在下载的窗口。\n\n![rtmp 下载](http://i.imgur.com/KAeGdol.png)\n\nBoom! 这可比乱七八糟的软件好用多了。\n\n<a name=\"another-example-onsen\"></a>\n## 另一个例子——音泉篇\n\n现在再来看另外一个例子，另一个广播比较多的网站，[音泉](http://www.onsen.ag/)。\n\n先看一下网站，嗯比 hibiki 好看多了。\n\n![音泉整站](http://i.imgur.com/ftwHPQP.jpg)\n\n网站的区域分布也跟 hibiki 大同小异。播放器也是 flash。\n\n![音泉播放](http://i.imgur.com/HwFI84S.jpg)\n\n播放之后看不到什么输出，只是看到一个请求：`http://www.onsen.ag/data/api/getMovieInfo/aldnoah?callback=callback&_=1405758148110`。\n\n可以看得出格式是：`www.onsen.ag/data/api/getMovieInfo / 节目名字 `。后面的参数是代码回调和当前的时间。\n\n直接访问这个网址，得到：\n\n```javascript\ncallback({\"type\":\"sound\",\"thumbnailPath\":\"\\/program\\/aldnoah\\/image\\/128_pgi01_m.jpg\",\"moviePath\":{\"pc\":\"http:\\/\\/onsen.b-ch.com\\/radio\\/aldnoah140712Zf8j.mp3\",\"iPhone\":\"http:\\/\\/onsen.b-ch.com\\/radio\\/aldnoah140712Zf8j.mp3\",\"Android\":\"http:\\/\\/onsen.b-ch.com\\/radio\\/aldnoah140712Zf8j.mp3\"},\"title\":\"\\u30a2\\u30eb\\u30c9\\u30ce\\u30a2\\u30fb\\u30e9\\u30b8\\u30aa\",\"personality\":\"\\u96e8\\u5bae\\u5929\\uff08\\u30a2\\u30bb\\u30a4\\u30e9\\u30e0\\u30fb\\u30f4\\u30a1\\u30fc\\u30b9\\u30fb\\u30a2\\u30ea\\u30e5\\u30fc\\u30b7\\u30a2 \\u5f79\\uff09 \\/ \\u6c34\\u702c\\u3044\\u306e\\u308a\\uff08\\u30a8\\u30c7\\u30eb\\u30ea\\u30c3\\u30be \\u5f79\\uff09\",\"guest\":\"\",\"update\":\"2014.7.12\",\"count\":\"03\",\"schedule\":\"\\u6bce\\u9031\\u571f\\u66dc\\u65e524:30\\uff5e\\u66f4\\u65b0\",\"optionText\":\"\\u30a2\\u30cb\\u30d7\\u30ec\\u30c3\\u30af\\u30b9\",\"mail\":\"aldnoah@onsen.ag\",\"copyright\":\"\\u00a9Olympus Knights\\uff0fAniplex\\u30fbProject AZ\",\"url\":\"aldnoah\",\"link\":[],\"recommendGoods\":[],\"recommendMovie\":[{\"imagePath\":\"\\/program\\/gochiusa\\/image\\/34_pgi01_b.jpg\",\"url\":\"\\/program\\/gochiusa\\/\"}],\"cm\":[],\"allowExpand\":\"false\"});\n```\n\n就是个 json 而已，上 [jsnice](http://www.jsnice.org/) 整理一下得：\n\n```javascript\ncallback({\n  \"type\" : \"sound\",\n  \"thumbnailPath\" : \"/program/aldnoah/image/128_pgi01_m.jpg\",\n  \"moviePath\" : {\n    \"pc\" : \"http://onsen.b-ch.com/radio/aldnoah140712Zf8j.mp3\",\n    \"iPhone\" : \"http://onsen.b-ch.com/radio/aldnoah140712Zf8j.mp3\",\n    \"Android\" : \"http://onsen.b-ch.com/radio/aldnoah140712Zf8j.mp3\"\n  },\n  \"title\" : \"\\u30a2\\u30eb\\u30c9\\u30ce\\u30a2\\u30fb\\u30e9\\u30b8\\u30aa\",\n  \"personality\" : \"\\u96e8\\u5bae\\u5929\\uff08\\u30a2\\u30bb\\u30a4\\u30e9\\u30e0\\u30fb\\u30f4\\u30a1\\u30fc\\u30b9\\u30fb\\u30a2\\u30ea\\u30e5\\u30fc\\u30b7\\u30a2 \\u5f79\\uff09 / \\u6c34\\u702c\\u3044\\u306e\\u308a\\uff08\\u30a8\\u30c7\\u30eb\\u30ea\\u30c3\\u30be \\u5f79\\uff09\",\n  \"guest\" : \"\",\"update\":\"2014.7.12\",\"count\":\"03\",\"schedule\":\"\\u6bce\\u9031\\u571f\\u66dc\\u65e524:30\\uff5e\\u66f4\\u65b0\",\"optionText\":\"\\u30a2\\u30cb\\u30d7\\u30ec\\u30c3\\u30af\\u30b9\",\"mail\":\"aldnoah@onsen.ag\",\"copyright\":\"\\u00a9Olympus Knights\\uff0fAniplex\\u30fbProject AZ\",\"url\":\"aldnoah\",\"link\": [],\"recommendGoods\": [],\"recommendMovie\": [{\"imagePath\":\"/program/gochiusa/image/34_pgi01_b.jpg\",\"url\":\"/program/gochiusa/\"}],\"cm\": [],\"allowExpand\":\"false\"\n});\n```\n\n看到第四行 `\"moviePath\"` 下的 `http://onsen.b-ch.com/radio/aldnoah140712Zf8j.mp3` 了吗？熟悉的 mp3 格式。\n\n文件位置格式是：`onsen.b-ch.com/radio/` + 节目名字 + 6 位日期 + 4 位随机字符 + `.mp3`。\n\n于是广播也 get だぜ～\n\n> 举了两个详细的例子，一些更简单的就不再详述了。只要你活用开发者工具，很容易就找到地址的。有的广播比如 Aniplex 旗下的动画，会做一个官网，查看网页的源代码就直接能找到音频的地址。\n\n<a name=\"download\"></a>\n## 使用插件或工具下载\n\n浏览器能帮我们做到很多事情。因为从网络上来的东西，最后都是交给浏览器来解析的（flash 这类内嵌的组件除外）。也就是说，浏览器是知道我们想保存的下来的资源的位置和内容的，只要告诉浏览器给我们就行了，这也就是比较早期的时候，一些教程教授的从缓存文件夹中复制出文件的技术基础。不过现代浏览器有插件，就不用那么复杂了。安装上了插件，会自动给你提取出网页中可能存在的多媒体文件（音乐 / 视频 / 图片 /...）。\n\n比如[音泉](http://www.onsen.ag/)\n\n随便点击一个节目，在播放的同时，能够捕捉多媒体的插件就抓到资源了。\n\n![抓到播放资源](http://i.imgur.com/bjjQzNC.jpg)\n\n直接点击下载就 ok 了，容易吧。这些插件在 chrome 商店一搜一大堆，其他现代浏览器比如 FireFox 和 Opera 也是有这类插件。IE…… 我就不太清楚了。\n\nBTW，这个网站访问是没问题的，但是媒体资源例如 mp3 和 mp4 等是限定日本 IP 的，请自备梯子。\n\n<a name=\"program\"></a>\n## 编写脚本\n\n以下是比较高阶的使用，电脑小白可以跳过了。\n\n### 为什么在已经能够下载媒体的情况下，还要写脚本？\n\n~~ 装逼~~\n\n~~ 懒~~\n\n咳咳，不是啦，其实是使用脚本能够快速和自动化啦（诶偷懒好像说对了……\n\n鉴于访问外国网站的不稳定性（为了能截到博文中的漂亮的大图，我整个下午在不断地刷新……），这些广播网站经常是比较卡的。使用脚本能够只请求最小的资源就能提取出媒体的位置，比起每次打开网页快多了。当然你听一个两个广播还好，我要听十来个广播我是受不了的。如果能做到高度自动化，鼠标点两下，资源就自动躺在你面前了岂不妙哉？\n\n废话不多说，直接上代码。\n\n```python\n#!/usr/bin/env python\n# _*_ coding: utf-8 _*_\n\nfrom bs4 import BeautifulSoup\nimport urllib2\nimport sys\n\ndef mms_extract(url):\n    soup = BeautifulSoup(urllib2.urlopen(url))\n    return soup.select(\"ref\")[0][\"href\"]\n\nname_list = sys.argv[1].split(\",\")\n\nfor name in name_list:\n    soup = BeautifulSoup(urllib2.urlopen(u\"http://hibiki-radio.jp/description/{name}\".format(name=name), timeout=30))\n    mms = soup.select(\"div.hbkDescriptonContents embed\")[0][\"src\"]\n    print mms_extract(mms)\n```\n\n这个是提取广播站響的广播音频地址，简单易懂吧？\n\n先通过请求地址 `http://hibiki-radio.jp/description / 节目名字 ` 来获得节目详细页面。还记得这里的地址吗？是在分析的过程得知的。\n\n注意这里获得到的网页文件只是一些代码和文字，** 没有图片或者这个页面再请求的其他资源 **。\n\n接着是用 BeautifulSoup 在这个页面中提取出 `<embed>` 标签中的 src 属性值，再请求一次那个 asx 文件，在 asx 文件中取到最终要得到的 mms 协议地址。\n\n使用的时候可以这样用：\n\n```bash\npython hibiki.py 节目名字[, 节目名字]\n```\n\n而如果你想使用 rtmpdump 来下载，也不是不可能，但是思维就完全不一样。先来看看 rtmpdump 的使用：\n\n```bash\nrtmpdump -r \"rtmpe://cp209391.edgefcs.net/ondemand/\" -y \"mp4:140614_imocyo_140614_imocyo\" -o test.flv\n```\n\n重点是要得到 `-y` 参数里面的名字，这就需要你清楚节目更新的日期和节目名字的代号。\n\n```python\n#!/usr/bin/env python\n# _*_ coding: utf-8 _*_\n\nfrom datetime import date\n\ndef get_date(delta=0):\n    \"\"\"\n    :return:\n        formatted date, i.e. 140505\n    \"\"\"format =\"%y%m%d\"\n    day = date.today()\n    if delta != 0 and isinstance(delta, int):\n        day = day + timedelta(days=delta)\n\n    return day.strftime(format)\n\ndef get_download_command(bangumi, output_name):\n    return \"rtmpdump -r \\\"rtmpe://cp209391.edgefcs.net/ondemand/\\\"-y \\\"mp4:{date}_{bangumi}_{date}_{bangumi}\\\"-o {output}.flv\".format(bangumi=bangumi, date=get_date(), output=output_name)\n```\n\n<a name=\"some-website\"></a>\n## 福利：一些广播网站地址\n\n[インターネットラジオ ·TV の番組表](http://www.geek-p.com/)\n\n[響 - HiBiKi Radio Station -](http://hibiki-radio.jp/)\n\n[インターネットラジオステーション＜音泉＞](http://www.onsen.ag/)\n\n[Lantis web radio](http://lantis-net.com/)\n\n[超！A&G | AM1134kHz 文化放送 JOQR](http://www.agqr.jp/)","slug":"how-to-save-internet-radio","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuto007sn7t4tub4xh2h","content":"<p>近来一直有在网上听一些动画的广播以及网络广播。而因为广播每周都有放送，如果错过了这周，下一周就没得再听了（有些可以付费重新听，相当于不可能再听了）。那么本周的广播其实可以先保存下来，等到有时间的时候再听。经过了一段时间的摸索，的确摸到了一些门路，于是总结一下整个流程的技术。这些广播实质上就是一些网络媒体，和平常在音乐网站听音乐等其实是一样的，因此这些获取方法应该也基本适用。</p>\n<ol>\n<li><a href=\"#use-and-analyze-hibiki\">边用边分析——響篇</a></li>\n<li><a href=\"#extract-hibiki\">提取媒体位置——響篇</a></li>\n<li><a href=\"#tool\">使用特定的工具</a></li>\n<li><a href=\"#another-example-onsen\">另一个例子——音泉篇</a></li>\n<li><a href=\"#download\">使用插件或工具下载</a></li>\n<li><a href=\"#program\">编写脚本</a></li>\n<li><a href=\"#some-website\">福利</a></li>\n</ol>\n<p><a name=\"use-and-analyze-hibiki\"></a></p>\n<h2 id=\"边用边分析——響篇\"><a href=\"#边用边分析——響篇\" class=\"headerlink\" title=\"边用边分析——響篇\"></a>边用边分析——響篇</h2><p>下面以我经常去的 <a href=\"http://hibiki-radio.jp/\" target=\"_blank\" rel=\"noopener\">響 - HiBiKi Radio Station -</a> 为例子。</p>\n<p>打开网站。</p>\n<p><img src=\"http://i.imgur.com/xoce2hN.jpg\" alt=\"网站状况\"></p>\n<p>大概浏览一下整个页面，可以看到分成几个区域，新闻区、播放器区、节目列表区、广告区。</p>\n<p><img src=\"http://i.imgur.com/cPU6MLI.jpg\" alt=\"分区\"></p>\n<p>新闻区会更新广播的信息，一般是得知新广播推出的来源。</p>\n<p>播放器区，这个是重点。一般看播放器就大概知道获取广播的难度。</p>\n<p>节目列表区，这种涉及和网站交互的区域是搞懂网站架构的好地方。</p>\n<p>广告区，并非没用，有时会出现一些新广播或者新广播站的消息。</p>\n<p>随便点一个广播，就这个吧，妹ちょ。らじお。</p>\n<p>按 F12 打开 chrome 的开发者工具。什么？你不是在用 chrome？那你自己看着办。</p>\n<p><img src=\"http://i.imgur.com/q9Ntgky.png\" alt=\"开发者工具\"></p>\n<p>来看看控制台输出了什么？（红色的是资源获取失败，是我的网络原因，可以忽略）</p>\n<p>看起来是一些调试信息。这应该不是 javascript 输出的信息，一般 js 代码输出的信息在右边会有代码行数提示。</p>\n<p>看到两行比较感兴趣的输出：</p>\n<ol>\n<li>connectiong Stream-&gt;rtmpe://cp209391.edgefcs.net/ondemand/</li>\n<li>DetailsLoad-&gt;url<a href=\"http://image.hibiki-radio.jp/uploads/data/channel/imocyo/description.xml\" target=\"_blank\" rel=\"noopener\">http://image.hibiki-radio.jp/uploads/data/channel/imocyo/description.xml</a></li>\n</ol>\n<p>第一个有单词 stream，而且后面的网址使用 rtmpe 协议。（什么协议，我没看过……）</p>\n<p>第二个看到一个 xml 文件位置，url 中有 imocyo，是广播题目妹ちょ的罗马拼写，看来就是跟广播有关的东西，点进去看看。</p>\n<p>可以看到这么一些 xml 文件内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;data&gt;</span><br><span class=\"line\">&lt;title &gt; 妹ちょ。らじお&lt;/title&gt;</span><br><span class=\"line\">&lt;cast&gt;</span><br><span class=\"line\">&lt;name &gt; 橋本ちなみ&lt;/name&gt;</span><br><span class=\"line\">&lt;name &gt; 金元寿子&lt;/name&gt;</span><br><span class=\"line\">&lt;/cast&gt;</span><br><span class=\"line\">&lt;outline&gt;</span><br><span class=\"line\">絶賛放送中の TV アニメ『最近、妹のようすがちょっとおかしいんだが。』のラジオ番組！ 神前美月役の橋本ちなみさんと桐谷雪那役の金元寿子さんが番組を担当。 第 5 回より「妹ちょ。らじお」は毎週土曜日の更新へ変更となります。 ラジオ大阪 OBC [1314kHz]では毎週金曜日 24 時 30 分～25 時にて放送！</span><br><span class=\"line\">&lt;/outline&gt;</span><br><span class=\"line\">&lt;link&gt;http://hibiki-radio.jp/description/imocyo&lt;/link&gt;</span><br><span class=\"line\">&lt;/data&gt;</span><br></pre></td></tr></table></figure>\n<p>看起来就是一些配置信息。</p>\n<p>回头再来看首页的播放器，右边的是不是就是 xml 文件里面的内容啊？看来这个 xml 就是播放器请求的了。</p>\n<p>顺手右击一下播放器，看看弹出的菜单。嗯，看来是 flash 了，可能就比较麻烦了。</p>\n<p><img src=\"http://i.imgur.com/gdct7EK.jpg\" alt=\"播放器信息\"></p>\n<p>为什么说是 flash 就比较麻烦呢？因为 flash 作为组件，内部是对浏览器屏蔽的，也就是说它搞了什么，浏览器基本是不清楚的，包括它向哪里请求了什么。通常情况下，flash 请求的是流媒体，很多是没有缓存的。</p>\n<p>比较幸运的是这个 flash 自己输出了一些调试信息，也算有迹可寻。</p>\n<blockquote>\n<p>如果连控制台输出都没有，那怎么办呢？其中一种方法是可以用硕思闪客精灵反汇编这个 flash 的 swf 文件，在文件内部找 url。这个方法可能涉及到版权或法律问题，就不在这叙述。另外一种方法操作上比较难，就是监听网卡。这个算是终极手段，因为所有的网络进出信息都可以捕捉到，但是技术要求也是最高的（我自己尝试过，收获不多就另辟蹊径了）。</p>\n</blockquote>\n<p>ok，现在保持控制台打开的状况，点击播放。</p>\n<p>听到了橋本ちなみ和金元寿子的声音。</p>\n<p>再看控制台，哦真给力，呕吐一样输出一堆东西。</p>\n<p><img src=\"http://i.imgur.com/3yMoQg7.png\" alt=\"播放时输出\"></p>\n<p>显然最有用的就是那一行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stream-&gt;mp4:140614_imocyo_140614_imocyo.mp4?di=910&amp;si=609&amp;pi=2806&amp;gi=6498&amp;gc=6&amp;bi=57971&amp;bc=imocyo&amp;ei=717045&amp;ec=140614_imocyo&amp;vi=4102269&amp;vc=140614_imocyo&amp;msi=516&amp;mc=&amp;ni=1625?1405751016018</span><br></pre></td></tr></table></figure>\n<p>一看到 mp4，感觉已经摸到了这个资源了，而且名字很明显是 <code>140614_imocyo_140614_imocyo.mp4</code>，后面的形似? xx=xxx&amp;xx=xxx 的东西是一些请求的参数。</p>\n<p>这名字，一看就知道格式是：<code>日期_名字_日期_名字_.mp4</code>，也就是说 14 年 6 月 14 日的妹ちょ广播。这些信息说不定有用，先记录下来。</p>\n<p>尝试和前面的网址结合起来得到 <code>cp209391.edgefcs.net/ondemand/140614_imocyo_140614_imocyo.mp4</code>，放到地址栏访问一下，啥都没有。嗯，预料之内，有可能是协议问题，也有可能是路径不对。</p>\n<p>上网搜索一下 <code>rtmpe 协议</code>，发现叫实时消息传送协议协议，是 Adobe 公司的（好吧又是你）。搜索出来的结果基本都是有关怎么下载这些协议的流媒体的。基本就是介绍什么软件什么软件的，个人比较讨厌这些使用乱七八糟软件的方法，而且基本也是不凑效的。</p>\n<p>将关键字改为 <code>download rtmpe</code> 一搜，发现一个 <code>rtmpdump</code> 的命令行工具，声称通杀这类协议。但是一看<a href=\"https://rtmpdump.mplayerhq.hu/rtmpdump.1.html\" target=\"_blank\" rel=\"noopener\">文档</a>，嗯，暂时不想深究。看看有没有其他方法吧。</p>\n<p>留意到播放器里面有个“详细”，点击一下跳转到一个网页 <code>http://hibiki-radio.jp/description/imocyo</code>。</p>\n<p><img src=\"http://i.imgur.com/hHfFJoI.jpg\" alt=\"节目页\"></p>\n<p>看来就是个节目的详细介绍页面，估计网址格式是：<code>hibiki-radio.jp/description / 节目名字</code>。</p>\n<p>拉到最下面，终于发现突破口！</p>\n<p><img src=\"http://i.imgur.com/YYfvxB1.jpg\" alt=\"WMP\"></p>\n<p><a name=\"extract-hibiki\"></a></p>\n<h2 id=\"提取媒体位置——響篇\"><a href=\"#提取媒体位置——響篇\" class=\"headerlink\" title=\"提取媒体位置——響篇\"></a>提取媒体位置——響篇</h2><p>页面中内嵌了一个 WMP（Windows Media Player）组件，虽然这个也是跟 flash 一样的组件，但是并没有 flash 那样让人讨厌。根据我的经验，WMP 播放的媒体是可以手动提取的。现在就来试试。</p>\n<p>打开开发者工具，审查这个插件元素，可以看到是一个 <code>&lt;embed&gt;</code> 标签，属性 src 就是一个网址 <code>http://www2.uliza.jp/IF/WMVDisplay.aspx?clientid=910&amp;playerid=2869&amp;episodeid=140614_imocyo&amp;videoid=140614_imocyo-wm&amp;vid=4102271&amp;memberid=&amp;membersiteid=516&amp;nickname=&amp;sex=&amp;birthday=&amp;local=&amp;mode=1</code>。</p>\n<p><img src=\"http://i.imgur.com/6ISMvV9.jpg\" alt=\"嵌入\"></p>\n<p>点击访问发现下载了一个文件 <code>140614_imocyo-wm.asx</code>。</p>\n<p>用记事本打开，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ASX version = &quot;3.0&quot;&gt;&lt;entry&gt;&lt;title&gt;[毎]140614_妹ちょ。らじお #23&lt;/title&gt;&lt;Ref href =&quot;mms://wms.uliza.jp/uliza/910/140614_imocyo_140614_imocyo-wm.wma&quot;/&gt;&lt;/entry&gt;&lt;/ASX&gt;</span><br></pre></td></tr></table></figure>\n<p>出来了！看到那个 <code>mms://wms.uliza.jp/uliza/910/140614_imocyo_140614_imocyo-wm.wma</code> 了吗？wma 就是一个音乐文件。mms 协议的文件是能够使用迅雷来下载的。Mission completed.</p>\n<p><a name=\"tool\"></a></p>\n<h2 id=\"使用特定的工具\"><a href=\"#使用特定的工具\" class=\"headerlink\" title=\"使用特定的工具\"></a>使用特定的工具</h2><p>在分析的时候不是发现了一个叫 <code>rtmpdump</code> 的命令行工具吗？现在来看看怎么使用。</p>\n<p>尝试以各种关键字组合起来搜索，比如 <code>download rtmpe mp4</code>、<code>how to downlaod rtmpe with rtmpdump</code>……</p>\n<p>最后得到一个可用的命令：<code>rtmpdump -r &quot;rtmpe://cp209391.edgefcs.net/ondemand/&quot; -y &quot;mp4:140614_imocyo_140614_imocyo&quot; -o test.flv</code></p>\n<p>可以看到，其实就是组合了一直分析下来的网址。下图就是正在下载的窗口。</p>\n<p><img src=\"http://i.imgur.com/KAeGdol.png\" alt=\"rtmp 下载\"></p>\n<p>Boom! 这可比乱七八糟的软件好用多了。</p>\n<p><a name=\"another-example-onsen\"></a></p>\n<h2 id=\"另一个例子——音泉篇\"><a href=\"#另一个例子——音泉篇\" class=\"headerlink\" title=\"另一个例子——音泉篇\"></a>另一个例子——音泉篇</h2><p>现在再来看另外一个例子，另一个广播比较多的网站，<a href=\"http://www.onsen.ag/\" target=\"_blank\" rel=\"noopener\">音泉</a>。</p>\n<p>先看一下网站，嗯比 hibiki 好看多了。</p>\n<p><img src=\"http://i.imgur.com/ftwHPQP.jpg\" alt=\"音泉整站\"></p>\n<p>网站的区域分布也跟 hibiki 大同小异。播放器也是 flash。</p>\n<p><img src=\"http://i.imgur.com/HwFI84S.jpg\" alt=\"音泉播放\"></p>\n<p>播放之后看不到什么输出，只是看到一个请求：<code>http://www.onsen.ag/data/api/getMovieInfo/aldnoah?callback=callback&amp;_=1405758148110</code>。</p>\n<p>可以看得出格式是：<code>www.onsen.ag/data/api/getMovieInfo / 节目名字</code>。后面的参数是代码回调和当前的时间。</p>\n<p>直接访问这个网址，得到：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">callback(&#123;<span class=\"string\">\"type\"</span>:<span class=\"string\">\"sound\"</span>,<span class=\"string\">\"thumbnailPath\"</span>:<span class=\"string\">\"\\/program\\/aldnoah\\/image\\/128_pgi01_m.jpg\"</span>,<span class=\"string\">\"moviePath\"</span>:&#123;<span class=\"string\">\"pc\"</span>:<span class=\"string\">\"http:\\/\\/onsen.b-ch.com\\/radio\\/aldnoah140712Zf8j.mp3\"</span>,<span class=\"string\">\"iPhone\"</span>:<span class=\"string\">\"http:\\/\\/onsen.b-ch.com\\/radio\\/aldnoah140712Zf8j.mp3\"</span>,<span class=\"string\">\"Android\"</span>:<span class=\"string\">\"http:\\/\\/onsen.b-ch.com\\/radio\\/aldnoah140712Zf8j.mp3\"</span>&#125;,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"\\u30a2\\u30eb\\u30c9\\u30ce\\u30a2\\u30fb\\u30e9\\u30b8\\u30aa\"</span>,<span class=\"string\">\"personality\"</span>:<span class=\"string\">\"\\u96e8\\u5bae\\u5929\\uff08\\u30a2\\u30bb\\u30a4\\u30e9\\u30e0\\u30fb\\u30f4\\u30a1\\u30fc\\u30b9\\u30fb\\u30a2\\u30ea\\u30e5\\u30fc\\u30b7\\u30a2 \\u5f79\\uff09 \\/ \\u6c34\\u702c\\u3044\\u306e\\u308a\\uff08\\u30a8\\u30c7\\u30eb\\u30ea\\u30c3\\u30be \\u5f79\\uff09\"</span>,<span class=\"string\">\"guest\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"update\"</span>:<span class=\"string\">\"2014.7.12\"</span>,<span class=\"string\">\"count\"</span>:<span class=\"string\">\"03\"</span>,<span class=\"string\">\"schedule\"</span>:<span class=\"string\">\"\\u6bce\\u9031\\u571f\\u66dc\\u65e524:30\\uff5e\\u66f4\\u65b0\"</span>,<span class=\"string\">\"optionText\"</span>:<span class=\"string\">\"\\u30a2\\u30cb\\u30d7\\u30ec\\u30c3\\u30af\\u30b9\"</span>,<span class=\"string\">\"mail\"</span>:<span class=\"string\">\"aldnoah@onsen.ag\"</span>,<span class=\"string\">\"copyright\"</span>:<span class=\"string\">\"\\u00a9Olympus Knights\\uff0fAniplex\\u30fbProject AZ\"</span>,<span class=\"string\">\"url\"</span>:<span class=\"string\">\"aldnoah\"</span>,<span class=\"string\">\"link\"</span>:[],<span class=\"string\">\"recommendGoods\"</span>:[],<span class=\"string\">\"recommendMovie\"</span>:[&#123;<span class=\"string\">\"imagePath\"</span>:<span class=\"string\">\"\\/program\\/gochiusa\\/image\\/34_pgi01_b.jpg\"</span>,<span class=\"string\">\"url\"</span>:<span class=\"string\">\"\\/program\\/gochiusa\\/\"</span>&#125;],<span class=\"string\">\"cm\"</span>:[],<span class=\"string\">\"allowExpand\"</span>:<span class=\"string\">\"false\"</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>就是个 json 而已，上 <a href=\"http://www.jsnice.org/\" target=\"_blank\" rel=\"noopener\">jsnice</a> 整理一下得：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">callback(&#123;</span><br><span class=\"line\">  <span class=\"string\">\"type\"</span> : <span class=\"string\">\"sound\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"thumbnailPath\"</span> : <span class=\"string\">\"/program/aldnoah/image/128_pgi01_m.jpg\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"moviePath\"</span> : &#123;</span><br><span class=\"line\">    <span class=\"string\">\"pc\"</span> : <span class=\"string\">\"http://onsen.b-ch.com/radio/aldnoah140712Zf8j.mp3\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"iPhone\"</span> : <span class=\"string\">\"http://onsen.b-ch.com/radio/aldnoah140712Zf8j.mp3\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Android\"</span> : <span class=\"string\">\"http://onsen.b-ch.com/radio/aldnoah140712Zf8j.mp3\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"title\"</span> : <span class=\"string\">\"\\u30a2\\u30eb\\u30c9\\u30ce\\u30a2\\u30fb\\u30e9\\u30b8\\u30aa\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"personality\"</span> : <span class=\"string\">\"\\u96e8\\u5bae\\u5929\\uff08\\u30a2\\u30bb\\u30a4\\u30e9\\u30e0\\u30fb\\u30f4\\u30a1\\u30fc\\u30b9\\u30fb\\u30a2\\u30ea\\u30e5\\u30fc\\u30b7\\u30a2 \\u5f79\\uff09 / \\u6c34\\u702c\\u3044\\u306e\\u308a\\uff08\\u30a8\\u30c7\\u30eb\\u30ea\\u30c3\\u30be \\u5f79\\uff09\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"guest\"</span> : <span class=\"string\">\"\"</span>,<span class=\"string\">\"update\"</span>:<span class=\"string\">\"2014.7.12\"</span>,<span class=\"string\">\"count\"</span>:<span class=\"string\">\"03\"</span>,<span class=\"string\">\"schedule\"</span>:<span class=\"string\">\"\\u6bce\\u9031\\u571f\\u66dc\\u65e524:30\\uff5e\\u66f4\\u65b0\"</span>,<span class=\"string\">\"optionText\"</span>:<span class=\"string\">\"\\u30a2\\u30cb\\u30d7\\u30ec\\u30c3\\u30af\\u30b9\"</span>,<span class=\"string\">\"mail\"</span>:<span class=\"string\">\"aldnoah@onsen.ag\"</span>,<span class=\"string\">\"copyright\"</span>:<span class=\"string\">\"\\u00a9Olympus Knights\\uff0fAniplex\\u30fbProject AZ\"</span>,<span class=\"string\">\"url\"</span>:<span class=\"string\">\"aldnoah\"</span>,<span class=\"string\">\"link\"</span>: [],<span class=\"string\">\"recommendGoods\"</span>: [],<span class=\"string\">\"recommendMovie\"</span>: [&#123;<span class=\"string\">\"imagePath\"</span>:<span class=\"string\">\"/program/gochiusa/image/34_pgi01_b.jpg\"</span>,<span class=\"string\">\"url\"</span>:<span class=\"string\">\"/program/gochiusa/\"</span>&#125;],<span class=\"string\">\"cm\"</span>: [],<span class=\"string\">\"allowExpand\"</span>:<span class=\"string\">\"false\"</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>看到第四行 <code>&quot;moviePath&quot;</code> 下的 <code>http://onsen.b-ch.com/radio/aldnoah140712Zf8j.mp3</code> 了吗？熟悉的 mp3 格式。</p>\n<p>文件位置格式是：<code>onsen.b-ch.com/radio/</code> + 节目名字 + 6 位日期 + 4 位随机字符 + <code>.mp3</code>。</p>\n<p>于是广播也 get だぜ～</p>\n<blockquote>\n<p>举了两个详细的例子，一些更简单的就不再详述了。只要你活用开发者工具，很容易就找到地址的。有的广播比如 Aniplex 旗下的动画，会做一个官网，查看网页的源代码就直接能找到音频的地址。</p>\n</blockquote>\n<p><a name=\"download\"></a></p>\n<h2 id=\"使用插件或工具下载\"><a href=\"#使用插件或工具下载\" class=\"headerlink\" title=\"使用插件或工具下载\"></a>使用插件或工具下载</h2><p>浏览器能帮我们做到很多事情。因为从网络上来的东西，最后都是交给浏览器来解析的（flash 这类内嵌的组件除外）。也就是说，浏览器是知道我们想保存的下来的资源的位置和内容的，只要告诉浏览器给我们就行了，这也就是比较早期的时候，一些教程教授的从缓存文件夹中复制出文件的技术基础。不过现代浏览器有插件，就不用那么复杂了。安装上了插件，会自动给你提取出网页中可能存在的多媒体文件（音乐 / 视频 / 图片 /…）。</p>\n<p>比如<a href=\"http://www.onsen.ag/\" target=\"_blank\" rel=\"noopener\">音泉</a></p>\n<p>随便点击一个节目，在播放的同时，能够捕捉多媒体的插件就抓到资源了。</p>\n<p><img src=\"http://i.imgur.com/bjjQzNC.jpg\" alt=\"抓到播放资源\"></p>\n<p>直接点击下载就 ok 了，容易吧。这些插件在 chrome 商店一搜一大堆，其他现代浏览器比如 FireFox 和 Opera 也是有这类插件。IE…… 我就不太清楚了。</p>\n<p>BTW，这个网站访问是没问题的，但是媒体资源例如 mp3 和 mp4 等是限定日本 IP 的，请自备梯子。</p>\n<p><a name=\"program\"></a></p>\n<h2 id=\"编写脚本\"><a href=\"#编写脚本\" class=\"headerlink\" title=\"编写脚本\"></a>编写脚本</h2><p>以下是比较高阶的使用，电脑小白可以跳过了。</p>\n<h3 id=\"为什么在已经能够下载媒体的情况下，还要写脚本？\"><a href=\"#为什么在已经能够下载媒体的情况下，还要写脚本？\" class=\"headerlink\" title=\"为什么在已经能够下载媒体的情况下，还要写脚本？\"></a>为什么在已经能够下载媒体的情况下，还要写脚本？</h3><p>~~ 装逼~~</p>\n<p>~~ 懒~~</p>\n<p>咳咳，不是啦，其实是使用脚本能够快速和自动化啦（诶偷懒好像说对了……</p>\n<p>鉴于访问外国网站的不稳定性（为了能截到博文中的漂亮的大图，我整个下午在不断地刷新……），这些广播网站经常是比较卡的。使用脚本能够只请求最小的资源就能提取出媒体的位置，比起每次打开网页快多了。当然你听一个两个广播还好，我要听十来个广播我是受不了的。如果能做到高度自动化，鼠标点两下，资源就自动躺在你面前了岂不妙哉？</p>\n<p>废话不多说，直接上代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># _*_ coding: utf-8 _*_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib2</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mms_extract</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    soup = BeautifulSoup(urllib2.urlopen(url))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> soup.select(<span class=\"string\">\"ref\"</span>)[<span class=\"number\">0</span>][<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">name_list = sys.argv[<span class=\"number\">1</span>].split(<span class=\"string\">\",\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> name_list:</span><br><span class=\"line\">    soup = BeautifulSoup(urllib2.urlopen(<span class=\"string\">u\"http://hibiki-radio.jp/description/&#123;name&#125;\"</span>.format(name=name), timeout=<span class=\"number\">30</span>))</span><br><span class=\"line\">    mms = soup.select(<span class=\"string\">\"div.hbkDescriptonContents embed\"</span>)[<span class=\"number\">0</span>][<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">    <span class=\"keyword\">print</span> mms_extract(mms)</span><br></pre></td></tr></table></figure>\n<p>这个是提取广播站響的广播音频地址，简单易懂吧？</p>\n<p>先通过请求地址 <code>http://hibiki-radio.jp/description / 节目名字</code> 来获得节目详细页面。还记得这里的地址吗？是在分析的过程得知的。</p>\n<p>注意这里获得到的网页文件只是一些代码和文字，<strong> 没有图片或者这个页面再请求的其他资源 </strong>。</p>\n<p>接着是用 BeautifulSoup 在这个页面中提取出 <code>&lt;embed&gt;</code> 标签中的 src 属性值，再请求一次那个 asx 文件，在 asx 文件中取到最终要得到的 mms 协议地址。</p>\n<p>使用的时候可以这样用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python hibiki.py 节目名字[, 节目名字]</span><br></pre></td></tr></table></figure>\n<p>而如果你想使用 rtmpdump 来下载，也不是不可能，但是思维就完全不一样。先来看看 rtmpdump 的使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rtmpdump -r <span class=\"string\">\"rtmpe://cp209391.edgefcs.net/ondemand/\"</span> -y <span class=\"string\">\"mp4:140614_imocyo_140614_imocyo\"</span> -o test.flv</span><br></pre></td></tr></table></figure>\n<p>重点是要得到 <code>-y</code> 参数里面的名字，这就需要你清楚节目更新的日期和节目名字的代号。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># _*_ coding: utf-8 _*_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> date</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_date</span><span class=\"params\">(delta=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">        formatted date, i.e. 140505</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span>format =<span class=\"string\">\"%y%m%d\"</span></span><br><span class=\"line\">    day = date.today()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> delta != <span class=\"number\">0</span> <span class=\"keyword\">and</span> isinstance(delta, int):</span><br><span class=\"line\">        day = day + timedelta(days=delta)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> day.strftime(format)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_download_command</span><span class=\"params\">(bangumi, output_name)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"rtmpdump -r \\\"rtmpe://cp209391.edgefcs.net/ondemand/\\\"-y \\\"mp4:&#123;date&#125;_&#123;bangumi&#125;_&#123;date&#125;_&#123;bangumi&#125;\\\"-o &#123;output&#125;.flv\"</span>.format(bangumi=bangumi, date=get_date(), output=output_name)</span><br></pre></td></tr></table></figure>\n<p><a name=\"some-website\"></a></p>\n<h2 id=\"福利：一些广播网站地址\"><a href=\"#福利：一些广播网站地址\" class=\"headerlink\" title=\"福利：一些广播网站地址\"></a>福利：一些广播网站地址</h2><p><a href=\"http://www.geek-p.com/\" target=\"_blank\" rel=\"noopener\">インターネットラジオ ·TV の番組表</a></p>\n<p><a href=\"http://hibiki-radio.jp/\" target=\"_blank\" rel=\"noopener\">響 - HiBiKi Radio Station -</a></p>\n<p><a href=\"http://www.onsen.ag/\" target=\"_blank\" rel=\"noopener\">インターネットラジオステーション＜音泉＞</a></p>\n<p><a href=\"http://lantis-net.com/\" target=\"_blank\" rel=\"noopener\">Lantis web radio</a></p>\n<p><a href=\"http://www.agqr.jp/\" target=\"_blank\" rel=\"noopener\">超！A&amp;G | AM1134kHz 文化放送 JOQR</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>近来一直有在网上听一些动画的广播以及网络广播。而因为广播每周都有放送，如果错过了这周，下一周就没得再听了（有些可以付费重新听，相当于不可能再听了）。那么本周的广播其实可以先保存下来，等到有时间的时候再听。经过了一段时间的摸索，的确摸到了一些门路，于是总结一下整个流程的技术。这些广播实质上就是一些网络媒体，和平常在音乐网站听音乐等其实是一样的，因此这些获取方法应该也基本适用。</p>\n<ol>\n<li><a href=\"#use-and-analyze-hibiki\">边用边分析——響篇</a></li>\n<li><a href=\"#extract-hibiki\">提取媒体位置——響篇</a></li>\n<li><a href=\"#tool\">使用特定的工具</a></li>\n<li><a href=\"#another-example-onsen\">另一个例子——音泉篇</a></li>\n<li><a href=\"#download\">使用插件或工具下载</a></li>\n<li><a href=\"#program\">编写脚本</a></li>\n<li><a href=\"#some-website\">福利</a></li>\n</ol>\n<p><a name=\"use-and-analyze-hibiki\"></a></p>\n<h2 id=\"边用边分析——響篇\"><a href=\"#边用边分析——響篇\" class=\"headerlink\" title=\"边用边分析——響篇\"></a>边用边分析——響篇</h2><p>下面以我经常去的 <a href=\"http://hibiki-radio.jp/\" target=\"_blank\" rel=\"noopener\">響 - HiBiKi Radio Station -</a> 为例子。</p>\n<p>打开网站。</p>\n<p><img src=\"http://i.imgur.com/xoce2hN.jpg\" alt=\"网站状况\"></p>\n<p>大概浏览一下整个页面，可以看到分成几个区域，新闻区、播放器区、节目列表区、广告区。</p>\n<p><img src=\"http://i.imgur.com/cPU6MLI.jpg\" alt=\"分区\"></p>\n<p>新闻区会更新广播的信息，一般是得知新广播推出的来源。</p>\n<p>播放器区，这个是重点。一般看播放器就大概知道获取广播的难度。</p>\n<p>节目列表区，这种涉及和网站交互的区域是搞懂网站架构的好地方。</p>\n<p>广告区，并非没用，有时会出现一些新广播或者新广播站的消息。</p>\n<p>随便点一个广播，就这个吧，妹ちょ。らじお。</p>\n<p>按 F12 打开 chrome 的开发者工具。什么？你不是在用 chrome？那你自己看着办。</p>\n<p><img src=\"http://i.imgur.com/q9Ntgky.png\" alt=\"开发者工具\"></p>\n<p>来看看控制台输出了什么？（红色的是资源获取失败，是我的网络原因，可以忽略）</p>\n<p>看起来是一些调试信息。这应该不是 javascript 输出的信息，一般 js 代码输出的信息在右边会有代码行数提示。</p>\n<p>看到两行比较感兴趣的输出：</p>\n<ol>\n<li>connectiong Stream-&gt;rtmpe://cp209391.edgefcs.net/ondemand/</li>\n<li>DetailsLoad-&gt;url<a href=\"http://image.hibiki-radio.jp/uploads/data/channel/imocyo/description.xml\" target=\"_blank\" rel=\"noopener\">http://image.hibiki-radio.jp/uploads/data/channel/imocyo/description.xml</a></li>\n</ol>\n<p>第一个有单词 stream，而且后面的网址使用 rtmpe 协议。（什么协议，我没看过……）</p>\n<p>第二个看到一个 xml 文件位置，url 中有 imocyo，是广播题目妹ちょ的罗马拼写，看来就是跟广播有关的东西，点进去看看。</p>\n<p>可以看到这么一些 xml 文件内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;data&gt;</span><br><span class=\"line\">&lt;title &gt; 妹ちょ。らじお&lt;/title&gt;</span><br><span class=\"line\">&lt;cast&gt;</span><br><span class=\"line\">&lt;name &gt; 橋本ちなみ&lt;/name&gt;</span><br><span class=\"line\">&lt;name &gt; 金元寿子&lt;/name&gt;</span><br><span class=\"line\">&lt;/cast&gt;</span><br><span class=\"line\">&lt;outline&gt;</span><br><span class=\"line\">絶賛放送中の TV アニメ『最近、妹のようすがちょっとおかしいんだが。』のラジオ番組！ 神前美月役の橋本ちなみさんと桐谷雪那役の金元寿子さんが番組を担当。 第 5 回より「妹ちょ。らじお」は毎週土曜日の更新へ変更となります。 ラジオ大阪 OBC [1314kHz]では毎週金曜日 24 時 30 分～25 時にて放送！</span><br><span class=\"line\">&lt;/outline&gt;</span><br><span class=\"line\">&lt;link&gt;http://hibiki-radio.jp/description/imocyo&lt;/link&gt;</span><br><span class=\"line\">&lt;/data&gt;</span><br></pre></td></tr></table></figure>\n<p>看起来就是一些配置信息。</p>\n<p>回头再来看首页的播放器，右边的是不是就是 xml 文件里面的内容啊？看来这个 xml 就是播放器请求的了。</p>\n<p>顺手右击一下播放器，看看弹出的菜单。嗯，看来是 flash 了，可能就比较麻烦了。</p>\n<p><img src=\"http://i.imgur.com/gdct7EK.jpg\" alt=\"播放器信息\"></p>\n<p>为什么说是 flash 就比较麻烦呢？因为 flash 作为组件，内部是对浏览器屏蔽的，也就是说它搞了什么，浏览器基本是不清楚的，包括它向哪里请求了什么。通常情况下，flash 请求的是流媒体，很多是没有缓存的。</p>\n<p>比较幸运的是这个 flash 自己输出了一些调试信息，也算有迹可寻。</p>\n<blockquote>\n<p>如果连控制台输出都没有，那怎么办呢？其中一种方法是可以用硕思闪客精灵反汇编这个 flash 的 swf 文件，在文件内部找 url。这个方法可能涉及到版权或法律问题，就不在这叙述。另外一种方法操作上比较难，就是监听网卡。这个算是终极手段，因为所有的网络进出信息都可以捕捉到，但是技术要求也是最高的（我自己尝试过，收获不多就另辟蹊径了）。</p>\n</blockquote>\n<p>ok，现在保持控制台打开的状况，点击播放。</p>\n<p>听到了橋本ちなみ和金元寿子的声音。</p>\n<p>再看控制台，哦真给力，呕吐一样输出一堆东西。</p>\n<p><img src=\"http://i.imgur.com/3yMoQg7.png\" alt=\"播放时输出\"></p>\n<p>显然最有用的就是那一行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stream-&gt;mp4:140614_imocyo_140614_imocyo.mp4?di=910&amp;si=609&amp;pi=2806&amp;gi=6498&amp;gc=6&amp;bi=57971&amp;bc=imocyo&amp;ei=717045&amp;ec=140614_imocyo&amp;vi=4102269&amp;vc=140614_imocyo&amp;msi=516&amp;mc=&amp;ni=1625?1405751016018</span><br></pre></td></tr></table></figure>\n<p>一看到 mp4，感觉已经摸到了这个资源了，而且名字很明显是 <code>140614_imocyo_140614_imocyo.mp4</code>，后面的形似? xx=xxx&amp;xx=xxx 的东西是一些请求的参数。</p>\n<p>这名字，一看就知道格式是：<code>日期_名字_日期_名字_.mp4</code>，也就是说 14 年 6 月 14 日的妹ちょ广播。这些信息说不定有用，先记录下来。</p>\n<p>尝试和前面的网址结合起来得到 <code>cp209391.edgefcs.net/ondemand/140614_imocyo_140614_imocyo.mp4</code>，放到地址栏访问一下，啥都没有。嗯，预料之内，有可能是协议问题，也有可能是路径不对。</p>\n<p>上网搜索一下 <code>rtmpe 协议</code>，发现叫实时消息传送协议协议，是 Adobe 公司的（好吧又是你）。搜索出来的结果基本都是有关怎么下载这些协议的流媒体的。基本就是介绍什么软件什么软件的，个人比较讨厌这些使用乱七八糟软件的方法，而且基本也是不凑效的。</p>\n<p>将关键字改为 <code>download rtmpe</code> 一搜，发现一个 <code>rtmpdump</code> 的命令行工具，声称通杀这类协议。但是一看<a href=\"https://rtmpdump.mplayerhq.hu/rtmpdump.1.html\" target=\"_blank\" rel=\"noopener\">文档</a>，嗯，暂时不想深究。看看有没有其他方法吧。</p>\n<p>留意到播放器里面有个“详细”，点击一下跳转到一个网页 <code>http://hibiki-radio.jp/description/imocyo</code>。</p>\n<p><img src=\"http://i.imgur.com/hHfFJoI.jpg\" alt=\"节目页\"></p>\n<p>看来就是个节目的详细介绍页面，估计网址格式是：<code>hibiki-radio.jp/description / 节目名字</code>。</p>\n<p>拉到最下面，终于发现突破口！</p>\n<p><img src=\"http://i.imgur.com/YYfvxB1.jpg\" alt=\"WMP\"></p>\n<p><a name=\"extract-hibiki\"></a></p>\n<h2 id=\"提取媒体位置——響篇\"><a href=\"#提取媒体位置——響篇\" class=\"headerlink\" title=\"提取媒体位置——響篇\"></a>提取媒体位置——響篇</h2><p>页面中内嵌了一个 WMP（Windows Media Player）组件，虽然这个也是跟 flash 一样的组件，但是并没有 flash 那样让人讨厌。根据我的经验，WMP 播放的媒体是可以手动提取的。现在就来试试。</p>\n<p>打开开发者工具，审查这个插件元素，可以看到是一个 <code>&lt;embed&gt;</code> 标签，属性 src 就是一个网址 <code>http://www2.uliza.jp/IF/WMVDisplay.aspx?clientid=910&amp;playerid=2869&amp;episodeid=140614_imocyo&amp;videoid=140614_imocyo-wm&amp;vid=4102271&amp;memberid=&amp;membersiteid=516&amp;nickname=&amp;sex=&amp;birthday=&amp;local=&amp;mode=1</code>。</p>\n<p><img src=\"http://i.imgur.com/6ISMvV9.jpg\" alt=\"嵌入\"></p>\n<p>点击访问发现下载了一个文件 <code>140614_imocyo-wm.asx</code>。</p>\n<p>用记事本打开，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ASX version = &quot;3.0&quot;&gt;&lt;entry&gt;&lt;title&gt;[毎]140614_妹ちょ。らじお #23&lt;/title&gt;&lt;Ref href =&quot;mms://wms.uliza.jp/uliza/910/140614_imocyo_140614_imocyo-wm.wma&quot;/&gt;&lt;/entry&gt;&lt;/ASX&gt;</span><br></pre></td></tr></table></figure>\n<p>出来了！看到那个 <code>mms://wms.uliza.jp/uliza/910/140614_imocyo_140614_imocyo-wm.wma</code> 了吗？wma 就是一个音乐文件。mms 协议的文件是能够使用迅雷来下载的。Mission completed.</p>\n<p><a name=\"tool\"></a></p>\n<h2 id=\"使用特定的工具\"><a href=\"#使用特定的工具\" class=\"headerlink\" title=\"使用特定的工具\"></a>使用特定的工具</h2><p>在分析的时候不是发现了一个叫 <code>rtmpdump</code> 的命令行工具吗？现在来看看怎么使用。</p>\n<p>尝试以各种关键字组合起来搜索，比如 <code>download rtmpe mp4</code>、<code>how to downlaod rtmpe with rtmpdump</code>……</p>\n<p>最后得到一个可用的命令：<code>rtmpdump -r &quot;rtmpe://cp209391.edgefcs.net/ondemand/&quot; -y &quot;mp4:140614_imocyo_140614_imocyo&quot; -o test.flv</code></p>\n<p>可以看到，其实就是组合了一直分析下来的网址。下图就是正在下载的窗口。</p>\n<p><img src=\"http://i.imgur.com/KAeGdol.png\" alt=\"rtmp 下载\"></p>\n<p>Boom! 这可比乱七八糟的软件好用多了。</p>\n<p><a name=\"another-example-onsen\"></a></p>\n<h2 id=\"另一个例子——音泉篇\"><a href=\"#另一个例子——音泉篇\" class=\"headerlink\" title=\"另一个例子——音泉篇\"></a>另一个例子——音泉篇</h2><p>现在再来看另外一个例子，另一个广播比较多的网站，<a href=\"http://www.onsen.ag/\" target=\"_blank\" rel=\"noopener\">音泉</a>。</p>\n<p>先看一下网站，嗯比 hibiki 好看多了。</p>\n<p><img src=\"http://i.imgur.com/ftwHPQP.jpg\" alt=\"音泉整站\"></p>\n<p>网站的区域分布也跟 hibiki 大同小异。播放器也是 flash。</p>\n<p><img src=\"http://i.imgur.com/HwFI84S.jpg\" alt=\"音泉播放\"></p>\n<p>播放之后看不到什么输出，只是看到一个请求：<code>http://www.onsen.ag/data/api/getMovieInfo/aldnoah?callback=callback&amp;_=1405758148110</code>。</p>\n<p>可以看得出格式是：<code>www.onsen.ag/data/api/getMovieInfo / 节目名字</code>。后面的参数是代码回调和当前的时间。</p>\n<p>直接访问这个网址，得到：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">callback(&#123;<span class=\"string\">\"type\"</span>:<span class=\"string\">\"sound\"</span>,<span class=\"string\">\"thumbnailPath\"</span>:<span class=\"string\">\"\\/program\\/aldnoah\\/image\\/128_pgi01_m.jpg\"</span>,<span class=\"string\">\"moviePath\"</span>:&#123;<span class=\"string\">\"pc\"</span>:<span class=\"string\">\"http:\\/\\/onsen.b-ch.com\\/radio\\/aldnoah140712Zf8j.mp3\"</span>,<span class=\"string\">\"iPhone\"</span>:<span class=\"string\">\"http:\\/\\/onsen.b-ch.com\\/radio\\/aldnoah140712Zf8j.mp3\"</span>,<span class=\"string\">\"Android\"</span>:<span class=\"string\">\"http:\\/\\/onsen.b-ch.com\\/radio\\/aldnoah140712Zf8j.mp3\"</span>&#125;,<span class=\"string\">\"title\"</span>:<span class=\"string\">\"\\u30a2\\u30eb\\u30c9\\u30ce\\u30a2\\u30fb\\u30e9\\u30b8\\u30aa\"</span>,<span class=\"string\">\"personality\"</span>:<span class=\"string\">\"\\u96e8\\u5bae\\u5929\\uff08\\u30a2\\u30bb\\u30a4\\u30e9\\u30e0\\u30fb\\u30f4\\u30a1\\u30fc\\u30b9\\u30fb\\u30a2\\u30ea\\u30e5\\u30fc\\u30b7\\u30a2 \\u5f79\\uff09 \\/ \\u6c34\\u702c\\u3044\\u306e\\u308a\\uff08\\u30a8\\u30c7\\u30eb\\u30ea\\u30c3\\u30be \\u5f79\\uff09\"</span>,<span class=\"string\">\"guest\"</span>:<span class=\"string\">\"\"</span>,<span class=\"string\">\"update\"</span>:<span class=\"string\">\"2014.7.12\"</span>,<span class=\"string\">\"count\"</span>:<span class=\"string\">\"03\"</span>,<span class=\"string\">\"schedule\"</span>:<span class=\"string\">\"\\u6bce\\u9031\\u571f\\u66dc\\u65e524:30\\uff5e\\u66f4\\u65b0\"</span>,<span class=\"string\">\"optionText\"</span>:<span class=\"string\">\"\\u30a2\\u30cb\\u30d7\\u30ec\\u30c3\\u30af\\u30b9\"</span>,<span class=\"string\">\"mail\"</span>:<span class=\"string\">\"aldnoah@onsen.ag\"</span>,<span class=\"string\">\"copyright\"</span>:<span class=\"string\">\"\\u00a9Olympus Knights\\uff0fAniplex\\u30fbProject AZ\"</span>,<span class=\"string\">\"url\"</span>:<span class=\"string\">\"aldnoah\"</span>,<span class=\"string\">\"link\"</span>:[],<span class=\"string\">\"recommendGoods\"</span>:[],<span class=\"string\">\"recommendMovie\"</span>:[&#123;<span class=\"string\">\"imagePath\"</span>:<span class=\"string\">\"\\/program\\/gochiusa\\/image\\/34_pgi01_b.jpg\"</span>,<span class=\"string\">\"url\"</span>:<span class=\"string\">\"\\/program\\/gochiusa\\/\"</span>&#125;],<span class=\"string\">\"cm\"</span>:[],<span class=\"string\">\"allowExpand\"</span>:<span class=\"string\">\"false\"</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>就是个 json 而已，上 <a href=\"http://www.jsnice.org/\" target=\"_blank\" rel=\"noopener\">jsnice</a> 整理一下得：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">callback(&#123;</span><br><span class=\"line\">  <span class=\"string\">\"type\"</span> : <span class=\"string\">\"sound\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"thumbnailPath\"</span> : <span class=\"string\">\"/program/aldnoah/image/128_pgi01_m.jpg\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"moviePath\"</span> : &#123;</span><br><span class=\"line\">    <span class=\"string\">\"pc\"</span> : <span class=\"string\">\"http://onsen.b-ch.com/radio/aldnoah140712Zf8j.mp3\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"iPhone\"</span> : <span class=\"string\">\"http://onsen.b-ch.com/radio/aldnoah140712Zf8j.mp3\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"Android\"</span> : <span class=\"string\">\"http://onsen.b-ch.com/radio/aldnoah140712Zf8j.mp3\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"title\"</span> : <span class=\"string\">\"\\u30a2\\u30eb\\u30c9\\u30ce\\u30a2\\u30fb\\u30e9\\u30b8\\u30aa\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"personality\"</span> : <span class=\"string\">\"\\u96e8\\u5bae\\u5929\\uff08\\u30a2\\u30bb\\u30a4\\u30e9\\u30e0\\u30fb\\u30f4\\u30a1\\u30fc\\u30b9\\u30fb\\u30a2\\u30ea\\u30e5\\u30fc\\u30b7\\u30a2 \\u5f79\\uff09 / \\u6c34\\u702c\\u3044\\u306e\\u308a\\uff08\\u30a8\\u30c7\\u30eb\\u30ea\\u30c3\\u30be \\u5f79\\uff09\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"guest\"</span> : <span class=\"string\">\"\"</span>,<span class=\"string\">\"update\"</span>:<span class=\"string\">\"2014.7.12\"</span>,<span class=\"string\">\"count\"</span>:<span class=\"string\">\"03\"</span>,<span class=\"string\">\"schedule\"</span>:<span class=\"string\">\"\\u6bce\\u9031\\u571f\\u66dc\\u65e524:30\\uff5e\\u66f4\\u65b0\"</span>,<span class=\"string\">\"optionText\"</span>:<span class=\"string\">\"\\u30a2\\u30cb\\u30d7\\u30ec\\u30c3\\u30af\\u30b9\"</span>,<span class=\"string\">\"mail\"</span>:<span class=\"string\">\"aldnoah@onsen.ag\"</span>,<span class=\"string\">\"copyright\"</span>:<span class=\"string\">\"\\u00a9Olympus Knights\\uff0fAniplex\\u30fbProject AZ\"</span>,<span class=\"string\">\"url\"</span>:<span class=\"string\">\"aldnoah\"</span>,<span class=\"string\">\"link\"</span>: [],<span class=\"string\">\"recommendGoods\"</span>: [],<span class=\"string\">\"recommendMovie\"</span>: [&#123;<span class=\"string\">\"imagePath\"</span>:<span class=\"string\">\"/program/gochiusa/image/34_pgi01_b.jpg\"</span>,<span class=\"string\">\"url\"</span>:<span class=\"string\">\"/program/gochiusa/\"</span>&#125;],<span class=\"string\">\"cm\"</span>: [],<span class=\"string\">\"allowExpand\"</span>:<span class=\"string\">\"false\"</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>看到第四行 <code>&quot;moviePath&quot;</code> 下的 <code>http://onsen.b-ch.com/radio/aldnoah140712Zf8j.mp3</code> 了吗？熟悉的 mp3 格式。</p>\n<p>文件位置格式是：<code>onsen.b-ch.com/radio/</code> + 节目名字 + 6 位日期 + 4 位随机字符 + <code>.mp3</code>。</p>\n<p>于是广播也 get だぜ～</p>\n<blockquote>\n<p>举了两个详细的例子，一些更简单的就不再详述了。只要你活用开发者工具，很容易就找到地址的。有的广播比如 Aniplex 旗下的动画，会做一个官网，查看网页的源代码就直接能找到音频的地址。</p>\n</blockquote>\n<p><a name=\"download\"></a></p>\n<h2 id=\"使用插件或工具下载\"><a href=\"#使用插件或工具下载\" class=\"headerlink\" title=\"使用插件或工具下载\"></a>使用插件或工具下载</h2><p>浏览器能帮我们做到很多事情。因为从网络上来的东西，最后都是交给浏览器来解析的（flash 这类内嵌的组件除外）。也就是说，浏览器是知道我们想保存的下来的资源的位置和内容的，只要告诉浏览器给我们就行了，这也就是比较早期的时候，一些教程教授的从缓存文件夹中复制出文件的技术基础。不过现代浏览器有插件，就不用那么复杂了。安装上了插件，会自动给你提取出网页中可能存在的多媒体文件（音乐 / 视频 / 图片 /…）。</p>\n<p>比如<a href=\"http://www.onsen.ag/\" target=\"_blank\" rel=\"noopener\">音泉</a></p>\n<p>随便点击一个节目，在播放的同时，能够捕捉多媒体的插件就抓到资源了。</p>\n<p><img src=\"http://i.imgur.com/bjjQzNC.jpg\" alt=\"抓到播放资源\"></p>\n<p>直接点击下载就 ok 了，容易吧。这些插件在 chrome 商店一搜一大堆，其他现代浏览器比如 FireFox 和 Opera 也是有这类插件。IE…… 我就不太清楚了。</p>\n<p>BTW，这个网站访问是没问题的，但是媒体资源例如 mp3 和 mp4 等是限定日本 IP 的，请自备梯子。</p>\n<p><a name=\"program\"></a></p>\n<h2 id=\"编写脚本\"><a href=\"#编写脚本\" class=\"headerlink\" title=\"编写脚本\"></a>编写脚本</h2><p>以下是比较高阶的使用，电脑小白可以跳过了。</p>\n<h3 id=\"为什么在已经能够下载媒体的情况下，还要写脚本？\"><a href=\"#为什么在已经能够下载媒体的情况下，还要写脚本？\" class=\"headerlink\" title=\"为什么在已经能够下载媒体的情况下，还要写脚本？\"></a>为什么在已经能够下载媒体的情况下，还要写脚本？</h3><p>~~ 装逼~~</p>\n<p>~~ 懒~~</p>\n<p>咳咳，不是啦，其实是使用脚本能够快速和自动化啦（诶偷懒好像说对了……</p>\n<p>鉴于访问外国网站的不稳定性（为了能截到博文中的漂亮的大图，我整个下午在不断地刷新……），这些广播网站经常是比较卡的。使用脚本能够只请求最小的资源就能提取出媒体的位置，比起每次打开网页快多了。当然你听一个两个广播还好，我要听十来个广播我是受不了的。如果能做到高度自动化，鼠标点两下，资源就自动躺在你面前了岂不妙哉？</p>\n<p>废话不多说，直接上代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># _*_ coding: utf-8 _*_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib2</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mms_extract</span><span class=\"params\">(url)</span>:</span></span><br><span class=\"line\">    soup = BeautifulSoup(urllib2.urlopen(url))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> soup.select(<span class=\"string\">\"ref\"</span>)[<span class=\"number\">0</span>][<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">name_list = sys.argv[<span class=\"number\">1</span>].split(<span class=\"string\">\",\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> name <span class=\"keyword\">in</span> name_list:</span><br><span class=\"line\">    soup = BeautifulSoup(urllib2.urlopen(<span class=\"string\">u\"http://hibiki-radio.jp/description/&#123;name&#125;\"</span>.format(name=name), timeout=<span class=\"number\">30</span>))</span><br><span class=\"line\">    mms = soup.select(<span class=\"string\">\"div.hbkDescriptonContents embed\"</span>)[<span class=\"number\">0</span>][<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">    <span class=\"keyword\">print</span> mms_extract(mms)</span><br></pre></td></tr></table></figure>\n<p>这个是提取广播站響的广播音频地址，简单易懂吧？</p>\n<p>先通过请求地址 <code>http://hibiki-radio.jp/description / 节目名字</code> 来获得节目详细页面。还记得这里的地址吗？是在分析的过程得知的。</p>\n<p>注意这里获得到的网页文件只是一些代码和文字，<strong> 没有图片或者这个页面再请求的其他资源 </strong>。</p>\n<p>接着是用 BeautifulSoup 在这个页面中提取出 <code>&lt;embed&gt;</code> 标签中的 src 属性值，再请求一次那个 asx 文件，在 asx 文件中取到最终要得到的 mms 协议地址。</p>\n<p>使用的时候可以这样用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python hibiki.py 节目名字[, 节目名字]</span><br></pre></td></tr></table></figure>\n<p>而如果你想使用 rtmpdump 来下载，也不是不可能，但是思维就完全不一样。先来看看 rtmpdump 的使用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rtmpdump -r <span class=\"string\">\"rtmpe://cp209391.edgefcs.net/ondemand/\"</span> -y <span class=\"string\">\"mp4:140614_imocyo_140614_imocyo\"</span> -o test.flv</span><br></pre></td></tr></table></figure>\n<p>重点是要得到 <code>-y</code> 参数里面的名字，这就需要你清楚节目更新的日期和节目名字的代号。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># _*_ coding: utf-8 _*_</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> date</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_date</span><span class=\"params\">(delta=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">    :return:</span></span><br><span class=\"line\"><span class=\"string\">        formatted date, i.e. 140505</span></span><br><span class=\"line\"><span class=\"string\">    \"\"\"</span>format =<span class=\"string\">\"%y%m%d\"</span></span><br><span class=\"line\">    day = date.today()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> delta != <span class=\"number\">0</span> <span class=\"keyword\">and</span> isinstance(delta, int):</span><br><span class=\"line\">        day = day + timedelta(days=delta)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> day.strftime(format)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_download_command</span><span class=\"params\">(bangumi, output_name)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"rtmpdump -r \\\"rtmpe://cp209391.edgefcs.net/ondemand/\\\"-y \\\"mp4:&#123;date&#125;_&#123;bangumi&#125;_&#123;date&#125;_&#123;bangumi&#125;\\\"-o &#123;output&#125;.flv\"</span>.format(bangumi=bangumi, date=get_date(), output=output_name)</span><br></pre></td></tr></table></figure>\n<p><a name=\"some-website\"></a></p>\n<h2 id=\"福利：一些广播网站地址\"><a href=\"#福利：一些广播网站地址\" class=\"headerlink\" title=\"福利：一些广播网站地址\"></a>福利：一些广播网站地址</h2><p><a href=\"http://www.geek-p.com/\" target=\"_blank\" rel=\"noopener\">インターネットラジオ ·TV の番組表</a></p>\n<p><a href=\"http://hibiki-radio.jp/\" target=\"_blank\" rel=\"noopener\">響 - HiBiKi Radio Station -</a></p>\n<p><a href=\"http://www.onsen.ag/\" target=\"_blank\" rel=\"noopener\">インターネットラジオステーション＜音泉＞</a></p>\n<p><a href=\"http://lantis-net.com/\" target=\"_blank\" rel=\"noopener\">Lantis web radio</a></p>\n<p><a href=\"http://www.agqr.jp/\" target=\"_blank\" rel=\"noopener\">超！A&amp;G | AM1134kHz 文化放送 JOQR</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"http://i.imgur.com/xoce2hN.jpg","popularPost_tmp_gaData":{"updated":"Sat Jul 19 2014 19:13:07 GMT+0800 (China Standard Time)","title":"如何保存一些网络广播","path":"how-to-save-internet-radio/","eyeCatchImage":"http://i.imgur.com/xoce2hN.jpg","excerpt":null,"date":"2014-07-19T11:05:47.000Z","pv":0,"totalPV":0,"categories":"技术 > 黑客 > 杂谈 > 编程语言 > python","tags":["python","script","spider","scraper","bytalk"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":4745},{"title":"配合 angular 和 angular-material 来开发基于 electron 的应用 · 0-- 前言","id":"42","updated":"2015-10-20T00:28:04.000Z","date":"2015-06-04T15:02:37.000Z","_content":"\n## Electron\n\nElectron 是什么？它之前的名字是 Atom Shell，是 Github 开发的结合了 io.js 和 chromium 的跨平台桌面应用框架。Github 自己出的编辑器 Atom 以及微软出的编辑器 VSCode 都是基于这个框架。\n\n众所周知，Google chrome 就是基于 chromium 而发展出来的一款优秀的浏览器。因其出色的体验和网页解析性能，所有国内出产的 < del > 山寨 </del > 浏览器 / 双核浏览器，无不选用了 chrome 作为内核。所以在网页解析渲染方面，使用 chromium 是极其正确的选择。\n\n那跟平常的桌面应用构建，使用 Electron 又有什么优势呢？\n\n普通的桌面应用构建，比较成熟的语言不外乎 C/C++、Java、C#、Python 等。然而 C/C++ 易学难精，即使其 GUI 框架有 MFC、Qt、KDE 等众，也是极难快速开发；Java 的 GUI 烂得不提也罢；C# 极有可能成为以后霸主，然而还在跨平台表现上有所欠缺；Python 则是个人喜好关系顺带一提，其实很少作为 GUI 主力语言被使用。（当然你可以阅读本人的另一个 [有关 python 和 Qt 构建桌面应用的系列][1]）\n\nElectron 则是使用了 Javascript 作为主力语言，并且为其加上了原生支持 html5 和 CSS3 的浏览器。从 GUI 构建来说，使用 html 和 css 的网页构建显然更加简单，成熟的工具和技术数不胜数；而作为桌面应用着重依赖的 IO、进程和网络通信模块等则由支持 ES6 的 io.js 提供，这样前端后端均采用 Javascript 语言，大大降低技术复杂性。\n\n[1]: http://blog.e10t.net/python-with-qt-application-development-catalogue/\n\n## 与 NW.js（旧名 node-webkit）的异同\n\n如果你有经常关注前端的消息，那么一定听说过一个国人开发的 GUI 框架：node-webkit。然后一看到 Electron，就会皱皱眉头：这不就是 node-webkit 嘛！\n\n然而，Electron 和 node-webkit 并不一样，其 github 项目上有详细的对比，[链接][2]。\n\n就个人理解来说，NW.js 偏向网页主导，是一个加上了 node.js 的浏览器；Electron 则是 javascript 主导，是 io.js 加上了一个 chromium。\n\n> 准确来说，Electron 只是选择了网页作为 GUI，并非为 GUI 绑定了 javascript。在 Electron 文档的 [Quick start][2] 中很明确地指出「It doesn't mean Electron is a JavaScript binding to GUI libraries. Instead, Electron uses web pages as its GUI, so you could also see it as a minimal Chromium browser, controlled by JavaScript.」\n\n在听说了 node-webkit 之后，我曾经上手把玩了一下，当时也是惊讶于其结合了浏览器内核而得到的强大表现力。因为自己在前端方面有一点技术，所以在编写界面的过程中感觉非常舒服。不过我也留意到其在软件方面的能力明显有比较大的欠缺，除了能读写文件外似乎没有什么亮点。（当然不排除在改名为 NW.js 后会加入了更多功能的可能性）\n\n总之，NW.js 更像是将网页打包成应用，而 Electron 则是实际开发的应用。\n\n[2]: https://github.com/atom/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\n\n[3]: https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md\n\n## angular 和 angular material\n\n如果要将网页设计应用到软件界面开发上，那么一些 MVC 框架或 UI 框架就比较适合。MVC 框架中比较有名的是 knockout 和 Backbone，而 UI 框架，则是 reactjs、angularjs 和 polymer 最为著名。国产的还有 avalon。\n\n那么为什么选 angular 呢？因为 angular 的理念比较符合开发网页应用，更重要的是有 angular material 这样一个比较能使用的 UI 主题。相比之下，knockout 和 Backbone 功能太弱，reactjs 则是太激进（一开始我是选 reactjs 的，但是一番尝试之后还是放弃了），polymer 则未作深入了解。\n\n不过，就像 Electron 只是选用了网页作为呈现 GUI 的方式，那么在编写基于 Electron 的应用的时候，GUI 框架的选择其实并非固定死的，如有必要或者个人喜好，转而使用 polymer 或者 reactjs 也未尝不可。\n\n## 本系列的目的\n\n如果有看过鄙人写的 [python × Qt 应用开发系列][1]，那么一定知道本人的教程都偏向实践，喜欢实际解释代码和一定程度地搞清楚技术的细枝末节，而非跟着网上一搜一大把的英文教程或者官方文档演示一篇后以近乎翻译一般地写出所谓的 “教程”。官方文档就摆在那，谁不会 RTFM？\n\n在本系列中，鄙人同样会以记录一个应用的开发流程的形式来呈现成功（或者说，可行）的开发方式。有时会有大量的代码，有时又会有长篇的理论讨论，有时又会有大段的思维解释，希望读者能耐心读下去。","source":"_posts/build-application-with-angular-and-ng-material-based-on-electron/配合-angular-和-angular-material-来开发基于-electron-的应用-·-0-前言.md","raw":"---\ntitle: 配合 angular 和 angular-material 来开发基于 electron 的应用 · 0-- 前言\ncategories:\n  - [技术, electron]\n  - [编程语言, javascript]\ntags: [javascript, angularjs, angular-material, electron]\npermalink: build-application-with-angular-and-ng-material-based-on-electron-0-preface\nid: 42\nupdated: '2015-10-20 08:28:04'\ndate: 2015-06-04 23:02:37\n---\n\n## Electron\n\nElectron 是什么？它之前的名字是 Atom Shell，是 Github 开发的结合了 io.js 和 chromium 的跨平台桌面应用框架。Github 自己出的编辑器 Atom 以及微软出的编辑器 VSCode 都是基于这个框架。\n\n众所周知，Google chrome 就是基于 chromium 而发展出来的一款优秀的浏览器。因其出色的体验和网页解析性能，所有国内出产的 < del > 山寨 </del > 浏览器 / 双核浏览器，无不选用了 chrome 作为内核。所以在网页解析渲染方面，使用 chromium 是极其正确的选择。\n\n那跟平常的桌面应用构建，使用 Electron 又有什么优势呢？\n\n普通的桌面应用构建，比较成熟的语言不外乎 C/C++、Java、C#、Python 等。然而 C/C++ 易学难精，即使其 GUI 框架有 MFC、Qt、KDE 等众，也是极难快速开发；Java 的 GUI 烂得不提也罢；C# 极有可能成为以后霸主，然而还在跨平台表现上有所欠缺；Python 则是个人喜好关系顺带一提，其实很少作为 GUI 主力语言被使用。（当然你可以阅读本人的另一个 [有关 python 和 Qt 构建桌面应用的系列][1]）\n\nElectron 则是使用了 Javascript 作为主力语言，并且为其加上了原生支持 html5 和 CSS3 的浏览器。从 GUI 构建来说，使用 html 和 css 的网页构建显然更加简单，成熟的工具和技术数不胜数；而作为桌面应用着重依赖的 IO、进程和网络通信模块等则由支持 ES6 的 io.js 提供，这样前端后端均采用 Javascript 语言，大大降低技术复杂性。\n\n[1]: http://blog.e10t.net/python-with-qt-application-development-catalogue/\n\n## 与 NW.js（旧名 node-webkit）的异同\n\n如果你有经常关注前端的消息，那么一定听说过一个国人开发的 GUI 框架：node-webkit。然后一看到 Electron，就会皱皱眉头：这不就是 node-webkit 嘛！\n\n然而，Electron 和 node-webkit 并不一样，其 github 项目上有详细的对比，[链接][2]。\n\n就个人理解来说，NW.js 偏向网页主导，是一个加上了 node.js 的浏览器；Electron 则是 javascript 主导，是 io.js 加上了一个 chromium。\n\n> 准确来说，Electron 只是选择了网页作为 GUI，并非为 GUI 绑定了 javascript。在 Electron 文档的 [Quick start][2] 中很明确地指出「It doesn't mean Electron is a JavaScript binding to GUI libraries. Instead, Electron uses web pages as its GUI, so you could also see it as a minimal Chromium browser, controlled by JavaScript.」\n\n在听说了 node-webkit 之后，我曾经上手把玩了一下，当时也是惊讶于其结合了浏览器内核而得到的强大表现力。因为自己在前端方面有一点技术，所以在编写界面的过程中感觉非常舒服。不过我也留意到其在软件方面的能力明显有比较大的欠缺，除了能读写文件外似乎没有什么亮点。（当然不排除在改名为 NW.js 后会加入了更多功能的可能性）\n\n总之，NW.js 更像是将网页打包成应用，而 Electron 则是实际开发的应用。\n\n[2]: https://github.com/atom/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\n\n[3]: https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md\n\n## angular 和 angular material\n\n如果要将网页设计应用到软件界面开发上，那么一些 MVC 框架或 UI 框架就比较适合。MVC 框架中比较有名的是 knockout 和 Backbone，而 UI 框架，则是 reactjs、angularjs 和 polymer 最为著名。国产的还有 avalon。\n\n那么为什么选 angular 呢？因为 angular 的理念比较符合开发网页应用，更重要的是有 angular material 这样一个比较能使用的 UI 主题。相比之下，knockout 和 Backbone 功能太弱，reactjs 则是太激进（一开始我是选 reactjs 的，但是一番尝试之后还是放弃了），polymer 则未作深入了解。\n\n不过，就像 Electron 只是选用了网页作为呈现 GUI 的方式，那么在编写基于 Electron 的应用的时候，GUI 框架的选择其实并非固定死的，如有必要或者个人喜好，转而使用 polymer 或者 reactjs 也未尝不可。\n\n## 本系列的目的\n\n如果有看过鄙人写的 [python × Qt 应用开发系列][1]，那么一定知道本人的教程都偏向实践，喜欢实际解释代码和一定程度地搞清楚技术的细枝末节，而非跟着网上一搜一大把的英文教程或者官方文档演示一篇后以近乎翻译一般地写出所谓的 “教程”。官方文档就摆在那，谁不会 RTFM？\n\n在本系列中，鄙人同样会以记录一个应用的开发流程的形式来呈现成功（或者说，可行）的开发方式。有时会有大量的代码，有时又会有长篇的理论讨论，有时又会有大段的思维解释，希望读者能耐心读下去。","slug":"build-application-with-angular-and-ng-material-based-on-electron-0-preface","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyutq007vn7t43ovwy5xq","content":"<h2 id=\"Electron\"><a href=\"#Electron\" class=\"headerlink\" title=\"Electron\"></a>Electron</h2><p>Electron 是什么？它之前的名字是 Atom Shell，是 Github 开发的结合了 io.js 和 chromium 的跨平台桌面应用框架。Github 自己出的编辑器 Atom 以及微软出的编辑器 VSCode 都是基于这个框架。</p>\n<p>众所周知，Google chrome 就是基于 chromium 而发展出来的一款优秀的浏览器。因其出色的体验和网页解析性能，所有国内出产的 &lt; del &gt; 山寨 &lt;/del &gt; 浏览器 / 双核浏览器，无不选用了 chrome 作为内核。所以在网页解析渲染方面，使用 chromium 是极其正确的选择。</p>\n<p>那跟平常的桌面应用构建，使用 Electron 又有什么优势呢？</p>\n<p>普通的桌面应用构建，比较成熟的语言不外乎 C/C++、Java、C#、Python 等。然而 C/C++ 易学难精，即使其 GUI 框架有 MFC、Qt、KDE 等众，也是极难快速开发；Java 的 GUI 烂得不提也罢；C# 极有可能成为以后霸主，然而还在跨平台表现上有所欠缺；Python 则是个人喜好关系顺带一提，其实很少作为 GUI 主力语言被使用。（当然你可以阅读本人的另一个 <a href=\"http://blog.e10t.net/python-with-qt-application-development-catalogue/\">有关 python 和 Qt 构建桌面应用的系列</a>）</p>\n<p>Electron 则是使用了 Javascript 作为主力语言，并且为其加上了原生支持 html5 和 CSS3 的浏览器。从 GUI 构建来说，使用 html 和 css 的网页构建显然更加简单，成熟的工具和技术数不胜数；而作为桌面应用着重依赖的 IO、进程和网络通信模块等则由支持 ES6 的 io.js 提供，这样前端后端均采用 Javascript 语言，大大降低技术复杂性。</p>\n<h2 id=\"与-NW-js（旧名-node-webkit）的异同\"><a href=\"#与-NW-js（旧名-node-webkit）的异同\" class=\"headerlink\" title=\"与 NW.js（旧名 node-webkit）的异同\"></a>与 NW.js（旧名 node-webkit）的异同</h2><p>如果你有经常关注前端的消息，那么一定听说过一个国人开发的 GUI 框架：node-webkit。然后一看到 Electron，就会皱皱眉头：这不就是 node-webkit 嘛！</p>\n<p>然而，Electron 和 node-webkit 并不一样，其 github 项目上有详细的对比，<a href=\"https://github.com/atom/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\" target=\"_blank\" rel=\"noopener\">链接</a>。</p>\n<p>就个人理解来说，NW.js 偏向网页主导，是一个加上了 node.js 的浏览器；Electron 则是 javascript 主导，是 io.js 加上了一个 chromium。</p>\n<blockquote>\n<p>准确来说，Electron 只是选择了网页作为 GUI，并非为 GUI 绑定了 javascript。在 Electron 文档的 <a href=\"https://github.com/atom/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\" target=\"_blank\" rel=\"noopener\">Quick start</a> 中很明确地指出「It doesn’t mean Electron is a JavaScript binding to GUI libraries. Instead, Electron uses web pages as its GUI, so you could also see it as a minimal Chromium browser, controlled by JavaScript.」</p>\n</blockquote>\n<p>在听说了 node-webkit 之后，我曾经上手把玩了一下，当时也是惊讶于其结合了浏览器内核而得到的强大表现力。因为自己在前端方面有一点技术，所以在编写界面的过程中感觉非常舒服。不过我也留意到其在软件方面的能力明显有比较大的欠缺，除了能读写文件外似乎没有什么亮点。（当然不排除在改名为 NW.js 后会加入了更多功能的可能性）</p>\n<p>总之，NW.js 更像是将网页打包成应用，而 Electron 则是实际开发的应用。</p>\n<h2 id=\"angular-和-angular-material\"><a href=\"#angular-和-angular-material\" class=\"headerlink\" title=\"angular 和 angular material\"></a>angular 和 angular material</h2><p>如果要将网页设计应用到软件界面开发上，那么一些 MVC 框架或 UI 框架就比较适合。MVC 框架中比较有名的是 knockout 和 Backbone，而 UI 框架，则是 reactjs、angularjs 和 polymer 最为著名。国产的还有 avalon。</p>\n<p>那么为什么选 angular 呢？因为 angular 的理念比较符合开发网页应用，更重要的是有 angular material 这样一个比较能使用的 UI 主题。相比之下，knockout 和 Backbone 功能太弱，reactjs 则是太激进（一开始我是选 reactjs 的，但是一番尝试之后还是放弃了），polymer 则未作深入了解。</p>\n<p>不过，就像 Electron 只是选用了网页作为呈现 GUI 的方式，那么在编写基于 Electron 的应用的时候，GUI 框架的选择其实并非固定死的，如有必要或者个人喜好，转而使用 polymer 或者 reactjs 也未尝不可。</p>\n<h2 id=\"本系列的目的\"><a href=\"#本系列的目的\" class=\"headerlink\" title=\"本系列的目的\"></a>本系列的目的</h2><p>如果有看过鄙人写的 <a href=\"http://blog.e10t.net/python-with-qt-application-development-catalogue/\">python × Qt 应用开发系列</a>，那么一定知道本人的教程都偏向实践，喜欢实际解释代码和一定程度地搞清楚技术的细枝末节，而非跟着网上一搜一大把的英文教程或者官方文档演示一篇后以近乎翻译一般地写出所谓的 “教程”。官方文档就摆在那，谁不会 RTFM？</p>\n<p>在本系列中，鄙人同样会以记录一个应用的开发流程的形式来呈现成功（或者说，可行）的开发方式。有时会有大量的代码，有时又会有长篇的理论讨论，有时又会有大段的思维解释，希望读者能耐心读下去。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Electron\"><a href=\"#Electron\" class=\"headerlink\" title=\"Electron\"></a>Electron</h2><p>Electron 是什么？它之前的名字是 Atom Shell，是 Github 开发的结合了 io.js 和 chromium 的跨平台桌面应用框架。Github 自己出的编辑器 Atom 以及微软出的编辑器 VSCode 都是基于这个框架。</p>\n<p>众所周知，Google chrome 就是基于 chromium 而发展出来的一款优秀的浏览器。因其出色的体验和网页解析性能，所有国内出产的 &lt; del &gt; 山寨 &lt;/del &gt; 浏览器 / 双核浏览器，无不选用了 chrome 作为内核。所以在网页解析渲染方面，使用 chromium 是极其正确的选择。</p>\n<p>那跟平常的桌面应用构建，使用 Electron 又有什么优势呢？</p>\n<p>普通的桌面应用构建，比较成熟的语言不外乎 C/C++、Java、C#、Python 等。然而 C/C++ 易学难精，即使其 GUI 框架有 MFC、Qt、KDE 等众，也是极难快速开发；Java 的 GUI 烂得不提也罢；C# 极有可能成为以后霸主，然而还在跨平台表现上有所欠缺；Python 则是个人喜好关系顺带一提，其实很少作为 GUI 主力语言被使用。（当然你可以阅读本人的另一个 <a href=\"http://blog.e10t.net/python-with-qt-application-development-catalogue/\">有关 python 和 Qt 构建桌面应用的系列</a>）</p>\n<p>Electron 则是使用了 Javascript 作为主力语言，并且为其加上了原生支持 html5 和 CSS3 的浏览器。从 GUI 构建来说，使用 html 和 css 的网页构建显然更加简单，成熟的工具和技术数不胜数；而作为桌面应用着重依赖的 IO、进程和网络通信模块等则由支持 ES6 的 io.js 提供，这样前端后端均采用 Javascript 语言，大大降低技术复杂性。</p>\n<h2 id=\"与-NW-js（旧名-node-webkit）的异同\"><a href=\"#与-NW-js（旧名-node-webkit）的异同\" class=\"headerlink\" title=\"与 NW.js（旧名 node-webkit）的异同\"></a>与 NW.js（旧名 node-webkit）的异同</h2><p>如果你有经常关注前端的消息，那么一定听说过一个国人开发的 GUI 框架：node-webkit。然后一看到 Electron，就会皱皱眉头：这不就是 node-webkit 嘛！</p>\n<p>然而，Electron 和 node-webkit 并不一样，其 github 项目上有详细的对比，<a href=\"https://github.com/atom/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\" target=\"_blank\" rel=\"noopener\">链接</a>。</p>\n<p>就个人理解来说，NW.js 偏向网页主导，是一个加上了 node.js 的浏览器；Electron 则是 javascript 主导，是 io.js 加上了一个 chromium。</p>\n<blockquote>\n<p>准确来说，Electron 只是选择了网页作为 GUI，并非为 GUI 绑定了 javascript。在 Electron 文档的 <a href=\"https://github.com/atom/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md\" target=\"_blank\" rel=\"noopener\">Quick start</a> 中很明确地指出「It doesn’t mean Electron is a JavaScript binding to GUI libraries. Instead, Electron uses web pages as its GUI, so you could also see it as a minimal Chromium browser, controlled by JavaScript.」</p>\n</blockquote>\n<p>在听说了 node-webkit 之后，我曾经上手把玩了一下，当时也是惊讶于其结合了浏览器内核而得到的强大表现力。因为自己在前端方面有一点技术，所以在编写界面的过程中感觉非常舒服。不过我也留意到其在软件方面的能力明显有比较大的欠缺，除了能读写文件外似乎没有什么亮点。（当然不排除在改名为 NW.js 后会加入了更多功能的可能性）</p>\n<p>总之，NW.js 更像是将网页打包成应用，而 Electron 则是实际开发的应用。</p>\n<h2 id=\"angular-和-angular-material\"><a href=\"#angular-和-angular-material\" class=\"headerlink\" title=\"angular 和 angular material\"></a>angular 和 angular material</h2><p>如果要将网页设计应用到软件界面开发上，那么一些 MVC 框架或 UI 框架就比较适合。MVC 框架中比较有名的是 knockout 和 Backbone，而 UI 框架，则是 reactjs、angularjs 和 polymer 最为著名。国产的还有 avalon。</p>\n<p>那么为什么选 angular 呢？因为 angular 的理念比较符合开发网页应用，更重要的是有 angular material 这样一个比较能使用的 UI 主题。相比之下，knockout 和 Backbone 功能太弱，reactjs 则是太激进（一开始我是选 reactjs 的，但是一番尝试之后还是放弃了），polymer 则未作深入了解。</p>\n<p>不过，就像 Electron 只是选用了网页作为呈现 GUI 的方式，那么在编写基于 Electron 的应用的时候，GUI 框架的选择其实并非固定死的，如有必要或者个人喜好，转而使用 polymer 或者 reactjs 也未尝不可。</p>\n<h2 id=\"本系列的目的\"><a href=\"#本系列的目的\" class=\"headerlink\" title=\"本系列的目的\"></a>本系列的目的</h2><p>如果有看过鄙人写的 <a href=\"http://blog.e10t.net/python-with-qt-application-development-catalogue/\">python × Qt 应用开发系列</a>，那么一定知道本人的教程都偏向实践，喜欢实际解释代码和一定程度地搞清楚技术的细枝末节，而非跟着网上一搜一大把的英文教程或者官方文档演示一篇后以近乎翻译一般地写出所谓的 “教程”。官方文档就摆在那，谁不会 RTFM？</p>\n<p>在本系列中，鄙人同样会以记录一个应用的开发流程的形式来呈现成功（或者说，可行）的开发方式。有时会有大量的代码，有时又会有长篇的理论讨论，有时又会有大段的思维解释，希望读者能耐心读下去。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Oct 20 2015 08:28:04 GMT+0800 (China Standard Time)","title":"配合 angular 和 angular-material 来开发基于 electron 的应用 · 0-- 前言","path":"build-application-with-angular-and-ng-material-based-on-electron-0-preface/","eyeCatchImage":null,"excerpt":null,"date":"2015-06-04T15:02:37.000Z","pv":0,"totalPV":0,"categories":"技术 > 编程语言 > javascript > electron","tags":["javascript","angularjs","angular-material","electron"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2187},{"title":"配合 angular 和 angular-material 来开发基于 electron 的应用 · 3-- 文件组织结构和开发流程","id":"46","updated":"2015-09-05T09:10:15.000Z","date":"2015-09-05T09:09:13.000Z","_content":"\n## 文件组织结构\n\n良好的文件组织结构不仅能帮助我们更快地定位文件，更能配合开发工具形成流畅的开发流程，从而提高编程效率。\n\n以下的目录和文件都放在存放应用的根目录 `app` 下。\n\n### package.json\n\nElectron 应用的配置文件，经常做 node 开发的人应该很熟悉了。稍微说明一下一些字段：\n\n`name`: 应用的名字，本项目就是 radioit 了\n\n`description`: 应用的描述\n\n`version`: 应用的版本号\n\n`author`: 作者名字\n\n`email`: 作者的邮箱\n\n### main.js\n\nElectron 应用的入口点，可以在 package.json 的 `main` 字段自定义\n\n### node_modules/\n\nnode 库的目录，一般不用手动管理，而是使用 npm 来安装和卸载库。\n\n### lib/\n\n存放 node 模块的目录。\n\n### src/\n\n存放源代码的目录。\n\n### src/css/\n\n存放待编译的 css 代码，比如本项目用的 .styl 文件。\n\n### src/modules/\n\n存放浏览器端的 javascript 源代码。\n\n因为使用 AngularJS，所以此目录的结构就照搬 AngularJS 项目的结构。\n\n通常来说有两种：按 service / controller / directive 分目录存放，按功能模块存放。\n\n本项目选择按功能模块存放。\n\n### src/modules/entry.js\n\n供 browserify 打包的入口点。最终浏览器端的 javascript 代码会打包成一个名为 `bundle.js` 的文件。\n\n### static/css/\n\n存放编译好的 CSS 文件。\n\n### static/font/\n\n存放字体文件。因为 Electron 可以访问本地文件，所以自定义字体也基本不需要考虑网络传输问题。\n\n### static/image/\n\n存放图片文件。\n\n### static/js/\n\n存放客户端的 javascript 库，比如 jQuery，underscore，AngularJS 等。\n\n### static/js/bundle.js\n\nbrowserify 编译 javascript 代码后输出的文件。\n\n### static/view/\n\n存放 HTML 模板文件或者包含 HTML 代码的文件。\n\n## 开发流程 -- node 相关\n\n有关 node 的开发，跟普通的项目并没有什么两样，需要什么库就直接使用 npm 安装，然后再代码中使用 `require` 就可以了。\n\n然而虽然 Electron 为 webkit 内核提供了 `io.js` 的运行环境，但是最好还是避免在客户端（浏览器）的 javascript 代码内混杂需要 node 依赖的代码。换句话说，最好将需要 node 依赖的 javascript 代码和平常在网页中使用的 javascript 代码分开。这样做的好处是不会搞混相关的 API 和设计模式，毕竟 node 大部分时候都是用在服务端上的。\n\n本项目将 node 相关的代码放在 `lib/` 目录下，负责应用的业务逻辑，其既有可能被主进程所用，也有可能被渲染进程所用。node 相关的代码不需要编译合并。编写时在目录下新建 `xxx.js` 文件，写好需要 exports 的内容，在其他文件中则使用 `require( './xxx.js' )` 就可以了。\n\n## 开发流程 -- 界面相关\n\n因为界面的渲染采用 webkit 引擎，所以 javascript 的编写和网页开发没有分别。\n\n在 `package.json` 的 `scripts` 字段中增加一条命令：\n\n```javascript\n\"build:js\": \"browserify src/modules/entry.js -o static/js/bundle.js\"\n```\n\n然后在编写好 javascript 代码的时候，执行 `npm run build:js` 进行编译。\n\nCSS 的编译则是加入如下：\n\n```javascript\n\"build:css\": \"stylus -u nib src/css/app.styl -o static/css/app.css\"\n```\n\n最后需要运行应用来测试，增加命令：\n\n```javascript\n\"test\": \"electron main.js 2>&1 | silence-chromium\",\n\"start\": \"npm run build:js && npm run build:css && electron main.js 2>&1 | silence-chromium\"\n```\n\n需要测试的时候使用 `npm run test`，需要运行则使用 `npm run start` 进行重新编译和运行。","source":"_posts/build-application-with-angular-and-ng-material-based-on-electron/配合-angular-和-angular-material-来开发基于-electron-的应用-·-3-文件组织结构和开发流程.md","raw":"---\ntitle: 配合 angular 和 angular-material 来开发基于 electron 的应用 · 3-- 文件组织结构和开发流程\ncategories:\n  - [技术, electron]\n  - [编程语言, javascript]\ntags: [javascript, angularjs, angular-material, electron]\npermalink: build-application-with-angular-and-ng-material-based-on-electron-3-file-structure-and-workflow\nid: 46\nupdated: '2015-09-05 17:10:15'\ndate: 2015-09-05 17:09:13\n---\n\n## 文件组织结构\n\n良好的文件组织结构不仅能帮助我们更快地定位文件，更能配合开发工具形成流畅的开发流程，从而提高编程效率。\n\n以下的目录和文件都放在存放应用的根目录 `app` 下。\n\n### package.json\n\nElectron 应用的配置文件，经常做 node 开发的人应该很熟悉了。稍微说明一下一些字段：\n\n`name`: 应用的名字，本项目就是 radioit 了\n\n`description`: 应用的描述\n\n`version`: 应用的版本号\n\n`author`: 作者名字\n\n`email`: 作者的邮箱\n\n### main.js\n\nElectron 应用的入口点，可以在 package.json 的 `main` 字段自定义\n\n### node_modules/\n\nnode 库的目录，一般不用手动管理，而是使用 npm 来安装和卸载库。\n\n### lib/\n\n存放 node 模块的目录。\n\n### src/\n\n存放源代码的目录。\n\n### src/css/\n\n存放待编译的 css 代码，比如本项目用的 .styl 文件。\n\n### src/modules/\n\n存放浏览器端的 javascript 源代码。\n\n因为使用 AngularJS，所以此目录的结构就照搬 AngularJS 项目的结构。\n\n通常来说有两种：按 service / controller / directive 分目录存放，按功能模块存放。\n\n本项目选择按功能模块存放。\n\n### src/modules/entry.js\n\n供 browserify 打包的入口点。最终浏览器端的 javascript 代码会打包成一个名为 `bundle.js` 的文件。\n\n### static/css/\n\n存放编译好的 CSS 文件。\n\n### static/font/\n\n存放字体文件。因为 Electron 可以访问本地文件，所以自定义字体也基本不需要考虑网络传输问题。\n\n### static/image/\n\n存放图片文件。\n\n### static/js/\n\n存放客户端的 javascript 库，比如 jQuery，underscore，AngularJS 等。\n\n### static/js/bundle.js\n\nbrowserify 编译 javascript 代码后输出的文件。\n\n### static/view/\n\n存放 HTML 模板文件或者包含 HTML 代码的文件。\n\n## 开发流程 -- node 相关\n\n有关 node 的开发，跟普通的项目并没有什么两样，需要什么库就直接使用 npm 安装，然后再代码中使用 `require` 就可以了。\n\n然而虽然 Electron 为 webkit 内核提供了 `io.js` 的运行环境，但是最好还是避免在客户端（浏览器）的 javascript 代码内混杂需要 node 依赖的代码。换句话说，最好将需要 node 依赖的 javascript 代码和平常在网页中使用的 javascript 代码分开。这样做的好处是不会搞混相关的 API 和设计模式，毕竟 node 大部分时候都是用在服务端上的。\n\n本项目将 node 相关的代码放在 `lib/` 目录下，负责应用的业务逻辑，其既有可能被主进程所用，也有可能被渲染进程所用。node 相关的代码不需要编译合并。编写时在目录下新建 `xxx.js` 文件，写好需要 exports 的内容，在其他文件中则使用 `require( './xxx.js' )` 就可以了。\n\n## 开发流程 -- 界面相关\n\n因为界面的渲染采用 webkit 引擎，所以 javascript 的编写和网页开发没有分别。\n\n在 `package.json` 的 `scripts` 字段中增加一条命令：\n\n```javascript\n\"build:js\": \"browserify src/modules/entry.js -o static/js/bundle.js\"\n```\n\n然后在编写好 javascript 代码的时候，执行 `npm run build:js` 进行编译。\n\nCSS 的编译则是加入如下：\n\n```javascript\n\"build:css\": \"stylus -u nib src/css/app.styl -o static/css/app.css\"\n```\n\n最后需要运行应用来测试，增加命令：\n\n```javascript\n\"test\": \"electron main.js 2>&1 | silence-chromium\",\n\"start\": \"npm run build:js && npm run build:css && electron main.js 2>&1 | silence-chromium\"\n```\n\n需要测试的时候使用 `npm run test`，需要运行则使用 `npm run start` 进行重新编译和运行。","slug":"build-application-with-angular-and-ng-material-based-on-electron-3-file-structure-and-workflow","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyutr007yn7t4ipuvirab","content":"<h2 id=\"文件组织结构\"><a href=\"#文件组织结构\" class=\"headerlink\" title=\"文件组织结构\"></a>文件组织结构</h2><p>良好的文件组织结构不仅能帮助我们更快地定位文件，更能配合开发工具形成流畅的开发流程，从而提高编程效率。</p>\n<p>以下的目录和文件都放在存放应用的根目录 <code>app</code> 下。</p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><p>Electron 应用的配置文件，经常做 node 开发的人应该很熟悉了。稍微说明一下一些字段：</p>\n<p><code>name</code>: 应用的名字，本项目就是 radioit 了</p>\n<p><code>description</code>: 应用的描述</p>\n<p><code>version</code>: 应用的版本号</p>\n<p><code>author</code>: 作者名字</p>\n<p><code>email</code>: 作者的邮箱</p>\n<h3 id=\"main-js\"><a href=\"#main-js\" class=\"headerlink\" title=\"main.js\"></a>main.js</h3><p>Electron 应用的入口点，可以在 package.json 的 <code>main</code> 字段自定义</p>\n<h3 id=\"node-modules\"><a href=\"#node-modules\" class=\"headerlink\" title=\"node_modules/\"></a>node_modules/</h3><p>node 库的目录，一般不用手动管理，而是使用 npm 来安装和卸载库。</p>\n<h3 id=\"lib\"><a href=\"#lib\" class=\"headerlink\" title=\"lib/\"></a>lib/</h3><p>存放 node 模块的目录。</p>\n<h3 id=\"src\"><a href=\"#src\" class=\"headerlink\" title=\"src/\"></a>src/</h3><p>存放源代码的目录。</p>\n<h3 id=\"src-css\"><a href=\"#src-css\" class=\"headerlink\" title=\"src/css/\"></a>src/css/</h3><p>存放待编译的 css 代码，比如本项目用的 .styl 文件。</p>\n<h3 id=\"src-modules\"><a href=\"#src-modules\" class=\"headerlink\" title=\"src/modules/\"></a>src/modules/</h3><p>存放浏览器端的 javascript 源代码。</p>\n<p>因为使用 AngularJS，所以此目录的结构就照搬 AngularJS 项目的结构。</p>\n<p>通常来说有两种：按 service / controller / directive 分目录存放，按功能模块存放。</p>\n<p>本项目选择按功能模块存放。</p>\n<h3 id=\"src-modules-entry-js\"><a href=\"#src-modules-entry-js\" class=\"headerlink\" title=\"src/modules/entry.js\"></a>src/modules/entry.js</h3><p>供 browserify 打包的入口点。最终浏览器端的 javascript 代码会打包成一个名为 <code>bundle.js</code> 的文件。</p>\n<h3 id=\"static-css\"><a href=\"#static-css\" class=\"headerlink\" title=\"static/css/\"></a>static/css/</h3><p>存放编译好的 CSS 文件。</p>\n<h3 id=\"static-font\"><a href=\"#static-font\" class=\"headerlink\" title=\"static/font/\"></a>static/font/</h3><p>存放字体文件。因为 Electron 可以访问本地文件，所以自定义字体也基本不需要考虑网络传输问题。</p>\n<h3 id=\"static-image\"><a href=\"#static-image\" class=\"headerlink\" title=\"static/image/\"></a>static/image/</h3><p>存放图片文件。</p>\n<h3 id=\"static-js\"><a href=\"#static-js\" class=\"headerlink\" title=\"static/js/\"></a>static/js/</h3><p>存放客户端的 javascript 库，比如 jQuery，underscore，AngularJS 等。</p>\n<h3 id=\"static-js-bundle-js\"><a href=\"#static-js-bundle-js\" class=\"headerlink\" title=\"static/js/bundle.js\"></a>static/js/bundle.js</h3><p>browserify 编译 javascript 代码后输出的文件。</p>\n<h3 id=\"static-view\"><a href=\"#static-view\" class=\"headerlink\" title=\"static/view/\"></a>static/view/</h3><p>存放 HTML 模板文件或者包含 HTML 代码的文件。</p>\n<h2 id=\"开发流程-—-node-相关\"><a href=\"#开发流程-—-node-相关\" class=\"headerlink\" title=\"开发流程 — node 相关\"></a>开发流程 — node 相关</h2><p>有关 node 的开发，跟普通的项目并没有什么两样，需要什么库就直接使用 npm 安装，然后再代码中使用 <code>require</code> 就可以了。</p>\n<p>然而虽然 Electron 为 webkit 内核提供了 <code>io.js</code> 的运行环境，但是最好还是避免在客户端（浏览器）的 javascript 代码内混杂需要 node 依赖的代码。换句话说，最好将需要 node 依赖的 javascript 代码和平常在网页中使用的 javascript 代码分开。这样做的好处是不会搞混相关的 API 和设计模式，毕竟 node 大部分时候都是用在服务端上的。</p>\n<p>本项目将 node 相关的代码放在 <code>lib/</code> 目录下，负责应用的业务逻辑，其既有可能被主进程所用，也有可能被渲染进程所用。node 相关的代码不需要编译合并。编写时在目录下新建 <code>xxx.js</code> 文件，写好需要 exports 的内容，在其他文件中则使用 <code>require( &#39;./xxx.js&#39; )</code> 就可以了。</p>\n<h2 id=\"开发流程-—-界面相关\"><a href=\"#开发流程-—-界面相关\" class=\"headerlink\" title=\"开发流程 — 界面相关\"></a>开发流程 — 界面相关</h2><p>因为界面的渲染采用 webkit 引擎，所以 javascript 的编写和网页开发没有分别。</p>\n<p>在 <code>package.json</code> 的 <code>scripts</code> 字段中增加一条命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"build:js\"</span>: <span class=\"string\">\"browserify src/modules/entry.js -o static/js/bundle.js\"</span></span><br></pre></td></tr></table></figure>\n<p>然后在编写好 javascript 代码的时候，执行 <code>npm run build:js</code> 进行编译。</p>\n<p>CSS 的编译则是加入如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"build:css\"</span>: <span class=\"string\">\"stylus -u nib src/css/app.styl -o static/css/app.css\"</span></span><br></pre></td></tr></table></figure>\n<p>最后需要运行应用来测试，增加命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"test\"</span>: <span class=\"string\">\"electron main.js 2&gt;&amp;1 | silence-chromium\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"start\"</span>: <span class=\"string\">\"npm run build:js &amp;&amp; npm run build:css &amp;&amp; electron main.js 2&gt;&amp;1 | silence-chromium\"</span></span><br></pre></td></tr></table></figure>\n<p>需要测试的时候使用 <code>npm run test</code>，需要运行则使用 <code>npm run start</code> 进行重新编译和运行。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"文件组织结构\"><a href=\"#文件组织结构\" class=\"headerlink\" title=\"文件组织结构\"></a>文件组织结构</h2><p>良好的文件组织结构不仅能帮助我们更快地定位文件，更能配合开发工具形成流畅的开发流程，从而提高编程效率。</p>\n<p>以下的目录和文件都放在存放应用的根目录 <code>app</code> 下。</p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h3><p>Electron 应用的配置文件，经常做 node 开发的人应该很熟悉了。稍微说明一下一些字段：</p>\n<p><code>name</code>: 应用的名字，本项目就是 radioit 了</p>\n<p><code>description</code>: 应用的描述</p>\n<p><code>version</code>: 应用的版本号</p>\n<p><code>author</code>: 作者名字</p>\n<p><code>email</code>: 作者的邮箱</p>\n<h3 id=\"main-js\"><a href=\"#main-js\" class=\"headerlink\" title=\"main.js\"></a>main.js</h3><p>Electron 应用的入口点，可以在 package.json 的 <code>main</code> 字段自定义</p>\n<h3 id=\"node-modules\"><a href=\"#node-modules\" class=\"headerlink\" title=\"node_modules/\"></a>node_modules/</h3><p>node 库的目录，一般不用手动管理，而是使用 npm 来安装和卸载库。</p>\n<h3 id=\"lib\"><a href=\"#lib\" class=\"headerlink\" title=\"lib/\"></a>lib/</h3><p>存放 node 模块的目录。</p>\n<h3 id=\"src\"><a href=\"#src\" class=\"headerlink\" title=\"src/\"></a>src/</h3><p>存放源代码的目录。</p>\n<h3 id=\"src-css\"><a href=\"#src-css\" class=\"headerlink\" title=\"src/css/\"></a>src/css/</h3><p>存放待编译的 css 代码，比如本项目用的 .styl 文件。</p>\n<h3 id=\"src-modules\"><a href=\"#src-modules\" class=\"headerlink\" title=\"src/modules/\"></a>src/modules/</h3><p>存放浏览器端的 javascript 源代码。</p>\n<p>因为使用 AngularJS，所以此目录的结构就照搬 AngularJS 项目的结构。</p>\n<p>通常来说有两种：按 service / controller / directive 分目录存放，按功能模块存放。</p>\n<p>本项目选择按功能模块存放。</p>\n<h3 id=\"src-modules-entry-js\"><a href=\"#src-modules-entry-js\" class=\"headerlink\" title=\"src/modules/entry.js\"></a>src/modules/entry.js</h3><p>供 browserify 打包的入口点。最终浏览器端的 javascript 代码会打包成一个名为 <code>bundle.js</code> 的文件。</p>\n<h3 id=\"static-css\"><a href=\"#static-css\" class=\"headerlink\" title=\"static/css/\"></a>static/css/</h3><p>存放编译好的 CSS 文件。</p>\n<h3 id=\"static-font\"><a href=\"#static-font\" class=\"headerlink\" title=\"static/font/\"></a>static/font/</h3><p>存放字体文件。因为 Electron 可以访问本地文件，所以自定义字体也基本不需要考虑网络传输问题。</p>\n<h3 id=\"static-image\"><a href=\"#static-image\" class=\"headerlink\" title=\"static/image/\"></a>static/image/</h3><p>存放图片文件。</p>\n<h3 id=\"static-js\"><a href=\"#static-js\" class=\"headerlink\" title=\"static/js/\"></a>static/js/</h3><p>存放客户端的 javascript 库，比如 jQuery，underscore，AngularJS 等。</p>\n<h3 id=\"static-js-bundle-js\"><a href=\"#static-js-bundle-js\" class=\"headerlink\" title=\"static/js/bundle.js\"></a>static/js/bundle.js</h3><p>browserify 编译 javascript 代码后输出的文件。</p>\n<h3 id=\"static-view\"><a href=\"#static-view\" class=\"headerlink\" title=\"static/view/\"></a>static/view/</h3><p>存放 HTML 模板文件或者包含 HTML 代码的文件。</p>\n<h2 id=\"开发流程-—-node-相关\"><a href=\"#开发流程-—-node-相关\" class=\"headerlink\" title=\"开发流程 — node 相关\"></a>开发流程 — node 相关</h2><p>有关 node 的开发，跟普通的项目并没有什么两样，需要什么库就直接使用 npm 安装，然后再代码中使用 <code>require</code> 就可以了。</p>\n<p>然而虽然 Electron 为 webkit 内核提供了 <code>io.js</code> 的运行环境，但是最好还是避免在客户端（浏览器）的 javascript 代码内混杂需要 node 依赖的代码。换句话说，最好将需要 node 依赖的 javascript 代码和平常在网页中使用的 javascript 代码分开。这样做的好处是不会搞混相关的 API 和设计模式，毕竟 node 大部分时候都是用在服务端上的。</p>\n<p>本项目将 node 相关的代码放在 <code>lib/</code> 目录下，负责应用的业务逻辑，其既有可能被主进程所用，也有可能被渲染进程所用。node 相关的代码不需要编译合并。编写时在目录下新建 <code>xxx.js</code> 文件，写好需要 exports 的内容，在其他文件中则使用 <code>require( &#39;./xxx.js&#39; )</code> 就可以了。</p>\n<h2 id=\"开发流程-—-界面相关\"><a href=\"#开发流程-—-界面相关\" class=\"headerlink\" title=\"开发流程 — 界面相关\"></a>开发流程 — 界面相关</h2><p>因为界面的渲染采用 webkit 引擎，所以 javascript 的编写和网页开发没有分别。</p>\n<p>在 <code>package.json</code> 的 <code>scripts</code> 字段中增加一条命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"build:js\"</span>: <span class=\"string\">\"browserify src/modules/entry.js -o static/js/bundle.js\"</span></span><br></pre></td></tr></table></figure>\n<p>然后在编写好 javascript 代码的时候，执行 <code>npm run build:js</code> 进行编译。</p>\n<p>CSS 的编译则是加入如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"build:css\"</span>: <span class=\"string\">\"stylus -u nib src/css/app.styl -o static/css/app.css\"</span></span><br></pre></td></tr></table></figure>\n<p>最后需要运行应用来测试，增加命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"test\"</span>: <span class=\"string\">\"electron main.js 2&gt;&amp;1 | silence-chromium\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"start\"</span>: <span class=\"string\">\"npm run build:js &amp;&amp; npm run build:css &amp;&amp; electron main.js 2&gt;&amp;1 | silence-chromium\"</span></span><br></pre></td></tr></table></figure>\n<p>需要测试的时候使用 <code>npm run test</code>，需要运行则使用 <code>npm run start</code> 进行重新编译和运行。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sat Sep 05 2015 17:10:15 GMT+0800 (China Standard Time)","title":"配合 angular 和 angular-material 来开发基于 electron 的应用 · 3-- 文件组织结构和开发流程","path":"build-application-with-angular-and-ng-material-based-on-electron-3-file-structure-and-workflow/","eyeCatchImage":null,"excerpt":null,"date":"2015-09-05T09:09:13.000Z","pv":0,"totalPV":0,"categories":"技术 > 编程语言 > javascript > electron","tags":["javascript","angularjs","angular-material","electron"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1596},{"title":"Google Chrome（谷歌浏览器）个人详细教程——安装篇","id":"6","updated":"2014-04-15T07:30:45.000Z","date":"2014-01-22T20:25:02.000Z","_content":"\n安装一个软件本来无需什么教程的，因为很多人接触电脑时间不短了，这些基本操作还是应该会自动学会的。但是，Google Chrome 在安装上与其他软件稍微有所不同，安装篇就是来打消安装过程中的疑虑和不安的。\n\n首先是下载安装文件。Google Chrome 有两种安装方式：一、到国内的比较知名的软件下载站下载离线版，比如天空、华军、zol 上。不推荐这种方法，原因后面解释。二、在 Google 的 [官网](http://www.chrome.com) 上下载在线安装版。\n\n现在你可以看到右上角大大的按钮 “下载 Chrome 浏览器”，先别激动，我想你应该先好好看看页面靠下的地方，看见右边的“先去 Chrome 网上商店瞅瞅” 么？你可以点进去先感受一下 Chrome 的庞大的应用，想得到的想不到的都应有尽有。提示：访问有可能比较慢，一部分原因是使用了 https 加密浏览的缘故（** 你可以看到网址前面 https://**），因为这个应用商店可以跟你的 Google 帐号相关联，所以安全性是必须要保障的。另外的原因大概是中国网络的缘故。\n\n再来看看左边的 “翻翻绘本，看看 20 件关于浏览器和互联网的事儿。” 如果你并不想花时间深入浅出了解浏览器和互联网，这里的链接可以无视。大概看了看，写得不错，我自己也很有收获。\n好了，现在你可以去点击“下载 Chrome 浏览器”，然后来到一个服务条款页面，浏览一下服务条款然后点击“接受并下载”。如无意外，你会看到以下的画面：\n\n接下来就就只是等待。在等待的时候，我解释一下为什么选择在线安装版本。我承认，这个在线安装耗时比较长，并不是网页上说的“安装程序将在几秒钟内完成”。我认为是因为中国网络的原因，Google 退出中国市场之后就似乎剩下香港和北京有服务器，所以下载慢也是没有办法的事。\n\n那为什么不去软件站下载？因为在软件站上下载的是离线安装包，而离线安装包是没有升级功能的，所以如果网络不是太差，还是去安装在线官方版为好。\n\n如果你的下载已经完成，那么 chrome 浏览器会自动打开并且系统会显示 “欢迎使用 Google Chrome 浏览器” 对话框，并提示您选择要在浏览器中默认使用的搜索引擎。还有导入主页设置和浏览器历史记录，够贴心了吧？\n\n好了，到现在你就已经安装了 Google Chrome 浏览器了。如果还有什么不明白可以参阅官方的[详细帮助](http://support.google.com/chrome/bin/topic.py?hl=zh-Hans&topic=14659)","source":"_posts/chrome-tutorial/Google-Chrome（谷歌浏览器）个人详细教程——安装篇.md","raw":"---\ntitle: Google Chrome（谷歌浏览器）个人详细教程——安装篇\ncategories:\n  - [技术, 教程]\ntags: [tutorial, chrome]\npermalink: chrome-tutorial-setup\nid: 6\nupdated: '2014-04-15 15:30:45'\ndate: 2014-01-23 04:25:02\n---\n\n安装一个软件本来无需什么教程的，因为很多人接触电脑时间不短了，这些基本操作还是应该会自动学会的。但是，Google Chrome 在安装上与其他软件稍微有所不同，安装篇就是来打消安装过程中的疑虑和不安的。\n\n首先是下载安装文件。Google Chrome 有两种安装方式：一、到国内的比较知名的软件下载站下载离线版，比如天空、华军、zol 上。不推荐这种方法，原因后面解释。二、在 Google 的 [官网](http://www.chrome.com) 上下载在线安装版。\n\n现在你可以看到右上角大大的按钮 “下载 Chrome 浏览器”，先别激动，我想你应该先好好看看页面靠下的地方，看见右边的“先去 Chrome 网上商店瞅瞅” 么？你可以点进去先感受一下 Chrome 的庞大的应用，想得到的想不到的都应有尽有。提示：访问有可能比较慢，一部分原因是使用了 https 加密浏览的缘故（** 你可以看到网址前面 https://**），因为这个应用商店可以跟你的 Google 帐号相关联，所以安全性是必须要保障的。另外的原因大概是中国网络的缘故。\n\n再来看看左边的 “翻翻绘本，看看 20 件关于浏览器和互联网的事儿。” 如果你并不想花时间深入浅出了解浏览器和互联网，这里的链接可以无视。大概看了看，写得不错，我自己也很有收获。\n好了，现在你可以去点击“下载 Chrome 浏览器”，然后来到一个服务条款页面，浏览一下服务条款然后点击“接受并下载”。如无意外，你会看到以下的画面：\n\n接下来就就只是等待。在等待的时候，我解释一下为什么选择在线安装版本。我承认，这个在线安装耗时比较长，并不是网页上说的“安装程序将在几秒钟内完成”。我认为是因为中国网络的原因，Google 退出中国市场之后就似乎剩下香港和北京有服务器，所以下载慢也是没有办法的事。\n\n那为什么不去软件站下载？因为在软件站上下载的是离线安装包，而离线安装包是没有升级功能的，所以如果网络不是太差，还是去安装在线官方版为好。\n\n如果你的下载已经完成，那么 chrome 浏览器会自动打开并且系统会显示 “欢迎使用 Google Chrome 浏览器” 对话框，并提示您选择要在浏览器中默认使用的搜索引擎。还有导入主页设置和浏览器历史记录，够贴心了吧？\n\n好了，到现在你就已经安装了 Google Chrome 浏览器了。如果还有什么不明白可以参阅官方的[详细帮助](http://support.google.com/chrome/bin/topic.py?hl=zh-Hans&topic=14659)","slug":"chrome-tutorial-setup","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuts0082n7t4efjcang1","content":"<p>安装一个软件本来无需什么教程的，因为很多人接触电脑时间不短了，这些基本操作还是应该会自动学会的。但是，Google Chrome 在安装上与其他软件稍微有所不同，安装篇就是来打消安装过程中的疑虑和不安的。</p>\n<p>首先是下载安装文件。Google Chrome 有两种安装方式：一、到国内的比较知名的软件下载站下载离线版，比如天空、华军、zol 上。不推荐这种方法，原因后面解释。二、在 Google 的 <a href=\"http://www.chrome.com\" target=\"_blank\" rel=\"noopener\">官网</a> 上下载在线安装版。</p>\n<p>现在你可以看到右上角大大的按钮 “下载 Chrome 浏览器”，先别激动，我想你应该先好好看看页面靠下的地方，看见右边的“先去 Chrome 网上商店瞅瞅” 么？你可以点进去先感受一下 Chrome 的庞大的应用，想得到的想不到的都应有尽有。提示：访问有可能比较慢，一部分原因是使用了 https 加密浏览的缘故（<strong> 你可以看到网址前面 https://</strong>），因为这个应用商店可以跟你的 Google 帐号相关联，所以安全性是必须要保障的。另外的原因大概是中国网络的缘故。</p>\n<p>再来看看左边的 “翻翻绘本，看看 20 件关于浏览器和互联网的事儿。” 如果你并不想花时间深入浅出了解浏览器和互联网，这里的链接可以无视。大概看了看，写得不错，我自己也很有收获。<br>好了，现在你可以去点击“下载 Chrome 浏览器”，然后来到一个服务条款页面，浏览一下服务条款然后点击“接受并下载”。如无意外，你会看到以下的画面：</p>\n<p>接下来就就只是等待。在等待的时候，我解释一下为什么选择在线安装版本。我承认，这个在线安装耗时比较长，并不是网页上说的“安装程序将在几秒钟内完成”。我认为是因为中国网络的原因，Google 退出中国市场之后就似乎剩下香港和北京有服务器，所以下载慢也是没有办法的事。</p>\n<p>那为什么不去软件站下载？因为在软件站上下载的是离线安装包，而离线安装包是没有升级功能的，所以如果网络不是太差，还是去安装在线官方版为好。</p>\n<p>如果你的下载已经完成，那么 chrome 浏览器会自动打开并且系统会显示 “欢迎使用 Google Chrome 浏览器” 对话框，并提示您选择要在浏览器中默认使用的搜索引擎。还有导入主页设置和浏览器历史记录，够贴心了吧？</p>\n<p>好了，到现在你就已经安装了 Google Chrome 浏览器了。如果还有什么不明白可以参阅官方的<a href=\"http://support.google.com/chrome/bin/topic.py?hl=zh-Hans&amp;topic=14659\" target=\"_blank\" rel=\"noopener\">详细帮助</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>安装一个软件本来无需什么教程的，因为很多人接触电脑时间不短了，这些基本操作还是应该会自动学会的。但是，Google Chrome 在安装上与其他软件稍微有所不同，安装篇就是来打消安装过程中的疑虑和不安的。</p>\n<p>首先是下载安装文件。Google Chrome 有两种安装方式：一、到国内的比较知名的软件下载站下载离线版，比如天空、华军、zol 上。不推荐这种方法，原因后面解释。二、在 Google 的 <a href=\"http://www.chrome.com\" target=\"_blank\" rel=\"noopener\">官网</a> 上下载在线安装版。</p>\n<p>现在你可以看到右上角大大的按钮 “下载 Chrome 浏览器”，先别激动，我想你应该先好好看看页面靠下的地方，看见右边的“先去 Chrome 网上商店瞅瞅” 么？你可以点进去先感受一下 Chrome 的庞大的应用，想得到的想不到的都应有尽有。提示：访问有可能比较慢，一部分原因是使用了 https 加密浏览的缘故（<strong> 你可以看到网址前面 https://</strong>），因为这个应用商店可以跟你的 Google 帐号相关联，所以安全性是必须要保障的。另外的原因大概是中国网络的缘故。</p>\n<p>再来看看左边的 “翻翻绘本，看看 20 件关于浏览器和互联网的事儿。” 如果你并不想花时间深入浅出了解浏览器和互联网，这里的链接可以无视。大概看了看，写得不错，我自己也很有收获。<br>好了，现在你可以去点击“下载 Chrome 浏览器”，然后来到一个服务条款页面，浏览一下服务条款然后点击“接受并下载”。如无意外，你会看到以下的画面：</p>\n<p>接下来就就只是等待。在等待的时候，我解释一下为什么选择在线安装版本。我承认，这个在线安装耗时比较长，并不是网页上说的“安装程序将在几秒钟内完成”。我认为是因为中国网络的原因，Google 退出中国市场之后就似乎剩下香港和北京有服务器，所以下载慢也是没有办法的事。</p>\n<p>那为什么不去软件站下载？因为在软件站上下载的是离线安装包，而离线安装包是没有升级功能的，所以如果网络不是太差，还是去安装在线官方版为好。</p>\n<p>如果你的下载已经完成，那么 chrome 浏览器会自动打开并且系统会显示 “欢迎使用 Google Chrome 浏览器” 对话框，并提示您选择要在浏览器中默认使用的搜索引擎。还有导入主页设置和浏览器历史记录，够贴心了吧？</p>\n<p>好了，到现在你就已经安装了 Google Chrome 浏览器了。如果还有什么不明白可以参阅官方的<a href=\"http://support.google.com/chrome/bin/topic.py?hl=zh-Hans&amp;topic=14659\" target=\"_blank\" rel=\"noopener\">详细帮助</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Apr 15 2014 15:30:45 GMT+0800 (China Standard Time)","title":"Google Chrome（谷歌浏览器）个人详细教程——安装篇","path":"chrome-tutorial-setup/","eyeCatchImage":null,"excerpt":null,"date":"2014-01-22T20:25:02.000Z","pv":0,"totalPV":0,"categories":"技术 > 教程","tags":["tutorial","chrome"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":979},{"title":"Google Chrome（谷歌浏览器）个人详细教程——日常使用篇","id":"7","updated":"2014-04-15T07:32:17.000Z","date":"2014-01-22T20:33:47.000Z","_content":"\n如果你看到这篇教程，那就假定你已经在电脑上安装了 Google Chrome 浏览器了。如果不是，我想最好请你先浏览一下这个教程系列的前两篇：总论篇和安装篇。\n\n好，下面开始日常使用的教程。\n\n### 总体格局\n现在，打开你的浏览器看看：最上面是便签栏，可以看到经典的梯形标签；下面就是长长的地址栏，地址栏里面的左边有一个放大镜的图案（会变化的，打开了网页是灰色地球的图案；使用 https 加密方式是一个锁的图案），右边有一个星号，那个是将当前页面添加为标签的按钮；地址栏左边分别是后退前进刷新按钮，右边是一个扳手按钮，其实就是设置按钮了，以后的教程约定称为“扳手”。页面框内会看到你当前安装的一些应用和最常访问的网页（8 个格子），这样你可以快速打开曾经打开过的网页和应用。\n\n### 网站访问\n好了，现在可以输入网址来访问网站了，想必很多人一上网就习惯先打开搜索引擎吧？例如 Google（谷歌）、yahoo!（雅虎）和 bing（必应）。如果你是这样，那么这里有一个技巧：如果你在安装浏览器的时候选择了默认的搜索引擎，那么在地址栏输入搜索的关键字就可以直接以默认的搜索引擎搜索了，省去了先访问搜索网页的一步。实际上，你可以随时随地这样做，只要你输入的关键字并不像网址，譬如一个词或者一句话什么的，没有明显的 “.com”“.org” 之类的后缀，chrome 都会认为是搜索关键字。但是要注意，如果你输入的是英文而你之前访问过网址含有你输入的英文字符串，chrome 会智能地帮你补全网址，虽然能减少了网址字母的输入量，但是搜索就变得麻烦了，幸亏在自动弹出的下拉框里可以选择不同的网址或者搜索你输入的字符串。默认搜索引擎可以在 “扳手”->“选项”->“基本设置”->“搜索” 处修改。\n\n### 右键菜单\n现在你可以像其他使用浏览器一样使用 Google Chrome 了：打开网页，点开链接等等。而在网页的空白处点击右键，你可以看到：\n\n* “另存为”，是指将当前网页保存在你的电脑上，以便没有联网也可以查看。\n* “打印”，不用解释了吧。\n* “查看网页源代码”，就是另外打开一个页面查看网页的 HTML 代码。\n* “查看网页信息”，是否使用加密链接之类的信息。\n* “审查元素”，是一个类似 firefox 里面 firebug 的功能，之后会详细说。\n\n而如果你是对着链接点击右键，那么弹出的菜单选项就不同了：\n\n* “在新标签中打开链接”，就是新建一个标签打开链接，但留在当前页面。\n* “在新窗口中打开链接”，新建一个浏览器窗口打开链接。\n* “在隐身窗口中打开链接”，采用隐身模式浏览打开的链接，此模式下浏览器不会记录你的浏览历史并会删除 cookie，具体参见这里 。\n* “链接另存为”，将链接所指的文件下载到本地，一部分情况下相当于传统意义的“下载”\n* “复制链接地址”，顾名思义就是将链接复制。这个选项非常有用，因为 Chrome 在不加插件的情况下点击下载是不会自动加载迅雷等下载工具的，不像 IE 那样迅雷会接管下载申请。这是为了安全着想，防止网页调用病毒或者木马。但是迅雷的设置里面不是有 “监控剪切板” 的功能么？结合这个来用就解决用下载工具下载的问题了。\n\n### 书签管理\n书签就是收藏一个网页以供你日后快速访问。想收藏一个网页只需要点击地址栏里面右边的星号就行。而且你可以分不同的文件夹存放书签，十分人性化。\n\n点击 “扳手”->“书签”-> 书签管理器可以实现对书签的总体管理。可以导出导入书签，新建删除移动书签等。\n\n### 快捷键\n使用电脑要快要方便，快捷键必不可少。下面介绍一些常用的：\n\n>F5、Ctrl+F5\n\n刷新、强制刷新。强制刷新是无视缓存彻底重新载入页面。不明白？呃，有时候页面刷新几次还是错误就试试强制刷新吧。\n\n>Ctrl+C、Ctrl+X、Ctrl+V\n\n分别是复制、剪切和粘贴。\n\n>Ctrl+F\n\n快速查找。这个快捷键几乎全软件通用，可惜半数以上使用电脑的人不知道。按快捷键，页面右上方会出现一个输入框，输入要找的文字浏览器就会在页面上找出来并统计个数和高亮，最适合在大段文字中找东西。\n\n>Home、End\n\n移到页面最上、最下。\n\n>Ctrl+S\n\n保存当前页面\n\n>Ctrl+W\n\n关闭当前标签。你的鼠标不用移上去标签栏了，多方便啊。\n\n>Ctrl+T\n\n新建一个标签。你的鼠标不用移上去标签栏了，多方便啊。\n\n>Ctrl+Tab、Ctrl+Shift+Tab\n\n转到下一个标签、上一个标签。你的鼠标不用移上去标签栏了，多方便啊。\n\n>Ctrl+1、2、3….\n\n分别对应转到第一个标签、第二个标签… 你的鼠标不用移上去标签栏了，多方便啊。\n\n你可能觉得记住快捷键很麻烦，不过，我可以保证，当使用电脑久了你就反而觉得移动鼠标跨过屏幕更麻烦。尤其是你在双手打字的时候，移开手简直是浪费时间。快捷键只要多用就能记住了，不需要刻意去记。左右开弓总比只用一只手舒服。\n\n### 基本设置\n点击“扳手”->“选项”。我们来关注一些日常的设置。\n#### 基本设置\n* 启用时：设置浏览器第一次打开的时候动作\n* 主页：就是设置主页了\n* 工具栏：建议将”显示 “主页” 按钮 “、“总是显示书签栏” 都选上\n* 搜索：建议默认为 Google\n* 默认浏览器：设置 Google Chrome 为默认浏览器\n\n#### 个人资料\n* 密码：设置是否保存你输入的密码和管理密码\n* 浏览数据：从其他浏览器导入你的书签等数据\n* 主题：就是改皮肤了\n\n#### 高级选项\n* 隐私设置：这里可以清楚你的上网记录以及产生的垃圾\n* 翻译：建议选上。当你浏览外文网站浏览器就会询问你是否需要翻译，或者点右键也可以翻译当前页面\n* 下载内容：修改下载文件保存的位置\n\n#### 在线同步\n如果你有一个 Google 帐号，那你用 Chrome 就有福了。Chrome 提供了帐号同步服务，可以在线保存你的浏览器上的书签、设置、应用等。知道这意味这什么吗？简单来说就是无论你在哪上网，使用哪台电脑上网，只要你使用 Chrome 并且登录你的 Google 帐号，那么 Chrome 就会自动变成你日常使用的那个 Chrome——你的设置、书签、应用全部都会自动“回来“，无需重新设置，也不用怕辛辛苦苦找的书签丢失。\n\n点击 “扳手“->” 登录到 chrome 浏览器 “，输入邮箱和密码登录。接着可以选择同步的内容，一般选书签、应用程序、扩展程序、主题和偏好设置就行。然后你可以想象你已经“保存游戏” 了～当在其他电脑上安装新的 chrome 时，直接登录你的帐号，chrome 就会自动 “读取游戏”。如果你想登出帐号，在个人资料 -> 登录处可以断开。","source":"_posts/chrome-tutorial/Google-Chrome（谷歌浏览器）个人详细教程——日常使用篇.md","raw":"---\ntitle: Google Chrome（谷歌浏览器）个人详细教程——日常使用篇\ncategories:\n  - [技术, 教程]\ntags: [tutorial, chrome]\npermalink: chrome-tutorial-daily-use\nid: 7\nupdated: '2014-04-15 15:32:17'\ndate: 2014-01-23 04:33:47\n---\n\n如果你看到这篇教程，那就假定你已经在电脑上安装了 Google Chrome 浏览器了。如果不是，我想最好请你先浏览一下这个教程系列的前两篇：总论篇和安装篇。\n\n好，下面开始日常使用的教程。\n\n### 总体格局\n现在，打开你的浏览器看看：最上面是便签栏，可以看到经典的梯形标签；下面就是长长的地址栏，地址栏里面的左边有一个放大镜的图案（会变化的，打开了网页是灰色地球的图案；使用 https 加密方式是一个锁的图案），右边有一个星号，那个是将当前页面添加为标签的按钮；地址栏左边分别是后退前进刷新按钮，右边是一个扳手按钮，其实就是设置按钮了，以后的教程约定称为“扳手”。页面框内会看到你当前安装的一些应用和最常访问的网页（8 个格子），这样你可以快速打开曾经打开过的网页和应用。\n\n### 网站访问\n好了，现在可以输入网址来访问网站了，想必很多人一上网就习惯先打开搜索引擎吧？例如 Google（谷歌）、yahoo!（雅虎）和 bing（必应）。如果你是这样，那么这里有一个技巧：如果你在安装浏览器的时候选择了默认的搜索引擎，那么在地址栏输入搜索的关键字就可以直接以默认的搜索引擎搜索了，省去了先访问搜索网页的一步。实际上，你可以随时随地这样做，只要你输入的关键字并不像网址，譬如一个词或者一句话什么的，没有明显的 “.com”“.org” 之类的后缀，chrome 都会认为是搜索关键字。但是要注意，如果你输入的是英文而你之前访问过网址含有你输入的英文字符串，chrome 会智能地帮你补全网址，虽然能减少了网址字母的输入量，但是搜索就变得麻烦了，幸亏在自动弹出的下拉框里可以选择不同的网址或者搜索你输入的字符串。默认搜索引擎可以在 “扳手”->“选项”->“基本设置”->“搜索” 处修改。\n\n### 右键菜单\n现在你可以像其他使用浏览器一样使用 Google Chrome 了：打开网页，点开链接等等。而在网页的空白处点击右键，你可以看到：\n\n* “另存为”，是指将当前网页保存在你的电脑上，以便没有联网也可以查看。\n* “打印”，不用解释了吧。\n* “查看网页源代码”，就是另外打开一个页面查看网页的 HTML 代码。\n* “查看网页信息”，是否使用加密链接之类的信息。\n* “审查元素”，是一个类似 firefox 里面 firebug 的功能，之后会详细说。\n\n而如果你是对着链接点击右键，那么弹出的菜单选项就不同了：\n\n* “在新标签中打开链接”，就是新建一个标签打开链接，但留在当前页面。\n* “在新窗口中打开链接”，新建一个浏览器窗口打开链接。\n* “在隐身窗口中打开链接”，采用隐身模式浏览打开的链接，此模式下浏览器不会记录你的浏览历史并会删除 cookie，具体参见这里 。\n* “链接另存为”，将链接所指的文件下载到本地，一部分情况下相当于传统意义的“下载”\n* “复制链接地址”，顾名思义就是将链接复制。这个选项非常有用，因为 Chrome 在不加插件的情况下点击下载是不会自动加载迅雷等下载工具的，不像 IE 那样迅雷会接管下载申请。这是为了安全着想，防止网页调用病毒或者木马。但是迅雷的设置里面不是有 “监控剪切板” 的功能么？结合这个来用就解决用下载工具下载的问题了。\n\n### 书签管理\n书签就是收藏一个网页以供你日后快速访问。想收藏一个网页只需要点击地址栏里面右边的星号就行。而且你可以分不同的文件夹存放书签，十分人性化。\n\n点击 “扳手”->“书签”-> 书签管理器可以实现对书签的总体管理。可以导出导入书签，新建删除移动书签等。\n\n### 快捷键\n使用电脑要快要方便，快捷键必不可少。下面介绍一些常用的：\n\n>F5、Ctrl+F5\n\n刷新、强制刷新。强制刷新是无视缓存彻底重新载入页面。不明白？呃，有时候页面刷新几次还是错误就试试强制刷新吧。\n\n>Ctrl+C、Ctrl+X、Ctrl+V\n\n分别是复制、剪切和粘贴。\n\n>Ctrl+F\n\n快速查找。这个快捷键几乎全软件通用，可惜半数以上使用电脑的人不知道。按快捷键，页面右上方会出现一个输入框，输入要找的文字浏览器就会在页面上找出来并统计个数和高亮，最适合在大段文字中找东西。\n\n>Home、End\n\n移到页面最上、最下。\n\n>Ctrl+S\n\n保存当前页面\n\n>Ctrl+W\n\n关闭当前标签。你的鼠标不用移上去标签栏了，多方便啊。\n\n>Ctrl+T\n\n新建一个标签。你的鼠标不用移上去标签栏了，多方便啊。\n\n>Ctrl+Tab、Ctrl+Shift+Tab\n\n转到下一个标签、上一个标签。你的鼠标不用移上去标签栏了，多方便啊。\n\n>Ctrl+1、2、3….\n\n分别对应转到第一个标签、第二个标签… 你的鼠标不用移上去标签栏了，多方便啊。\n\n你可能觉得记住快捷键很麻烦，不过，我可以保证，当使用电脑久了你就反而觉得移动鼠标跨过屏幕更麻烦。尤其是你在双手打字的时候，移开手简直是浪费时间。快捷键只要多用就能记住了，不需要刻意去记。左右开弓总比只用一只手舒服。\n\n### 基本设置\n点击“扳手”->“选项”。我们来关注一些日常的设置。\n#### 基本设置\n* 启用时：设置浏览器第一次打开的时候动作\n* 主页：就是设置主页了\n* 工具栏：建议将”显示 “主页” 按钮 “、“总是显示书签栏” 都选上\n* 搜索：建议默认为 Google\n* 默认浏览器：设置 Google Chrome 为默认浏览器\n\n#### 个人资料\n* 密码：设置是否保存你输入的密码和管理密码\n* 浏览数据：从其他浏览器导入你的书签等数据\n* 主题：就是改皮肤了\n\n#### 高级选项\n* 隐私设置：这里可以清楚你的上网记录以及产生的垃圾\n* 翻译：建议选上。当你浏览外文网站浏览器就会询问你是否需要翻译，或者点右键也可以翻译当前页面\n* 下载内容：修改下载文件保存的位置\n\n#### 在线同步\n如果你有一个 Google 帐号，那你用 Chrome 就有福了。Chrome 提供了帐号同步服务，可以在线保存你的浏览器上的书签、设置、应用等。知道这意味这什么吗？简单来说就是无论你在哪上网，使用哪台电脑上网，只要你使用 Chrome 并且登录你的 Google 帐号，那么 Chrome 就会自动变成你日常使用的那个 Chrome——你的设置、书签、应用全部都会自动“回来“，无需重新设置，也不用怕辛辛苦苦找的书签丢失。\n\n点击 “扳手“->” 登录到 chrome 浏览器 “，输入邮箱和密码登录。接着可以选择同步的内容，一般选书签、应用程序、扩展程序、主题和偏好设置就行。然后你可以想象你已经“保存游戏” 了～当在其他电脑上安装新的 chrome 时，直接登录你的帐号，chrome 就会自动 “读取游戏”。如果你想登出帐号，在个人资料 -> 登录处可以断开。","slug":"chrome-tutorial-daily-use","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyutu0086n7t4o13cqhot","content":"<p>如果你看到这篇教程，那就假定你已经在电脑上安装了 Google Chrome 浏览器了。如果不是，我想最好请你先浏览一下这个教程系列的前两篇：总论篇和安装篇。</p>\n<p>好，下面开始日常使用的教程。</p>\n<h3 id=\"总体格局\"><a href=\"#总体格局\" class=\"headerlink\" title=\"总体格局\"></a>总体格局</h3><p>现在，打开你的浏览器看看：最上面是便签栏，可以看到经典的梯形标签；下面就是长长的地址栏，地址栏里面的左边有一个放大镜的图案（会变化的，打开了网页是灰色地球的图案；使用 https 加密方式是一个锁的图案），右边有一个星号，那个是将当前页面添加为标签的按钮；地址栏左边分别是后退前进刷新按钮，右边是一个扳手按钮，其实就是设置按钮了，以后的教程约定称为“扳手”。页面框内会看到你当前安装的一些应用和最常访问的网页（8 个格子），这样你可以快速打开曾经打开过的网页和应用。</p>\n<h3 id=\"网站访问\"><a href=\"#网站访问\" class=\"headerlink\" title=\"网站访问\"></a>网站访问</h3><p>好了，现在可以输入网址来访问网站了，想必很多人一上网就习惯先打开搜索引擎吧？例如 Google（谷歌）、yahoo!（雅虎）和 bing（必应）。如果你是这样，那么这里有一个技巧：如果你在安装浏览器的时候选择了默认的搜索引擎，那么在地址栏输入搜索的关键字就可以直接以默认的搜索引擎搜索了，省去了先访问搜索网页的一步。实际上，你可以随时随地这样做，只要你输入的关键字并不像网址，譬如一个词或者一句话什么的，没有明显的 “.com”“.org” 之类的后缀，chrome 都会认为是搜索关键字。但是要注意，如果你输入的是英文而你之前访问过网址含有你输入的英文字符串，chrome 会智能地帮你补全网址，虽然能减少了网址字母的输入量，但是搜索就变得麻烦了，幸亏在自动弹出的下拉框里可以选择不同的网址或者搜索你输入的字符串。默认搜索引擎可以在 “扳手”-&gt;“选项”-&gt;“基本设置”-&gt;“搜索” 处修改。</p>\n<h3 id=\"右键菜单\"><a href=\"#右键菜单\" class=\"headerlink\" title=\"右键菜单\"></a>右键菜单</h3><p>现在你可以像其他使用浏览器一样使用 Google Chrome 了：打开网页，点开链接等等。而在网页的空白处点击右键，你可以看到：</p>\n<ul>\n<li>“另存为”，是指将当前网页保存在你的电脑上，以便没有联网也可以查看。</li>\n<li>“打印”，不用解释了吧。</li>\n<li>“查看网页源代码”，就是另外打开一个页面查看网页的 HTML 代码。</li>\n<li>“查看网页信息”，是否使用加密链接之类的信息。</li>\n<li>“审查元素”，是一个类似 firefox 里面 firebug 的功能，之后会详细说。</li>\n</ul>\n<p>而如果你是对着链接点击右键，那么弹出的菜单选项就不同了：</p>\n<ul>\n<li>“在新标签中打开链接”，就是新建一个标签打开链接，但留在当前页面。</li>\n<li>“在新窗口中打开链接”，新建一个浏览器窗口打开链接。</li>\n<li>“在隐身窗口中打开链接”，采用隐身模式浏览打开的链接，此模式下浏览器不会记录你的浏览历史并会删除 cookie，具体参见这里 。</li>\n<li>“链接另存为”，将链接所指的文件下载到本地，一部分情况下相当于传统意义的“下载”</li>\n<li>“复制链接地址”，顾名思义就是将链接复制。这个选项非常有用，因为 Chrome 在不加插件的情况下点击下载是不会自动加载迅雷等下载工具的，不像 IE 那样迅雷会接管下载申请。这是为了安全着想，防止网页调用病毒或者木马。但是迅雷的设置里面不是有 “监控剪切板” 的功能么？结合这个来用就解决用下载工具下载的问题了。</li>\n</ul>\n<h3 id=\"书签管理\"><a href=\"#书签管理\" class=\"headerlink\" title=\"书签管理\"></a>书签管理</h3><p>书签就是收藏一个网页以供你日后快速访问。想收藏一个网页只需要点击地址栏里面右边的星号就行。而且你可以分不同的文件夹存放书签，十分人性化。</p>\n<p>点击 “扳手”-&gt;“书签”-&gt; 书签管理器可以实现对书签的总体管理。可以导出导入书签，新建删除移动书签等。</p>\n<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><p>使用电脑要快要方便，快捷键必不可少。下面介绍一些常用的：</p>\n<blockquote>\n<p>F5、Ctrl+F5</p>\n</blockquote>\n<p>刷新、强制刷新。强制刷新是无视缓存彻底重新载入页面。不明白？呃，有时候页面刷新几次还是错误就试试强制刷新吧。</p>\n<blockquote>\n<p>Ctrl+C、Ctrl+X、Ctrl+V</p>\n</blockquote>\n<p>分别是复制、剪切和粘贴。</p>\n<blockquote>\n<p>Ctrl+F</p>\n</blockquote>\n<p>快速查找。这个快捷键几乎全软件通用，可惜半数以上使用电脑的人不知道。按快捷键，页面右上方会出现一个输入框，输入要找的文字浏览器就会在页面上找出来并统计个数和高亮，最适合在大段文字中找东西。</p>\n<blockquote>\n<p>Home、End</p>\n</blockquote>\n<p>移到页面最上、最下。</p>\n<blockquote>\n<p>Ctrl+S</p>\n</blockquote>\n<p>保存当前页面</p>\n<blockquote>\n<p>Ctrl+W</p>\n</blockquote>\n<p>关闭当前标签。你的鼠标不用移上去标签栏了，多方便啊。</p>\n<blockquote>\n<p>Ctrl+T</p>\n</blockquote>\n<p>新建一个标签。你的鼠标不用移上去标签栏了，多方便啊。</p>\n<blockquote>\n<p>Ctrl+Tab、Ctrl+Shift+Tab</p>\n</blockquote>\n<p>转到下一个标签、上一个标签。你的鼠标不用移上去标签栏了，多方便啊。</p>\n<blockquote>\n<p>Ctrl+1、2、3….</p>\n</blockquote>\n<p>分别对应转到第一个标签、第二个标签… 你的鼠标不用移上去标签栏了，多方便啊。</p>\n<p>你可能觉得记住快捷键很麻烦，不过，我可以保证，当使用电脑久了你就反而觉得移动鼠标跨过屏幕更麻烦。尤其是你在双手打字的时候，移开手简直是浪费时间。快捷键只要多用就能记住了，不需要刻意去记。左右开弓总比只用一只手舒服。</p>\n<h3 id=\"基本设置\"><a href=\"#基本设置\" class=\"headerlink\" title=\"基本设置\"></a>基本设置</h3><p>点击“扳手”-&gt;“选项”。我们来关注一些日常的设置。</p>\n<h4 id=\"基本设置-1\"><a href=\"#基本设置-1\" class=\"headerlink\" title=\"基本设置\"></a>基本设置</h4><ul>\n<li>启用时：设置浏览器第一次打开的时候动作</li>\n<li>主页：就是设置主页了</li>\n<li>工具栏：建议将”显示 “主页” 按钮 “、“总是显示书签栏” 都选上</li>\n<li>搜索：建议默认为 Google</li>\n<li>默认浏览器：设置 Google Chrome 为默认浏览器</li>\n</ul>\n<h4 id=\"个人资料\"><a href=\"#个人资料\" class=\"headerlink\" title=\"个人资料\"></a>个人资料</h4><ul>\n<li>密码：设置是否保存你输入的密码和管理密码</li>\n<li>浏览数据：从其他浏览器导入你的书签等数据</li>\n<li>主题：就是改皮肤了</li>\n</ul>\n<h4 id=\"高级选项\"><a href=\"#高级选项\" class=\"headerlink\" title=\"高级选项\"></a>高级选项</h4><ul>\n<li>隐私设置：这里可以清楚你的上网记录以及产生的垃圾</li>\n<li>翻译：建议选上。当你浏览外文网站浏览器就会询问你是否需要翻译，或者点右键也可以翻译当前页面</li>\n<li>下载内容：修改下载文件保存的位置</li>\n</ul>\n<h4 id=\"在线同步\"><a href=\"#在线同步\" class=\"headerlink\" title=\"在线同步\"></a>在线同步</h4><p>如果你有一个 Google 帐号，那你用 Chrome 就有福了。Chrome 提供了帐号同步服务，可以在线保存你的浏览器上的书签、设置、应用等。知道这意味这什么吗？简单来说就是无论你在哪上网，使用哪台电脑上网，只要你使用 Chrome 并且登录你的 Google 帐号，那么 Chrome 就会自动变成你日常使用的那个 Chrome——你的设置、书签、应用全部都会自动“回来“，无需重新设置，也不用怕辛辛苦苦找的书签丢失。</p>\n<p>点击 “扳手“-&gt;” 登录到 chrome 浏览器 “，输入邮箱和密码登录。接着可以选择同步的内容，一般选书签、应用程序、扩展程序、主题和偏好设置就行。然后你可以想象你已经“保存游戏” 了～当在其他电脑上安装新的 chrome 时，直接登录你的帐号，chrome 就会自动 “读取游戏”。如果你想登出帐号，在个人资料 -&gt; 登录处可以断开。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果你看到这篇教程，那就假定你已经在电脑上安装了 Google Chrome 浏览器了。如果不是，我想最好请你先浏览一下这个教程系列的前两篇：总论篇和安装篇。</p>\n<p>好，下面开始日常使用的教程。</p>\n<h3 id=\"总体格局\"><a href=\"#总体格局\" class=\"headerlink\" title=\"总体格局\"></a>总体格局</h3><p>现在，打开你的浏览器看看：最上面是便签栏，可以看到经典的梯形标签；下面就是长长的地址栏，地址栏里面的左边有一个放大镜的图案（会变化的，打开了网页是灰色地球的图案；使用 https 加密方式是一个锁的图案），右边有一个星号，那个是将当前页面添加为标签的按钮；地址栏左边分别是后退前进刷新按钮，右边是一个扳手按钮，其实就是设置按钮了，以后的教程约定称为“扳手”。页面框内会看到你当前安装的一些应用和最常访问的网页（8 个格子），这样你可以快速打开曾经打开过的网页和应用。</p>\n<h3 id=\"网站访问\"><a href=\"#网站访问\" class=\"headerlink\" title=\"网站访问\"></a>网站访问</h3><p>好了，现在可以输入网址来访问网站了，想必很多人一上网就习惯先打开搜索引擎吧？例如 Google（谷歌）、yahoo!（雅虎）和 bing（必应）。如果你是这样，那么这里有一个技巧：如果你在安装浏览器的时候选择了默认的搜索引擎，那么在地址栏输入搜索的关键字就可以直接以默认的搜索引擎搜索了，省去了先访问搜索网页的一步。实际上，你可以随时随地这样做，只要你输入的关键字并不像网址，譬如一个词或者一句话什么的，没有明显的 “.com”“.org” 之类的后缀，chrome 都会认为是搜索关键字。但是要注意，如果你输入的是英文而你之前访问过网址含有你输入的英文字符串，chrome 会智能地帮你补全网址，虽然能减少了网址字母的输入量，但是搜索就变得麻烦了，幸亏在自动弹出的下拉框里可以选择不同的网址或者搜索你输入的字符串。默认搜索引擎可以在 “扳手”-&gt;“选项”-&gt;“基本设置”-&gt;“搜索” 处修改。</p>\n<h3 id=\"右键菜单\"><a href=\"#右键菜单\" class=\"headerlink\" title=\"右键菜单\"></a>右键菜单</h3><p>现在你可以像其他使用浏览器一样使用 Google Chrome 了：打开网页，点开链接等等。而在网页的空白处点击右键，你可以看到：</p>\n<ul>\n<li>“另存为”，是指将当前网页保存在你的电脑上，以便没有联网也可以查看。</li>\n<li>“打印”，不用解释了吧。</li>\n<li>“查看网页源代码”，就是另外打开一个页面查看网页的 HTML 代码。</li>\n<li>“查看网页信息”，是否使用加密链接之类的信息。</li>\n<li>“审查元素”，是一个类似 firefox 里面 firebug 的功能，之后会详细说。</li>\n</ul>\n<p>而如果你是对着链接点击右键，那么弹出的菜单选项就不同了：</p>\n<ul>\n<li>“在新标签中打开链接”，就是新建一个标签打开链接，但留在当前页面。</li>\n<li>“在新窗口中打开链接”，新建一个浏览器窗口打开链接。</li>\n<li>“在隐身窗口中打开链接”，采用隐身模式浏览打开的链接，此模式下浏览器不会记录你的浏览历史并会删除 cookie，具体参见这里 。</li>\n<li>“链接另存为”，将链接所指的文件下载到本地，一部分情况下相当于传统意义的“下载”</li>\n<li>“复制链接地址”，顾名思义就是将链接复制。这个选项非常有用，因为 Chrome 在不加插件的情况下点击下载是不会自动加载迅雷等下载工具的，不像 IE 那样迅雷会接管下载申请。这是为了安全着想，防止网页调用病毒或者木马。但是迅雷的设置里面不是有 “监控剪切板” 的功能么？结合这个来用就解决用下载工具下载的问题了。</li>\n</ul>\n<h3 id=\"书签管理\"><a href=\"#书签管理\" class=\"headerlink\" title=\"书签管理\"></a>书签管理</h3><p>书签就是收藏一个网页以供你日后快速访问。想收藏一个网页只需要点击地址栏里面右边的星号就行。而且你可以分不同的文件夹存放书签，十分人性化。</p>\n<p>点击 “扳手”-&gt;“书签”-&gt; 书签管理器可以实现对书签的总体管理。可以导出导入书签，新建删除移动书签等。</p>\n<h3 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h3><p>使用电脑要快要方便，快捷键必不可少。下面介绍一些常用的：</p>\n<blockquote>\n<p>F5、Ctrl+F5</p>\n</blockquote>\n<p>刷新、强制刷新。强制刷新是无视缓存彻底重新载入页面。不明白？呃，有时候页面刷新几次还是错误就试试强制刷新吧。</p>\n<blockquote>\n<p>Ctrl+C、Ctrl+X、Ctrl+V</p>\n</blockquote>\n<p>分别是复制、剪切和粘贴。</p>\n<blockquote>\n<p>Ctrl+F</p>\n</blockquote>\n<p>快速查找。这个快捷键几乎全软件通用，可惜半数以上使用电脑的人不知道。按快捷键，页面右上方会出现一个输入框，输入要找的文字浏览器就会在页面上找出来并统计个数和高亮，最适合在大段文字中找东西。</p>\n<blockquote>\n<p>Home、End</p>\n</blockquote>\n<p>移到页面最上、最下。</p>\n<blockquote>\n<p>Ctrl+S</p>\n</blockquote>\n<p>保存当前页面</p>\n<blockquote>\n<p>Ctrl+W</p>\n</blockquote>\n<p>关闭当前标签。你的鼠标不用移上去标签栏了，多方便啊。</p>\n<blockquote>\n<p>Ctrl+T</p>\n</blockquote>\n<p>新建一个标签。你的鼠标不用移上去标签栏了，多方便啊。</p>\n<blockquote>\n<p>Ctrl+Tab、Ctrl+Shift+Tab</p>\n</blockquote>\n<p>转到下一个标签、上一个标签。你的鼠标不用移上去标签栏了，多方便啊。</p>\n<blockquote>\n<p>Ctrl+1、2、3….</p>\n</blockquote>\n<p>分别对应转到第一个标签、第二个标签… 你的鼠标不用移上去标签栏了，多方便啊。</p>\n<p>你可能觉得记住快捷键很麻烦，不过，我可以保证，当使用电脑久了你就反而觉得移动鼠标跨过屏幕更麻烦。尤其是你在双手打字的时候，移开手简直是浪费时间。快捷键只要多用就能记住了，不需要刻意去记。左右开弓总比只用一只手舒服。</p>\n<h3 id=\"基本设置\"><a href=\"#基本设置\" class=\"headerlink\" title=\"基本设置\"></a>基本设置</h3><p>点击“扳手”-&gt;“选项”。我们来关注一些日常的设置。</p>\n<h4 id=\"基本设置-1\"><a href=\"#基本设置-1\" class=\"headerlink\" title=\"基本设置\"></a>基本设置</h4><ul>\n<li>启用时：设置浏览器第一次打开的时候动作</li>\n<li>主页：就是设置主页了</li>\n<li>工具栏：建议将”显示 “主页” 按钮 “、“总是显示书签栏” 都选上</li>\n<li>搜索：建议默认为 Google</li>\n<li>默认浏览器：设置 Google Chrome 为默认浏览器</li>\n</ul>\n<h4 id=\"个人资料\"><a href=\"#个人资料\" class=\"headerlink\" title=\"个人资料\"></a>个人资料</h4><ul>\n<li>密码：设置是否保存你输入的密码和管理密码</li>\n<li>浏览数据：从其他浏览器导入你的书签等数据</li>\n<li>主题：就是改皮肤了</li>\n</ul>\n<h4 id=\"高级选项\"><a href=\"#高级选项\" class=\"headerlink\" title=\"高级选项\"></a>高级选项</h4><ul>\n<li>隐私设置：这里可以清楚你的上网记录以及产生的垃圾</li>\n<li>翻译：建议选上。当你浏览外文网站浏览器就会询问你是否需要翻译，或者点右键也可以翻译当前页面</li>\n<li>下载内容：修改下载文件保存的位置</li>\n</ul>\n<h4 id=\"在线同步\"><a href=\"#在线同步\" class=\"headerlink\" title=\"在线同步\"></a>在线同步</h4><p>如果你有一个 Google 帐号，那你用 Chrome 就有福了。Chrome 提供了帐号同步服务，可以在线保存你的浏览器上的书签、设置、应用等。知道这意味这什么吗？简单来说就是无论你在哪上网，使用哪台电脑上网，只要你使用 Chrome 并且登录你的 Google 帐号，那么 Chrome 就会自动变成你日常使用的那个 Chrome——你的设置、书签、应用全部都会自动“回来“，无需重新设置，也不用怕辛辛苦苦找的书签丢失。</p>\n<p>点击 “扳手“-&gt;” 登录到 chrome 浏览器 “，输入邮箱和密码登录。接着可以选择同步的内容，一般选书签、应用程序、扩展程序、主题和偏好设置就行。然后你可以想象你已经“保存游戏” 了～当在其他电脑上安装新的 chrome 时，直接登录你的帐号，chrome 就会自动 “读取游戏”。如果你想登出帐号，在个人资料 -&gt; 登录处可以断开。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Apr 15 2014 15:32:17 GMT+0800 (China Standard Time)","title":"Google Chrome（谷歌浏览器）个人详细教程——日常使用篇","path":"chrome-tutorial-daily-use/","eyeCatchImage":null,"excerpt":null,"date":"2014-01-22T20:33:47.000Z","pv":0,"totalPV":0,"categories":"技术 > 教程","tags":["tutorial","chrome"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2725},{"title":"Google Chrome（谷歌浏览器）个人详细教程——提高篇","id":"9","updated":"2014-04-15T07:36:05.000Z","date":"2014-01-22T20:53:21.000Z","_content":"\n本篇教程介绍一些我在日常使用 Google Chrome 时发现的小技巧（当然这些技巧在网上一搜一大把，但是介绍我在实际使用中经常使用的比介绍所有的技巧更有用）。运用这些技巧，你会发现使用 Chrome 浏览网页是一件惬意的事情。\n\n### 标签页是可以随意拖动的\n有些时候会开很多的标签页，比如我在编程的时候：查在线的 API 文档，查使用技巧，查详细使用教程等等，一开就是上十个标签页。有时有一些标签页使用的频率并不高，切换起来就很麻烦。如果经常使用的两个标签页离得太远，总觉得太累。不过，只要你左键点击某个标签并且按住，然后左右拖动，你会发现标签页是可以左右移来移去的。呵呵这样就可以重新调整标签页的位置了，切换也变得方便了。\n\n### 标签页变窗口\n有时候便签页真的太多了，或者同时几个任务一起进行：一边查资料，一边上 twitter/facebool/google+/weibo，还要看博客，看视频。那么就把主题相同的标签页弄到一个浏览器窗口吧～左键按住标签页向下拖动，是不是发现标签页被 “拉” 出来了？一松手，标签页立刻变窗口！而且，你能将一个浏览器窗口中的标签页 “拉” 出来，“放”到另外一个浏览器窗口上，这不就是标签页分类了么？！具体做法是先 “拉” 出一个标签页作为新的浏览器窗口，然后再 “拉” 出一个标签页，拖动到后一个浏览器窗口的标签栏上，如果 “嵌” 进去了就成功了～\n\n### 强制 https\n有些时候嘛，有些网站嘛，可以使用 https 加密协议访问，但是每次都需要手动在网址前面加，麻烦。应用商店里面有解决这个问题的应用，但是我介绍一个不用任何应用的方法。新建一个标签页，网址输入 chrome://net-internals，回车，来到一个页面如下图：\n![](http://i.imgur.com/mQILn.jpg)\n左边选择“HSTS”，在左边的 Domain 填入你想自动使用 https 的网址，比如 www.google.com，下面的选项 Include subdomains 是包括子域名的意思，就是所有在该网址下的页面都是用 https 协议访问。最后点击按钮 Add 就行了。\n\n### 右键翻译\n如果你还记得之前介绍浏览器设置的时候有提到过的自动翻译，那么这里其实不需要，因为浏览器会自动提醒。但是以防万一，我还是说一下，在遇到一些使用不是你懂的语言的网页，只要在空白出点击右键，有一个翻译的选项，点击之后就会开始对网页进行翻译了，不过机器翻译的质量。。。通常惨不忍睹，所以还是好好学外语吧～嘛有的时候临时用一下也是够给力的。\n","source":"_posts/chrome-tutorial/Google-Chrome（谷歌浏览器）个人详细教程——提高篇.md","raw":"---\ntitle: Google Chrome（谷歌浏览器）个人详细教程——提高篇\ncategories:\n  - [技术, 教程]\ntags: [tutorial, chrome]\npermalink: chrome-tutorial-advance\nid: 9\nupdated: '2014-04-15 15:36:05'\ndate: 2014-01-23 04:53:21\n---\n\n本篇教程介绍一些我在日常使用 Google Chrome 时发现的小技巧（当然这些技巧在网上一搜一大把，但是介绍我在实际使用中经常使用的比介绍所有的技巧更有用）。运用这些技巧，你会发现使用 Chrome 浏览网页是一件惬意的事情。\n\n### 标签页是可以随意拖动的\n有些时候会开很多的标签页，比如我在编程的时候：查在线的 API 文档，查使用技巧，查详细使用教程等等，一开就是上十个标签页。有时有一些标签页使用的频率并不高，切换起来就很麻烦。如果经常使用的两个标签页离得太远，总觉得太累。不过，只要你左键点击某个标签并且按住，然后左右拖动，你会发现标签页是可以左右移来移去的。呵呵这样就可以重新调整标签页的位置了，切换也变得方便了。\n\n### 标签页变窗口\n有时候便签页真的太多了，或者同时几个任务一起进行：一边查资料，一边上 twitter/facebool/google+/weibo，还要看博客，看视频。那么就把主题相同的标签页弄到一个浏览器窗口吧～左键按住标签页向下拖动，是不是发现标签页被 “拉” 出来了？一松手，标签页立刻变窗口！而且，你能将一个浏览器窗口中的标签页 “拉” 出来，“放”到另外一个浏览器窗口上，这不就是标签页分类了么？！具体做法是先 “拉” 出一个标签页作为新的浏览器窗口，然后再 “拉” 出一个标签页，拖动到后一个浏览器窗口的标签栏上，如果 “嵌” 进去了就成功了～\n\n### 强制 https\n有些时候嘛，有些网站嘛，可以使用 https 加密协议访问，但是每次都需要手动在网址前面加，麻烦。应用商店里面有解决这个问题的应用，但是我介绍一个不用任何应用的方法。新建一个标签页，网址输入 chrome://net-internals，回车，来到一个页面如下图：\n![](http://i.imgur.com/mQILn.jpg)\n左边选择“HSTS”，在左边的 Domain 填入你想自动使用 https 的网址，比如 www.google.com，下面的选项 Include subdomains 是包括子域名的意思，就是所有在该网址下的页面都是用 https 协议访问。最后点击按钮 Add 就行了。\n\n### 右键翻译\n如果你还记得之前介绍浏览器设置的时候有提到过的自动翻译，那么这里其实不需要，因为浏览器会自动提醒。但是以防万一，我还是说一下，在遇到一些使用不是你懂的语言的网页，只要在空白出点击右键，有一个翻译的选项，点击之后就会开始对网页进行翻译了，不过机器翻译的质量。。。通常惨不忍睹，所以还是好好学外语吧～嘛有的时候临时用一下也是够给力的。\n","slug":"chrome-tutorial-advance","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyutw008an7t4mj32o96u","content":"<p>本篇教程介绍一些我在日常使用 Google Chrome 时发现的小技巧（当然这些技巧在网上一搜一大把，但是介绍我在实际使用中经常使用的比介绍所有的技巧更有用）。运用这些技巧，你会发现使用 Chrome 浏览网页是一件惬意的事情。</p>\n<h3 id=\"标签页是可以随意拖动的\"><a href=\"#标签页是可以随意拖动的\" class=\"headerlink\" title=\"标签页是可以随意拖动的\"></a>标签页是可以随意拖动的</h3><p>有些时候会开很多的标签页，比如我在编程的时候：查在线的 API 文档，查使用技巧，查详细使用教程等等，一开就是上十个标签页。有时有一些标签页使用的频率并不高，切换起来就很麻烦。如果经常使用的两个标签页离得太远，总觉得太累。不过，只要你左键点击某个标签并且按住，然后左右拖动，你会发现标签页是可以左右移来移去的。呵呵这样就可以重新调整标签页的位置了，切换也变得方便了。</p>\n<h3 id=\"标签页变窗口\"><a href=\"#标签页变窗口\" class=\"headerlink\" title=\"标签页变窗口\"></a>标签页变窗口</h3><p>有时候便签页真的太多了，或者同时几个任务一起进行：一边查资料，一边上 twitter/facebool/google+/weibo，还要看博客，看视频。那么就把主题相同的标签页弄到一个浏览器窗口吧～左键按住标签页向下拖动，是不是发现标签页被 “拉” 出来了？一松手，标签页立刻变窗口！而且，你能将一个浏览器窗口中的标签页 “拉” 出来，“放”到另外一个浏览器窗口上，这不就是标签页分类了么？！具体做法是先 “拉” 出一个标签页作为新的浏览器窗口，然后再 “拉” 出一个标签页，拖动到后一个浏览器窗口的标签栏上，如果 “嵌” 进去了就成功了～</p>\n<h3 id=\"强制-https\"><a href=\"#强制-https\" class=\"headerlink\" title=\"强制 https\"></a>强制 https</h3><p>有些时候嘛，有些网站嘛，可以使用 https 加密协议访问，但是每次都需要手动在网址前面加，麻烦。应用商店里面有解决这个问题的应用，但是我介绍一个不用任何应用的方法。新建一个标签页，网址输入 chrome://net-internals，回车，来到一个页面如下图：<br><img src=\"http://i.imgur.com/mQILn.jpg\" alt><br>左边选择“HSTS”，在左边的 Domain 填入你想自动使用 https 的网址，比如 www.google.com，下面的选项 Include subdomains 是包括子域名的意思，就是所有在该网址下的页面都是用 https 协议访问。最后点击按钮 Add 就行了。</p>\n<h3 id=\"右键翻译\"><a href=\"#右键翻译\" class=\"headerlink\" title=\"右键翻译\"></a>右键翻译</h3><p>如果你还记得之前介绍浏览器设置的时候有提到过的自动翻译，那么这里其实不需要，因为浏览器会自动提醒。但是以防万一，我还是说一下，在遇到一些使用不是你懂的语言的网页，只要在空白出点击右键，有一个翻译的选项，点击之后就会开始对网页进行翻译了，不过机器翻译的质量。。。通常惨不忍睹，所以还是好好学外语吧～嘛有的时候临时用一下也是够给力的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本篇教程介绍一些我在日常使用 Google Chrome 时发现的小技巧（当然这些技巧在网上一搜一大把，但是介绍我在实际使用中经常使用的比介绍所有的技巧更有用）。运用这些技巧，你会发现使用 Chrome 浏览网页是一件惬意的事情。</p>\n<h3 id=\"标签页是可以随意拖动的\"><a href=\"#标签页是可以随意拖动的\" class=\"headerlink\" title=\"标签页是可以随意拖动的\"></a>标签页是可以随意拖动的</h3><p>有些时候会开很多的标签页，比如我在编程的时候：查在线的 API 文档，查使用技巧，查详细使用教程等等，一开就是上十个标签页。有时有一些标签页使用的频率并不高，切换起来就很麻烦。如果经常使用的两个标签页离得太远，总觉得太累。不过，只要你左键点击某个标签并且按住，然后左右拖动，你会发现标签页是可以左右移来移去的。呵呵这样就可以重新调整标签页的位置了，切换也变得方便了。</p>\n<h3 id=\"标签页变窗口\"><a href=\"#标签页变窗口\" class=\"headerlink\" title=\"标签页变窗口\"></a>标签页变窗口</h3><p>有时候便签页真的太多了，或者同时几个任务一起进行：一边查资料，一边上 twitter/facebool/google+/weibo，还要看博客，看视频。那么就把主题相同的标签页弄到一个浏览器窗口吧～左键按住标签页向下拖动，是不是发现标签页被 “拉” 出来了？一松手，标签页立刻变窗口！而且，你能将一个浏览器窗口中的标签页 “拉” 出来，“放”到另外一个浏览器窗口上，这不就是标签页分类了么？！具体做法是先 “拉” 出一个标签页作为新的浏览器窗口，然后再 “拉” 出一个标签页，拖动到后一个浏览器窗口的标签栏上，如果 “嵌” 进去了就成功了～</p>\n<h3 id=\"强制-https\"><a href=\"#强制-https\" class=\"headerlink\" title=\"强制 https\"></a>强制 https</h3><p>有些时候嘛，有些网站嘛，可以使用 https 加密协议访问，但是每次都需要手动在网址前面加，麻烦。应用商店里面有解决这个问题的应用，但是我介绍一个不用任何应用的方法。新建一个标签页，网址输入 chrome://net-internals，回车，来到一个页面如下图：<br><img src=\"http://i.imgur.com/mQILn.jpg\" alt><br>左边选择“HSTS”，在左边的 Domain 填入你想自动使用 https 的网址，比如 www.google.com，下面的选项 Include subdomains 是包括子域名的意思，就是所有在该网址下的页面都是用 https 协议访问。最后点击按钮 Add 就行了。</p>\n<h3 id=\"右键翻译\"><a href=\"#右键翻译\" class=\"headerlink\" title=\"右键翻译\"></a>右键翻译</h3><p>如果你还记得之前介绍浏览器设置的时候有提到过的自动翻译，那么这里其实不需要，因为浏览器会自动提醒。但是以防万一，我还是说一下，在遇到一些使用不是你懂的语言的网页，只要在空白出点击右键，有一个翻译的选项，点击之后就会开始对网页进行翻译了，不过机器翻译的质量。。。通常惨不忍睹，所以还是好好学外语吧～嘛有的时候临时用一下也是够给力的。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"http://i.imgur.com/mQILn.jpg","popularPost_tmp_gaData":{"updated":"Tue Apr 15 2014 15:36:05 GMT+0800 (China Standard Time)","title":"Google Chrome（谷歌浏览器）个人详细教程——提高篇","path":"chrome-tutorial-advance/","eyeCatchImage":"http://i.imgur.com/mQILn.jpg","excerpt":null,"date":"2014-01-22T20:53:21.000Z","pv":0,"totalPV":0,"categories":"技术 > 教程","tags":["tutorial","chrome"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1036},{"title":"python × Qt 应用开发 · 0 -- 序","id":"10","updated":"2014-04-15T07:44:24.000Z","date":"2014-03-13T15:47:44.000Z","_content":"\n## python？\npython 是个很好用的语言，即使学校没有教，很多同学也会自己学。虽然比较少用 python 来做桌面程序，但是某些情况下需要用到 python 的数学或者统计功能的时候，又需要用有 GUI 的程序来交差。个人比较推荐用 C# 来做桌面应用程序（Windows 平台的话），只是 VS 这庞大的 IDE 和各种库还是会让某些有独特癖好的人侧目。这个时候用大家都比较喜欢的 python 就最好啦，搭配 Qt 来做 GUI 实在是方便。\n\n于是就有了本系列。对比起其他教程 / 指南里只有单独的控件编写实例，在系列中我会使用 python 和 Qt 真实地编写出一个应用来，一边写应用一边写本系列的博文。途中遇到的问题也会记录下来并且尽量还原解决过程，希望能让读者有开发的真实感。实际上我在自主学习的时候在找资料和控件的测试使用上已经疲于奔命，也希望本系列能够总结出一个比较有效和固定的流程。\n\n## Qt？\n其实要在 python 实现 GUI 并不一定要使用 Qt，python 原生自带的 Tkinter 和下载一个 wxPython 库也可以。只是 Tkinter 嘛，做出来的界面实在难看，你看 python 自带的 IDLE 就知道了；wxPython 嘛，似乎没有什么比较成型的 GUI 设计工具。Qt 的话有一个 QtDesigner，比较好用。于是这里就是用 Qt 了。（实际上是以前写 C++ 的时候 GUI 用 Qt，不想转了 = =）\n\nOK，现在选定了 Qt 之后还有一件事，就是用 PyQt 还是 PySide。为什么有两个呢？嗯，我没有仔细去研究过，Qt 本身的历史就比较复杂。这里我选用 PySide 来，没别的，因为之前的一个科创项目 [Micro XenServer Manager](https://github.com/exoticknight/Micro-XenServer-Manager) 中已经用了 PyQt，这里就尝试使用另外一个。在网上搜寻过相关资料，PySide 和 pyqt 的差别可以说在普通情况下影响不大，所以打算使用 pyqt 的读者也可以看本系列的博文来共同学习。\n\n至于安装 python 和 PySide，不在这里详述，在 Windows 下 python 和 PySide 的安装就是两个 exe 文件的事情而已，Linux 下的话会用的人比我还专业。注意 QtDesigner 也要安装上，方法自己 Google 去。（最新版的 PySide 似乎会附带上）\n\n系列博文使用的是 python2.7.3，PySide1.2.1。","source":"_posts/python-with-Qt-application-development/python-×-Qt应用开发-·-0-序.md","raw":"---\ntitle: python × Qt 应用开发 · 0 -- 序\ncategories:\n  - [技术, 软件]\n  - [编程语言, python]\ntags: [python, Qt, software]\npermalink: python-with-qt-application-development-0-prologue\nid: 10\nupdated: '2014-04-15 15:44:24'\ndate: 2014-03-13 23:47:44\n---\n\n## python？\npython 是个很好用的语言，即使学校没有教，很多同学也会自己学。虽然比较少用 python 来做桌面程序，但是某些情况下需要用到 python 的数学或者统计功能的时候，又需要用有 GUI 的程序来交差。个人比较推荐用 C# 来做桌面应用程序（Windows 平台的话），只是 VS 这庞大的 IDE 和各种库还是会让某些有独特癖好的人侧目。这个时候用大家都比较喜欢的 python 就最好啦，搭配 Qt 来做 GUI 实在是方便。\n\n于是就有了本系列。对比起其他教程 / 指南里只有单独的控件编写实例，在系列中我会使用 python 和 Qt 真实地编写出一个应用来，一边写应用一边写本系列的博文。途中遇到的问题也会记录下来并且尽量还原解决过程，希望能让读者有开发的真实感。实际上我在自主学习的时候在找资料和控件的测试使用上已经疲于奔命，也希望本系列能够总结出一个比较有效和固定的流程。\n\n## Qt？\n其实要在 python 实现 GUI 并不一定要使用 Qt，python 原生自带的 Tkinter 和下载一个 wxPython 库也可以。只是 Tkinter 嘛，做出来的界面实在难看，你看 python 自带的 IDLE 就知道了；wxPython 嘛，似乎没有什么比较成型的 GUI 设计工具。Qt 的话有一个 QtDesigner，比较好用。于是这里就是用 Qt 了。（实际上是以前写 C++ 的时候 GUI 用 Qt，不想转了 = =）\n\nOK，现在选定了 Qt 之后还有一件事，就是用 PyQt 还是 PySide。为什么有两个呢？嗯，我没有仔细去研究过，Qt 本身的历史就比较复杂。这里我选用 PySide 来，没别的，因为之前的一个科创项目 [Micro XenServer Manager](https://github.com/exoticknight/Micro-XenServer-Manager) 中已经用了 PyQt，这里就尝试使用另外一个。在网上搜寻过相关资料，PySide 和 pyqt 的差别可以说在普通情况下影响不大，所以打算使用 pyqt 的读者也可以看本系列的博文来共同学习。\n\n至于安装 python 和 PySide，不在这里详述，在 Windows 下 python 和 PySide 的安装就是两个 exe 文件的事情而已，Linux 下的话会用的人比我还专业。注意 QtDesigner 也要安装上，方法自己 Google 去。（最新版的 PySide 似乎会附带上）\n\n系列博文使用的是 python2.7.3，PySide1.2.1。","slug":"python-with-qt-application-development-0-prologue","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyutx008en7t4u0upp2gw","content":"<h2 id=\"python？\"><a href=\"#python？\" class=\"headerlink\" title=\"python？\"></a>python？</h2><p>python 是个很好用的语言，即使学校没有教，很多同学也会自己学。虽然比较少用 python 来做桌面程序，但是某些情况下需要用到 python 的数学或者统计功能的时候，又需要用有 GUI 的程序来交差。个人比较推荐用 C# 来做桌面应用程序（Windows 平台的话），只是 VS 这庞大的 IDE 和各种库还是会让某些有独特癖好的人侧目。这个时候用大家都比较喜欢的 python 就最好啦，搭配 Qt 来做 GUI 实在是方便。</p>\n<p>于是就有了本系列。对比起其他教程 / 指南里只有单独的控件编写实例，在系列中我会使用 python 和 Qt 真实地编写出一个应用来，一边写应用一边写本系列的博文。途中遇到的问题也会记录下来并且尽量还原解决过程，希望能让读者有开发的真实感。实际上我在自主学习的时候在找资料和控件的测试使用上已经疲于奔命，也希望本系列能够总结出一个比较有效和固定的流程。</p>\n<h2 id=\"Qt？\"><a href=\"#Qt？\" class=\"headerlink\" title=\"Qt？\"></a>Qt？</h2><p>其实要在 python 实现 GUI 并不一定要使用 Qt，python 原生自带的 Tkinter 和下载一个 wxPython 库也可以。只是 Tkinter 嘛，做出来的界面实在难看，你看 python 自带的 IDLE 就知道了；wxPython 嘛，似乎没有什么比较成型的 GUI 设计工具。Qt 的话有一个 QtDesigner，比较好用。于是这里就是用 Qt 了。（实际上是以前写 C++ 的时候 GUI 用 Qt，不想转了 = =）</p>\n<p>OK，现在选定了 Qt 之后还有一件事，就是用 PyQt 还是 PySide。为什么有两个呢？嗯，我没有仔细去研究过，Qt 本身的历史就比较复杂。这里我选用 PySide 来，没别的，因为之前的一个科创项目 <a href=\"https://github.com/exoticknight/Micro-XenServer-Manager\" target=\"_blank\" rel=\"noopener\">Micro XenServer Manager</a> 中已经用了 PyQt，这里就尝试使用另外一个。在网上搜寻过相关资料，PySide 和 pyqt 的差别可以说在普通情况下影响不大，所以打算使用 pyqt 的读者也可以看本系列的博文来共同学习。</p>\n<p>至于安装 python 和 PySide，不在这里详述，在 Windows 下 python 和 PySide 的安装就是两个 exe 文件的事情而已，Linux 下的话会用的人比我还专业。注意 QtDesigner 也要安装上，方法自己 Google 去。（最新版的 PySide 似乎会附带上）</p>\n<p>系列博文使用的是 python2.7.3，PySide1.2.1。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"python？\"><a href=\"#python？\" class=\"headerlink\" title=\"python？\"></a>python？</h2><p>python 是个很好用的语言，即使学校没有教，很多同学也会自己学。虽然比较少用 python 来做桌面程序，但是某些情况下需要用到 python 的数学或者统计功能的时候，又需要用有 GUI 的程序来交差。个人比较推荐用 C# 来做桌面应用程序（Windows 平台的话），只是 VS 这庞大的 IDE 和各种库还是会让某些有独特癖好的人侧目。这个时候用大家都比较喜欢的 python 就最好啦，搭配 Qt 来做 GUI 实在是方便。</p>\n<p>于是就有了本系列。对比起其他教程 / 指南里只有单独的控件编写实例，在系列中我会使用 python 和 Qt 真实地编写出一个应用来，一边写应用一边写本系列的博文。途中遇到的问题也会记录下来并且尽量还原解决过程，希望能让读者有开发的真实感。实际上我在自主学习的时候在找资料和控件的测试使用上已经疲于奔命，也希望本系列能够总结出一个比较有效和固定的流程。</p>\n<h2 id=\"Qt？\"><a href=\"#Qt？\" class=\"headerlink\" title=\"Qt？\"></a>Qt？</h2><p>其实要在 python 实现 GUI 并不一定要使用 Qt，python 原生自带的 Tkinter 和下载一个 wxPython 库也可以。只是 Tkinter 嘛，做出来的界面实在难看，你看 python 自带的 IDLE 就知道了；wxPython 嘛，似乎没有什么比较成型的 GUI 设计工具。Qt 的话有一个 QtDesigner，比较好用。于是这里就是用 Qt 了。（实际上是以前写 C++ 的时候 GUI 用 Qt，不想转了 = =）</p>\n<p>OK，现在选定了 Qt 之后还有一件事，就是用 PyQt 还是 PySide。为什么有两个呢？嗯，我没有仔细去研究过，Qt 本身的历史就比较复杂。这里我选用 PySide 来，没别的，因为之前的一个科创项目 <a href=\"https://github.com/exoticknight/Micro-XenServer-Manager\" target=\"_blank\" rel=\"noopener\">Micro XenServer Manager</a> 中已经用了 PyQt，这里就尝试使用另外一个。在网上搜寻过相关资料，PySide 和 pyqt 的差别可以说在普通情况下影响不大，所以打算使用 pyqt 的读者也可以看本系列的博文来共同学习。</p>\n<p>至于安装 python 和 PySide，不在这里详述，在 Windows 下 python 和 PySide 的安装就是两个 exe 文件的事情而已，Linux 下的话会用的人比我还专业。注意 QtDesigner 也要安装上，方法自己 Google 去。（最新版的 PySide 似乎会附带上）</p>\n<p>系列博文使用的是 python2.7.3，PySide1.2.1。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Apr 15 2014 15:44:24 GMT+0800 (China Standard Time)","title":"python × Qt 应用开发 · 0 -- 序","path":"python-with-qt-application-development-0-prologue/","eyeCatchImage":null,"excerpt":null,"date":"2014-03-13T15:47:44.000Z","pv":0,"totalPV":0,"categories":"技术 > 编程语言 > python > 软件","tags":["python","Qt","software"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1040},{"title":"python × Qt 应用开发 · 2.5 -- 改进软件界面","id":"38","updated":"2015-03-20T09:11:30.000Z","date":"2015-03-20T06:35:16.000Z","_content":"\n[上一篇文章](/python-with-qt-application-development-2-preliminary-design/) 完成基本的界面，但是应用看起来并不算特别好看。\n\n主要是因为软件的界面使用默认的样式和普通的窗口框架。接下来从这两个方面出发，尝试改进软件界面。\n\n## 自定义样式\n\nQt 给控件的样式化提供了一定的自由度，包括背景色、边框和特定控件的自定义，使用类似 CSS 的语法。这要求编写软件的人了解基础的 CSS 语法。各种控件和详细例子：[点这里](http://qt-project.org/doc/qt-4.8/stylesheet-examples.html)\n\n要改变一个控件的样式，可以在属性编辑器中找到 `styleSheet` 属性，将 CSS 代码写进去。\n\n这里以中间栏的输入框作为例子。\n\n选择输入框，在属性编辑器中找到 `styleSheet`，输入以下 CSS 代码。\n\n```css\nQLineEdit{\nborder-radius: 10px;\npadding: 5px 10px;\nmargin: 0 10%;\nbackground-color: white;\nborder: 1px solid #c9c9c9;\ncolor: #1b1b1e;\n}\nQLineEdit:hover{\nbackground-color: white;\nborder: 1px solid #969696;\n}\n```\n\n结束编辑，立刻可以看到效果。\n\n修改前：\n\n![前](https://i.imgur.com/HyNEzg9.png)\n\n修改后：\n\n![后](https://i.imgur.com/YYoVsyW.png)\n\n给 widget 加上背景颜色。\n\n```css\nQWidget{\nbackground-color:#xxx;\n}\n```\n\n![widget 背景色](https://i.imgur.com/MxL75UV.png)\n\n消除控件的自带边框。在属性编辑器中找到 `frameShape`，设置值为 `NoFrame`；找到 `frameShadow`，设置值为 `Plain`；找到 `lineWidth`，设置值为 `0`。\n\n![消除边框](https://i.imgur.com/siT0NF2.png)\n\n自定义按钮样式。\n\n```css\nQPushButton{\nbackground-color: transparent;\nborder-style:outset;\nborder-width: 0px;\npadding: 5px 0;\ncolor: #fff;\n}\n```\n\n![自定义按钮](https://i.imgur.com/S69GG8T.png)\n\n其他细节都是类似的修改。\n\n## 使用无框架窗口\n\n必须要在代码中实现。\n\n回忆本系列第一篇文章，使用 QtDesigner 做出来的知识 view 而已，controller 是需要在 `MainWindow.py` 中实现的。这里不再累述。\n\n找到 `initUI(self)` 函数，加入如下代码：\n\n```python\n# no frame window\nself.setWindowFlags(QtCore.Qt.FramelessWindowHint)\n```\n\n![无框架窗口](https://i.imgur.com/x3w4utd.png)\n\n没有了系统默认的框架，好看的同时也失去了三个系统提供的便捷功能：功能按钮、窗口拉伸和窗口移动。\n\n下面来解决。\n\n### 功能按钮\n在最上面加上一个控件，充当窗口的标题栏和关闭按钮的容器。\n\n在控件里面简单地拖进一个标签控件作为标题，一个按钮作为关闭按钮。控件设置为蓝色。\n\n运行（非预览）之后发现背景色没有完全填充，如下图。\n\n![背景色没有完全填充](https://i.imgur.com/YcvA5M8.png)\n\n这个要在代码里面修复。\n\n找到 `initUI(self)` 函数，加入如下代码：\n\n```python\nself.ui.widgetHead.setAttribute(QtCore.Qt.WA_StyledBackground, True)\nself.ui.widgetLeft.setAttribute(QtCore.Qt.WA_StyledBackground, True)\n```\n\n具体来说就是在控件上调用 `setAttribute(QtCore.Qt.WA_StyledBackground, True)`。\n\n### 窗口拉伸\n需要使用到一个名为 `QSizeGrip` 的类，只是这个类不能在 QtDesigner 中直接拖入，需要在代码中手动添加。\n\n找到右边栏 widget 的 layout，更名为 `verticalLayoutRight`。然后在 `initUI(self)` 函数中添加如下代码：\n\n```python\nself.ui.verticalLayoutRight.addWidget(QtGui.QSizeGrip(self), 0, QtCore.Qt.AlignBottom | QtCore.Qt.AlignRight)\n```\n\n### 窗口移动\n窗口移动的功能是设置在窗口的标题栏上的，自实现的标题栏也要实现此功能。\n\n在 `MainWindow` 类下，直接贴入以下函数即可：\n\n```python\ndef mousePressEvent(self, event):\n    \"\"\"override mouse press event\"\"\"\n    self._postion = event.globalPos() - self.pos()\n\ndef mouseMoveEvent(self, event):\n    \"\"\"override mouse move event\"\"\"\n    self.move(event.globalPos() - self._postion)\n\ndef closeEvent(self, event):\n    \"\"\"override close event\"\"\"\n    event.accept()\n```\n\n原理很简单，自己处理鼠标点击和拖动事件。\n\n最终形态。\n\n![最终](https://i.imgur.com/omAswmv.png)","source":"_posts/python-with-Qt-application-development/python-×-Qt应用开发-·-2-5-改进软件界面.md","raw":"---\ntitle: python × Qt 应用开发 · 2.5 -- 改进软件界面\ncategories:\n  - [技术, 软件]\n  - [编程语言, python]\ntags: [python, Qt, software]\npermalink: python-with-qt-application-development-2-5-developing-gui\nid: 38\nupdated: '2015-03-20 17:11:30'\ndate: 2015-03-20 14:35:16\n---\n\n[上一篇文章](/python-with-qt-application-development-2-preliminary-design/) 完成基本的界面，但是应用看起来并不算特别好看。\n\n主要是因为软件的界面使用默认的样式和普通的窗口框架。接下来从这两个方面出发，尝试改进软件界面。\n\n## 自定义样式\n\nQt 给控件的样式化提供了一定的自由度，包括背景色、边框和特定控件的自定义，使用类似 CSS 的语法。这要求编写软件的人了解基础的 CSS 语法。各种控件和详细例子：[点这里](http://qt-project.org/doc/qt-4.8/stylesheet-examples.html)\n\n要改变一个控件的样式，可以在属性编辑器中找到 `styleSheet` 属性，将 CSS 代码写进去。\n\n这里以中间栏的输入框作为例子。\n\n选择输入框，在属性编辑器中找到 `styleSheet`，输入以下 CSS 代码。\n\n```css\nQLineEdit{\nborder-radius: 10px;\npadding: 5px 10px;\nmargin: 0 10%;\nbackground-color: white;\nborder: 1px solid #c9c9c9;\ncolor: #1b1b1e;\n}\nQLineEdit:hover{\nbackground-color: white;\nborder: 1px solid #969696;\n}\n```\n\n结束编辑，立刻可以看到效果。\n\n修改前：\n\n![前](https://i.imgur.com/HyNEzg9.png)\n\n修改后：\n\n![后](https://i.imgur.com/YYoVsyW.png)\n\n给 widget 加上背景颜色。\n\n```css\nQWidget{\nbackground-color:#xxx;\n}\n```\n\n![widget 背景色](https://i.imgur.com/MxL75UV.png)\n\n消除控件的自带边框。在属性编辑器中找到 `frameShape`，设置值为 `NoFrame`；找到 `frameShadow`，设置值为 `Plain`；找到 `lineWidth`，设置值为 `0`。\n\n![消除边框](https://i.imgur.com/siT0NF2.png)\n\n自定义按钮样式。\n\n```css\nQPushButton{\nbackground-color: transparent;\nborder-style:outset;\nborder-width: 0px;\npadding: 5px 0;\ncolor: #fff;\n}\n```\n\n![自定义按钮](https://i.imgur.com/S69GG8T.png)\n\n其他细节都是类似的修改。\n\n## 使用无框架窗口\n\n必须要在代码中实现。\n\n回忆本系列第一篇文章，使用 QtDesigner 做出来的知识 view 而已，controller 是需要在 `MainWindow.py` 中实现的。这里不再累述。\n\n找到 `initUI(self)` 函数，加入如下代码：\n\n```python\n# no frame window\nself.setWindowFlags(QtCore.Qt.FramelessWindowHint)\n```\n\n![无框架窗口](https://i.imgur.com/x3w4utd.png)\n\n没有了系统默认的框架，好看的同时也失去了三个系统提供的便捷功能：功能按钮、窗口拉伸和窗口移动。\n\n下面来解决。\n\n### 功能按钮\n在最上面加上一个控件，充当窗口的标题栏和关闭按钮的容器。\n\n在控件里面简单地拖进一个标签控件作为标题，一个按钮作为关闭按钮。控件设置为蓝色。\n\n运行（非预览）之后发现背景色没有完全填充，如下图。\n\n![背景色没有完全填充](https://i.imgur.com/YcvA5M8.png)\n\n这个要在代码里面修复。\n\n找到 `initUI(self)` 函数，加入如下代码：\n\n```python\nself.ui.widgetHead.setAttribute(QtCore.Qt.WA_StyledBackground, True)\nself.ui.widgetLeft.setAttribute(QtCore.Qt.WA_StyledBackground, True)\n```\n\n具体来说就是在控件上调用 `setAttribute(QtCore.Qt.WA_StyledBackground, True)`。\n\n### 窗口拉伸\n需要使用到一个名为 `QSizeGrip` 的类，只是这个类不能在 QtDesigner 中直接拖入，需要在代码中手动添加。\n\n找到右边栏 widget 的 layout，更名为 `verticalLayoutRight`。然后在 `initUI(self)` 函数中添加如下代码：\n\n```python\nself.ui.verticalLayoutRight.addWidget(QtGui.QSizeGrip(self), 0, QtCore.Qt.AlignBottom | QtCore.Qt.AlignRight)\n```\n\n### 窗口移动\n窗口移动的功能是设置在窗口的标题栏上的，自实现的标题栏也要实现此功能。\n\n在 `MainWindow` 类下，直接贴入以下函数即可：\n\n```python\ndef mousePressEvent(self, event):\n    \"\"\"override mouse press event\"\"\"\n    self._postion = event.globalPos() - self.pos()\n\ndef mouseMoveEvent(self, event):\n    \"\"\"override mouse move event\"\"\"\n    self.move(event.globalPos() - self._postion)\n\ndef closeEvent(self, event):\n    \"\"\"override close event\"\"\"\n    event.accept()\n```\n\n原理很简单，自己处理鼠标点击和拖动事件。\n\n最终形态。\n\n![最终](https://i.imgur.com/omAswmv.png)","slug":"python-with-qt-application-development-2-5-developing-gui","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuty008in7t4iu3j23vo","content":"<p><a href=\"/python-with-qt-application-development-2-preliminary-design/\">上一篇文章</a> 完成基本的界面，但是应用看起来并不算特别好看。</p>\n<p>主要是因为软件的界面使用默认的样式和普通的窗口框架。接下来从这两个方面出发，尝试改进软件界面。</p>\n<h2 id=\"自定义样式\"><a href=\"#自定义样式\" class=\"headerlink\" title=\"自定义样式\"></a>自定义样式</h2><p>Qt 给控件的样式化提供了一定的自由度，包括背景色、边框和特定控件的自定义，使用类似 CSS 的语法。这要求编写软件的人了解基础的 CSS 语法。各种控件和详细例子：<a href=\"http://qt-project.org/doc/qt-4.8/stylesheet-examples.html\" target=\"_blank\" rel=\"noopener\">点这里</a></p>\n<p>要改变一个控件的样式，可以在属性编辑器中找到 <code>styleSheet</code> 属性，将 CSS 代码写进去。</p>\n<p>这里以中间栏的输入框作为例子。</p>\n<p>选择输入框，在属性编辑器中找到 <code>styleSheet</code>，输入以下 CSS 代码。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">QLineEdit</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">5px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">10%</span>;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>: white;</span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#c9c9c9</span>;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: <span class=\"number\">#1b1b1e</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">QLineEdit</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>: white;</span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#969696</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结束编辑，立刻可以看到效果。</p>\n<p>修改前：</p>\n<p><img src=\"https://i.imgur.com/HyNEzg9.png\" alt=\"前\"></p>\n<p>修改后：</p>\n<p><img src=\"https://i.imgur.com/YYoVsyW.png\" alt=\"后\"></p>\n<p>给 widget 加上背景颜色。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">QWidget</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>:#xxx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/MxL75UV.png\" alt=\"widget 背景色\"></p>\n<p>消除控件的自带边框。在属性编辑器中找到 <code>frameShape</code>，设置值为 <code>NoFrame</code>；找到 <code>frameShadow</code>，设置值为 <code>Plain</code>；找到 <code>lineWidth</code>，设置值为 <code>0</code>。</p>\n<p><img src=\"https://i.imgur.com/siT0NF2.png\" alt=\"消除边框\"></p>\n<p>自定义按钮样式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">QPushButton</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>: transparent;</span><br><span class=\"line\"><span class=\"attribute\">border-style</span>:outset;</span><br><span class=\"line\"><span class=\"attribute\">border-width</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/S69GG8T.png\" alt=\"自定义按钮\"></p>\n<p>其他细节都是类似的修改。</p>\n<h2 id=\"使用无框架窗口\"><a href=\"#使用无框架窗口\" class=\"headerlink\" title=\"使用无框架窗口\"></a>使用无框架窗口</h2><p>必须要在代码中实现。</p>\n<p>回忆本系列第一篇文章，使用 QtDesigner 做出来的知识 view 而已，controller 是需要在 <code>MainWindow.py</code> 中实现的。这里不再累述。</p>\n<p>找到 <code>initUI(self)</code> 函数，加入如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># no frame window</span></span><br><span class=\"line\">self.setWindowFlags(QtCore.Qt.FramelessWindowHint)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/x3w4utd.png\" alt=\"无框架窗口\"></p>\n<p>没有了系统默认的框架，好看的同时也失去了三个系统提供的便捷功能：功能按钮、窗口拉伸和窗口移动。</p>\n<p>下面来解决。</p>\n<h3 id=\"功能按钮\"><a href=\"#功能按钮\" class=\"headerlink\" title=\"功能按钮\"></a>功能按钮</h3><p>在最上面加上一个控件，充当窗口的标题栏和关闭按钮的容器。</p>\n<p>在控件里面简单地拖进一个标签控件作为标题，一个按钮作为关闭按钮。控件设置为蓝色。</p>\n<p>运行（非预览）之后发现背景色没有完全填充，如下图。</p>\n<p><img src=\"https://i.imgur.com/YcvA5M8.png\" alt=\"背景色没有完全填充\"></p>\n<p>这个要在代码里面修复。</p>\n<p>找到 <code>initUI(self)</code> 函数，加入如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.ui.widgetHead.setAttribute(QtCore.Qt.WA_StyledBackground, <span class=\"literal\">True</span>)</span><br><span class=\"line\">self.ui.widgetLeft.setAttribute(QtCore.Qt.WA_StyledBackground, <span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>具体来说就是在控件上调用 <code>setAttribute(QtCore.Qt.WA_StyledBackground, True)</code>。</p>\n<h3 id=\"窗口拉伸\"><a href=\"#窗口拉伸\" class=\"headerlink\" title=\"窗口拉伸\"></a>窗口拉伸</h3><p>需要使用到一个名为 <code>QSizeGrip</code> 的类，只是这个类不能在 QtDesigner 中直接拖入，需要在代码中手动添加。</p>\n<p>找到右边栏 widget 的 layout，更名为 <code>verticalLayoutRight</code>。然后在 <code>initUI(self)</code> 函数中添加如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.ui.verticalLayoutRight.addWidget(QtGui.QSizeGrip(self), <span class=\"number\">0</span>, QtCore.Qt.AlignBottom | QtCore.Qt.AlignRight)</span><br></pre></td></tr></table></figure>\n<h3 id=\"窗口移动\"><a href=\"#窗口移动\" class=\"headerlink\" title=\"窗口移动\"></a>窗口移动</h3><p>窗口移动的功能是设置在窗口的标题栏上的，自实现的标题栏也要实现此功能。</p>\n<p>在 <code>MainWindow</code> 类下，直接贴入以下函数即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mousePressEvent</span><span class=\"params\">(self, event)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"override mouse press event\"\"\"</span></span><br><span class=\"line\">    self._postion = event.globalPos() - self.pos()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mouseMoveEvent</span><span class=\"params\">(self, event)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"override mouse move event\"\"\"</span></span><br><span class=\"line\">    self.move(event.globalPos() - self._postion)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">closeEvent</span><span class=\"params\">(self, event)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"override close event\"\"\"</span></span><br><span class=\"line\">    event.accept()</span><br></pre></td></tr></table></figure>\n<p>原理很简单，自己处理鼠标点击和拖动事件。</p>\n<p>最终形态。</p>\n<p><img src=\"https://i.imgur.com/omAswmv.png\" alt=\"最终\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/python-with-qt-application-development-2-preliminary-design/\">上一篇文章</a> 完成基本的界面，但是应用看起来并不算特别好看。</p>\n<p>主要是因为软件的界面使用默认的样式和普通的窗口框架。接下来从这两个方面出发，尝试改进软件界面。</p>\n<h2 id=\"自定义样式\"><a href=\"#自定义样式\" class=\"headerlink\" title=\"自定义样式\"></a>自定义样式</h2><p>Qt 给控件的样式化提供了一定的自由度，包括背景色、边框和特定控件的自定义，使用类似 CSS 的语法。这要求编写软件的人了解基础的 CSS 语法。各种控件和详细例子：<a href=\"http://qt-project.org/doc/qt-4.8/stylesheet-examples.html\" target=\"_blank\" rel=\"noopener\">点这里</a></p>\n<p>要改变一个控件的样式，可以在属性编辑器中找到 <code>styleSheet</code> 属性，将 CSS 代码写进去。</p>\n<p>这里以中间栏的输入框作为例子。</p>\n<p>选择输入框，在属性编辑器中找到 <code>styleSheet</code>，输入以下 CSS 代码。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">QLineEdit</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">5px</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\"><span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">10%</span>;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>: white;</span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#c9c9c9</span>;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: <span class=\"number\">#1b1b1e</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">QLineEdit</span><span class=\"selector-pseudo\">:hover</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>: white;</span><br><span class=\"line\"><span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#969696</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结束编辑，立刻可以看到效果。</p>\n<p>修改前：</p>\n<p><img src=\"https://i.imgur.com/HyNEzg9.png\" alt=\"前\"></p>\n<p>修改后：</p>\n<p><img src=\"https://i.imgur.com/YYoVsyW.png\" alt=\"后\"></p>\n<p>给 widget 加上背景颜色。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">QWidget</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>:#xxx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/MxL75UV.png\" alt=\"widget 背景色\"></p>\n<p>消除控件的自带边框。在属性编辑器中找到 <code>frameShape</code>，设置值为 <code>NoFrame</code>；找到 <code>frameShadow</code>，设置值为 <code>Plain</code>；找到 <code>lineWidth</code>，设置值为 <code>0</code>。</p>\n<p><img src=\"https://i.imgur.com/siT0NF2.png\" alt=\"消除边框\"></p>\n<p>自定义按钮样式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">QPushButton</span>&#123;</span><br><span class=\"line\"><span class=\"attribute\">background-color</span>: transparent;</span><br><span class=\"line\"><span class=\"attribute\">border-style</span>:outset;</span><br><span class=\"line\"><span class=\"attribute\">border-width</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\"><span class=\"attribute\">padding</span>: <span class=\"number\">5px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/S69GG8T.png\" alt=\"自定义按钮\"></p>\n<p>其他细节都是类似的修改。</p>\n<h2 id=\"使用无框架窗口\"><a href=\"#使用无框架窗口\" class=\"headerlink\" title=\"使用无框架窗口\"></a>使用无框架窗口</h2><p>必须要在代码中实现。</p>\n<p>回忆本系列第一篇文章，使用 QtDesigner 做出来的知识 view 而已，controller 是需要在 <code>MainWindow.py</code> 中实现的。这里不再累述。</p>\n<p>找到 <code>initUI(self)</code> 函数，加入如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># no frame window</span></span><br><span class=\"line\">self.setWindowFlags(QtCore.Qt.FramelessWindowHint)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.imgur.com/x3w4utd.png\" alt=\"无框架窗口\"></p>\n<p>没有了系统默认的框架，好看的同时也失去了三个系统提供的便捷功能：功能按钮、窗口拉伸和窗口移动。</p>\n<p>下面来解决。</p>\n<h3 id=\"功能按钮\"><a href=\"#功能按钮\" class=\"headerlink\" title=\"功能按钮\"></a>功能按钮</h3><p>在最上面加上一个控件，充当窗口的标题栏和关闭按钮的容器。</p>\n<p>在控件里面简单地拖进一个标签控件作为标题，一个按钮作为关闭按钮。控件设置为蓝色。</p>\n<p>运行（非预览）之后发现背景色没有完全填充，如下图。</p>\n<p><img src=\"https://i.imgur.com/YcvA5M8.png\" alt=\"背景色没有完全填充\"></p>\n<p>这个要在代码里面修复。</p>\n<p>找到 <code>initUI(self)</code> 函数，加入如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.ui.widgetHead.setAttribute(QtCore.Qt.WA_StyledBackground, <span class=\"literal\">True</span>)</span><br><span class=\"line\">self.ui.widgetLeft.setAttribute(QtCore.Qt.WA_StyledBackground, <span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>具体来说就是在控件上调用 <code>setAttribute(QtCore.Qt.WA_StyledBackground, True)</code>。</p>\n<h3 id=\"窗口拉伸\"><a href=\"#窗口拉伸\" class=\"headerlink\" title=\"窗口拉伸\"></a>窗口拉伸</h3><p>需要使用到一个名为 <code>QSizeGrip</code> 的类，只是这个类不能在 QtDesigner 中直接拖入，需要在代码中手动添加。</p>\n<p>找到右边栏 widget 的 layout，更名为 <code>verticalLayoutRight</code>。然后在 <code>initUI(self)</code> 函数中添加如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.ui.verticalLayoutRight.addWidget(QtGui.QSizeGrip(self), <span class=\"number\">0</span>, QtCore.Qt.AlignBottom | QtCore.Qt.AlignRight)</span><br></pre></td></tr></table></figure>\n<h3 id=\"窗口移动\"><a href=\"#窗口移动\" class=\"headerlink\" title=\"窗口移动\"></a>窗口移动</h3><p>窗口移动的功能是设置在窗口的标题栏上的，自实现的标题栏也要实现此功能。</p>\n<p>在 <code>MainWindow</code> 类下，直接贴入以下函数即可：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mousePressEvent</span><span class=\"params\">(self, event)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"override mouse press event\"\"\"</span></span><br><span class=\"line\">    self._postion = event.globalPos() - self.pos()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mouseMoveEvent</span><span class=\"params\">(self, event)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"override mouse move event\"\"\"</span></span><br><span class=\"line\">    self.move(event.globalPos() - self._postion)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">closeEvent</span><span class=\"params\">(self, event)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"override close event\"\"\"</span></span><br><span class=\"line\">    event.accept()</span><br></pre></td></tr></table></figure>\n<p>原理很简单，自己处理鼠标点击和拖动事件。</p>\n<p>最终形态。</p>\n<p><img src=\"https://i.imgur.com/omAswmv.png\" alt=\"最终\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://i.imgur.com/HyNEzg9.png","popularPost_tmp_gaData":{"updated":"Fri Mar 20 2015 17:11:30 GMT+0800 (China Standard Time)","title":"python × Qt 应用开发 · 2.5 -- 改进软件界面","path":"python-with-qt-application-development-2-5-developing-gui/","eyeCatchImage":"https://i.imgur.com/HyNEzg9.png","excerpt":null,"date":"2015-03-20T06:35:16.000Z","pv":0,"totalPV":0,"categories":"技术 > 编程语言 > python > 软件","tags":["python","Qt","software"],"internalLinks":["python-with-qt-application-development-2-preliminary-design/"],"keywords":[],"keywordsLength":0},"length":1066},{"title":"python × Qt 应用开发 · 2 -- 界面初步设计","id":"12","updated":"2015-02-27T09:59:33.000Z","date":"2014-03-18T03:12:57.000Z","_content":"\n之前的一篇可以算是前置知识的快速介绍。从这篇开始就是正式地编写应用了。~~ 其实是因为之前我还没有想好要做什么应用。~~\n\n为了兼顾举举例子和真实性，选了这么一个应用：PQ 笔记。基本的功能如下：\n\n* 笔记支持富文本粘贴\n* 按文件夹分类笔记\n\n## 画出大概的样子\n先来一个大概的设计图。\n\n![设计图](https://i.imgur.com/uAJ6icH.png)\n\n就是一个规规矩矩的三栏布局，左边是笔记本的目录树，中间是文档列表，右边是文档内容。这个只是现阶段的大概构思，最终做出来不一定是这样的，有可能在一些细节上会有所更改，但是整体界面几乎都可以定下来了。\n\n打开 `ui_mainwindow.ui`，从 `Containers` 里拉出三个 `Widget`，分别命名为 `widgetLeft`、`widgetMiddle` 和 `widgetRight`。这就是左中右三栏的容器。\n\n在左边栏中拖入一个 `pushButton` 和一个 `treeView`，分别对应设计图上的两个控件。注意，如果拖放位置正确（也就是 QtDesigner 知道你要将控件放进左边栏里面），你会看到左边栏 `widgetLeft` 会变暗了。\n\n![拖放正确](https://i.imgur.com/Izn7dD6.png)\n\n对着左边栏空白处点击右键，依次选择 ` 布局 ` -> ` 垂直布局 `。\n\n![选择垂直布局](https://i.imgur.com/rvWMn63.png)\n\n可以看到控件非常听话地从上到下排列好了。这里为 widget 中的控件快速设定了一个布局，相当于告诉 widget 中的控件该如何显示自己。\n\n注意，这个 \"布局\" 并不是 widget 中的属性，而是独立的另一个类 `QLayout` 及其子类的实例。在对象查看器中点选 `widgetLeft` 后在下面的属性编辑器中可以看到有一栏 `Layout`，这个才是控件们服服帖帖的原因。只不过，当为一个 `widget` 选择了布局之后，QtDesigner 自动给这个 widget 增加了一个布局，然后将 widget 里面的子控件加入到布局中，于是子控件们都知道应该如何显示了。\n\n![widget 中的 layout](https://i.imgur.com/PpYcKIZ.png)\n\n同理，在中间控件 `widgetMiddle` 中放入一个 `LineEdit` 和一个 `ListView`，在右边控件 `widgetRight` 中放入 `TextEdit`，并且设置好布局。\n\n现在使用快捷键 `Ctrl + r` 预览，发现拉伸窗口的时候，里面的三栏控件没有任何反应，这可不是想要的效果。\n\n![预览 1](https://i.imgur.com/NTwV9wH.png)\n\n注意整个窗口其实也是一个 widget，同样需要为其设置布局。\n\n![窗口 layout](https://i.imgur.com/XB2vSJm.png)\n\n再预览，出现一个新问题：三个栏不能各自调整大小。\n\n![预览 2](https://i.imgur.com/XsXU5ed.png)\n\n要实现这个功能需要另外一种布局管理，分裂器（QSplitter）。分裂器允许元素调整各自的大小。\n\n先打破布局。\n\n![打破布局](https://i.imgur.com/24ng0C0.png)\n\n按着 ctrl 选择三个分栏 widget，注意是分栏 widget，再在其中一个 widget 的空白处点击右键，在布局中可以看到有 ` 使用分裂器水平布局 `。\n\n![应用分裂器](https://i.imgur.com/jFmH6nh.png)\n\n最后为窗口应用垂直布局就可以了。预览的时候当鼠标移动到分栏控件之间会发现可以调整大小了，同时调整窗口也能影响到三个分栏的大小。\n\n> 从实际来说，调整窗口的大小的时候，更多是希望调整右边栏即文档显示栏的大小。\n\nQSplitter 还能设置一些细节。\n\n找到 `QSplitter` 的属性：\n\n+ orientation，控件排列方向，水平还是垂直\n+ opaqueResize，是否实时显示调整\n+ handleWidth，调整条的宽度\n+ childrenCollapsible，控件调整成过小时是否会隐藏\n\n似乎没有什么可以用的。\n\n然而，问题的解决方法却不在 `QSplitter` 上，而在其子组件上。\n\n实际上，几乎所有的 widget，都有一个 `sizePolicy` 的属性，而在此属性中，有子属性 `Horizontal Stretch` 和 `Vertical Stretch`，对应中文 ` 水平伸展 ` 和 ` 垂直伸展 `，决定水平和垂直的缩放比例。\n\n![sizePolicy](https://i.imgur.com/47JsPlH.png)\n\n在属性编辑器中，可以看到 ` 水平伸展 ` 的值默认为 0，也就是左栏：中栏：右栏 = 0：0：0，现在将右栏的 ` 水平伸展 ` 值设为 1，也就是左栏：中栏：右栏 = 0：0：1。\n\n预览一下，效果就出来了。\n\n![预览 3](https://i.imgur.com/S21DeGJ.gif)\n\n原理应该是这样的，在窗口缩放的时候，默认的配置是 0：0：0，表示变化被平均分配到两个组件上了。而修改后子组件们根据已经设定好的比例 0：0：1，所有的因窗口缩放而引起的大小变化 ** 全部 ** 被分配到文档编辑组件上了。\n\n## 布局管理（Layout Management）\n布局可以在 `Widget Box` 里面看到，提供的有四个布局：\n\n* Vertical Layout\n* Horizontal Layout\n* Grid Layout\n* Form Layout\n\n分别是垂直布局、水平布局、网格布局和表单布局。当然还有另外的自动布局，但是这四个基本能满足普通需要。\n\n垂直 / 水平布局不用解释了。网格布局是类似表格，一个控件占据一个单元格位置；表单布局是类似平常表单，从上到下排成多行，每行分两栏，左边放标签控件，右边放输入框控件。\n\n## 菜单\n在新建一个窗体的时候，QtDesigner 就已经为窗体添加上了 `QMenuBar`，在窗体的标题栏下面可以看到一个经典的菜单栏，上面有 ` 在这里输入 ` 字样。只要双击并填上你希望显示的菜单名字，QtDesigner 会自动生成一个菜单，在下拉列表上继续双击 ` 在这里输入 ` 将会自动生成 `QAction`。`QAction` 才是真正代表着菜单里的某个动作。\n\n在下拉菜单里面，还能看到一个 ` 添加分隔符 `，是添加一个分割线的意思。当生成了一个 `QAction` 之后，可以看到右边有一个类似加号的图标，是将当前 `QAction` 转化为 `QMenu` 的意思，换句话说可以生成子级菜单。子级菜单的操作跟上面描述的菜单操作一模一样。\n\n![菜单设计](https://i.imgur.com/9MbfQzg.png)\n\n另外给各个 action 对象修改好名字，以供日后调用。\n\n![对象名称修改](https://i.imgur.com/cRj9IL6.png)\n","source":"_posts/python-with-Qt-application-development/python-×-Qt应用开发-·-2-界面初步设计.md","raw":"---\ntitle: python × Qt 应用开发 · 2 -- 界面初步设计\ncategories:\n  - [技术, 软件]\n  - [编程语言, python]\ntags: [python, Qt, software]\npermalink: python-with-qt-application-development-2-preliminary-design\nid: 12\nupdated: '2015-02-27 17:59:33'\ndate: 2014-03-18 11:12:57\n---\n\n之前的一篇可以算是前置知识的快速介绍。从这篇开始就是正式地编写应用了。~~ 其实是因为之前我还没有想好要做什么应用。~~\n\n为了兼顾举举例子和真实性，选了这么一个应用：PQ 笔记。基本的功能如下：\n\n* 笔记支持富文本粘贴\n* 按文件夹分类笔记\n\n## 画出大概的样子\n先来一个大概的设计图。\n\n![设计图](https://i.imgur.com/uAJ6icH.png)\n\n就是一个规规矩矩的三栏布局，左边是笔记本的目录树，中间是文档列表，右边是文档内容。这个只是现阶段的大概构思，最终做出来不一定是这样的，有可能在一些细节上会有所更改，但是整体界面几乎都可以定下来了。\n\n打开 `ui_mainwindow.ui`，从 `Containers` 里拉出三个 `Widget`，分别命名为 `widgetLeft`、`widgetMiddle` 和 `widgetRight`。这就是左中右三栏的容器。\n\n在左边栏中拖入一个 `pushButton` 和一个 `treeView`，分别对应设计图上的两个控件。注意，如果拖放位置正确（也就是 QtDesigner 知道你要将控件放进左边栏里面），你会看到左边栏 `widgetLeft` 会变暗了。\n\n![拖放正确](https://i.imgur.com/Izn7dD6.png)\n\n对着左边栏空白处点击右键，依次选择 ` 布局 ` -> ` 垂直布局 `。\n\n![选择垂直布局](https://i.imgur.com/rvWMn63.png)\n\n可以看到控件非常听话地从上到下排列好了。这里为 widget 中的控件快速设定了一个布局，相当于告诉 widget 中的控件该如何显示自己。\n\n注意，这个 \"布局\" 并不是 widget 中的属性，而是独立的另一个类 `QLayout` 及其子类的实例。在对象查看器中点选 `widgetLeft` 后在下面的属性编辑器中可以看到有一栏 `Layout`，这个才是控件们服服帖帖的原因。只不过，当为一个 `widget` 选择了布局之后，QtDesigner 自动给这个 widget 增加了一个布局，然后将 widget 里面的子控件加入到布局中，于是子控件们都知道应该如何显示了。\n\n![widget 中的 layout](https://i.imgur.com/PpYcKIZ.png)\n\n同理，在中间控件 `widgetMiddle` 中放入一个 `LineEdit` 和一个 `ListView`，在右边控件 `widgetRight` 中放入 `TextEdit`，并且设置好布局。\n\n现在使用快捷键 `Ctrl + r` 预览，发现拉伸窗口的时候，里面的三栏控件没有任何反应，这可不是想要的效果。\n\n![预览 1](https://i.imgur.com/NTwV9wH.png)\n\n注意整个窗口其实也是一个 widget，同样需要为其设置布局。\n\n![窗口 layout](https://i.imgur.com/XB2vSJm.png)\n\n再预览，出现一个新问题：三个栏不能各自调整大小。\n\n![预览 2](https://i.imgur.com/XsXU5ed.png)\n\n要实现这个功能需要另外一种布局管理，分裂器（QSplitter）。分裂器允许元素调整各自的大小。\n\n先打破布局。\n\n![打破布局](https://i.imgur.com/24ng0C0.png)\n\n按着 ctrl 选择三个分栏 widget，注意是分栏 widget，再在其中一个 widget 的空白处点击右键，在布局中可以看到有 ` 使用分裂器水平布局 `。\n\n![应用分裂器](https://i.imgur.com/jFmH6nh.png)\n\n最后为窗口应用垂直布局就可以了。预览的时候当鼠标移动到分栏控件之间会发现可以调整大小了，同时调整窗口也能影响到三个分栏的大小。\n\n> 从实际来说，调整窗口的大小的时候，更多是希望调整右边栏即文档显示栏的大小。\n\nQSplitter 还能设置一些细节。\n\n找到 `QSplitter` 的属性：\n\n+ orientation，控件排列方向，水平还是垂直\n+ opaqueResize，是否实时显示调整\n+ handleWidth，调整条的宽度\n+ childrenCollapsible，控件调整成过小时是否会隐藏\n\n似乎没有什么可以用的。\n\n然而，问题的解决方法却不在 `QSplitter` 上，而在其子组件上。\n\n实际上，几乎所有的 widget，都有一个 `sizePolicy` 的属性，而在此属性中，有子属性 `Horizontal Stretch` 和 `Vertical Stretch`，对应中文 ` 水平伸展 ` 和 ` 垂直伸展 `，决定水平和垂直的缩放比例。\n\n![sizePolicy](https://i.imgur.com/47JsPlH.png)\n\n在属性编辑器中，可以看到 ` 水平伸展 ` 的值默认为 0，也就是左栏：中栏：右栏 = 0：0：0，现在将右栏的 ` 水平伸展 ` 值设为 1，也就是左栏：中栏：右栏 = 0：0：1。\n\n预览一下，效果就出来了。\n\n![预览 3](https://i.imgur.com/S21DeGJ.gif)\n\n原理应该是这样的，在窗口缩放的时候，默认的配置是 0：0：0，表示变化被平均分配到两个组件上了。而修改后子组件们根据已经设定好的比例 0：0：1，所有的因窗口缩放而引起的大小变化 ** 全部 ** 被分配到文档编辑组件上了。\n\n## 布局管理（Layout Management）\n布局可以在 `Widget Box` 里面看到，提供的有四个布局：\n\n* Vertical Layout\n* Horizontal Layout\n* Grid Layout\n* Form Layout\n\n分别是垂直布局、水平布局、网格布局和表单布局。当然还有另外的自动布局，但是这四个基本能满足普通需要。\n\n垂直 / 水平布局不用解释了。网格布局是类似表格，一个控件占据一个单元格位置；表单布局是类似平常表单，从上到下排成多行，每行分两栏，左边放标签控件，右边放输入框控件。\n\n## 菜单\n在新建一个窗体的时候，QtDesigner 就已经为窗体添加上了 `QMenuBar`，在窗体的标题栏下面可以看到一个经典的菜单栏，上面有 ` 在这里输入 ` 字样。只要双击并填上你希望显示的菜单名字，QtDesigner 会自动生成一个菜单，在下拉列表上继续双击 ` 在这里输入 ` 将会自动生成 `QAction`。`QAction` 才是真正代表着菜单里的某个动作。\n\n在下拉菜单里面，还能看到一个 ` 添加分隔符 `，是添加一个分割线的意思。当生成了一个 `QAction` 之后，可以看到右边有一个类似加号的图标，是将当前 `QAction` 转化为 `QMenu` 的意思，换句话说可以生成子级菜单。子级菜单的操作跟上面描述的菜单操作一模一样。\n\n![菜单设计](https://i.imgur.com/9MbfQzg.png)\n\n另外给各个 action 对象修改好名字，以供日后调用。\n\n![对象名称修改](https://i.imgur.com/cRj9IL6.png)\n","slug":"python-with-qt-application-development-2-preliminary-design","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuu4008mn7t49i3lupdc","content":"<p>之前的一篇可以算是前置知识的快速介绍。从这篇开始就是正式地编写应用了。~~ 其实是因为之前我还没有想好要做什么应用。~~</p>\n<p>为了兼顾举举例子和真实性，选了这么一个应用：PQ 笔记。基本的功能如下：</p>\n<ul>\n<li>笔记支持富文本粘贴</li>\n<li>按文件夹分类笔记</li>\n</ul>\n<h2 id=\"画出大概的样子\"><a href=\"#画出大概的样子\" class=\"headerlink\" title=\"画出大概的样子\"></a>画出大概的样子</h2><p>先来一个大概的设计图。</p>\n<p><img src=\"https://i.imgur.com/uAJ6icH.png\" alt=\"设计图\"></p>\n<p>就是一个规规矩矩的三栏布局，左边是笔记本的目录树，中间是文档列表，右边是文档内容。这个只是现阶段的大概构思，最终做出来不一定是这样的，有可能在一些细节上会有所更改，但是整体界面几乎都可以定下来了。</p>\n<p>打开 <code>ui_mainwindow.ui</code>，从 <code>Containers</code> 里拉出三个 <code>Widget</code>，分别命名为 <code>widgetLeft</code>、<code>widgetMiddle</code> 和 <code>widgetRight</code>。这就是左中右三栏的容器。</p>\n<p>在左边栏中拖入一个 <code>pushButton</code> 和一个 <code>treeView</code>，分别对应设计图上的两个控件。注意，如果拖放位置正确（也就是 QtDesigner 知道你要将控件放进左边栏里面），你会看到左边栏 <code>widgetLeft</code> 会变暗了。</p>\n<p><img src=\"https://i.imgur.com/Izn7dD6.png\" alt=\"拖放正确\"></p>\n<p>对着左边栏空白处点击右键，依次选择 <code>布局</code> -&gt; <code>垂直布局</code>。</p>\n<p><img src=\"https://i.imgur.com/rvWMn63.png\" alt=\"选择垂直布局\"></p>\n<p>可以看到控件非常听话地从上到下排列好了。这里为 widget 中的控件快速设定了一个布局，相当于告诉 widget 中的控件该如何显示自己。</p>\n<p>注意，这个 “布局” 并不是 widget 中的属性，而是独立的另一个类 <code>QLayout</code> 及其子类的实例。在对象查看器中点选 <code>widgetLeft</code> 后在下面的属性编辑器中可以看到有一栏 <code>Layout</code>，这个才是控件们服服帖帖的原因。只不过，当为一个 <code>widget</code> 选择了布局之后，QtDesigner 自动给这个 widget 增加了一个布局，然后将 widget 里面的子控件加入到布局中，于是子控件们都知道应该如何显示了。</p>\n<p><img src=\"https://i.imgur.com/PpYcKIZ.png\" alt=\"widget 中的 layout\"></p>\n<p>同理，在中间控件 <code>widgetMiddle</code> 中放入一个 <code>LineEdit</code> 和一个 <code>ListView</code>，在右边控件 <code>widgetRight</code> 中放入 <code>TextEdit</code>，并且设置好布局。</p>\n<p>现在使用快捷键 <code>Ctrl + r</code> 预览，发现拉伸窗口的时候，里面的三栏控件没有任何反应，这可不是想要的效果。</p>\n<p><img src=\"https://i.imgur.com/NTwV9wH.png\" alt=\"预览 1\"></p>\n<p>注意整个窗口其实也是一个 widget，同样需要为其设置布局。</p>\n<p><img src=\"https://i.imgur.com/XB2vSJm.png\" alt=\"窗口 layout\"></p>\n<p>再预览，出现一个新问题：三个栏不能各自调整大小。</p>\n<p><img src=\"https://i.imgur.com/XsXU5ed.png\" alt=\"预览 2\"></p>\n<p>要实现这个功能需要另外一种布局管理，分裂器（QSplitter）。分裂器允许元素调整各自的大小。</p>\n<p>先打破布局。</p>\n<p><img src=\"https://i.imgur.com/24ng0C0.png\" alt=\"打破布局\"></p>\n<p>按着 ctrl 选择三个分栏 widget，注意是分栏 widget，再在其中一个 widget 的空白处点击右键，在布局中可以看到有 <code>使用分裂器水平布局</code>。</p>\n<p><img src=\"https://i.imgur.com/jFmH6nh.png\" alt=\"应用分裂器\"></p>\n<p>最后为窗口应用垂直布局就可以了。预览的时候当鼠标移动到分栏控件之间会发现可以调整大小了，同时调整窗口也能影响到三个分栏的大小。</p>\n<blockquote>\n<p>从实际来说，调整窗口的大小的时候，更多是希望调整右边栏即文档显示栏的大小。</p>\n</blockquote>\n<p>QSplitter 还能设置一些细节。</p>\n<p>找到 <code>QSplitter</code> 的属性：</p>\n<ul>\n<li>orientation，控件排列方向，水平还是垂直</li>\n<li>opaqueResize，是否实时显示调整</li>\n<li>handleWidth，调整条的宽度</li>\n<li>childrenCollapsible，控件调整成过小时是否会隐藏</li>\n</ul>\n<p>似乎没有什么可以用的。</p>\n<p>然而，问题的解决方法却不在 <code>QSplitter</code> 上，而在其子组件上。</p>\n<p>实际上，几乎所有的 widget，都有一个 <code>sizePolicy</code> 的属性，而在此属性中，有子属性 <code>Horizontal Stretch</code> 和 <code>Vertical Stretch</code>，对应中文 <code>水平伸展</code> 和 <code>垂直伸展</code>，决定水平和垂直的缩放比例。</p>\n<p><img src=\"https://i.imgur.com/47JsPlH.png\" alt=\"sizePolicy\"></p>\n<p>在属性编辑器中，可以看到 <code>水平伸展</code> 的值默认为 0，也就是左栏：中栏：右栏 = 0：0：0，现在将右栏的 <code>水平伸展</code> 值设为 1，也就是左栏：中栏：右栏 = 0：0：1。</p>\n<p>预览一下，效果就出来了。</p>\n<p><img src=\"https://i.imgur.com/S21DeGJ.gif\" alt=\"预览 3\"></p>\n<p>原理应该是这样的，在窗口缩放的时候，默认的配置是 0：0：0，表示变化被平均分配到两个组件上了。而修改后子组件们根据已经设定好的比例 0：0：1，所有的因窗口缩放而引起的大小变化 <strong> 全部 </strong> 被分配到文档编辑组件上了。</p>\n<h2 id=\"布局管理（Layout-Management）\"><a href=\"#布局管理（Layout-Management）\" class=\"headerlink\" title=\"布局管理（Layout Management）\"></a>布局管理（Layout Management）</h2><p>布局可以在 <code>Widget Box</code> 里面看到，提供的有四个布局：</p>\n<ul>\n<li>Vertical Layout</li>\n<li>Horizontal Layout</li>\n<li>Grid Layout</li>\n<li>Form Layout</li>\n</ul>\n<p>分别是垂直布局、水平布局、网格布局和表单布局。当然还有另外的自动布局，但是这四个基本能满足普通需要。</p>\n<p>垂直 / 水平布局不用解释了。网格布局是类似表格，一个控件占据一个单元格位置；表单布局是类似平常表单，从上到下排成多行，每行分两栏，左边放标签控件，右边放输入框控件。</p>\n<h2 id=\"菜单\"><a href=\"#菜单\" class=\"headerlink\" title=\"菜单\"></a>菜单</h2><p>在新建一个窗体的时候，QtDesigner 就已经为窗体添加上了 <code>QMenuBar</code>，在窗体的标题栏下面可以看到一个经典的菜单栏，上面有 <code>在这里输入</code> 字样。只要双击并填上你希望显示的菜单名字，QtDesigner 会自动生成一个菜单，在下拉列表上继续双击 <code>在这里输入</code> 将会自动生成 <code>QAction</code>。<code>QAction</code> 才是真正代表着菜单里的某个动作。</p>\n<p>在下拉菜单里面，还能看到一个 <code>添加分隔符</code>，是添加一个分割线的意思。当生成了一个 <code>QAction</code> 之后，可以看到右边有一个类似加号的图标，是将当前 <code>QAction</code> 转化为 <code>QMenu</code> 的意思，换句话说可以生成子级菜单。子级菜单的操作跟上面描述的菜单操作一模一样。</p>\n<p><img src=\"https://i.imgur.com/9MbfQzg.png\" alt=\"菜单设计\"></p>\n<p>另外给各个 action 对象修改好名字，以供日后调用。</p>\n<p><img src=\"https://i.imgur.com/cRj9IL6.png\" alt=\"对象名称修改\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前的一篇可以算是前置知识的快速介绍。从这篇开始就是正式地编写应用了。~~ 其实是因为之前我还没有想好要做什么应用。~~</p>\n<p>为了兼顾举举例子和真实性，选了这么一个应用：PQ 笔记。基本的功能如下：</p>\n<ul>\n<li>笔记支持富文本粘贴</li>\n<li>按文件夹分类笔记</li>\n</ul>\n<h2 id=\"画出大概的样子\"><a href=\"#画出大概的样子\" class=\"headerlink\" title=\"画出大概的样子\"></a>画出大概的样子</h2><p>先来一个大概的设计图。</p>\n<p><img src=\"https://i.imgur.com/uAJ6icH.png\" alt=\"设计图\"></p>\n<p>就是一个规规矩矩的三栏布局，左边是笔记本的目录树，中间是文档列表，右边是文档内容。这个只是现阶段的大概构思，最终做出来不一定是这样的，有可能在一些细节上会有所更改，但是整体界面几乎都可以定下来了。</p>\n<p>打开 <code>ui_mainwindow.ui</code>，从 <code>Containers</code> 里拉出三个 <code>Widget</code>，分别命名为 <code>widgetLeft</code>、<code>widgetMiddle</code> 和 <code>widgetRight</code>。这就是左中右三栏的容器。</p>\n<p>在左边栏中拖入一个 <code>pushButton</code> 和一个 <code>treeView</code>，分别对应设计图上的两个控件。注意，如果拖放位置正确（也就是 QtDesigner 知道你要将控件放进左边栏里面），你会看到左边栏 <code>widgetLeft</code> 会变暗了。</p>\n<p><img src=\"https://i.imgur.com/Izn7dD6.png\" alt=\"拖放正确\"></p>\n<p>对着左边栏空白处点击右键，依次选择 <code>布局</code> -&gt; <code>垂直布局</code>。</p>\n<p><img src=\"https://i.imgur.com/rvWMn63.png\" alt=\"选择垂直布局\"></p>\n<p>可以看到控件非常听话地从上到下排列好了。这里为 widget 中的控件快速设定了一个布局，相当于告诉 widget 中的控件该如何显示自己。</p>\n<p>注意，这个 “布局” 并不是 widget 中的属性，而是独立的另一个类 <code>QLayout</code> 及其子类的实例。在对象查看器中点选 <code>widgetLeft</code> 后在下面的属性编辑器中可以看到有一栏 <code>Layout</code>，这个才是控件们服服帖帖的原因。只不过，当为一个 <code>widget</code> 选择了布局之后，QtDesigner 自动给这个 widget 增加了一个布局，然后将 widget 里面的子控件加入到布局中，于是子控件们都知道应该如何显示了。</p>\n<p><img src=\"https://i.imgur.com/PpYcKIZ.png\" alt=\"widget 中的 layout\"></p>\n<p>同理，在中间控件 <code>widgetMiddle</code> 中放入一个 <code>LineEdit</code> 和一个 <code>ListView</code>，在右边控件 <code>widgetRight</code> 中放入 <code>TextEdit</code>，并且设置好布局。</p>\n<p>现在使用快捷键 <code>Ctrl + r</code> 预览，发现拉伸窗口的时候，里面的三栏控件没有任何反应，这可不是想要的效果。</p>\n<p><img src=\"https://i.imgur.com/NTwV9wH.png\" alt=\"预览 1\"></p>\n<p>注意整个窗口其实也是一个 widget，同样需要为其设置布局。</p>\n<p><img src=\"https://i.imgur.com/XB2vSJm.png\" alt=\"窗口 layout\"></p>\n<p>再预览，出现一个新问题：三个栏不能各自调整大小。</p>\n<p><img src=\"https://i.imgur.com/XsXU5ed.png\" alt=\"预览 2\"></p>\n<p>要实现这个功能需要另外一种布局管理，分裂器（QSplitter）。分裂器允许元素调整各自的大小。</p>\n<p>先打破布局。</p>\n<p><img src=\"https://i.imgur.com/24ng0C0.png\" alt=\"打破布局\"></p>\n<p>按着 ctrl 选择三个分栏 widget，注意是分栏 widget，再在其中一个 widget 的空白处点击右键，在布局中可以看到有 <code>使用分裂器水平布局</code>。</p>\n<p><img src=\"https://i.imgur.com/jFmH6nh.png\" alt=\"应用分裂器\"></p>\n<p>最后为窗口应用垂直布局就可以了。预览的时候当鼠标移动到分栏控件之间会发现可以调整大小了，同时调整窗口也能影响到三个分栏的大小。</p>\n<blockquote>\n<p>从实际来说，调整窗口的大小的时候，更多是希望调整右边栏即文档显示栏的大小。</p>\n</blockquote>\n<p>QSplitter 还能设置一些细节。</p>\n<p>找到 <code>QSplitter</code> 的属性：</p>\n<ul>\n<li>orientation，控件排列方向，水平还是垂直</li>\n<li>opaqueResize，是否实时显示调整</li>\n<li>handleWidth，调整条的宽度</li>\n<li>childrenCollapsible，控件调整成过小时是否会隐藏</li>\n</ul>\n<p>似乎没有什么可以用的。</p>\n<p>然而，问题的解决方法却不在 <code>QSplitter</code> 上，而在其子组件上。</p>\n<p>实际上，几乎所有的 widget，都有一个 <code>sizePolicy</code> 的属性，而在此属性中，有子属性 <code>Horizontal Stretch</code> 和 <code>Vertical Stretch</code>，对应中文 <code>水平伸展</code> 和 <code>垂直伸展</code>，决定水平和垂直的缩放比例。</p>\n<p><img src=\"https://i.imgur.com/47JsPlH.png\" alt=\"sizePolicy\"></p>\n<p>在属性编辑器中，可以看到 <code>水平伸展</code> 的值默认为 0，也就是左栏：中栏：右栏 = 0：0：0，现在将右栏的 <code>水平伸展</code> 值设为 1，也就是左栏：中栏：右栏 = 0：0：1。</p>\n<p>预览一下，效果就出来了。</p>\n<p><img src=\"https://i.imgur.com/S21DeGJ.gif\" alt=\"预览 3\"></p>\n<p>原理应该是这样的，在窗口缩放的时候，默认的配置是 0：0：0，表示变化被平均分配到两个组件上了。而修改后子组件们根据已经设定好的比例 0：0：1，所有的因窗口缩放而引起的大小变化 <strong> 全部 </strong> 被分配到文档编辑组件上了。</p>\n<h2 id=\"布局管理（Layout-Management）\"><a href=\"#布局管理（Layout-Management）\" class=\"headerlink\" title=\"布局管理（Layout Management）\"></a>布局管理（Layout Management）</h2><p>布局可以在 <code>Widget Box</code> 里面看到，提供的有四个布局：</p>\n<ul>\n<li>Vertical Layout</li>\n<li>Horizontal Layout</li>\n<li>Grid Layout</li>\n<li>Form Layout</li>\n</ul>\n<p>分别是垂直布局、水平布局、网格布局和表单布局。当然还有另外的自动布局，但是这四个基本能满足普通需要。</p>\n<p>垂直 / 水平布局不用解释了。网格布局是类似表格，一个控件占据一个单元格位置；表单布局是类似平常表单，从上到下排成多行，每行分两栏，左边放标签控件，右边放输入框控件。</p>\n<h2 id=\"菜单\"><a href=\"#菜单\" class=\"headerlink\" title=\"菜单\"></a>菜单</h2><p>在新建一个窗体的时候，QtDesigner 就已经为窗体添加上了 <code>QMenuBar</code>，在窗体的标题栏下面可以看到一个经典的菜单栏，上面有 <code>在这里输入</code> 字样。只要双击并填上你希望显示的菜单名字，QtDesigner 会自动生成一个菜单，在下拉列表上继续双击 <code>在这里输入</code> 将会自动生成 <code>QAction</code>。<code>QAction</code> 才是真正代表着菜单里的某个动作。</p>\n<p>在下拉菜单里面，还能看到一个 <code>添加分隔符</code>，是添加一个分割线的意思。当生成了一个 <code>QAction</code> 之后，可以看到右边有一个类似加号的图标，是将当前 <code>QAction</code> 转化为 <code>QMenu</code> 的意思，换句话说可以生成子级菜单。子级菜单的操作跟上面描述的菜单操作一模一样。</p>\n<p><img src=\"https://i.imgur.com/9MbfQzg.png\" alt=\"菜单设计\"></p>\n<p>另外给各个 action 对象修改好名字，以供日后调用。</p>\n<p><img src=\"https://i.imgur.com/cRj9IL6.png\" alt=\"对象名称修改\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://i.imgur.com/uAJ6icH.png","popularPost_tmp_gaData":{"updated":"Fri Feb 27 2015 17:59:33 GMT+0800 (China Standard Time)","title":"python × Qt 应用开发 · 2 -- 界面初步设计","path":"python-with-qt-application-development-2-preliminary-design/","eyeCatchImage":"https://i.imgur.com/uAJ6icH.png","excerpt":null,"date":"2014-03-18T03:12:57.000Z","pv":0,"totalPV":0,"categories":"技术 > 编程语言 > python > 软件","tags":["python","Qt","software"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2325},{"title":"python × Qt 应用开发 · 4 -- 数据库设计","id":"16","updated":"2015-02-27T11:08:22.000Z","date":"2014-03-29T00:32:08.000Z","_content":"\n在上一篇探讨 MVC 模式使用的博文中，已经成功实现了 `Tree View`widget 的数据显示。而实际上，其中的数据是我们自己硬编码的，显然不符合要求。节点中的 `_data` 域也只是简单的字符串，没有体现出 MVC 的优势。对于本应用中要求的比较有结构化的数据，很自然地考虑使用数据库来组织。\n\n## 数据库的考虑\n作为本地应用，考虑使用 python 自带的嵌入式数据库 `sqlite3`。SQLite 跟普通数据库管理如 MYSQL 等大同小异，SQL 语句也是相差不大，一般有学习过数据库的读者找找资料大概就能轻松理解，而没有使用过数据库或者不懂数据库的读者则应该先补充好数据库的知识再来阅读本文。\n\n在 python，只需要加上 `import sqlite3` 语句就能使用 SQLite，方便至极。\n\n## 笔记本\n笔记本的数据结构是一棵棵树，叶子节点是章节。考虑使用一个名为 `notebook` 的表来保存笔记本数据，一个名为 `chapter` 的表来保存章节。\n\n打开数据库设计工具，这里选用了一个在线的工具 [WWW SQL Designer](http://ondras.zarovi.cz/sql/demo/)。画出以下设计图。\n\n![数据库设计图 1](https://i.imgur.com/9HDCvP7.png)\n\n表 `notebook`\n\n<table>\n<thead>\n<tr>\n<th > 字段 </th>\n<th > 内容 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td > 主键 </td>\n</tr>\n<tr>\n<td>name</td>\n<td > 笔记本名称 </td>\n</tr>\n</tbody>\n</table>\n\n表 `chapter`\n\n<table>\n<thead>\n<tr>\n<th > 字段 </th>\n<th > 内容 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td > 主键 </td>\n</tr>\n<tr>\n<td>name</td>\n<td > 章节名称 </td>\n</tr>\n<tr>\n<td>nid</td>\n<td > 所属笔记本 id，外键 </td>\n</tr>\n</tbody>\n</table>\n\n表 `document`\n\n<table>\n<thead>\n<tr>\n<th > 字段 </th>\n<th > 内容 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td > 主键 </td>\n</tr>\n<tr>\n<td>cid</td>\n<td > 章节 id，外键 </td>\n</tr>\n<tr>\n<td>title</td>\n<td > 文档标题 </td>\n</tr>\n<tr>\n<td>content</td>\n<td > 文档内容 </td>\n</tr>\n<tr>\n<td>last_update</td>\n<td > 文档最后更新时间 </td>\n</tr>\n</tbody>\n</table>\n\n然后使用输出功能输出 sql 脚本文件，注意这里的代码在我的电脑上是能够运行的，但不一定能够在你的电脑上运行：\n\n```language\nCREATE TABLE 'chapter' (\n'id' INTEGER NOT NULL  PRIMARY KEY AUTOINCREMENT,\n'name' TEXT NOT NULL  DEFAULT 'new group',\n'nid' INTEGER NOT NULL  DEFAULT 0 REFERENCES 'notebook' ('id') REFERENCES 'notebook' ('id')\n);\n\nCREATE TABLE 'document' (\n'id' INTEGER NOT NULL  PRIMARY KEY AUTOINCREMENT,\n'cid' INTEGER NOT NULL  DEFAULT 0 REFERENCES 'chapter' ('id') REFERENCES 'chapter' ('id'),\n'title' TEXT NOT NULL  DEFAULT 'New document',\n'content' TEXT DEFAULT NULL,\n'last_update' NUMERIC NOT NULL\n);\n\nCREATE TABLE 'notebook' (\n'id' INTEGER NOT NULL  DEFAULT NULL PRIMARY KEY AUTOINCREMENT,\n'name' TEXT NOT NULL  DEFAULT 'new notebook'\n);\n```\n\n## 生成数据库\n保存 sql 脚本到工程根目录下的 `data.sql` 中，到 SQLite 官网下载 windows 版本的 CLI 文件 `sqlite3.exe`，同样放在工程根目录下。执行以下命令：\n\n```bash\nsqlite3.exe data.db < data.sql\n```\n\n如无报错则生成了一个 `data.db` 的数据库文件了。\n\n## 小结\n文章只说明了各个表和字段的关系，字段的详细属性请查看 sql 语句。","source":"_posts/python-with-Qt-application-development/python-×-Qt应用开发-·-4-数据库设计.md","raw":"---\ntitle: python × Qt 应用开发 · 4 -- 数据库设计\ncategories:\n  - [技术, 软件]\n  - [编程语言, python]\ntags: [python, Qt, software]\npermalink: python-with-qt-application-development-4-database-design\nid: 16\nupdated: '2015-02-27 19:08:22'\ndate: 2014-03-29 08:32:08\n---\n\n在上一篇探讨 MVC 模式使用的博文中，已经成功实现了 `Tree View`widget 的数据显示。而实际上，其中的数据是我们自己硬编码的，显然不符合要求。节点中的 `_data` 域也只是简单的字符串，没有体现出 MVC 的优势。对于本应用中要求的比较有结构化的数据，很自然地考虑使用数据库来组织。\n\n## 数据库的考虑\n作为本地应用，考虑使用 python 自带的嵌入式数据库 `sqlite3`。SQLite 跟普通数据库管理如 MYSQL 等大同小异，SQL 语句也是相差不大，一般有学习过数据库的读者找找资料大概就能轻松理解，而没有使用过数据库或者不懂数据库的读者则应该先补充好数据库的知识再来阅读本文。\n\n在 python，只需要加上 `import sqlite3` 语句就能使用 SQLite，方便至极。\n\n## 笔记本\n笔记本的数据结构是一棵棵树，叶子节点是章节。考虑使用一个名为 `notebook` 的表来保存笔记本数据，一个名为 `chapter` 的表来保存章节。\n\n打开数据库设计工具，这里选用了一个在线的工具 [WWW SQL Designer](http://ondras.zarovi.cz/sql/demo/)。画出以下设计图。\n\n![数据库设计图 1](https://i.imgur.com/9HDCvP7.png)\n\n表 `notebook`\n\n<table>\n<thead>\n<tr>\n<th > 字段 </th>\n<th > 内容 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td > 主键 </td>\n</tr>\n<tr>\n<td>name</td>\n<td > 笔记本名称 </td>\n</tr>\n</tbody>\n</table>\n\n表 `chapter`\n\n<table>\n<thead>\n<tr>\n<th > 字段 </th>\n<th > 内容 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td > 主键 </td>\n</tr>\n<tr>\n<td>name</td>\n<td > 章节名称 </td>\n</tr>\n<tr>\n<td>nid</td>\n<td > 所属笔记本 id，外键 </td>\n</tr>\n</tbody>\n</table>\n\n表 `document`\n\n<table>\n<thead>\n<tr>\n<th > 字段 </th>\n<th > 内容 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td > 主键 </td>\n</tr>\n<tr>\n<td>cid</td>\n<td > 章节 id，外键 </td>\n</tr>\n<tr>\n<td>title</td>\n<td > 文档标题 </td>\n</tr>\n<tr>\n<td>content</td>\n<td > 文档内容 </td>\n</tr>\n<tr>\n<td>last_update</td>\n<td > 文档最后更新时间 </td>\n</tr>\n</tbody>\n</table>\n\n然后使用输出功能输出 sql 脚本文件，注意这里的代码在我的电脑上是能够运行的，但不一定能够在你的电脑上运行：\n\n```language\nCREATE TABLE 'chapter' (\n'id' INTEGER NOT NULL  PRIMARY KEY AUTOINCREMENT,\n'name' TEXT NOT NULL  DEFAULT 'new group',\n'nid' INTEGER NOT NULL  DEFAULT 0 REFERENCES 'notebook' ('id') REFERENCES 'notebook' ('id')\n);\n\nCREATE TABLE 'document' (\n'id' INTEGER NOT NULL  PRIMARY KEY AUTOINCREMENT,\n'cid' INTEGER NOT NULL  DEFAULT 0 REFERENCES 'chapter' ('id') REFERENCES 'chapter' ('id'),\n'title' TEXT NOT NULL  DEFAULT 'New document',\n'content' TEXT DEFAULT NULL,\n'last_update' NUMERIC NOT NULL\n);\n\nCREATE TABLE 'notebook' (\n'id' INTEGER NOT NULL  DEFAULT NULL PRIMARY KEY AUTOINCREMENT,\n'name' TEXT NOT NULL  DEFAULT 'new notebook'\n);\n```\n\n## 生成数据库\n保存 sql 脚本到工程根目录下的 `data.sql` 中，到 SQLite 官网下载 windows 版本的 CLI 文件 `sqlite3.exe`，同样放在工程根目录下。执行以下命令：\n\n```bash\nsqlite3.exe data.db < data.sql\n```\n\n如无报错则生成了一个 `data.db` 的数据库文件了。\n\n## 小结\n文章只说明了各个表和字段的关系，字段的详细属性请查看 sql 语句。","slug":"python-with-qt-application-development-4-database-design","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuu7008qn7t4lnc5135x","content":"<p>在上一篇探讨 MVC 模式使用的博文中，已经成功实现了 <code>Tree View</code>widget 的数据显示。而实际上，其中的数据是我们自己硬编码的，显然不符合要求。节点中的 <code>_data</code> 域也只是简单的字符串，没有体现出 MVC 的优势。对于本应用中要求的比较有结构化的数据，很自然地考虑使用数据库来组织。</p>\n<h2 id=\"数据库的考虑\"><a href=\"#数据库的考虑\" class=\"headerlink\" title=\"数据库的考虑\"></a>数据库的考虑</h2><p>作为本地应用，考虑使用 python 自带的嵌入式数据库 <code>sqlite3</code>。SQLite 跟普通数据库管理如 MYSQL 等大同小异，SQL 语句也是相差不大，一般有学习过数据库的读者找找资料大概就能轻松理解，而没有使用过数据库或者不懂数据库的读者则应该先补充好数据库的知识再来阅读本文。</p>\n<p>在 python，只需要加上 <code>import sqlite3</code> 语句就能使用 SQLite，方便至极。</p>\n<h2 id=\"笔记本\"><a href=\"#笔记本\" class=\"headerlink\" title=\"笔记本\"></a>笔记本</h2><p>笔记本的数据结构是一棵棵树，叶子节点是章节。考虑使用一个名为 <code>notebook</code> 的表来保存笔记本数据，一个名为 <code>chapter</code> 的表来保存章节。</p>\n<p>打开数据库设计工具，这里选用了一个在线的工具 <a href=\"http://ondras.zarovi.cz/sql/demo/\" target=\"_blank\" rel=\"noopener\">WWW SQL Designer</a>。画出以下设计图。</p>\n<p><img src=\"https://i.imgur.com/9HDCvP7.png\" alt=\"数据库设计图 1\"></p>\n<p>表 <code>notebook</code></p>\n<table>\n<thead>\n<tr>\n<th> 字段 </th>\n<th> 内容 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td> 主键 </td>\n</tr>\n<tr>\n<td>name</td>\n<td> 笔记本名称 </td>\n</tr>\n</tbody>\n</table>\n\n<p>表 <code>chapter</code></p>\n<table>\n<thead>\n<tr>\n<th> 字段 </th>\n<th> 内容 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td> 主键 </td>\n</tr>\n<tr>\n<td>name</td>\n<td> 章节名称 </td>\n</tr>\n<tr>\n<td>nid</td>\n<td> 所属笔记本 id，外键 </td>\n</tr>\n</tbody>\n</table>\n\n<p>表 <code>document</code></p>\n<table>\n<thead>\n<tr>\n<th> 字段 </th>\n<th> 内容 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td> 主键 </td>\n</tr>\n<tr>\n<td>cid</td>\n<td> 章节 id，外键 </td>\n</tr>\n<tr>\n<td>title</td>\n<td> 文档标题 </td>\n</tr>\n<tr>\n<td>content</td>\n<td> 文档内容 </td>\n</tr>\n<tr>\n<td>last_update</td>\n<td> 文档最后更新时间 </td>\n</tr>\n</tbody>\n</table>\n\n<p>然后使用输出功能输出 sql 脚本文件，注意这里的代码在我的电脑上是能够运行的，但不一定能够在你的电脑上运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE &apos;chapter&apos; (</span><br><span class=\"line\">&apos;id&apos; INTEGER NOT NULL  PRIMARY KEY AUTOINCREMENT,</span><br><span class=\"line\">&apos;name&apos; TEXT NOT NULL  DEFAULT &apos;new group&apos;,</span><br><span class=\"line\">&apos;nid&apos; INTEGER NOT NULL  DEFAULT 0 REFERENCES &apos;notebook&apos; (&apos;id&apos;) REFERENCES &apos;notebook&apos; (&apos;id&apos;)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE &apos;document&apos; (</span><br><span class=\"line\">&apos;id&apos; INTEGER NOT NULL  PRIMARY KEY AUTOINCREMENT,</span><br><span class=\"line\">&apos;cid&apos; INTEGER NOT NULL  DEFAULT 0 REFERENCES &apos;chapter&apos; (&apos;id&apos;) REFERENCES &apos;chapter&apos; (&apos;id&apos;),</span><br><span class=\"line\">&apos;title&apos; TEXT NOT NULL  DEFAULT &apos;New document&apos;,</span><br><span class=\"line\">&apos;content&apos; TEXT DEFAULT NULL,</span><br><span class=\"line\">&apos;last_update&apos; NUMERIC NOT NULL</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE &apos;notebook&apos; (</span><br><span class=\"line\">&apos;id&apos; INTEGER NOT NULL  DEFAULT NULL PRIMARY KEY AUTOINCREMENT,</span><br><span class=\"line\">&apos;name&apos; TEXT NOT NULL  DEFAULT &apos;new notebook&apos;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成数据库\"><a href=\"#生成数据库\" class=\"headerlink\" title=\"生成数据库\"></a>生成数据库</h2><p>保存 sql 脚本到工程根目录下的 <code>data.sql</code> 中，到 SQLite 官网下载 windows 版本的 CLI 文件 <code>sqlite3.exe</code>，同样放在工程根目录下。执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlite3.exe data.db &lt; data.sql</span><br></pre></td></tr></table></figure>\n<p>如无报错则生成了一个 <code>data.db</code> 的数据库文件了。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>文章只说明了各个表和字段的关系，字段的详细属性请查看 sql 语句。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在上一篇探讨 MVC 模式使用的博文中，已经成功实现了 <code>Tree View</code>widget 的数据显示。而实际上，其中的数据是我们自己硬编码的，显然不符合要求。节点中的 <code>_data</code> 域也只是简单的字符串，没有体现出 MVC 的优势。对于本应用中要求的比较有结构化的数据，很自然地考虑使用数据库来组织。</p>\n<h2 id=\"数据库的考虑\"><a href=\"#数据库的考虑\" class=\"headerlink\" title=\"数据库的考虑\"></a>数据库的考虑</h2><p>作为本地应用，考虑使用 python 自带的嵌入式数据库 <code>sqlite3</code>。SQLite 跟普通数据库管理如 MYSQL 等大同小异，SQL 语句也是相差不大，一般有学习过数据库的读者找找资料大概就能轻松理解，而没有使用过数据库或者不懂数据库的读者则应该先补充好数据库的知识再来阅读本文。</p>\n<p>在 python，只需要加上 <code>import sqlite3</code> 语句就能使用 SQLite，方便至极。</p>\n<h2 id=\"笔记本\"><a href=\"#笔记本\" class=\"headerlink\" title=\"笔记本\"></a>笔记本</h2><p>笔记本的数据结构是一棵棵树，叶子节点是章节。考虑使用一个名为 <code>notebook</code> 的表来保存笔记本数据，一个名为 <code>chapter</code> 的表来保存章节。</p>\n<p>打开数据库设计工具，这里选用了一个在线的工具 <a href=\"http://ondras.zarovi.cz/sql/demo/\" target=\"_blank\" rel=\"noopener\">WWW SQL Designer</a>。画出以下设计图。</p>\n<p><img src=\"https://i.imgur.com/9HDCvP7.png\" alt=\"数据库设计图 1\"></p>\n<p>表 <code>notebook</code></p>\n<table>\n<thead>\n<tr>\n<th> 字段 </th>\n<th> 内容 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td> 主键 </td>\n</tr>\n<tr>\n<td>name</td>\n<td> 笔记本名称 </td>\n</tr>\n</tbody>\n</table>\n\n<p>表 <code>chapter</code></p>\n<table>\n<thead>\n<tr>\n<th> 字段 </th>\n<th> 内容 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td> 主键 </td>\n</tr>\n<tr>\n<td>name</td>\n<td> 章节名称 </td>\n</tr>\n<tr>\n<td>nid</td>\n<td> 所属笔记本 id，外键 </td>\n</tr>\n</tbody>\n</table>\n\n<p>表 <code>document</code></p>\n<table>\n<thead>\n<tr>\n<th> 字段 </th>\n<th> 内容 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>id</td>\n<td> 主键 </td>\n</tr>\n<tr>\n<td>cid</td>\n<td> 章节 id，外键 </td>\n</tr>\n<tr>\n<td>title</td>\n<td> 文档标题 </td>\n</tr>\n<tr>\n<td>content</td>\n<td> 文档内容 </td>\n</tr>\n<tr>\n<td>last_update</td>\n<td> 文档最后更新时间 </td>\n</tr>\n</tbody>\n</table>\n\n<p>然后使用输出功能输出 sql 脚本文件，注意这里的代码在我的电脑上是能够运行的，但不一定能够在你的电脑上运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE TABLE &apos;chapter&apos; (</span><br><span class=\"line\">&apos;id&apos; INTEGER NOT NULL  PRIMARY KEY AUTOINCREMENT,</span><br><span class=\"line\">&apos;name&apos; TEXT NOT NULL  DEFAULT &apos;new group&apos;,</span><br><span class=\"line\">&apos;nid&apos; INTEGER NOT NULL  DEFAULT 0 REFERENCES &apos;notebook&apos; (&apos;id&apos;) REFERENCES &apos;notebook&apos; (&apos;id&apos;)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE &apos;document&apos; (</span><br><span class=\"line\">&apos;id&apos; INTEGER NOT NULL  PRIMARY KEY AUTOINCREMENT,</span><br><span class=\"line\">&apos;cid&apos; INTEGER NOT NULL  DEFAULT 0 REFERENCES &apos;chapter&apos; (&apos;id&apos;) REFERENCES &apos;chapter&apos; (&apos;id&apos;),</span><br><span class=\"line\">&apos;title&apos; TEXT NOT NULL  DEFAULT &apos;New document&apos;,</span><br><span class=\"line\">&apos;content&apos; TEXT DEFAULT NULL,</span><br><span class=\"line\">&apos;last_update&apos; NUMERIC NOT NULL</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE TABLE &apos;notebook&apos; (</span><br><span class=\"line\">&apos;id&apos; INTEGER NOT NULL  DEFAULT NULL PRIMARY KEY AUTOINCREMENT,</span><br><span class=\"line\">&apos;name&apos; TEXT NOT NULL  DEFAULT &apos;new notebook&apos;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"生成数据库\"><a href=\"#生成数据库\" class=\"headerlink\" title=\"生成数据库\"></a>生成数据库</h2><p>保存 sql 脚本到工程根目录下的 <code>data.sql</code> 中，到 SQLite 官网下载 windows 版本的 CLI 文件 <code>sqlite3.exe</code>，同样放在工程根目录下。执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlite3.exe data.db &lt; data.sql</span><br></pre></td></tr></table></figure>\n<p>如无报错则生成了一个 <code>data.db</code> 的数据库文件了。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>文章只说明了各个表和字段的关系，字段的详细属性请查看 sql 语句。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://i.imgur.com/9HDCvP7.png","popularPost_tmp_gaData":{"updated":"Fri Feb 27 2015 19:08:22 GMT+0800 (China Standard Time)","title":"python × Qt 应用开发 · 4 -- 数据库设计","path":"python-with-qt-application-development-4-database-design/","eyeCatchImage":"https://i.imgur.com/9HDCvP7.png","excerpt":null,"date":"2014-03-29T00:32:08.000Z","pv":0,"totalPV":0,"categories":"技术 > 编程语言 > python > 软件","tags":["python","Qt","software"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":938},{"title":"python × Qt 应用开发系列目录（连载中）","id":"41","updated":"2015-06-04T14:54:50.000Z","date":"2015-06-04T14:54:21.000Z","_content":"\n[python × Qt 应用开发 · 0 -- 序][1]\n\n[python × Qt 应用开发 · 1 -- 基本界面][2]\n\n[python × Qt 应用开发 · 2 -- 界面初步设计][3]\n\n[python × Qt 应用开发 · 2.5 -- 改进软件界面][4]\n\n[python × Qt 应用开发 · 3 -- MVC 中 model 的基本实现][5]\n\n[python × Qt 应用开发 · 4 -- 数据库设计][6]\n\n[python × Qt 应用开发 · 5 -- 数据库 helper 类的编写][7]\n\n[1]: http://blog.e10t.net/python-with-qt-application-development-0-prologue/\n[2]: http://blog.e10t.net/python-with-qt-application-development-1-basic-view/\n[3]: http://blog.e10t.net/python-with-qt-application-development-2-preliminary-design/\n[4]: http://blog.e10t.net/python-with-qt-application-development-2-5-developing-gui/\n[5]: http://blog.e10t.net/python-with-qt-application-development-3-basic-model-in-mvc/\n[6]: http://blog.e10t.net/python-with-qt-application-development-4-database-design/\n[7]: http://blog.e10t.net/python-with-qt-application-development-5-database-helper/","source":"_posts/python-with-Qt-application-development/python-×-Qt应用开发系列目录（连载中）.md","raw":"---\ntitle: python × Qt 应用开发系列目录（连载中）\ncategories:\n  - [技术, 软件]\n  - [编程语言, python]\ntags: [python, Qt, software]\npermalink: python-with-qt-application-development-catalogue\nid: 41\nupdated: '2015-06-04 22:54:50'\ndate: 2015-06-04 22:54:21\n---\n\n[python × Qt 应用开发 · 0 -- 序][1]\n\n[python × Qt 应用开发 · 1 -- 基本界面][2]\n\n[python × Qt 应用开发 · 2 -- 界面初步设计][3]\n\n[python × Qt 应用开发 · 2.5 -- 改进软件界面][4]\n\n[python × Qt 应用开发 · 3 -- MVC 中 model 的基本实现][5]\n\n[python × Qt 应用开发 · 4 -- 数据库设计][6]\n\n[python × Qt 应用开发 · 5 -- 数据库 helper 类的编写][7]\n\n[1]: http://blog.e10t.net/python-with-qt-application-development-0-prologue/\n[2]: http://blog.e10t.net/python-with-qt-application-development-1-basic-view/\n[3]: http://blog.e10t.net/python-with-qt-application-development-2-preliminary-design/\n[4]: http://blog.e10t.net/python-with-qt-application-development-2-5-developing-gui/\n[5]: http://blog.e10t.net/python-with-qt-application-development-3-basic-model-in-mvc/\n[6]: http://blog.e10t.net/python-with-qt-application-development-4-database-design/\n[7]: http://blog.e10t.net/python-with-qt-application-development-5-database-helper/","slug":"python-with-qt-application-development-catalogue","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuu8008un7t4f1masz2a","content":"<p><a href=\"http://blog.e10t.net/python-with-qt-application-development-0-prologue/\">python × Qt 应用开发 · 0 — 序</a></p>\n<p><a href=\"http://blog.e10t.net/python-with-qt-application-development-1-basic-view/\">python × Qt 应用开发 · 1 — 基本界面</a></p>\n<p><a href=\"http://blog.e10t.net/python-with-qt-application-development-2-preliminary-design/\">python × Qt 应用开发 · 2 — 界面初步设计</a></p>\n<p><a href=\"http://blog.e10t.net/python-with-qt-application-development-2-5-developing-gui/\">python × Qt 应用开发 · 2.5 — 改进软件界面</a></p>\n<p><a href=\"http://blog.e10t.net/python-with-qt-application-development-3-basic-model-in-mvc/\">python × Qt 应用开发 · 3 — MVC 中 model 的基本实现</a></p>\n<p><a href=\"http://blog.e10t.net/python-with-qt-application-development-4-database-design/\">python × Qt 应用开发 · 4 — 数据库设计</a></p>\n<p><a href=\"http://blog.e10t.net/python-with-qt-application-development-5-database-helper/\">python × Qt 应用开发 · 5 — 数据库 helper 类的编写</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://blog.e10t.net/python-with-qt-application-development-0-prologue/\">python × Qt 应用开发 · 0 — 序</a></p>\n<p><a href=\"http://blog.e10t.net/python-with-qt-application-development-1-basic-view/\">python × Qt 应用开发 · 1 — 基本界面</a></p>\n<p><a href=\"http://blog.e10t.net/python-with-qt-application-development-2-preliminary-design/\">python × Qt 应用开发 · 2 — 界面初步设计</a></p>\n<p><a href=\"http://blog.e10t.net/python-with-qt-application-development-2-5-developing-gui/\">python × Qt 应用开发 · 2.5 — 改进软件界面</a></p>\n<p><a href=\"http://blog.e10t.net/python-with-qt-application-development-3-basic-model-in-mvc/\">python × Qt 应用开发 · 3 — MVC 中 model 的基本实现</a></p>\n<p><a href=\"http://blog.e10t.net/python-with-qt-application-development-4-database-design/\">python × Qt 应用开发 · 4 — 数据库设计</a></p>\n<p><a href=\"http://blog.e10t.net/python-with-qt-application-development-5-database-helper/\">python × Qt 应用开发 · 5 — 数据库 helper 类的编写</a></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Thu Jun 04 2015 22:54:50 GMT+0800 (China Standard Time)","title":"python × Qt 应用开发系列目录（连载中）","path":"python-with-qt-application-development-catalogue/","eyeCatchImage":null,"excerpt":null,"date":"2015-06-04T14:54:21.000Z","pv":0,"totalPV":0,"categories":"技术 > 编程语言 > python > 软件","tags":["python","Qt","software"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":224},{"title":"旅游照——上海 [20p]","id":"34","updated":"2015-01-31T09:44:33.000Z","date":"2015-01-31T08:49:25.000Z","_content":"\n之前去了 4 天旅游，挑一点旅游照放上来。行程挺紧的，没什么时间好好拍。\n\n第一天，上海。\n\n![1](https://i.imgur.com/VUeLnGS.jpg)\n\n![2](https://i.imgur.com/ymAnIsO.jpg)\n\n![3](https://i.imgur.com/2FxzpW2.jpg)\n\n![4](https://i.imgur.com/VGvyVgp.jpg)\n\n![5](https://i.imgur.com/N8J5M8c.jpg)\n\n![6](https://i.imgur.com/Tzk3P1r.jpg)\n\n![7](https://i.imgur.com/eH0YVar.jpg)\n\n![8](https://i.imgur.com/mKEM7We.jpg)\n\n![9](https://i.imgur.com/EA6TVUn.jpg)\n\n![10](https://i.imgur.com/ljBNQQh.jpg)\n\n![11](https://i.imgur.com/wtEF8r7.jpg)\n\n![12](https://i.imgur.com/C4R5K1h.jpg)\n\n![13](https://i.imgur.com/88RIet8.jpg)\n\n![14](https://i.imgur.com/3Xtr1yr.jpg)\n\n![15](https://i.imgur.com/9u9Hail.jpg)\n\n![16](https://i.imgur.com/0II83mO.jpg)\n\n![17](https://i.imgur.com/K5iwLh3.jpg)\n\n![18](https://i.imgur.com/SSeq0XU.jpg)\n\n![19](https://i.imgur.com/0beauKS.jpg)\n\n![20](https://i.imgur.com/Qr9kUj7.jpg)","source":"_posts/traveling/旅游照——上海-20p.md","raw":"---\ntitle: '旅游照——上海 [20p]'\ncategories:\n  - [摄影, 旅游]\n  - [生活, 旅游]\ntags: [photograph, travel]\npermalink: tour-photo-shanghai\nid: 34\nupdated: '2015-01-31 17:44:33'\ndate: 2015-01-31 16:49:25\n---\n\n之前去了 4 天旅游，挑一点旅游照放上来。行程挺紧的，没什么时间好好拍。\n\n第一天，上海。\n\n![1](https://i.imgur.com/VUeLnGS.jpg)\n\n![2](https://i.imgur.com/ymAnIsO.jpg)\n\n![3](https://i.imgur.com/2FxzpW2.jpg)\n\n![4](https://i.imgur.com/VGvyVgp.jpg)\n\n![5](https://i.imgur.com/N8J5M8c.jpg)\n\n![6](https://i.imgur.com/Tzk3P1r.jpg)\n\n![7](https://i.imgur.com/eH0YVar.jpg)\n\n![8](https://i.imgur.com/mKEM7We.jpg)\n\n![9](https://i.imgur.com/EA6TVUn.jpg)\n\n![10](https://i.imgur.com/ljBNQQh.jpg)\n\n![11](https://i.imgur.com/wtEF8r7.jpg)\n\n![12](https://i.imgur.com/C4R5K1h.jpg)\n\n![13](https://i.imgur.com/88RIet8.jpg)\n\n![14](https://i.imgur.com/3Xtr1yr.jpg)\n\n![15](https://i.imgur.com/9u9Hail.jpg)\n\n![16](https://i.imgur.com/0II83mO.jpg)\n\n![17](https://i.imgur.com/K5iwLh3.jpg)\n\n![18](https://i.imgur.com/SSeq0XU.jpg)\n\n![19](https://i.imgur.com/0beauKS.jpg)\n\n![20](https://i.imgur.com/Qr9kUj7.jpg)","slug":"tour-photo-shanghai","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuua008xn7t4pl40pwov","content":"<p>之前去了 4 天旅游，挑一点旅游照放上来。行程挺紧的，没什么时间好好拍。</p>\n<p>第一天，上海。</p>\n<p><img src=\"https://i.imgur.com/VUeLnGS.jpg\" alt=\"1\"></p>\n<p><img src=\"https://i.imgur.com/ymAnIsO.jpg\" alt=\"2\"></p>\n<p><img src=\"https://i.imgur.com/2FxzpW2.jpg\" alt=\"3\"></p>\n<p><img src=\"https://i.imgur.com/VGvyVgp.jpg\" alt=\"4\"></p>\n<p><img src=\"https://i.imgur.com/N8J5M8c.jpg\" alt=\"5\"></p>\n<p><img src=\"https://i.imgur.com/Tzk3P1r.jpg\" alt=\"6\"></p>\n<p><img src=\"https://i.imgur.com/eH0YVar.jpg\" alt=\"7\"></p>\n<p><img src=\"https://i.imgur.com/mKEM7We.jpg\" alt=\"8\"></p>\n<p><img src=\"https://i.imgur.com/EA6TVUn.jpg\" alt=\"9\"></p>\n<p><img src=\"https://i.imgur.com/ljBNQQh.jpg\" alt=\"10\"></p>\n<p><img src=\"https://i.imgur.com/wtEF8r7.jpg\" alt=\"11\"></p>\n<p><img src=\"https://i.imgur.com/C4R5K1h.jpg\" alt=\"12\"></p>\n<p><img src=\"https://i.imgur.com/88RIet8.jpg\" alt=\"13\"></p>\n<p><img src=\"https://i.imgur.com/3Xtr1yr.jpg\" alt=\"14\"></p>\n<p><img src=\"https://i.imgur.com/9u9Hail.jpg\" alt=\"15\"></p>\n<p><img src=\"https://i.imgur.com/0II83mO.jpg\" alt=\"16\"></p>\n<p><img src=\"https://i.imgur.com/K5iwLh3.jpg\" alt=\"17\"></p>\n<p><img src=\"https://i.imgur.com/SSeq0XU.jpg\" alt=\"18\"></p>\n<p><img src=\"https://i.imgur.com/0beauKS.jpg\" alt=\"19\"></p>\n<p><img src=\"https://i.imgur.com/Qr9kUj7.jpg\" alt=\"20\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前去了 4 天旅游，挑一点旅游照放上来。行程挺紧的，没什么时间好好拍。</p>\n<p>第一天，上海。</p>\n<p><img src=\"https://i.imgur.com/VUeLnGS.jpg\" alt=\"1\"></p>\n<p><img src=\"https://i.imgur.com/ymAnIsO.jpg\" alt=\"2\"></p>\n<p><img src=\"https://i.imgur.com/2FxzpW2.jpg\" alt=\"3\"></p>\n<p><img src=\"https://i.imgur.com/VGvyVgp.jpg\" alt=\"4\"></p>\n<p><img src=\"https://i.imgur.com/N8J5M8c.jpg\" alt=\"5\"></p>\n<p><img src=\"https://i.imgur.com/Tzk3P1r.jpg\" alt=\"6\"></p>\n<p><img src=\"https://i.imgur.com/eH0YVar.jpg\" alt=\"7\"></p>\n<p><img src=\"https://i.imgur.com/mKEM7We.jpg\" alt=\"8\"></p>\n<p><img src=\"https://i.imgur.com/EA6TVUn.jpg\" alt=\"9\"></p>\n<p><img src=\"https://i.imgur.com/ljBNQQh.jpg\" alt=\"10\"></p>\n<p><img src=\"https://i.imgur.com/wtEF8r7.jpg\" alt=\"11\"></p>\n<p><img src=\"https://i.imgur.com/C4R5K1h.jpg\" alt=\"12\"></p>\n<p><img src=\"https://i.imgur.com/88RIet8.jpg\" alt=\"13\"></p>\n<p><img src=\"https://i.imgur.com/3Xtr1yr.jpg\" alt=\"14\"></p>\n<p><img src=\"https://i.imgur.com/9u9Hail.jpg\" alt=\"15\"></p>\n<p><img src=\"https://i.imgur.com/0II83mO.jpg\" alt=\"16\"></p>\n<p><img src=\"https://i.imgur.com/K5iwLh3.jpg\" alt=\"17\"></p>\n<p><img src=\"https://i.imgur.com/SSeq0XU.jpg\" alt=\"18\"></p>\n<p><img src=\"https://i.imgur.com/0beauKS.jpg\" alt=\"19\"></p>\n<p><img src=\"https://i.imgur.com/Qr9kUj7.jpg\" alt=\"20\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://i.imgur.com/VUeLnGS.jpg","popularPost_tmp_gaData":{"updated":"Sat Jan 31 2015 17:44:33 GMT+0800 (China Standard Time)","title":"旅游照——上海 [20p]","path":"tour-photo-shanghai/","eyeCatchImage":"https://i.imgur.com/VUeLnGS.jpg","excerpt":null,"date":"2015-01-31T08:49:25.000Z","pv":0,"totalPV":0,"categories":"生活 > 摄影 > 旅游 > 旅游","tags":["photograph","travel"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":65},{"title":"旅游照——乌镇 & 杭州 [53p]","id":"36","updated":"2015-01-31T14:55:47.000Z","date":"2015-01-31T13:32:09.000Z","_content":"\n[第一天的上海](http://blog.e10t.net/tour-photo-shanghai/)\n\n[第二天的苏州和乌镇晚上](http://blog.e10t.net/tour-photo-suzhou-wuzhen-night/)\n\n第三天早上在乌镇。早早起来拍摄。\n\n不太会后期，都是相机 jpg 直出了。\n\n![1](https://i.imgur.com/1JUHRNi.jpg)\n\n![2](https://i.imgur.com/OMuzaD4.jpg)\n\n![3](https://i.imgur.com/ofVj8MD.jpg)\n\n![4](https://i.imgur.com/xRmqMUK.jpg)\n\n冷到有霜。\n\n![5](https://i.imgur.com/TYnzsH9.jpg)\n\n![6](https://i.imgur.com/0Rr0PWT.jpg)\n\n![7](https://i.imgur.com/KradevJ.jpg)\n\n![8](https://i.imgur.com/mDX99Ju.jpg)\n\n![9](https://i.imgur.com/A1chnJP.jpg)\n\n![10](https://i.imgur.com/ytk0beu.jpg)\n\n![11](https://i.imgur.com/p5KoJhs.jpg)\n\n![12](https://i.imgur.com/Htqi3ho.jpg)\n\n![13](https://i.imgur.com/vFEu58e.jpg)\n\n![14](https://i.imgur.com/AJnLuLS.jpg)\n\n![15](https://i.imgur.com/jIKUNna.jpg)\n\n![16](https://i.imgur.com/VynvVFM.jpg)\n\n![17](https://i.imgur.com/ZHMzzkJ.jpg)\n\n![18](https://i.imgur.com/hb6M6u8.jpg)\n\n早晨的乌镇真是美极了。\n\n![19](https://i.imgur.com/l3WYGn5.jpg)\n\n![20](https://i.imgur.com/5jVJdy4.jpg)\n\n![21](https://i.imgur.com/j1F7zk5.jpg)\n\n![22](https://i.imgur.com/DHLQ5aE.jpg)\n\n![23](https://i.imgur.com/HzszDYj.jpg)\n\n![24](https://i.imgur.com/uu5hXHl.jpg)\n\n![25](https://i.imgur.com/fE0yEV2.jpg)\n\n![26](https://i.imgur.com/FnsUHll.jpg)\n\n![27](https://i.imgur.com/huNDLED.jpg)\n\n![28](https://i.imgur.com/am1qYSS.jpg)\n\n![29](https://i.imgur.com/3jj2FjY.jpg)\n\n![30](https://i.imgur.com/klwck5I.jpg)\n\n![31](https://i.imgur.com/ihmauQQ.jpg)\n\n![32](https://i.imgur.com/qJMGQdH.jpg)\n\n![33](https://i.imgur.com/p1IGqxA.jpg)\n\n![34](https://i.imgur.com/fqLjTYP.jpg)\n\n![35](https://i.imgur.com/nKWDIDt.jpg)\n\n![36](https://i.imgur.com/7nIhJqu.jpg)\n\n![37](https://i.imgur.com/lUAWiW9.jpg)\n\n![38](https://i.imgur.com/nN1iKsB.jpg)\n\n住的酒店叫做昭明书社。在外面拍完照回到房间，刚好看到窗边的一缕阳光照到盒子上面。\n\n![39](https://i.imgur.com/rfdyGMM.jpg)\n\n团里的两个女孩子，广大的。\n\n![40](https://i.imgur.com/5ADw5nm.jpg)\n\n到了河坊街。\n\n![41](https://i.imgur.com/DEupzJ8.jpg)\n\n![42](https://i.imgur.com/1suidSV.jpg)\n\n![43](https://i.imgur.com/EphRYrk.jpg)\n\n![44](https://i.imgur.com/9WRaJ6m.jpg)\n\n晚上去了宋城。其实只是个古代主题的现代游乐园而已。\n\n![45](https://i.imgur.com/iTdaahM.jpg)\n\n![46](https://i.imgur.com/oTszkZw.jpg)\n\n![47](https://i.imgur.com/s5dhOQN.jpg)\n\n![48](https://i.imgur.com/qJQ1vK7.jpg)\n\n![49](https://i.imgur.com/61jQeP2.jpg)\n\n![50](https://i.imgur.com/MfqY6PW.jpg)\n\n![51](https://i.imgur.com/s6VT0eI.jpg)\n\n![52](https://i.imgur.com/Y9rJ8XG.jpg)\n\n![53](https://i.imgur.com/IybjEsC.jpg)\n","source":"_posts/traveling/旅游照——乌镇-杭州-53p.md","raw":"---\ntitle: '旅游照——乌镇 & 杭州 [53p]'\ncategories:\n  - [摄影, 旅游]\n  - [生活, 旅游]\ntags: [photograph, travel]\npermalink: tour-photo-wuzhen-hangzhou\nid: 36\nupdated: '2015-01-31 22:55:47'\ndate: 2015-01-31 21:32:09\n---\n\n[第一天的上海](http://blog.e10t.net/tour-photo-shanghai/)\n\n[第二天的苏州和乌镇晚上](http://blog.e10t.net/tour-photo-suzhou-wuzhen-night/)\n\n第三天早上在乌镇。早早起来拍摄。\n\n不太会后期，都是相机 jpg 直出了。\n\n![1](https://i.imgur.com/1JUHRNi.jpg)\n\n![2](https://i.imgur.com/OMuzaD4.jpg)\n\n![3](https://i.imgur.com/ofVj8MD.jpg)\n\n![4](https://i.imgur.com/xRmqMUK.jpg)\n\n冷到有霜。\n\n![5](https://i.imgur.com/TYnzsH9.jpg)\n\n![6](https://i.imgur.com/0Rr0PWT.jpg)\n\n![7](https://i.imgur.com/KradevJ.jpg)\n\n![8](https://i.imgur.com/mDX99Ju.jpg)\n\n![9](https://i.imgur.com/A1chnJP.jpg)\n\n![10](https://i.imgur.com/ytk0beu.jpg)\n\n![11](https://i.imgur.com/p5KoJhs.jpg)\n\n![12](https://i.imgur.com/Htqi3ho.jpg)\n\n![13](https://i.imgur.com/vFEu58e.jpg)\n\n![14](https://i.imgur.com/AJnLuLS.jpg)\n\n![15](https://i.imgur.com/jIKUNna.jpg)\n\n![16](https://i.imgur.com/VynvVFM.jpg)\n\n![17](https://i.imgur.com/ZHMzzkJ.jpg)\n\n![18](https://i.imgur.com/hb6M6u8.jpg)\n\n早晨的乌镇真是美极了。\n\n![19](https://i.imgur.com/l3WYGn5.jpg)\n\n![20](https://i.imgur.com/5jVJdy4.jpg)\n\n![21](https://i.imgur.com/j1F7zk5.jpg)\n\n![22](https://i.imgur.com/DHLQ5aE.jpg)\n\n![23](https://i.imgur.com/HzszDYj.jpg)\n\n![24](https://i.imgur.com/uu5hXHl.jpg)\n\n![25](https://i.imgur.com/fE0yEV2.jpg)\n\n![26](https://i.imgur.com/FnsUHll.jpg)\n\n![27](https://i.imgur.com/huNDLED.jpg)\n\n![28](https://i.imgur.com/am1qYSS.jpg)\n\n![29](https://i.imgur.com/3jj2FjY.jpg)\n\n![30](https://i.imgur.com/klwck5I.jpg)\n\n![31](https://i.imgur.com/ihmauQQ.jpg)\n\n![32](https://i.imgur.com/qJMGQdH.jpg)\n\n![33](https://i.imgur.com/p1IGqxA.jpg)\n\n![34](https://i.imgur.com/fqLjTYP.jpg)\n\n![35](https://i.imgur.com/nKWDIDt.jpg)\n\n![36](https://i.imgur.com/7nIhJqu.jpg)\n\n![37](https://i.imgur.com/lUAWiW9.jpg)\n\n![38](https://i.imgur.com/nN1iKsB.jpg)\n\n住的酒店叫做昭明书社。在外面拍完照回到房间，刚好看到窗边的一缕阳光照到盒子上面。\n\n![39](https://i.imgur.com/rfdyGMM.jpg)\n\n团里的两个女孩子，广大的。\n\n![40](https://i.imgur.com/5ADw5nm.jpg)\n\n到了河坊街。\n\n![41](https://i.imgur.com/DEupzJ8.jpg)\n\n![42](https://i.imgur.com/1suidSV.jpg)\n\n![43](https://i.imgur.com/EphRYrk.jpg)\n\n![44](https://i.imgur.com/9WRaJ6m.jpg)\n\n晚上去了宋城。其实只是个古代主题的现代游乐园而已。\n\n![45](https://i.imgur.com/iTdaahM.jpg)\n\n![46](https://i.imgur.com/oTszkZw.jpg)\n\n![47](https://i.imgur.com/s5dhOQN.jpg)\n\n![48](https://i.imgur.com/qJQ1vK7.jpg)\n\n![49](https://i.imgur.com/61jQeP2.jpg)\n\n![50](https://i.imgur.com/MfqY6PW.jpg)\n\n![51](https://i.imgur.com/s6VT0eI.jpg)\n\n![52](https://i.imgur.com/Y9rJ8XG.jpg)\n\n![53](https://i.imgur.com/IybjEsC.jpg)\n","slug":"tour-photo-wuzhen-hangzhou","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuub0092n7t46m9a9kt6","content":"<p><a href=\"http://blog.e10t.net/tour-photo-shanghai/\">第一天的上海</a></p>\n<p><a href=\"http://blog.e10t.net/tour-photo-suzhou-wuzhen-night/\">第二天的苏州和乌镇晚上</a></p>\n<p>第三天早上在乌镇。早早起来拍摄。</p>\n<p>不太会后期，都是相机 jpg 直出了。</p>\n<p><img src=\"https://i.imgur.com/1JUHRNi.jpg\" alt=\"1\"></p>\n<p><img src=\"https://i.imgur.com/OMuzaD4.jpg\" alt=\"2\"></p>\n<p><img src=\"https://i.imgur.com/ofVj8MD.jpg\" alt=\"3\"></p>\n<p><img src=\"https://i.imgur.com/xRmqMUK.jpg\" alt=\"4\"></p>\n<p>冷到有霜。</p>\n<p><img src=\"https://i.imgur.com/TYnzsH9.jpg\" alt=\"5\"></p>\n<p><img src=\"https://i.imgur.com/0Rr0PWT.jpg\" alt=\"6\"></p>\n<p><img src=\"https://i.imgur.com/KradevJ.jpg\" alt=\"7\"></p>\n<p><img src=\"https://i.imgur.com/mDX99Ju.jpg\" alt=\"8\"></p>\n<p><img src=\"https://i.imgur.com/A1chnJP.jpg\" alt=\"9\"></p>\n<p><img src=\"https://i.imgur.com/ytk0beu.jpg\" alt=\"10\"></p>\n<p><img src=\"https://i.imgur.com/p5KoJhs.jpg\" alt=\"11\"></p>\n<p><img src=\"https://i.imgur.com/Htqi3ho.jpg\" alt=\"12\"></p>\n<p><img src=\"https://i.imgur.com/vFEu58e.jpg\" alt=\"13\"></p>\n<p><img src=\"https://i.imgur.com/AJnLuLS.jpg\" alt=\"14\"></p>\n<p><img src=\"https://i.imgur.com/jIKUNna.jpg\" alt=\"15\"></p>\n<p><img src=\"https://i.imgur.com/VynvVFM.jpg\" alt=\"16\"></p>\n<p><img src=\"https://i.imgur.com/ZHMzzkJ.jpg\" alt=\"17\"></p>\n<p><img src=\"https://i.imgur.com/hb6M6u8.jpg\" alt=\"18\"></p>\n<p>早晨的乌镇真是美极了。</p>\n<p><img src=\"https://i.imgur.com/l3WYGn5.jpg\" alt=\"19\"></p>\n<p><img src=\"https://i.imgur.com/5jVJdy4.jpg\" alt=\"20\"></p>\n<p><img src=\"https://i.imgur.com/j1F7zk5.jpg\" alt=\"21\"></p>\n<p><img src=\"https://i.imgur.com/DHLQ5aE.jpg\" alt=\"22\"></p>\n<p><img src=\"https://i.imgur.com/HzszDYj.jpg\" alt=\"23\"></p>\n<p><img src=\"https://i.imgur.com/uu5hXHl.jpg\" alt=\"24\"></p>\n<p><img src=\"https://i.imgur.com/fE0yEV2.jpg\" alt=\"25\"></p>\n<p><img src=\"https://i.imgur.com/FnsUHll.jpg\" alt=\"26\"></p>\n<p><img src=\"https://i.imgur.com/huNDLED.jpg\" alt=\"27\"></p>\n<p><img src=\"https://i.imgur.com/am1qYSS.jpg\" alt=\"28\"></p>\n<p><img src=\"https://i.imgur.com/3jj2FjY.jpg\" alt=\"29\"></p>\n<p><img src=\"https://i.imgur.com/klwck5I.jpg\" alt=\"30\"></p>\n<p><img src=\"https://i.imgur.com/ihmauQQ.jpg\" alt=\"31\"></p>\n<p><img src=\"https://i.imgur.com/qJMGQdH.jpg\" alt=\"32\"></p>\n<p><img src=\"https://i.imgur.com/p1IGqxA.jpg\" alt=\"33\"></p>\n<p><img src=\"https://i.imgur.com/fqLjTYP.jpg\" alt=\"34\"></p>\n<p><img src=\"https://i.imgur.com/nKWDIDt.jpg\" alt=\"35\"></p>\n<p><img src=\"https://i.imgur.com/7nIhJqu.jpg\" alt=\"36\"></p>\n<p><img src=\"https://i.imgur.com/lUAWiW9.jpg\" alt=\"37\"></p>\n<p><img src=\"https://i.imgur.com/nN1iKsB.jpg\" alt=\"38\"></p>\n<p>住的酒店叫做昭明书社。在外面拍完照回到房间，刚好看到窗边的一缕阳光照到盒子上面。</p>\n<p><img src=\"https://i.imgur.com/rfdyGMM.jpg\" alt=\"39\"></p>\n<p>团里的两个女孩子，广大的。</p>\n<p><img src=\"https://i.imgur.com/5ADw5nm.jpg\" alt=\"40\"></p>\n<p>到了河坊街。</p>\n<p><img src=\"https://i.imgur.com/DEupzJ8.jpg\" alt=\"41\"></p>\n<p><img src=\"https://i.imgur.com/1suidSV.jpg\" alt=\"42\"></p>\n<p><img src=\"https://i.imgur.com/EphRYrk.jpg\" alt=\"43\"></p>\n<p><img src=\"https://i.imgur.com/9WRaJ6m.jpg\" alt=\"44\"></p>\n<p>晚上去了宋城。其实只是个古代主题的现代游乐园而已。</p>\n<p><img src=\"https://i.imgur.com/iTdaahM.jpg\" alt=\"45\"></p>\n<p><img src=\"https://i.imgur.com/oTszkZw.jpg\" alt=\"46\"></p>\n<p><img src=\"https://i.imgur.com/s5dhOQN.jpg\" alt=\"47\"></p>\n<p><img src=\"https://i.imgur.com/qJQ1vK7.jpg\" alt=\"48\"></p>\n<p><img src=\"https://i.imgur.com/61jQeP2.jpg\" alt=\"49\"></p>\n<p><img src=\"https://i.imgur.com/MfqY6PW.jpg\" alt=\"50\"></p>\n<p><img src=\"https://i.imgur.com/s6VT0eI.jpg\" alt=\"51\"></p>\n<p><img src=\"https://i.imgur.com/Y9rJ8XG.jpg\" alt=\"52\"></p>\n<p><img src=\"https://i.imgur.com/IybjEsC.jpg\" alt=\"53\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://blog.e10t.net/tour-photo-shanghai/\">第一天的上海</a></p>\n<p><a href=\"http://blog.e10t.net/tour-photo-suzhou-wuzhen-night/\">第二天的苏州和乌镇晚上</a></p>\n<p>第三天早上在乌镇。早早起来拍摄。</p>\n<p>不太会后期，都是相机 jpg 直出了。</p>\n<p><img src=\"https://i.imgur.com/1JUHRNi.jpg\" alt=\"1\"></p>\n<p><img src=\"https://i.imgur.com/OMuzaD4.jpg\" alt=\"2\"></p>\n<p><img src=\"https://i.imgur.com/ofVj8MD.jpg\" alt=\"3\"></p>\n<p><img src=\"https://i.imgur.com/xRmqMUK.jpg\" alt=\"4\"></p>\n<p>冷到有霜。</p>\n<p><img src=\"https://i.imgur.com/TYnzsH9.jpg\" alt=\"5\"></p>\n<p><img src=\"https://i.imgur.com/0Rr0PWT.jpg\" alt=\"6\"></p>\n<p><img src=\"https://i.imgur.com/KradevJ.jpg\" alt=\"7\"></p>\n<p><img src=\"https://i.imgur.com/mDX99Ju.jpg\" alt=\"8\"></p>\n<p><img src=\"https://i.imgur.com/A1chnJP.jpg\" alt=\"9\"></p>\n<p><img src=\"https://i.imgur.com/ytk0beu.jpg\" alt=\"10\"></p>\n<p><img src=\"https://i.imgur.com/p5KoJhs.jpg\" alt=\"11\"></p>\n<p><img src=\"https://i.imgur.com/Htqi3ho.jpg\" alt=\"12\"></p>\n<p><img src=\"https://i.imgur.com/vFEu58e.jpg\" alt=\"13\"></p>\n<p><img src=\"https://i.imgur.com/AJnLuLS.jpg\" alt=\"14\"></p>\n<p><img src=\"https://i.imgur.com/jIKUNna.jpg\" alt=\"15\"></p>\n<p><img src=\"https://i.imgur.com/VynvVFM.jpg\" alt=\"16\"></p>\n<p><img src=\"https://i.imgur.com/ZHMzzkJ.jpg\" alt=\"17\"></p>\n<p><img src=\"https://i.imgur.com/hb6M6u8.jpg\" alt=\"18\"></p>\n<p>早晨的乌镇真是美极了。</p>\n<p><img src=\"https://i.imgur.com/l3WYGn5.jpg\" alt=\"19\"></p>\n<p><img src=\"https://i.imgur.com/5jVJdy4.jpg\" alt=\"20\"></p>\n<p><img src=\"https://i.imgur.com/j1F7zk5.jpg\" alt=\"21\"></p>\n<p><img src=\"https://i.imgur.com/DHLQ5aE.jpg\" alt=\"22\"></p>\n<p><img src=\"https://i.imgur.com/HzszDYj.jpg\" alt=\"23\"></p>\n<p><img src=\"https://i.imgur.com/uu5hXHl.jpg\" alt=\"24\"></p>\n<p><img src=\"https://i.imgur.com/fE0yEV2.jpg\" alt=\"25\"></p>\n<p><img src=\"https://i.imgur.com/FnsUHll.jpg\" alt=\"26\"></p>\n<p><img src=\"https://i.imgur.com/huNDLED.jpg\" alt=\"27\"></p>\n<p><img src=\"https://i.imgur.com/am1qYSS.jpg\" alt=\"28\"></p>\n<p><img src=\"https://i.imgur.com/3jj2FjY.jpg\" alt=\"29\"></p>\n<p><img src=\"https://i.imgur.com/klwck5I.jpg\" alt=\"30\"></p>\n<p><img src=\"https://i.imgur.com/ihmauQQ.jpg\" alt=\"31\"></p>\n<p><img src=\"https://i.imgur.com/qJMGQdH.jpg\" alt=\"32\"></p>\n<p><img src=\"https://i.imgur.com/p1IGqxA.jpg\" alt=\"33\"></p>\n<p><img src=\"https://i.imgur.com/fqLjTYP.jpg\" alt=\"34\"></p>\n<p><img src=\"https://i.imgur.com/nKWDIDt.jpg\" alt=\"35\"></p>\n<p><img src=\"https://i.imgur.com/7nIhJqu.jpg\" alt=\"36\"></p>\n<p><img src=\"https://i.imgur.com/lUAWiW9.jpg\" alt=\"37\"></p>\n<p><img src=\"https://i.imgur.com/nN1iKsB.jpg\" alt=\"38\"></p>\n<p>住的酒店叫做昭明书社。在外面拍完照回到房间，刚好看到窗边的一缕阳光照到盒子上面。</p>\n<p><img src=\"https://i.imgur.com/rfdyGMM.jpg\" alt=\"39\"></p>\n<p>团里的两个女孩子，广大的。</p>\n<p><img src=\"https://i.imgur.com/5ADw5nm.jpg\" alt=\"40\"></p>\n<p>到了河坊街。</p>\n<p><img src=\"https://i.imgur.com/DEupzJ8.jpg\" alt=\"41\"></p>\n<p><img src=\"https://i.imgur.com/1suidSV.jpg\" alt=\"42\"></p>\n<p><img src=\"https://i.imgur.com/EphRYrk.jpg\" alt=\"43\"></p>\n<p><img src=\"https://i.imgur.com/9WRaJ6m.jpg\" alt=\"44\"></p>\n<p>晚上去了宋城。其实只是个古代主题的现代游乐园而已。</p>\n<p><img src=\"https://i.imgur.com/iTdaahM.jpg\" alt=\"45\"></p>\n<p><img src=\"https://i.imgur.com/oTszkZw.jpg\" alt=\"46\"></p>\n<p><img src=\"https://i.imgur.com/s5dhOQN.jpg\" alt=\"47\"></p>\n<p><img src=\"https://i.imgur.com/qJQ1vK7.jpg\" alt=\"48\"></p>\n<p><img src=\"https://i.imgur.com/61jQeP2.jpg\" alt=\"49\"></p>\n<p><img src=\"https://i.imgur.com/MfqY6PW.jpg\" alt=\"50\"></p>\n<p><img src=\"https://i.imgur.com/s6VT0eI.jpg\" alt=\"51\"></p>\n<p><img src=\"https://i.imgur.com/Y9rJ8XG.jpg\" alt=\"52\"></p>\n<p><img src=\"https://i.imgur.com/IybjEsC.jpg\" alt=\"53\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://i.imgur.com/1JUHRNi.jpg","popularPost_tmp_gaData":{"updated":"Sat Jan 31 2015 22:55:47 GMT+0800 (China Standard Time)","title":"旅游照——乌镇 & 杭州 [53p]","path":"tour-photo-wuzhen-hangzhou/","eyeCatchImage":"https://i.imgur.com/1JUHRNi.jpg","excerpt":null,"date":"2015-01-31T13:32:09.000Z","pv":0,"totalPV":0,"categories":"生活 > 摄影 > 旅游 > 旅游","tags":["photograph","travel"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":215},{"title":"旅游照——杭州 [21p]","id":"37","updated":"2015-01-31T14:57:41.000Z","date":"2015-01-31T14:57:41.000Z","_content":"\n[第一天的上海](http://blog.e10t.net/tour-photo-shanghai/)\n\n[第二天的苏州和乌镇晚上](http://blog.e10t.net/tour-photo-suzhou-wuzhen-night/)\n\n[第三天的乌镇和杭州](http://blog.e10t.net/tour-photo-wuzhen-hangzhou/)\n\n这次的重点不在杭州，所以西湖根本游不完。天气也很差，有雾，拍出来灰蒙蒙的。后期也不怎么会，将就着看吧。\n\n![1](https://i.imgur.com/4XHolhu.jpg)\n\n![2](https://i.imgur.com/WZWG85m.jpg)\n\n![3](https://i.imgur.com/hDtIsFr.jpg)\n\n![4](https://i.imgur.com/73f8Bkz.jpg)\n\n![5](https://i.imgur.com/aCKAhPm.jpg)\n\n![6](https://i.imgur.com/VNFm7LK.jpg)\n\n![7](https://i.imgur.com/yYxJpAQ.jpg)\n\n![8](https://i.imgur.com/X16zEsD.jpg)\n\n![9](https://i.imgur.com/CkJjkv5.jpg)\n\n![10](https://i.imgur.com/xYSL1r7.jpg)\n\n![11](https://i.imgur.com/1Uo3MAb.jpg)\n\n![12](https://i.imgur.com/vWHvn6S.jpg)\n\n![13](https://i.imgur.com/o2faV1M.jpg)\n\n![14](https://i.imgur.com/tfurWS8.jpg)\n\n![15](https://i.imgur.com/pFNhXhu.jpg)\n\n![16](https://i.imgur.com/jaDM8I2.jpg)\n\n![17](https://i.imgur.com/FlpczgP.jpg)\n\n![18](https://i.imgur.com/Uv0ZvC9.jpg)\n\n![19](https://i.imgur.com/D1NoEQ9.jpg)\n\n![20](https://i.imgur.com/P5pCDnr.jpg)\n\n![21](https://i.imgur.com/1NESmPN.jpg)","source":"_posts/traveling/旅游照——杭州-21p.md","raw":"---\ntitle: '旅游照——杭州 [21p]'\ncategories:\n  - [摄影, 旅游]\n  - [生活, 旅游]\ntags: [photograph, travel]\npermalink: tour-photo-hangzhou\nid: 37\nupdated: '2015-01-31 22:57:41'\ndate: 2015-01-31 22:57:41\n---\n\n[第一天的上海](http://blog.e10t.net/tour-photo-shanghai/)\n\n[第二天的苏州和乌镇晚上](http://blog.e10t.net/tour-photo-suzhou-wuzhen-night/)\n\n[第三天的乌镇和杭州](http://blog.e10t.net/tour-photo-wuzhen-hangzhou/)\n\n这次的重点不在杭州，所以西湖根本游不完。天气也很差，有雾，拍出来灰蒙蒙的。后期也不怎么会，将就着看吧。\n\n![1](https://i.imgur.com/4XHolhu.jpg)\n\n![2](https://i.imgur.com/WZWG85m.jpg)\n\n![3](https://i.imgur.com/hDtIsFr.jpg)\n\n![4](https://i.imgur.com/73f8Bkz.jpg)\n\n![5](https://i.imgur.com/aCKAhPm.jpg)\n\n![6](https://i.imgur.com/VNFm7LK.jpg)\n\n![7](https://i.imgur.com/yYxJpAQ.jpg)\n\n![8](https://i.imgur.com/X16zEsD.jpg)\n\n![9](https://i.imgur.com/CkJjkv5.jpg)\n\n![10](https://i.imgur.com/xYSL1r7.jpg)\n\n![11](https://i.imgur.com/1Uo3MAb.jpg)\n\n![12](https://i.imgur.com/vWHvn6S.jpg)\n\n![13](https://i.imgur.com/o2faV1M.jpg)\n\n![14](https://i.imgur.com/tfurWS8.jpg)\n\n![15](https://i.imgur.com/pFNhXhu.jpg)\n\n![16](https://i.imgur.com/jaDM8I2.jpg)\n\n![17](https://i.imgur.com/FlpczgP.jpg)\n\n![18](https://i.imgur.com/Uv0ZvC9.jpg)\n\n![19](https://i.imgur.com/D1NoEQ9.jpg)\n\n![20](https://i.imgur.com/P5pCDnr.jpg)\n\n![21](https://i.imgur.com/1NESmPN.jpg)","slug":"tour-photo-hangzhou","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuud0095n7t466dubtj7","content":"<p><a href=\"http://blog.e10t.net/tour-photo-shanghai/\">第一天的上海</a></p>\n<p><a href=\"http://blog.e10t.net/tour-photo-suzhou-wuzhen-night/\">第二天的苏州和乌镇晚上</a></p>\n<p><a href=\"http://blog.e10t.net/tour-photo-wuzhen-hangzhou/\">第三天的乌镇和杭州</a></p>\n<p>这次的重点不在杭州，所以西湖根本游不完。天气也很差，有雾，拍出来灰蒙蒙的。后期也不怎么会，将就着看吧。</p>\n<p><img src=\"https://i.imgur.com/4XHolhu.jpg\" alt=\"1\"></p>\n<p><img src=\"https://i.imgur.com/WZWG85m.jpg\" alt=\"2\"></p>\n<p><img src=\"https://i.imgur.com/hDtIsFr.jpg\" alt=\"3\"></p>\n<p><img src=\"https://i.imgur.com/73f8Bkz.jpg\" alt=\"4\"></p>\n<p><img src=\"https://i.imgur.com/aCKAhPm.jpg\" alt=\"5\"></p>\n<p><img src=\"https://i.imgur.com/VNFm7LK.jpg\" alt=\"6\"></p>\n<p><img src=\"https://i.imgur.com/yYxJpAQ.jpg\" alt=\"7\"></p>\n<p><img src=\"https://i.imgur.com/X16zEsD.jpg\" alt=\"8\"></p>\n<p><img src=\"https://i.imgur.com/CkJjkv5.jpg\" alt=\"9\"></p>\n<p><img src=\"https://i.imgur.com/xYSL1r7.jpg\" alt=\"10\"></p>\n<p><img src=\"https://i.imgur.com/1Uo3MAb.jpg\" alt=\"11\"></p>\n<p><img src=\"https://i.imgur.com/vWHvn6S.jpg\" alt=\"12\"></p>\n<p><img src=\"https://i.imgur.com/o2faV1M.jpg\" alt=\"13\"></p>\n<p><img src=\"https://i.imgur.com/tfurWS8.jpg\" alt=\"14\"></p>\n<p><img src=\"https://i.imgur.com/pFNhXhu.jpg\" alt=\"15\"></p>\n<p><img src=\"https://i.imgur.com/jaDM8I2.jpg\" alt=\"16\"></p>\n<p><img src=\"https://i.imgur.com/FlpczgP.jpg\" alt=\"17\"></p>\n<p><img src=\"https://i.imgur.com/Uv0ZvC9.jpg\" alt=\"18\"></p>\n<p><img src=\"https://i.imgur.com/D1NoEQ9.jpg\" alt=\"19\"></p>\n<p><img src=\"https://i.imgur.com/P5pCDnr.jpg\" alt=\"20\"></p>\n<p><img src=\"https://i.imgur.com/1NESmPN.jpg\" alt=\"21\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://blog.e10t.net/tour-photo-shanghai/\">第一天的上海</a></p>\n<p><a href=\"http://blog.e10t.net/tour-photo-suzhou-wuzhen-night/\">第二天的苏州和乌镇晚上</a></p>\n<p><a href=\"http://blog.e10t.net/tour-photo-wuzhen-hangzhou/\">第三天的乌镇和杭州</a></p>\n<p>这次的重点不在杭州，所以西湖根本游不完。天气也很差，有雾，拍出来灰蒙蒙的。后期也不怎么会，将就着看吧。</p>\n<p><img src=\"https://i.imgur.com/4XHolhu.jpg\" alt=\"1\"></p>\n<p><img src=\"https://i.imgur.com/WZWG85m.jpg\" alt=\"2\"></p>\n<p><img src=\"https://i.imgur.com/hDtIsFr.jpg\" alt=\"3\"></p>\n<p><img src=\"https://i.imgur.com/73f8Bkz.jpg\" alt=\"4\"></p>\n<p><img src=\"https://i.imgur.com/aCKAhPm.jpg\" alt=\"5\"></p>\n<p><img src=\"https://i.imgur.com/VNFm7LK.jpg\" alt=\"6\"></p>\n<p><img src=\"https://i.imgur.com/yYxJpAQ.jpg\" alt=\"7\"></p>\n<p><img src=\"https://i.imgur.com/X16zEsD.jpg\" alt=\"8\"></p>\n<p><img src=\"https://i.imgur.com/CkJjkv5.jpg\" alt=\"9\"></p>\n<p><img src=\"https://i.imgur.com/xYSL1r7.jpg\" alt=\"10\"></p>\n<p><img src=\"https://i.imgur.com/1Uo3MAb.jpg\" alt=\"11\"></p>\n<p><img src=\"https://i.imgur.com/vWHvn6S.jpg\" alt=\"12\"></p>\n<p><img src=\"https://i.imgur.com/o2faV1M.jpg\" alt=\"13\"></p>\n<p><img src=\"https://i.imgur.com/tfurWS8.jpg\" alt=\"14\"></p>\n<p><img src=\"https://i.imgur.com/pFNhXhu.jpg\" alt=\"15\"></p>\n<p><img src=\"https://i.imgur.com/jaDM8I2.jpg\" alt=\"16\"></p>\n<p><img src=\"https://i.imgur.com/FlpczgP.jpg\" alt=\"17\"></p>\n<p><img src=\"https://i.imgur.com/Uv0ZvC9.jpg\" alt=\"18\"></p>\n<p><img src=\"https://i.imgur.com/D1NoEQ9.jpg\" alt=\"19\"></p>\n<p><img src=\"https://i.imgur.com/P5pCDnr.jpg\" alt=\"20\"></p>\n<p><img src=\"https://i.imgur.com/1NESmPN.jpg\" alt=\"21\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://i.imgur.com/4XHolhu.jpg","popularPost_tmp_gaData":{"updated":"Sat Jan 31 2015 22:57:41 GMT+0800 (China Standard Time)","title":"旅游照——杭州 [21p]","path":"tour-photo-hangzhou/","eyeCatchImage":"https://i.imgur.com/4XHolhu.jpg","excerpt":null,"date":"2015-01-31T14:57:41.000Z","pv":0,"totalPV":0,"categories":"生活 > 摄影 > 旅游 > 旅游","tags":["photograph","travel"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":102},{"title":"旅游照——苏州 & 乌镇晚上 [44p]","id":"35","updated":"2015-01-31T10:37:53.000Z","date":"2015-01-31T10:36:27.000Z","_content":"\n[第一天的上海](http://blog.e10t.net/tour-photo-shanghai/)\n\n第二天去苏州。\n\n苏州的园林真的很好看，进去之后怎么看都有意思。亭台楼阁，池鱼树石，皆有情趣。\n\n晚上在乌镇住，室外温度到了零下，拍了一晚手都弯不了。\n\n七里山塘古街。\n\n其实两岸和水都挺脏的，因为两岸仍然有人住。\n\n![1](https://i.imgur.com/pi26QrH.jpg)\n\n![2](https://i.imgur.com/q4I6v4P.jpg)\n\n![3](https://i.imgur.com/YpLWPhA.jpg)\n\n![4](https://i.imgur.com/BN5sk9Z.jpg)\n\n团里的两对情侣。\n\n![5](https://i.imgur.com/Ua32x67.jpg)\n\n![6](https://i.imgur.com/B9wcQP4.jpg)\n\n![7](https://i.imgur.com/QvzErQJ.jpg)\n\n![8](https://i.imgur.com/WRwKHFH.jpg)\n\n![9](https://i.imgur.com/kjgzB8Q.jpg)\n\n![10](https://i.imgur.com/hmQbcvN.jpg)\n\n![11](https://i.imgur.com/YGDXSUJ.jpg)\n\n这个拿着单反的人后来要我帮他拍两张，手中的 rx100 顿时被比了下去。\n\n![12](https://i.imgur.com/n2tZcng.jpg)\n\n![13](https://i.imgur.com/eiqAQ0n.jpg)\n\n然后去了某个园林。\n\n![14](https://i.imgur.com/4Zh4yZS.jpg)\n\n![15](https://i.imgur.com/BNozgIo.jpg)\n\n![16](https://i.imgur.com/uqLVvas.jpg)\n\n偷拍到某只黑猫。\n\n![17](https://i.imgur.com/lireIkF.jpg)\n\n古代和现代。\n\n![18](https://i.imgur.com/m6WPo3i.jpg)\n\n接下来去留园。\n\n导游在买票。\n\n![19](https://i.imgur.com/VBE4ZDs.jpg)\n\n团里两个小萝莉。\n\n![20](https://i.imgur.com/A7pdX7l.jpg)\n\n![21](https://i.imgur.com/p789eph.jpg)\n\n![22](https://i.imgur.com/iYcMbhZ.jpg)\n\n![23](https://i.imgur.com/Tz7iKoz.jpg)\n\n![24](https://i.imgur.com/H6yCBLh.jpg)\n\n![25](https://i.imgur.com/qwpRRbP.jpg)\n\n![26](https://i.imgur.com/RavH7FJ.jpg)\n\n![27](https://i.imgur.com/59puEZh.jpg)\n\n![28](https://i.imgur.com/switymk.jpg)\n\n![29](https://i.imgur.com/Nc3PsMX.jpg)\n\n![30](https://i.imgur.com/SlEFWcw.jpg)\n\n![31](https://i.imgur.com/zeqIFWU.jpg)\n\n晚上入住乌镇。\n\n![32](https://i.imgur.com/t6tyWwx.jpg)\n\n![33](https://i.imgur.com/hiGpelH.jpg)\n\n![34](https://i.imgur.com/HiK7yxN.jpg)\n\n![35](https://i.imgur.com/BI3lvxX.jpg)\n\n![36](https://i.imgur.com/t4X6XYI.jpg)\n\n![37](https://i.imgur.com/sgkahUG.jpg)\n\n![38](https://i.imgur.com/xjATkfu.jpg)\n\n![39](https://i.imgur.com/gCEV0n0.jpg)\n\n![40](https://i.imgur.com/mj5927J.jpg)\n\n![41](https://i.imgur.com/INzMgMI.jpg)\n\n![42](https://i.imgur.com/dUBJDJw.jpg)\n\n![43](https://i.imgur.com/x925bYQ.jpg)\n\n![44](https://i.imgur.com/aD8F3Gp.jpg)","source":"_posts/traveling/旅游照——苏州-乌镇晚上-44p.md","raw":"---\ntitle: '旅游照——苏州 & 乌镇晚上 [44p]'\ncategories:\n  - [摄影, 旅游]\n  - [生活, 旅游]\ntags: [photograph, travel]\npermalink: tour-photo-suzhou-wuzhen-night\nid: 35\nupdated: '2015-01-31 18:37:53'\ndate: 2015-01-31 18:36:27\n---\n\n[第一天的上海](http://blog.e10t.net/tour-photo-shanghai/)\n\n第二天去苏州。\n\n苏州的园林真的很好看，进去之后怎么看都有意思。亭台楼阁，池鱼树石，皆有情趣。\n\n晚上在乌镇住，室外温度到了零下，拍了一晚手都弯不了。\n\n七里山塘古街。\n\n其实两岸和水都挺脏的，因为两岸仍然有人住。\n\n![1](https://i.imgur.com/pi26QrH.jpg)\n\n![2](https://i.imgur.com/q4I6v4P.jpg)\n\n![3](https://i.imgur.com/YpLWPhA.jpg)\n\n![4](https://i.imgur.com/BN5sk9Z.jpg)\n\n团里的两对情侣。\n\n![5](https://i.imgur.com/Ua32x67.jpg)\n\n![6](https://i.imgur.com/B9wcQP4.jpg)\n\n![7](https://i.imgur.com/QvzErQJ.jpg)\n\n![8](https://i.imgur.com/WRwKHFH.jpg)\n\n![9](https://i.imgur.com/kjgzB8Q.jpg)\n\n![10](https://i.imgur.com/hmQbcvN.jpg)\n\n![11](https://i.imgur.com/YGDXSUJ.jpg)\n\n这个拿着单反的人后来要我帮他拍两张，手中的 rx100 顿时被比了下去。\n\n![12](https://i.imgur.com/n2tZcng.jpg)\n\n![13](https://i.imgur.com/eiqAQ0n.jpg)\n\n然后去了某个园林。\n\n![14](https://i.imgur.com/4Zh4yZS.jpg)\n\n![15](https://i.imgur.com/BNozgIo.jpg)\n\n![16](https://i.imgur.com/uqLVvas.jpg)\n\n偷拍到某只黑猫。\n\n![17](https://i.imgur.com/lireIkF.jpg)\n\n古代和现代。\n\n![18](https://i.imgur.com/m6WPo3i.jpg)\n\n接下来去留园。\n\n导游在买票。\n\n![19](https://i.imgur.com/VBE4ZDs.jpg)\n\n团里两个小萝莉。\n\n![20](https://i.imgur.com/A7pdX7l.jpg)\n\n![21](https://i.imgur.com/p789eph.jpg)\n\n![22](https://i.imgur.com/iYcMbhZ.jpg)\n\n![23](https://i.imgur.com/Tz7iKoz.jpg)\n\n![24](https://i.imgur.com/H6yCBLh.jpg)\n\n![25](https://i.imgur.com/qwpRRbP.jpg)\n\n![26](https://i.imgur.com/RavH7FJ.jpg)\n\n![27](https://i.imgur.com/59puEZh.jpg)\n\n![28](https://i.imgur.com/switymk.jpg)\n\n![29](https://i.imgur.com/Nc3PsMX.jpg)\n\n![30](https://i.imgur.com/SlEFWcw.jpg)\n\n![31](https://i.imgur.com/zeqIFWU.jpg)\n\n晚上入住乌镇。\n\n![32](https://i.imgur.com/t6tyWwx.jpg)\n\n![33](https://i.imgur.com/hiGpelH.jpg)\n\n![34](https://i.imgur.com/HiK7yxN.jpg)\n\n![35](https://i.imgur.com/BI3lvxX.jpg)\n\n![36](https://i.imgur.com/t4X6XYI.jpg)\n\n![37](https://i.imgur.com/sgkahUG.jpg)\n\n![38](https://i.imgur.com/xjATkfu.jpg)\n\n![39](https://i.imgur.com/gCEV0n0.jpg)\n\n![40](https://i.imgur.com/mj5927J.jpg)\n\n![41](https://i.imgur.com/INzMgMI.jpg)\n\n![42](https://i.imgur.com/dUBJDJw.jpg)\n\n![43](https://i.imgur.com/x925bYQ.jpg)\n\n![44](https://i.imgur.com/aD8F3Gp.jpg)","slug":"tour-photo-suzhou-wuzhen-night","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuue009an7t4ndhcyk19","content":"<p><a href=\"http://blog.e10t.net/tour-photo-shanghai/\">第一天的上海</a></p>\n<p>第二天去苏州。</p>\n<p>苏州的园林真的很好看，进去之后怎么看都有意思。亭台楼阁，池鱼树石，皆有情趣。</p>\n<p>晚上在乌镇住，室外温度到了零下，拍了一晚手都弯不了。</p>\n<p>七里山塘古街。</p>\n<p>其实两岸和水都挺脏的，因为两岸仍然有人住。</p>\n<p><img src=\"https://i.imgur.com/pi26QrH.jpg\" alt=\"1\"></p>\n<p><img src=\"https://i.imgur.com/q4I6v4P.jpg\" alt=\"2\"></p>\n<p><img src=\"https://i.imgur.com/YpLWPhA.jpg\" alt=\"3\"></p>\n<p><img src=\"https://i.imgur.com/BN5sk9Z.jpg\" alt=\"4\"></p>\n<p>团里的两对情侣。</p>\n<p><img src=\"https://i.imgur.com/Ua32x67.jpg\" alt=\"5\"></p>\n<p><img src=\"https://i.imgur.com/B9wcQP4.jpg\" alt=\"6\"></p>\n<p><img src=\"https://i.imgur.com/QvzErQJ.jpg\" alt=\"7\"></p>\n<p><img src=\"https://i.imgur.com/WRwKHFH.jpg\" alt=\"8\"></p>\n<p><img src=\"https://i.imgur.com/kjgzB8Q.jpg\" alt=\"9\"></p>\n<p><img src=\"https://i.imgur.com/hmQbcvN.jpg\" alt=\"10\"></p>\n<p><img src=\"https://i.imgur.com/YGDXSUJ.jpg\" alt=\"11\"></p>\n<p>这个拿着单反的人后来要我帮他拍两张，手中的 rx100 顿时被比了下去。</p>\n<p><img src=\"https://i.imgur.com/n2tZcng.jpg\" alt=\"12\"></p>\n<p><img src=\"https://i.imgur.com/eiqAQ0n.jpg\" alt=\"13\"></p>\n<p>然后去了某个园林。</p>\n<p><img src=\"https://i.imgur.com/4Zh4yZS.jpg\" alt=\"14\"></p>\n<p><img src=\"https://i.imgur.com/BNozgIo.jpg\" alt=\"15\"></p>\n<p><img src=\"https://i.imgur.com/uqLVvas.jpg\" alt=\"16\"></p>\n<p>偷拍到某只黑猫。</p>\n<p><img src=\"https://i.imgur.com/lireIkF.jpg\" alt=\"17\"></p>\n<p>古代和现代。</p>\n<p><img src=\"https://i.imgur.com/m6WPo3i.jpg\" alt=\"18\"></p>\n<p>接下来去留园。</p>\n<p>导游在买票。</p>\n<p><img src=\"https://i.imgur.com/VBE4ZDs.jpg\" alt=\"19\"></p>\n<p>团里两个小萝莉。</p>\n<p><img src=\"https://i.imgur.com/A7pdX7l.jpg\" alt=\"20\"></p>\n<p><img src=\"https://i.imgur.com/p789eph.jpg\" alt=\"21\"></p>\n<p><img src=\"https://i.imgur.com/iYcMbhZ.jpg\" alt=\"22\"></p>\n<p><img src=\"https://i.imgur.com/Tz7iKoz.jpg\" alt=\"23\"></p>\n<p><img src=\"https://i.imgur.com/H6yCBLh.jpg\" alt=\"24\"></p>\n<p><img src=\"https://i.imgur.com/qwpRRbP.jpg\" alt=\"25\"></p>\n<p><img src=\"https://i.imgur.com/RavH7FJ.jpg\" alt=\"26\"></p>\n<p><img src=\"https://i.imgur.com/59puEZh.jpg\" alt=\"27\"></p>\n<p><img src=\"https://i.imgur.com/switymk.jpg\" alt=\"28\"></p>\n<p><img src=\"https://i.imgur.com/Nc3PsMX.jpg\" alt=\"29\"></p>\n<p><img src=\"https://i.imgur.com/SlEFWcw.jpg\" alt=\"30\"></p>\n<p><img src=\"https://i.imgur.com/zeqIFWU.jpg\" alt=\"31\"></p>\n<p>晚上入住乌镇。</p>\n<p><img src=\"https://i.imgur.com/t6tyWwx.jpg\" alt=\"32\"></p>\n<p><img src=\"https://i.imgur.com/hiGpelH.jpg\" alt=\"33\"></p>\n<p><img src=\"https://i.imgur.com/HiK7yxN.jpg\" alt=\"34\"></p>\n<p><img src=\"https://i.imgur.com/BI3lvxX.jpg\" alt=\"35\"></p>\n<p><img src=\"https://i.imgur.com/t4X6XYI.jpg\" alt=\"36\"></p>\n<p><img src=\"https://i.imgur.com/sgkahUG.jpg\" alt=\"37\"></p>\n<p><img src=\"https://i.imgur.com/xjATkfu.jpg\" alt=\"38\"></p>\n<p><img src=\"https://i.imgur.com/gCEV0n0.jpg\" alt=\"39\"></p>\n<p><img src=\"https://i.imgur.com/mj5927J.jpg\" alt=\"40\"></p>\n<p><img src=\"https://i.imgur.com/INzMgMI.jpg\" alt=\"41\"></p>\n<p><img src=\"https://i.imgur.com/dUBJDJw.jpg\" alt=\"42\"></p>\n<p><img src=\"https://i.imgur.com/x925bYQ.jpg\" alt=\"43\"></p>\n<p><img src=\"https://i.imgur.com/aD8F3Gp.jpg\" alt=\"44\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://blog.e10t.net/tour-photo-shanghai/\">第一天的上海</a></p>\n<p>第二天去苏州。</p>\n<p>苏州的园林真的很好看，进去之后怎么看都有意思。亭台楼阁，池鱼树石，皆有情趣。</p>\n<p>晚上在乌镇住，室外温度到了零下，拍了一晚手都弯不了。</p>\n<p>七里山塘古街。</p>\n<p>其实两岸和水都挺脏的，因为两岸仍然有人住。</p>\n<p><img src=\"https://i.imgur.com/pi26QrH.jpg\" alt=\"1\"></p>\n<p><img src=\"https://i.imgur.com/q4I6v4P.jpg\" alt=\"2\"></p>\n<p><img src=\"https://i.imgur.com/YpLWPhA.jpg\" alt=\"3\"></p>\n<p><img src=\"https://i.imgur.com/BN5sk9Z.jpg\" alt=\"4\"></p>\n<p>团里的两对情侣。</p>\n<p><img src=\"https://i.imgur.com/Ua32x67.jpg\" alt=\"5\"></p>\n<p><img src=\"https://i.imgur.com/B9wcQP4.jpg\" alt=\"6\"></p>\n<p><img src=\"https://i.imgur.com/QvzErQJ.jpg\" alt=\"7\"></p>\n<p><img src=\"https://i.imgur.com/WRwKHFH.jpg\" alt=\"8\"></p>\n<p><img src=\"https://i.imgur.com/kjgzB8Q.jpg\" alt=\"9\"></p>\n<p><img src=\"https://i.imgur.com/hmQbcvN.jpg\" alt=\"10\"></p>\n<p><img src=\"https://i.imgur.com/YGDXSUJ.jpg\" alt=\"11\"></p>\n<p>这个拿着单反的人后来要我帮他拍两张，手中的 rx100 顿时被比了下去。</p>\n<p><img src=\"https://i.imgur.com/n2tZcng.jpg\" alt=\"12\"></p>\n<p><img src=\"https://i.imgur.com/eiqAQ0n.jpg\" alt=\"13\"></p>\n<p>然后去了某个园林。</p>\n<p><img src=\"https://i.imgur.com/4Zh4yZS.jpg\" alt=\"14\"></p>\n<p><img src=\"https://i.imgur.com/BNozgIo.jpg\" alt=\"15\"></p>\n<p><img src=\"https://i.imgur.com/uqLVvas.jpg\" alt=\"16\"></p>\n<p>偷拍到某只黑猫。</p>\n<p><img src=\"https://i.imgur.com/lireIkF.jpg\" alt=\"17\"></p>\n<p>古代和现代。</p>\n<p><img src=\"https://i.imgur.com/m6WPo3i.jpg\" alt=\"18\"></p>\n<p>接下来去留园。</p>\n<p>导游在买票。</p>\n<p><img src=\"https://i.imgur.com/VBE4ZDs.jpg\" alt=\"19\"></p>\n<p>团里两个小萝莉。</p>\n<p><img src=\"https://i.imgur.com/A7pdX7l.jpg\" alt=\"20\"></p>\n<p><img src=\"https://i.imgur.com/p789eph.jpg\" alt=\"21\"></p>\n<p><img src=\"https://i.imgur.com/iYcMbhZ.jpg\" alt=\"22\"></p>\n<p><img src=\"https://i.imgur.com/Tz7iKoz.jpg\" alt=\"23\"></p>\n<p><img src=\"https://i.imgur.com/H6yCBLh.jpg\" alt=\"24\"></p>\n<p><img src=\"https://i.imgur.com/qwpRRbP.jpg\" alt=\"25\"></p>\n<p><img src=\"https://i.imgur.com/RavH7FJ.jpg\" alt=\"26\"></p>\n<p><img src=\"https://i.imgur.com/59puEZh.jpg\" alt=\"27\"></p>\n<p><img src=\"https://i.imgur.com/switymk.jpg\" alt=\"28\"></p>\n<p><img src=\"https://i.imgur.com/Nc3PsMX.jpg\" alt=\"29\"></p>\n<p><img src=\"https://i.imgur.com/SlEFWcw.jpg\" alt=\"30\"></p>\n<p><img src=\"https://i.imgur.com/zeqIFWU.jpg\" alt=\"31\"></p>\n<p>晚上入住乌镇。</p>\n<p><img src=\"https://i.imgur.com/t6tyWwx.jpg\" alt=\"32\"></p>\n<p><img src=\"https://i.imgur.com/hiGpelH.jpg\" alt=\"33\"></p>\n<p><img src=\"https://i.imgur.com/HiK7yxN.jpg\" alt=\"34\"></p>\n<p><img src=\"https://i.imgur.com/BI3lvxX.jpg\" alt=\"35\"></p>\n<p><img src=\"https://i.imgur.com/t4X6XYI.jpg\" alt=\"36\"></p>\n<p><img src=\"https://i.imgur.com/sgkahUG.jpg\" alt=\"37\"></p>\n<p><img src=\"https://i.imgur.com/xjATkfu.jpg\" alt=\"38\"></p>\n<p><img src=\"https://i.imgur.com/gCEV0n0.jpg\" alt=\"39\"></p>\n<p><img src=\"https://i.imgur.com/mj5927J.jpg\" alt=\"40\"></p>\n<p><img src=\"https://i.imgur.com/INzMgMI.jpg\" alt=\"41\"></p>\n<p><img src=\"https://i.imgur.com/dUBJDJw.jpg\" alt=\"42\"></p>\n<p><img src=\"https://i.imgur.com/x925bYQ.jpg\" alt=\"43\"></p>\n<p><img src=\"https://i.imgur.com/aD8F3Gp.jpg\" alt=\"44\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://i.imgur.com/pi26QrH.jpg","popularPost_tmp_gaData":{"updated":"Sat Jan 31 2015 18:37:53 GMT+0800 (China Standard Time)","title":"旅游照——苏州 & 乌镇晚上 [44p]","path":"tour-photo-suzhou-wuzhen-night/","eyeCatchImage":"https://i.imgur.com/pi26QrH.jpg","excerpt":null,"date":"2015-01-31T10:36:27.000Z","pv":0,"totalPV":0,"categories":"生活 > 摄影 > 旅游 > 旅游","tags":["photograph","travel"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":259},{"title":"配合 angular 和 angular-material 来开发基于 electron 的应用 · 1-- 分析与配置","id":"43","updated":"2015-09-05T09:11:13.000Z","date":"2015-06-13T11:32:07.000Z","_content":"\n![thumbnail](https://i.imgur.com/kvb5CTf.png)\n\n> [应用 github 地址](https://github.com/radioit/radioit-desktop)。github 代码和文章代码并不同步，用作预览和 PR。\n\n## 目标分析\n\n一句话概述：开发的应用是一个抓取网页有用信息并重新统一排布的应用，是 [之前文章][1] 提到的 radioit 计划里脚本的 GUI 版本。\n\n关键词：网页抓取、信息统一、信息排布、脚本的 GUI 版本\n\n功能：\n\n1. 浏览某一个广播站的广播\n1. 浏览某一个广播的详细信息\n1. 下载某一个广播最新的相关图片\n1. 下载某一个广播最新的相关音频\n1. 能够通过设置代理来突破某些限制\n1. 能够离线浏览（未定）\n1. 预定周期下载任务（未定）\n1. 整合视频压制工具（未定）\n\n业务流程：\n\n1. 请求特定 url 资源\n1. 对取得的 url 资源进行信息提取\n1. 信息整合成统一格式\n1. 显示信息\n1. 某些情况下执行预定命令行（未定）\n\n技术联想：\n\n1. 请求特定 url 资源 -> node\n1. 对取得的 url 资源进行信息提取 -> node 的某些库\n1. 信息整合成统一格式 -> javascript, json\n1. 显示信息 -> html、css、angular、angular material\n1. 某些情况下执行预定命令行（未定） -> node\n\n[1]: http://blog.e10t.net/radioit-plan-animate-radio-script-radioitscript/\n\n## 技术分析\n\n技术要点：\n\n1. node.js(io.js)，负责网络连接，网页内容解析提取，非浏览器环境因此能够进行跨域访问\n1. angular，MVVM 框架，自动进行数据的渲染\n1. angular material，angular 推出的 material design UI 框架，适合作为桌面应用使用\n1. stylus，CSS 预处理器，合理直观的 CSS 编写格式\n\n脑内讨论\n\n* Q：为什么使用 Electron？\n* A：Electron 有意思地使用了 `main` 进程和 `render` 进程，`render` 进程产生于 `main` 进程中，因此可以简单地产生多个 `render` 进程，也就是多窗口。这是一个优势。\n\n* Q：不用 angular，用 react 是否可以？\n* A：可以，然而在假定选用了 react 之后，然后脑内模拟了一下编程的过程，react 似乎并不适合 html 代码经常修改的场合。而自己比较在行的是写 html 和 css，在界面设计上必定经常修改。另外在 material design 的 UI 框架上，使用配合 angular 的 angular material 显然更具操作性。当然 react 下也有 material design 的 UI 框架，但在试用之后感觉不太好用。另外就是自己翻译过一篇很长的有关 angular 的[文章][2]，对 angular 比较熟悉。日后考虑改用 Polymer 重写。\n\n* Q：material design 是必须使用的吗？\n* A：作为桌面应用，需要有一点时刻记住的是桌面应用跟网页是不一样的。桌面应用需要稳定的窗口，要有标题栏等清晰的组件，也不需要太花哨的特效。material design 或者受 material design 影响的一些简洁 UI 风格已经在某些桌面软件上应用开来。Electron 作为使用网页作为 GUI 表现，使用 material design 是个稳妥之举。\n\n* Q：为什么不用 SASS / LESS？\n* A：SASS 需要 Ruby，对非 Rubyer 是非常无理的要求，逻辑表现能力强大而无用（非常用）；LESS 语法简单，支持混写，但逻辑表现力太弱。stylus 则是既有强有力的特性，也足够简单。有时，工具够用就行。参考：[Why I Choose Stylus (And You Should Too)][3]\n\n* Q：node 和页面中的 angular 如何沟通？\n* A：`main` 进程和 `reander` 进程有特定的模块进行通信。`render` 进程能通过页面中的全局变量和 angular 进行通讯。\n\n* Q：为什么要使用 node 的库来处理网页请求和内容提取？angular 自带有 $http 不是更方便？\n* A：如此一来，就能各自开发。node 只需要管如何得到数据，angular 只需要管如何显示数据。另外，如果需要更改 GUI，那么只需要去掉 angular，换上其他 UI 框架就可以，数据生成不受任何印象。只是如此开发需要更多的精力。\n\n[2]: http://blog.e10t.net/translation-building-the-2048-game-in-angularjs/\n\n[3]: http://webdesign.tutsplus.com/articles/why-i-choose-stylus-and-you-should-too--webdesign-18412\n\n## 开发配置\n\n### NPM 配置\n\nnode.js 的安装是必须的，不多介绍。安装完自带 npm 管理工具。\n\n用的最多的 node 命令：\n```bash\nnpm i xxx -g\nnpm i xxx --save\nnpm u xxx --save\nnpm update\n```\n\n第一条是全局安装 node 模块。比如一些常用工具，每一个项目都可以用到的工具等。这些模块可以写在 `package.json` 中的 `devDependencies` 字段中。\n\n第二条是本地安装 node 模块并保存信息到 `package.json` 中。适合项目特定使用的模块。这些模块可以写在 `package.json` 中的 `dependencies` 字段中。\n\n第三条是卸载本地安装的 node 模块。node 模块太多了，尝试多个选最好的。\n\n第四条是升级 node 模块。\n\n以下是 `package.json` 文件的暂时内容。\n\n```javascript\n// package.json\n{\n  \"name\": \"Radioit\",\n  \"description\": \"radioit desktop edition\",\n  \"version\": \"0.1.0\",\n  \"main\": \"main.js\",\n  \"author\": \"exoticknight\",\n  \"mail\": \"draco.knight0@gmail.com\",\n  \"devDependencies\": {\n    \"jshint\": \"latest\",\n    \"rimraf\": \"latest\",\n    \"electron-packager\": \"latest\",\n    \"electron-prebuilt\": \"latest\",\n    \"silence-chromium\": \"latest\",\n    \"mkdirp\": \"latest\",\n    \"nib\": \"latest\",\n    \"stylus\": \"latest\",\n    \"uglifyjs\": \"latest\",\n    \"browserify\": \"latest\",\n    \"watchify\": \"latest\",\n    \"parallelshell\": \"latest\"\n  },\n  \"scripts\": {\n    \"build:css\": \"stylus -u nib src/css/app.styl -o static/css/app.css\",\n    \"watch:css\": \"stylus -u nib src/css/app.styl -o static/css/app.css -w\",\n    \"test\": \"electron main.js 2>&1 | silence-chromium\",\n    \"start\": \"npm run build:css && electron main.js 2>&1 | silence-chromium\"\n  },\n  \"dependencies\": {\n    \"deepcopy\": \"^0.5.0\",\n    \"extend\": \"^2.0.1\"\n  }\n}\n```\n\n暂时并没有太多的东西，注意要开发基于 Electron 应用，`electron-packager` 和 `electron-prebuilt` 必不可少，一个是 Electron 的打包工具，一个是 Electron 运行环境。而 `silence-chromium` 则是将 chromium 控制台信息输出到系统终端的工具。其他的工具都是博主开发过程中精选过的工具，还请读者自行 Google 之来学习。\n\n如果你看过本博客之前的一篇文章：[i18n.js 库的编写兼使用 npm 辅助开发][4]，就知道博主是能用 npm 就不用 gulp / grunt 的，因此在 `scripts` 字段中也写上了运行的脚本。\n\n[4]: http://blog.e10t.net/write-i18n-js-with-help-of-npm-as-build-tool/\n\n### angularjs 配置\n\nangular 的版本比较稳定，因此直接用 `bower` 来获取，不推荐其他包管理工具。\n\n> `bower` 需要先使用 `npm install bower -g` 来安装，也需要配置了 git 的环境。如果你使用 github for windows，那么请使用 gitshell 来运行。\n\nangular 的安装在下一节中。\n\n### angular material 配置\n\n对于 `bower` 来说，angular material 跟 angular 是一样的东西，只是后者是前者的依赖。\n\n运行 `bower install angular-material`， bower 会自动将依赖的的 `angular`、`angular-aria` 和 `angular-animate` 一并安装上。\n\n安装完后所有文件会在项目目录下的 `bower_components` 中找到。\n\n### Electron 配置\n\n具体参考：[Quick Start][5]\n\n在 `package.json` 中有一个 `main` 字段，值是 `main.js`。这个就指定了 Electron 启动应用的入口。\n\n准备好文件结构。\n\n```markup\napp/\n├── package.json\n├── main.js\n└── index.html\n```\n\n[5]: https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md\n\n### 初始程序\n\n```javascript\nvar BrowserWindow = require( 'browser-window' );  // Module to create native browser window.\nvar ipc = require( 'ipc' );\nvar path = require( 'path' );\n\n// global variable\nvar APP_NAME = 'Radioit';\nvar INDEX = 'file://' + path.join( __dirname, 'index.html' );\n\n// Report crashes to our server.\nrequire( 'crash-reporter' ).start();\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the javascript object is GCed.\nvar mainWindow = null;\n\n// Quit when all windows are closed.\napp.on( 'window-all-closed', function () {\n  if ( process.platform != 'darwin' )\n    app.quit();\n});\n\n// This method will be called when Electron has done everything\n// initialization and ready for creating browser windows.\napp.on( 'ready', appReady );\n\nfunction appReady () {\n\n    mainWindow = new BrowserWindow({\n        'width': 1024,\n        'height': 600,\n        'resizable': false,\n        'accept-first-mouse': true,\n        'title': APP_NAME,\n        'show': false\n    });\n\n    mainWindow.loadUrl( INDEX );\n    mainWindow.openDevTools(); // remove this\n\n    mainWindow.webContents.on( 'did-finish-load', function () {\n        mainWindow.show();\n    });\n\n    mainWindow.on( 'closed', function () {\n        mainWindow = null;\n    });\n}\n```\n\n代码好像很多，其实基本就是照抄 quick start，没有任何压力。\n\n博主写的 `main.js` 和 quick start 中的有所不同。在新建 `mainWindow` 的时候，加入了其他参数 `show: false` 和 `resizable: false`，分别是隐藏窗口和窗口不可拉伸。也增加了一个：\n\n```javascript\n    mainWindow.webContents.on( 'did-finish-load', function () {\n        mainWindow.show();\n    });\n```\n\n作用是网页内容完全载入后才显示窗口，避免一些内容还没载入完就显示。\n\n最后运行 `npm run test` 看看结果。\n\n> 有什么问题请留言。","source":"_posts/build-application-with-angular-and-ng-material-based-on-electron/配合-angular-和-angular-material-来开发基于-electron-的应用-·-1-分析与配置.md","raw":"---\ntitle: 配合 angular 和 angular-material 来开发基于 electron 的应用 · 1-- 分析与配置\ncategories:\n  - [技术, electron]\n  - [编程语言, javascript]\ntags: [javascript, angularjs, angular-material, electron]\npermalink: build-application-with-angular-and-ng-material-based-on-electron-1-analyze-and-configuration\nid: 43\nupdated: '2015-09-05 17:11:13'\ndate: 2015-06-13 19:32:07\n---\n\n![thumbnail](https://i.imgur.com/kvb5CTf.png)\n\n> [应用 github 地址](https://github.com/radioit/radioit-desktop)。github 代码和文章代码并不同步，用作预览和 PR。\n\n## 目标分析\n\n一句话概述：开发的应用是一个抓取网页有用信息并重新统一排布的应用，是 [之前文章][1] 提到的 radioit 计划里脚本的 GUI 版本。\n\n关键词：网页抓取、信息统一、信息排布、脚本的 GUI 版本\n\n功能：\n\n1. 浏览某一个广播站的广播\n1. 浏览某一个广播的详细信息\n1. 下载某一个广播最新的相关图片\n1. 下载某一个广播最新的相关音频\n1. 能够通过设置代理来突破某些限制\n1. 能够离线浏览（未定）\n1. 预定周期下载任务（未定）\n1. 整合视频压制工具（未定）\n\n业务流程：\n\n1. 请求特定 url 资源\n1. 对取得的 url 资源进行信息提取\n1. 信息整合成统一格式\n1. 显示信息\n1. 某些情况下执行预定命令行（未定）\n\n技术联想：\n\n1. 请求特定 url 资源 -> node\n1. 对取得的 url 资源进行信息提取 -> node 的某些库\n1. 信息整合成统一格式 -> javascript, json\n1. 显示信息 -> html、css、angular、angular material\n1. 某些情况下执行预定命令行（未定） -> node\n\n[1]: http://blog.e10t.net/radioit-plan-animate-radio-script-radioitscript/\n\n## 技术分析\n\n技术要点：\n\n1. node.js(io.js)，负责网络连接，网页内容解析提取，非浏览器环境因此能够进行跨域访问\n1. angular，MVVM 框架，自动进行数据的渲染\n1. angular material，angular 推出的 material design UI 框架，适合作为桌面应用使用\n1. stylus，CSS 预处理器，合理直观的 CSS 编写格式\n\n脑内讨论\n\n* Q：为什么使用 Electron？\n* A：Electron 有意思地使用了 `main` 进程和 `render` 进程，`render` 进程产生于 `main` 进程中，因此可以简单地产生多个 `render` 进程，也就是多窗口。这是一个优势。\n\n* Q：不用 angular，用 react 是否可以？\n* A：可以，然而在假定选用了 react 之后，然后脑内模拟了一下编程的过程，react 似乎并不适合 html 代码经常修改的场合。而自己比较在行的是写 html 和 css，在界面设计上必定经常修改。另外在 material design 的 UI 框架上，使用配合 angular 的 angular material 显然更具操作性。当然 react 下也有 material design 的 UI 框架，但在试用之后感觉不太好用。另外就是自己翻译过一篇很长的有关 angular 的[文章][2]，对 angular 比较熟悉。日后考虑改用 Polymer 重写。\n\n* Q：material design 是必须使用的吗？\n* A：作为桌面应用，需要有一点时刻记住的是桌面应用跟网页是不一样的。桌面应用需要稳定的窗口，要有标题栏等清晰的组件，也不需要太花哨的特效。material design 或者受 material design 影响的一些简洁 UI 风格已经在某些桌面软件上应用开来。Electron 作为使用网页作为 GUI 表现，使用 material design 是个稳妥之举。\n\n* Q：为什么不用 SASS / LESS？\n* A：SASS 需要 Ruby，对非 Rubyer 是非常无理的要求，逻辑表现能力强大而无用（非常用）；LESS 语法简单，支持混写，但逻辑表现力太弱。stylus 则是既有强有力的特性，也足够简单。有时，工具够用就行。参考：[Why I Choose Stylus (And You Should Too)][3]\n\n* Q：node 和页面中的 angular 如何沟通？\n* A：`main` 进程和 `reander` 进程有特定的模块进行通信。`render` 进程能通过页面中的全局变量和 angular 进行通讯。\n\n* Q：为什么要使用 node 的库来处理网页请求和内容提取？angular 自带有 $http 不是更方便？\n* A：如此一来，就能各自开发。node 只需要管如何得到数据，angular 只需要管如何显示数据。另外，如果需要更改 GUI，那么只需要去掉 angular，换上其他 UI 框架就可以，数据生成不受任何印象。只是如此开发需要更多的精力。\n\n[2]: http://blog.e10t.net/translation-building-the-2048-game-in-angularjs/\n\n[3]: http://webdesign.tutsplus.com/articles/why-i-choose-stylus-and-you-should-too--webdesign-18412\n\n## 开发配置\n\n### NPM 配置\n\nnode.js 的安装是必须的，不多介绍。安装完自带 npm 管理工具。\n\n用的最多的 node 命令：\n```bash\nnpm i xxx -g\nnpm i xxx --save\nnpm u xxx --save\nnpm update\n```\n\n第一条是全局安装 node 模块。比如一些常用工具，每一个项目都可以用到的工具等。这些模块可以写在 `package.json` 中的 `devDependencies` 字段中。\n\n第二条是本地安装 node 模块并保存信息到 `package.json` 中。适合项目特定使用的模块。这些模块可以写在 `package.json` 中的 `dependencies` 字段中。\n\n第三条是卸载本地安装的 node 模块。node 模块太多了，尝试多个选最好的。\n\n第四条是升级 node 模块。\n\n以下是 `package.json` 文件的暂时内容。\n\n```javascript\n// package.json\n{\n  \"name\": \"Radioit\",\n  \"description\": \"radioit desktop edition\",\n  \"version\": \"0.1.0\",\n  \"main\": \"main.js\",\n  \"author\": \"exoticknight\",\n  \"mail\": \"draco.knight0@gmail.com\",\n  \"devDependencies\": {\n    \"jshint\": \"latest\",\n    \"rimraf\": \"latest\",\n    \"electron-packager\": \"latest\",\n    \"electron-prebuilt\": \"latest\",\n    \"silence-chromium\": \"latest\",\n    \"mkdirp\": \"latest\",\n    \"nib\": \"latest\",\n    \"stylus\": \"latest\",\n    \"uglifyjs\": \"latest\",\n    \"browserify\": \"latest\",\n    \"watchify\": \"latest\",\n    \"parallelshell\": \"latest\"\n  },\n  \"scripts\": {\n    \"build:css\": \"stylus -u nib src/css/app.styl -o static/css/app.css\",\n    \"watch:css\": \"stylus -u nib src/css/app.styl -o static/css/app.css -w\",\n    \"test\": \"electron main.js 2>&1 | silence-chromium\",\n    \"start\": \"npm run build:css && electron main.js 2>&1 | silence-chromium\"\n  },\n  \"dependencies\": {\n    \"deepcopy\": \"^0.5.0\",\n    \"extend\": \"^2.0.1\"\n  }\n}\n```\n\n暂时并没有太多的东西，注意要开发基于 Electron 应用，`electron-packager` 和 `electron-prebuilt` 必不可少，一个是 Electron 的打包工具，一个是 Electron 运行环境。而 `silence-chromium` 则是将 chromium 控制台信息输出到系统终端的工具。其他的工具都是博主开发过程中精选过的工具，还请读者自行 Google 之来学习。\n\n如果你看过本博客之前的一篇文章：[i18n.js 库的编写兼使用 npm 辅助开发][4]，就知道博主是能用 npm 就不用 gulp / grunt 的，因此在 `scripts` 字段中也写上了运行的脚本。\n\n[4]: http://blog.e10t.net/write-i18n-js-with-help-of-npm-as-build-tool/\n\n### angularjs 配置\n\nangular 的版本比较稳定，因此直接用 `bower` 来获取，不推荐其他包管理工具。\n\n> `bower` 需要先使用 `npm install bower -g` 来安装，也需要配置了 git 的环境。如果你使用 github for windows，那么请使用 gitshell 来运行。\n\nangular 的安装在下一节中。\n\n### angular material 配置\n\n对于 `bower` 来说，angular material 跟 angular 是一样的东西，只是后者是前者的依赖。\n\n运行 `bower install angular-material`， bower 会自动将依赖的的 `angular`、`angular-aria` 和 `angular-animate` 一并安装上。\n\n安装完后所有文件会在项目目录下的 `bower_components` 中找到。\n\n### Electron 配置\n\n具体参考：[Quick Start][5]\n\n在 `package.json` 中有一个 `main` 字段，值是 `main.js`。这个就指定了 Electron 启动应用的入口。\n\n准备好文件结构。\n\n```markup\napp/\n├── package.json\n├── main.js\n└── index.html\n```\n\n[5]: https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md\n\n### 初始程序\n\n```javascript\nvar BrowserWindow = require( 'browser-window' );  // Module to create native browser window.\nvar ipc = require( 'ipc' );\nvar path = require( 'path' );\n\n// global variable\nvar APP_NAME = 'Radioit';\nvar INDEX = 'file://' + path.join( __dirname, 'index.html' );\n\n// Report crashes to our server.\nrequire( 'crash-reporter' ).start();\n\n// Keep a global reference of the window object, if you don't, the window will\n// be closed automatically when the javascript object is GCed.\nvar mainWindow = null;\n\n// Quit when all windows are closed.\napp.on( 'window-all-closed', function () {\n  if ( process.platform != 'darwin' )\n    app.quit();\n});\n\n// This method will be called when Electron has done everything\n// initialization and ready for creating browser windows.\napp.on( 'ready', appReady );\n\nfunction appReady () {\n\n    mainWindow = new BrowserWindow({\n        'width': 1024,\n        'height': 600,\n        'resizable': false,\n        'accept-first-mouse': true,\n        'title': APP_NAME,\n        'show': false\n    });\n\n    mainWindow.loadUrl( INDEX );\n    mainWindow.openDevTools(); // remove this\n\n    mainWindow.webContents.on( 'did-finish-load', function () {\n        mainWindow.show();\n    });\n\n    mainWindow.on( 'closed', function () {\n        mainWindow = null;\n    });\n}\n```\n\n代码好像很多，其实基本就是照抄 quick start，没有任何压力。\n\n博主写的 `main.js` 和 quick start 中的有所不同。在新建 `mainWindow` 的时候，加入了其他参数 `show: false` 和 `resizable: false`，分别是隐藏窗口和窗口不可拉伸。也增加了一个：\n\n```javascript\n    mainWindow.webContents.on( 'did-finish-load', function () {\n        mainWindow.show();\n    });\n```\n\n作用是网页内容完全载入后才显示窗口，避免一些内容还没载入完就显示。\n\n最后运行 `npm run test` 看看结果。\n\n> 有什么问题请留言。","slug":"build-application-with-angular-and-ng-material-based-on-electron-1-analyze-and-configuration","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuwp00cxn7t47q80zy62","content":"<p><img src=\"https://i.imgur.com/kvb5CTf.png\" alt=\"thumbnail\"></p>\n<blockquote>\n<p><a href=\"https://github.com/radioit/radioit-desktop\" target=\"_blank\" rel=\"noopener\">应用 github 地址</a>。github 代码和文章代码并不同步，用作预览和 PR。</p>\n</blockquote>\n<h2 id=\"目标分析\"><a href=\"#目标分析\" class=\"headerlink\" title=\"目标分析\"></a>目标分析</h2><p>一句话概述：开发的应用是一个抓取网页有用信息并重新统一排布的应用，是 <a href=\"http://blog.e10t.net/radioit-plan-animate-radio-script-radioitscript/\">之前文章</a> 提到的 radioit 计划里脚本的 GUI 版本。</p>\n<p>关键词：网页抓取、信息统一、信息排布、脚本的 GUI 版本</p>\n<p>功能：</p>\n<ol>\n<li>浏览某一个广播站的广播</li>\n<li>浏览某一个广播的详细信息</li>\n<li>下载某一个广播最新的相关图片</li>\n<li>下载某一个广播最新的相关音频</li>\n<li>能够通过设置代理来突破某些限制</li>\n<li>能够离线浏览（未定）</li>\n<li>预定周期下载任务（未定）</li>\n<li>整合视频压制工具（未定）</li>\n</ol>\n<p>业务流程：</p>\n<ol>\n<li>请求特定 url 资源</li>\n<li>对取得的 url 资源进行信息提取</li>\n<li>信息整合成统一格式</li>\n<li>显示信息</li>\n<li>某些情况下执行预定命令行（未定）</li>\n</ol>\n<p>技术联想：</p>\n<ol>\n<li>请求特定 url 资源 -&gt; node</li>\n<li>对取得的 url 资源进行信息提取 -&gt; node 的某些库</li>\n<li>信息整合成统一格式 -&gt; javascript, json</li>\n<li>显示信息 -&gt; html、css、angular、angular material</li>\n<li>某些情况下执行预定命令行（未定） -&gt; node</li>\n</ol>\n<h2 id=\"技术分析\"><a href=\"#技术分析\" class=\"headerlink\" title=\"技术分析\"></a>技术分析</h2><p>技术要点：</p>\n<ol>\n<li>node.js(io.js)，负责网络连接，网页内容解析提取，非浏览器环境因此能够进行跨域访问</li>\n<li>angular，MVVM 框架，自动进行数据的渲染</li>\n<li>angular material，angular 推出的 material design UI 框架，适合作为桌面应用使用</li>\n<li>stylus，CSS 预处理器，合理直观的 CSS 编写格式</li>\n</ol>\n<p>脑内讨论</p>\n<ul>\n<li>Q：为什么使用 Electron？</li>\n<li><p>A：Electron 有意思地使用了 <code>main</code> 进程和 <code>render</code> 进程，<code>render</code> 进程产生于 <code>main</code> 进程中，因此可以简单地产生多个 <code>render</code> 进程，也就是多窗口。这是一个优势。</p>\n</li>\n<li><p>Q：不用 angular，用 react 是否可以？</p>\n</li>\n<li><p>A：可以，然而在假定选用了 react 之后，然后脑内模拟了一下编程的过程，react 似乎并不适合 html 代码经常修改的场合。而自己比较在行的是写 html 和 css，在界面设计上必定经常修改。另外在 material design 的 UI 框架上，使用配合 angular 的 angular material 显然更具操作性。当然 react 下也有 material design 的 UI 框架，但在试用之后感觉不太好用。另外就是自己翻译过一篇很长的有关 angular 的<a href=\"http://blog.e10t.net/translation-building-the-2048-game-in-angularjs/\">文章</a>，对 angular 比较熟悉。日后考虑改用 Polymer 重写。</p>\n</li>\n<li><p>Q：material design 是必须使用的吗？</p>\n</li>\n<li><p>A：作为桌面应用，需要有一点时刻记住的是桌面应用跟网页是不一样的。桌面应用需要稳定的窗口，要有标题栏等清晰的组件，也不需要太花哨的特效。material design 或者受 material design 影响的一些简洁 UI 风格已经在某些桌面软件上应用开来。Electron 作为使用网页作为 GUI 表现，使用 material design 是个稳妥之举。</p>\n</li>\n<li><p>Q：为什么不用 SASS / LESS？</p>\n</li>\n<li><p>A：SASS 需要 Ruby，对非 Rubyer 是非常无理的要求，逻辑表现能力强大而无用（非常用）；LESS 语法简单，支持混写，但逻辑表现力太弱。stylus 则是既有强有力的特性，也足够简单。有时，工具够用就行。参考：<a href=\"http://webdesign.tutsplus.com/articles/why-i-choose-stylus-and-you-should-too--webdesign-18412\" target=\"_blank\" rel=\"noopener\">Why I Choose Stylus (And You Should Too)</a></p>\n</li>\n<li><p>Q：node 和页面中的 angular 如何沟通？</p>\n</li>\n<li><p>A：<code>main</code> 进程和 <code>reander</code> 进程有特定的模块进行通信。<code>render</code> 进程能通过页面中的全局变量和 angular 进行通讯。</p>\n</li>\n<li><p>Q：为什么要使用 node 的库来处理网页请求和内容提取？angular 自带有 $http 不是更方便？</p>\n</li>\n<li>A：如此一来，就能各自开发。node 只需要管如何得到数据，angular 只需要管如何显示数据。另外，如果需要更改 GUI，那么只需要去掉 angular，换上其他 UI 框架就可以，数据生成不受任何印象。只是如此开发需要更多的精力。</li>\n</ul>\n<h2 id=\"开发配置\"><a href=\"#开发配置\" class=\"headerlink\" title=\"开发配置\"></a>开发配置</h2><h3 id=\"NPM-配置\"><a href=\"#NPM-配置\" class=\"headerlink\" title=\"NPM 配置\"></a>NPM 配置</h3><p>node.js 的安装是必须的，不多介绍。安装完自带 npm 管理工具。</p>\n<p>用的最多的 node 命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i xxx -g</span><br><span class=\"line\">npm i xxx --save</span><br><span class=\"line\">npm u xxx --save</span><br><span class=\"line\">npm update</span><br></pre></td></tr></table></figure></p>\n<p>第一条是全局安装 node 模块。比如一些常用工具，每一个项目都可以用到的工具等。这些模块可以写在 <code>package.json</code> 中的 <code>devDependencies</code> 字段中。</p>\n<p>第二条是本地安装 node 模块并保存信息到 <code>package.json</code> 中。适合项目特定使用的模块。这些模块可以写在 <code>package.json</code> 中的 <code>dependencies</code> 字段中。</p>\n<p>第三条是卸载本地安装的 node 模块。node 模块太多了，尝试多个选最好的。</p>\n<p>第四条是升级 node 模块。</p>\n<p>以下是 <code>package.json</code> 文件的暂时内容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Radioit\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"radioit desktop edition\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"main.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"exoticknight\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"mail\"</span>: <span class=\"string\">\"draco.knight0@gmail.com\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"jshint\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"rimraf\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"electron-packager\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"electron-prebuilt\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"silence-chromium\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mkdirp\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"nib\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"stylus\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"uglifyjs\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"browserify\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"watchify\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"parallelshell\"</span>: <span class=\"string\">\"latest\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"build:css\"</span>: <span class=\"string\">\"stylus -u nib src/css/app.styl -o static/css/app.css\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"watch:css\"</span>: <span class=\"string\">\"stylus -u nib src/css/app.styl -o static/css/app.css -w\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"electron main.js 2&gt;&amp;1 | silence-chromium\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"npm run build:css &amp;&amp; electron main.js 2&gt;&amp;1 | silence-chromium\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"deepcopy\"</span>: <span class=\"string\">\"^0.5.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"extend\"</span>: <span class=\"string\">\"^2.0.1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>暂时并没有太多的东西，注意要开发基于 Electron 应用，<code>electron-packager</code> 和 <code>electron-prebuilt</code> 必不可少，一个是 Electron 的打包工具，一个是 Electron 运行环境。而 <code>silence-chromium</code> 则是将 chromium 控制台信息输出到系统终端的工具。其他的工具都是博主开发过程中精选过的工具，还请读者自行 Google 之来学习。</p>\n<p>如果你看过本博客之前的一篇文章：<a href=\"http://blog.e10t.net/write-i18n-js-with-help-of-npm-as-build-tool/\">i18n.js 库的编写兼使用 npm 辅助开发</a>，就知道博主是能用 npm 就不用 gulp / grunt 的，因此在 <code>scripts</code> 字段中也写上了运行的脚本。</p>\n<h3 id=\"angularjs-配置\"><a href=\"#angularjs-配置\" class=\"headerlink\" title=\"angularjs 配置\"></a>angularjs 配置</h3><p>angular 的版本比较稳定，因此直接用 <code>bower</code> 来获取，不推荐其他包管理工具。</p>\n<blockquote>\n<p><code>bower</code> 需要先使用 <code>npm install bower -g</code> 来安装，也需要配置了 git 的环境。如果你使用 github for windows，那么请使用 gitshell 来运行。</p>\n</blockquote>\n<p>angular 的安装在下一节中。</p>\n<h3 id=\"angular-material-配置\"><a href=\"#angular-material-配置\" class=\"headerlink\" title=\"angular material 配置\"></a>angular material 配置</h3><p>对于 <code>bower</code> 来说，angular material 跟 angular 是一样的东西，只是后者是前者的依赖。</p>\n<p>运行 <code>bower install angular-material</code>， bower 会自动将依赖的的 <code>angular</code>、<code>angular-aria</code> 和 <code>angular-animate</code> 一并安装上。</p>\n<p>安装完后所有文件会在项目目录下的 <code>bower_components</code> 中找到。</p>\n<h3 id=\"Electron-配置\"><a href=\"#Electron-配置\" class=\"headerlink\" title=\"Electron 配置\"></a>Electron 配置</h3><p>具体参考：<a href=\"https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md\" target=\"_blank\" rel=\"noopener\">Quick Start</a></p>\n<p>在 <code>package.json</code> 中有一个 <code>main</code> 字段，值是 <code>main.js</code>。这个就指定了 Electron 启动应用的入口。</p>\n<p>准备好文件结构。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app/</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── main.js</span><br><span class=\"line\">└── index.html</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始程序\"><a href=\"#初始程序\" class=\"headerlink\" title=\"初始程序\"></a>初始程序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> BrowserWindow = <span class=\"built_in\">require</span>( <span class=\"string\">'browser-window'</span> );  <span class=\"comment\">// Module to create native browser window.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ipc = <span class=\"built_in\">require</span>( <span class=\"string\">'ipc'</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>( <span class=\"string\">'path'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// global variable</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> APP_NAME = <span class=\"string\">'Radioit'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> INDEX = <span class=\"string\">'file://'</span> + path.join( __dirname, <span class=\"string\">'index.html'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Report crashes to our server.</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>( <span class=\"string\">'crash-reporter'</span> ).start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Keep a global reference of the window object, if you don't, the window will</span></span><br><span class=\"line\"><span class=\"comment\">// be closed automatically when the javascript object is GCed.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mainWindow = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Quit when all windows are closed.</span></span><br><span class=\"line\">app.on( <span class=\"string\">'window-all-closed'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( process.platform != <span class=\"string\">'darwin'</span> )</span><br><span class=\"line\">    app.quit();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This method will be called when Electron has done everything</span></span><br><span class=\"line\"><span class=\"comment\">// initialization and ready for creating browser windows.</span></span><br><span class=\"line\">app.on( <span class=\"string\">'ready'</span>, appReady );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">appReady</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    mainWindow = <span class=\"keyword\">new</span> BrowserWindow(&#123;</span><br><span class=\"line\">        <span class=\"string\">'width'</span>: <span class=\"number\">1024</span>,</span><br><span class=\"line\">        <span class=\"string\">'height'</span>: <span class=\"number\">600</span>,</span><br><span class=\"line\">        <span class=\"string\">'resizable'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">'accept-first-mouse'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: APP_NAME,</span><br><span class=\"line\">        <span class=\"string\">'show'</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    mainWindow.loadUrl( INDEX );</span><br><span class=\"line\">    mainWindow.openDevTools(); <span class=\"comment\">// remove this</span></span><br><span class=\"line\"></span><br><span class=\"line\">    mainWindow.webContents.on( <span class=\"string\">'did-finish-load'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        mainWindow.show();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    mainWindow.on( <span class=\"string\">'closed'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        mainWindow = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码好像很多，其实基本就是照抄 quick start，没有任何压力。</p>\n<p>博主写的 <code>main.js</code> 和 quick start 中的有所不同。在新建 <code>mainWindow</code> 的时候，加入了其他参数 <code>show: false</code> 和 <code>resizable: false</code>，分别是隐藏窗口和窗口不可拉伸。也增加了一个：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainWindow.webContents.on( <span class=\"string\">'did-finish-load'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    mainWindow.show();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>作用是网页内容完全载入后才显示窗口，避免一些内容还没载入完就显示。</p>\n<p>最后运行 <code>npm run test</code> 看看结果。</p>\n<blockquote>\n<p>有什么问题请留言。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://i.imgur.com/kvb5CTf.png\" alt=\"thumbnail\"></p>\n<blockquote>\n<p><a href=\"https://github.com/radioit/radioit-desktop\" target=\"_blank\" rel=\"noopener\">应用 github 地址</a>。github 代码和文章代码并不同步，用作预览和 PR。</p>\n</blockquote>\n<h2 id=\"目标分析\"><a href=\"#目标分析\" class=\"headerlink\" title=\"目标分析\"></a>目标分析</h2><p>一句话概述：开发的应用是一个抓取网页有用信息并重新统一排布的应用，是 <a href=\"http://blog.e10t.net/radioit-plan-animate-radio-script-radioitscript/\">之前文章</a> 提到的 radioit 计划里脚本的 GUI 版本。</p>\n<p>关键词：网页抓取、信息统一、信息排布、脚本的 GUI 版本</p>\n<p>功能：</p>\n<ol>\n<li>浏览某一个广播站的广播</li>\n<li>浏览某一个广播的详细信息</li>\n<li>下载某一个广播最新的相关图片</li>\n<li>下载某一个广播最新的相关音频</li>\n<li>能够通过设置代理来突破某些限制</li>\n<li>能够离线浏览（未定）</li>\n<li>预定周期下载任务（未定）</li>\n<li>整合视频压制工具（未定）</li>\n</ol>\n<p>业务流程：</p>\n<ol>\n<li>请求特定 url 资源</li>\n<li>对取得的 url 资源进行信息提取</li>\n<li>信息整合成统一格式</li>\n<li>显示信息</li>\n<li>某些情况下执行预定命令行（未定）</li>\n</ol>\n<p>技术联想：</p>\n<ol>\n<li>请求特定 url 资源 -&gt; node</li>\n<li>对取得的 url 资源进行信息提取 -&gt; node 的某些库</li>\n<li>信息整合成统一格式 -&gt; javascript, json</li>\n<li>显示信息 -&gt; html、css、angular、angular material</li>\n<li>某些情况下执行预定命令行（未定） -&gt; node</li>\n</ol>\n<h2 id=\"技术分析\"><a href=\"#技术分析\" class=\"headerlink\" title=\"技术分析\"></a>技术分析</h2><p>技术要点：</p>\n<ol>\n<li>node.js(io.js)，负责网络连接，网页内容解析提取，非浏览器环境因此能够进行跨域访问</li>\n<li>angular，MVVM 框架，自动进行数据的渲染</li>\n<li>angular material，angular 推出的 material design UI 框架，适合作为桌面应用使用</li>\n<li>stylus，CSS 预处理器，合理直观的 CSS 编写格式</li>\n</ol>\n<p>脑内讨论</p>\n<ul>\n<li>Q：为什么使用 Electron？</li>\n<li><p>A：Electron 有意思地使用了 <code>main</code> 进程和 <code>render</code> 进程，<code>render</code> 进程产生于 <code>main</code> 进程中，因此可以简单地产生多个 <code>render</code> 进程，也就是多窗口。这是一个优势。</p>\n</li>\n<li><p>Q：不用 angular，用 react 是否可以？</p>\n</li>\n<li><p>A：可以，然而在假定选用了 react 之后，然后脑内模拟了一下编程的过程，react 似乎并不适合 html 代码经常修改的场合。而自己比较在行的是写 html 和 css，在界面设计上必定经常修改。另外在 material design 的 UI 框架上，使用配合 angular 的 angular material 显然更具操作性。当然 react 下也有 material design 的 UI 框架，但在试用之后感觉不太好用。另外就是自己翻译过一篇很长的有关 angular 的<a href=\"http://blog.e10t.net/translation-building-the-2048-game-in-angularjs/\">文章</a>，对 angular 比较熟悉。日后考虑改用 Polymer 重写。</p>\n</li>\n<li><p>Q：material design 是必须使用的吗？</p>\n</li>\n<li><p>A：作为桌面应用，需要有一点时刻记住的是桌面应用跟网页是不一样的。桌面应用需要稳定的窗口，要有标题栏等清晰的组件，也不需要太花哨的特效。material design 或者受 material design 影响的一些简洁 UI 风格已经在某些桌面软件上应用开来。Electron 作为使用网页作为 GUI 表现，使用 material design 是个稳妥之举。</p>\n</li>\n<li><p>Q：为什么不用 SASS / LESS？</p>\n</li>\n<li><p>A：SASS 需要 Ruby，对非 Rubyer 是非常无理的要求，逻辑表现能力强大而无用（非常用）；LESS 语法简单，支持混写，但逻辑表现力太弱。stylus 则是既有强有力的特性，也足够简单。有时，工具够用就行。参考：<a href=\"http://webdesign.tutsplus.com/articles/why-i-choose-stylus-and-you-should-too--webdesign-18412\" target=\"_blank\" rel=\"noopener\">Why I Choose Stylus (And You Should Too)</a></p>\n</li>\n<li><p>Q：node 和页面中的 angular 如何沟通？</p>\n</li>\n<li><p>A：<code>main</code> 进程和 <code>reander</code> 进程有特定的模块进行通信。<code>render</code> 进程能通过页面中的全局变量和 angular 进行通讯。</p>\n</li>\n<li><p>Q：为什么要使用 node 的库来处理网页请求和内容提取？angular 自带有 $http 不是更方便？</p>\n</li>\n<li>A：如此一来，就能各自开发。node 只需要管如何得到数据，angular 只需要管如何显示数据。另外，如果需要更改 GUI，那么只需要去掉 angular，换上其他 UI 框架就可以，数据生成不受任何印象。只是如此开发需要更多的精力。</li>\n</ul>\n<h2 id=\"开发配置\"><a href=\"#开发配置\" class=\"headerlink\" title=\"开发配置\"></a>开发配置</h2><h3 id=\"NPM-配置\"><a href=\"#NPM-配置\" class=\"headerlink\" title=\"NPM 配置\"></a>NPM 配置</h3><p>node.js 的安装是必须的，不多介绍。安装完自带 npm 管理工具。</p>\n<p>用的最多的 node 命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i xxx -g</span><br><span class=\"line\">npm i xxx --save</span><br><span class=\"line\">npm u xxx --save</span><br><span class=\"line\">npm update</span><br></pre></td></tr></table></figure></p>\n<p>第一条是全局安装 node 模块。比如一些常用工具，每一个项目都可以用到的工具等。这些模块可以写在 <code>package.json</code> 中的 <code>devDependencies</code> 字段中。</p>\n<p>第二条是本地安装 node 模块并保存信息到 <code>package.json</code> 中。适合项目特定使用的模块。这些模块可以写在 <code>package.json</code> 中的 <code>dependencies</code> 字段中。</p>\n<p>第三条是卸载本地安装的 node 模块。node 模块太多了，尝试多个选最好的。</p>\n<p>第四条是升级 node 模块。</p>\n<p>以下是 <code>package.json</code> 文件的暂时内容。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"Radioit\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"radioit desktop edition\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.1.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"main.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"exoticknight\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"mail\"</span>: <span class=\"string\">\"draco.knight0@gmail.com\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"jshint\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"rimraf\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"electron-packager\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"electron-prebuilt\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"silence-chromium\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mkdirp\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"nib\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"stylus\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"uglifyjs\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"browserify\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"watchify\"</span>: <span class=\"string\">\"latest\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"parallelshell\"</span>: <span class=\"string\">\"latest\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"build:css\"</span>: <span class=\"string\">\"stylus -u nib src/css/app.styl -o static/css/app.css\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"watch:css\"</span>: <span class=\"string\">\"stylus -u nib src/css/app.styl -o static/css/app.css -w\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"electron main.js 2&gt;&amp;1 | silence-chromium\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"npm run build:css &amp;&amp; electron main.js 2&gt;&amp;1 | silence-chromium\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"deepcopy\"</span>: <span class=\"string\">\"^0.5.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"extend\"</span>: <span class=\"string\">\"^2.0.1\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>暂时并没有太多的东西，注意要开发基于 Electron 应用，<code>electron-packager</code> 和 <code>electron-prebuilt</code> 必不可少，一个是 Electron 的打包工具，一个是 Electron 运行环境。而 <code>silence-chromium</code> 则是将 chromium 控制台信息输出到系统终端的工具。其他的工具都是博主开发过程中精选过的工具，还请读者自行 Google 之来学习。</p>\n<p>如果你看过本博客之前的一篇文章：<a href=\"http://blog.e10t.net/write-i18n-js-with-help-of-npm-as-build-tool/\">i18n.js 库的编写兼使用 npm 辅助开发</a>，就知道博主是能用 npm 就不用 gulp / grunt 的，因此在 <code>scripts</code> 字段中也写上了运行的脚本。</p>\n<h3 id=\"angularjs-配置\"><a href=\"#angularjs-配置\" class=\"headerlink\" title=\"angularjs 配置\"></a>angularjs 配置</h3><p>angular 的版本比较稳定，因此直接用 <code>bower</code> 来获取，不推荐其他包管理工具。</p>\n<blockquote>\n<p><code>bower</code> 需要先使用 <code>npm install bower -g</code> 来安装，也需要配置了 git 的环境。如果你使用 github for windows，那么请使用 gitshell 来运行。</p>\n</blockquote>\n<p>angular 的安装在下一节中。</p>\n<h3 id=\"angular-material-配置\"><a href=\"#angular-material-配置\" class=\"headerlink\" title=\"angular material 配置\"></a>angular material 配置</h3><p>对于 <code>bower</code> 来说，angular material 跟 angular 是一样的东西，只是后者是前者的依赖。</p>\n<p>运行 <code>bower install angular-material</code>， bower 会自动将依赖的的 <code>angular</code>、<code>angular-aria</code> 和 <code>angular-animate</code> 一并安装上。</p>\n<p>安装完后所有文件会在项目目录下的 <code>bower_components</code> 中找到。</p>\n<h3 id=\"Electron-配置\"><a href=\"#Electron-配置\" class=\"headerlink\" title=\"Electron 配置\"></a>Electron 配置</h3><p>具体参考：<a href=\"https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md\" target=\"_blank\" rel=\"noopener\">Quick Start</a></p>\n<p>在 <code>package.json</code> 中有一个 <code>main</code> 字段，值是 <code>main.js</code>。这个就指定了 Electron 启动应用的入口。</p>\n<p>准备好文件结构。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app/</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── main.js</span><br><span class=\"line\">└── index.html</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始程序\"><a href=\"#初始程序\" class=\"headerlink\" title=\"初始程序\"></a>初始程序</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> BrowserWindow = <span class=\"built_in\">require</span>( <span class=\"string\">'browser-window'</span> );  <span class=\"comment\">// Module to create native browser window.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ipc = <span class=\"built_in\">require</span>( <span class=\"string\">'ipc'</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>( <span class=\"string\">'path'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// global variable</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> APP_NAME = <span class=\"string\">'Radioit'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> INDEX = <span class=\"string\">'file://'</span> + path.join( __dirname, <span class=\"string\">'index.html'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Report crashes to our server.</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>( <span class=\"string\">'crash-reporter'</span> ).start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Keep a global reference of the window object, if you don't, the window will</span></span><br><span class=\"line\"><span class=\"comment\">// be closed automatically when the javascript object is GCed.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mainWindow = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Quit when all windows are closed.</span></span><br><span class=\"line\">app.on( <span class=\"string\">'window-all-closed'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( process.platform != <span class=\"string\">'darwin'</span> )</span><br><span class=\"line\">    app.quit();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This method will be called when Electron has done everything</span></span><br><span class=\"line\"><span class=\"comment\">// initialization and ready for creating browser windows.</span></span><br><span class=\"line\">app.on( <span class=\"string\">'ready'</span>, appReady );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">appReady</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    mainWindow = <span class=\"keyword\">new</span> BrowserWindow(&#123;</span><br><span class=\"line\">        <span class=\"string\">'width'</span>: <span class=\"number\">1024</span>,</span><br><span class=\"line\">        <span class=\"string\">'height'</span>: <span class=\"number\">600</span>,</span><br><span class=\"line\">        <span class=\"string\">'resizable'</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        <span class=\"string\">'accept-first-mouse'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: APP_NAME,</span><br><span class=\"line\">        <span class=\"string\">'show'</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    mainWindow.loadUrl( INDEX );</span><br><span class=\"line\">    mainWindow.openDevTools(); <span class=\"comment\">// remove this</span></span><br><span class=\"line\"></span><br><span class=\"line\">    mainWindow.webContents.on( <span class=\"string\">'did-finish-load'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        mainWindow.show();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    mainWindow.on( <span class=\"string\">'closed'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        mainWindow = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码好像很多，其实基本就是照抄 quick start，没有任何压力。</p>\n<p>博主写的 <code>main.js</code> 和 quick start 中的有所不同。在新建 <code>mainWindow</code> 的时候，加入了其他参数 <code>show: false</code> 和 <code>resizable: false</code>，分别是隐藏窗口和窗口不可拉伸。也增加了一个：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainWindow.webContents.on( <span class=\"string\">'did-finish-load'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    mainWindow.show();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>作用是网页内容完全载入后才显示窗口，避免一些内容还没载入完就显示。</p>\n<p>最后运行 <code>npm run test</code> 看看结果。</p>\n<blockquote>\n<p>有什么问题请留言。</p>\n</blockquote>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://i.imgur.com/kvb5CTf.png","popularPost_tmp_gaData":{"updated":"Sat Sep 05 2015 17:11:13 GMT+0800 (China Standard Time)","title":"配合 angular 和 angular-material 来开发基于 electron 的应用 · 1-- 分析与配置","path":"build-application-with-angular-and-ng-material-based-on-electron-1-analyze-and-configuration/","eyeCatchImage":"https://i.imgur.com/kvb5CTf.png","excerpt":null,"date":"2015-06-13T11:32:07.000Z","pv":0,"totalPV":0,"categories":"技术 > 编程语言 > javascript > electron","tags":["javascript","angularjs","angular-material","electron"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3114},{"title":"配合 angular 和 angular-material 来开发基于 electron 的应用 · 2--node 库的使用和抓取代码的编写","id":"44","updated":"2015-09-05T09:10:41.000Z","date":"2015-06-29T08:11:33.000Z","_content":"\n## 使用 nodejs 的库\n\npython 脚本的详细编写，请看之前的博文：[radioit 计划——动画广播辅助脚本 radioitScript][1]。\n\n需要用 node 实现脚本中的某些逻辑是获取和提取广播的信息，整合成 JSON 格式的数据。\n\n而用一些库就能轻松做到。\n\n[1]: http://blog.e10t.net/radioit-plan-animate-radio-script-radioitscript/\n\n### superagent\n\n[superagent][superagent] 是一个极其简单的 AJAX 库。\n\n使用方法简单得令人发指。\n\n```javascript\nvar request = require( 'superagent' );\n\nrequest\n    .get( 'http://xxx.com' )\n    .end( function ( err, res ) {\n    // Do something\n});\n```\n\n还用介绍吗？不用了。\n\n[superagent]: https://github.com/visionmedia/superagent\n\n### bluebird\n\n[bluebird][bluebird] 是一个 Promise 库。\n\n凡是类似 IO 的操作，必定需要异步。经典的解决方法是回调，然而是时候用 Promise 了！\n\nbluebird 声称拥有无与伦比的速度。其实更实用的功能是它支持能够将一些本身是不支持 Promise 的库转化为支持 Promise 的库。\n\n然而，要配合之前的 superagent，则需要另外一个库 [superagent-bluebird-promise][superagent-bluebird-promise]。superagent 本身不支持 Promise，从上面的代码来看就是使用回调的方法，这个库就是将 superagent 和 bluebird 融合在一起的“融合卡”。\n\n使用的时候只需要：\n\n```javascript\nvar Promise = require( 'bluebird' );\nvar request = require( 'superagent-bluebird-promise' );\n\nrequest\n    .get( 'http://xxxx.com' )\n    .then( function ( res ) {\n        // do something when resolved\n    }, function ( err ) {\n        // do something when rejected\n    });\n```\n\n立刻就可以使用上 `then` 了，方便吧。\n\n[bluebird]: https://github.com/petkaantonov/bluebird/\n[superagent-bluebird-promise]: https://github.com/KyleAMathews/superagent-bluebird-promise\n\n### cherrio\n\n[cheerio][cheerio] 是一个语法类似 jQuery，为服务端提供 jQuery 核心功能的库。这里用到的是它的 CSS 选择器功能。\n\n代码同样很简单，使用过 jQuery 的人会倍感亲切。\n\n```javascript\nvar cheerio = require( 'cheerio' ),\n    $ = cheerio.load( '<h2 class=\"title\">Hello world</h2>' );\n\n$( '.title' ).text(); // Hello world\n```\n\n使用 cheerio 有比较推荐的做法就是添加上 `decodeEntities` 和 `lowerCaseAttributeNames` 这个两个 options 配置，能避免各种 HTML 文本的奇怪问题。\n\n```javascript\n$ = cheerio.load( HTMLtext, {\n                    'decodeEntities': true,\n                    'lowerCaseAttributeNames': true\n                });\n```\n\n[cheerio]: https://github.com/cheeriojs/cheerio\n\n综上，四个库的混合使用例子如下：\n\n```javascript\nvar Promise = require( 'bluebird' );\nvar request = require( 'superagent-bluebird-promise' );\nvar cheerio = require( 'cheerio' );\n\nrequest\n    .get( 'http://xxxx.com' )\n    .then( function ( res ) {\n        var $, text;\n        $ = cheerio.load( res.text, {\n                    'decodeEntities': true,\n                    'lowerCaseAttributeNames': true\n                });\n        text = $( 'p' ).text();\n    }, function ( err ) {\n        console.log( err );\n    });\n```\n\n## 编写逻辑\n\n> npm 安装库的过程略。\n\n因为是信息整合，那么必定需要有一个统一的数据格式。于是先来确定数据格式。\n\n广播站中所有广播的信息整合数据格式。\n\n```javascript\n// data will be formated as a json object in following structure:\n// {\n//     'name': 'String, name of the channel',\n//     'url': 'String, url of the channel',\n//     'timestamp': 'Number, timestamp of this data',\n//     'bangumi': {\n//         'mon': [\n//             {\n//                 'id': 'String, id of the bangumi',\n//                 'homepage': 'URL, homepage of the bangumi',\n//                 'name': 'String, name of the bangumi',\n//                 'image': 'String, image url  of the bangumi, optional',\n//                 'status': 'String, new / normal',\n//                 ...\n//             },\n//             {...}\n//         ],\n//         'tue': [{...},{...}],\n//         'wed': [{...},{...}],\n//         'thu': [{...},{...}],\n//         'fri': [{...},{...}],\n//         'sat': [{...},{...}],\n//         'sun': [{...},{...}],\n//         'irr': [{...},{...}],\n//     }\n// }\n```\n\n单个广播的信息整合数据格式。\n\n```javascript\n// data will be formated as a json object in following structure:\n// {http://hibiki-radio.jp\n//     'timestamp': 'Number',\n//     'name': 'String, name of the bangumi',\n//     'homepage': 'URL, homepage of the bangumi',\n//     'description': 'String, description of the bangumi',\n//     'title': 'String, title of the newest episode',\n//     'comment': 'String, comment of the newest episode',\n//     'schedule': 'String, schedule of the bangumi or the update date of the newest pisode',\n//     'personality': 'String, personality of the bangumi',\n//     'guest': 'String, guest of the newest episode',\n//     'images': 'String Array, array of images' url',\n//     'audio': 'String, url of audio'\n// }\n```\n\n有了输出的数据格式，抓取信息的时候就能有的放失。\n\n以 [響 - HiBiKi Radio Station -][響 - HiBiKi Radio Station -] 为例。因为在之前编写脚本的时候已经得到了页面上信息的位置，所以可以直接应用在代码中。\n\n```javascript\n// 一些固定的信息和变量\nvar NAME = '響 - HiBiKi Radio Station -';\nvar HOST = 'http://hibiki-radio.jp';\n\nvar URLs = {\n    'catalogue': 'http://hibiki-radio.jp/program',\n    'bangumi': 'http://hibiki-radio.jp/description/'\n}\n```\n\n以下开始获取广播站的广播。\n\n```javascript\n// 获取信息的对象\nvar hibiki = {\n    catalogueName: NAME,\n    host: HOST,\n\n    // 异步取得所有广播的基本信息，返回一个 promise 对象\n    getCatalogueAsync: function () {\n        return request\n            .get( URLs.catalogue )\n            .then( function ( res ) {\n                var $,\n                    days,\n                    bangumi,\n                    data;\n\n                days = 'mon tue wed thu fri sat sun irr'.split( ' ' );\n\n                $ = cheerio.load( res.text, {\n                    'decodeEntities': true,\n                    'lowerCaseAttributeNames': true\n                });\n\n                // Extract html and structure data\n                // 准备数据结构\n                data = {};\n                data.bangumi = {};\n                days.forEach( function ( el ) {\n                    data.bangumi[el] = [];\n                });\n\n\n                // Structure daily bangumis\n                // 一个 .hbkProgramTable 包含一天的广播\n                $( '.hbkProgramTable' ).each( function ( i, el ) {\n                    var _;\n\n                    // 一个 .hbkProgramTitleNew 或 .hbkProgramTitle 为一个广播\n                    data.bangumi[days[i]] = $( this ).find( '.hbkProgramTitleNew, .hbkProgramTitle' ).map( function ( _, el ) {\n                        _ = $( this );\n\n                        // 一个广播的基本信息\n                        return {\n                            'id': _.parent().attr( 'href' ).slice( 35 ),\n                            'homepage': _.parent().attr( 'href' ),\n                            'name': _.text(),\n                            'image': _.prev().children().eq( 0 ).attr( 'src' ),\n                            'status': _.attr( 'class' ) === 'hbkProgramTitleNew' ? 'new' : 'normal'\n                        };\n                    }).get();\n\n                    _ = null;\n                });\n\n                // add extra data\n                data.name = NAME;\n                data.url = HOST;\n                data.timestamp = Date.now();\n\n                return data;\n\n            }, function ( err ) {\n                console.log( 'hibiki:get catalogue error:' + err );\n                throw new Error( err );\n            });\n    }\n}\n```\n\n以下开始获取某个广播的详细信息，函数定义在上面的对象中。\n\n```javascript\n    getBangumiAsync: function ( id ) {\n        return request\n            .get( url.resolve( URLs.bangumi, id ) )\n            .then( function ( res ) {\n                var $,\n                    data;\n\n                $ = cheerio.load( res.text, {\n                    'decodeEntities': true,\n                    'lowerCaseAttributeNames': true\n                });\n\n                // Extract html and structure data\n                // 某个广播详细页的信息提取，信息的位置在 python 脚本中已经确定好了\n                data = {\n                    'timestamp': Date.now(),\n                    'name': $( 'title' ).text().slice( 27, -5 ),\n                    'homepage': url.resolve( URLs.bangumi, id ),\n                    'description': $( 'table.hbkTextTable td:nth-of-type(1) div:nth-of-type(1)' ).eq( 0 ).text().trim(),\n                    'title': $( 'table.hbkTextTable td:nth-of-type(1) div:nth-of-type(3) table:nth-of-type(1) div' ).eq( 0 ).text().trim(),\n                    'comment': $( 'table.hbkTextTable td:nth-of-type(1) div:nth-of-type(3) table:nth-of-type(2) td' ).eq( 0 ).text().trim(),\n                    'schedule': (function () {\n                        var _, text;\n                        _ = $( 'table.hbkTextTable > tr > td:nth-of-type(2) > div' );\n                        if ( !( text = _.eq( -5 ).text().trim() ) ) {\n                            text = _.eq( -3 ).text();\n                        }\n                        return text;\n                    })(),\n                    'update': $( '.hbkDescriptonContents' ).eq( -1 ).prev().prev().find( 'span' ).eq( 0 ).text(),\n                    'personality': $( 'table.hbkTextTable td:nth-of-type(1) > table table td:nth-of-type(2n) a' ).map( function () {return $( this ).text();} ).get().join( '' ),'guest':'',\n                    'images': $( 'table.hbkTextTable td:nth-of-type(1) div:nth-of-type(3) table:nth-of-type(2) td img' ).map( function () {return $( this ).attr( 'src' );}).get(),\n                    'audio': $( 'div.hbkDescriptonContents embed' ).eq( -1 ).attr( 'src' )\n                };\n\n                return data;\n\n            }, function ( err ) {\n                console.log( 'hibiki:get bangumi error:' + err );\n                throw new Error( err );\n            });\n    },\n```\n\n代码看似很多，其实就是多了信息提取的部分，其他代码完全就是上一节中四个库的混合使用。\n\n要注意的有一点，就是 promise 链中的 `then( fulfilledHandler, rejectedHandler )`。其中 `fulfilledHandler` 在最后需要使用 `return data;` 将数据传出去，而 `rejectedHandler` 也需要使用 `throw new Error( err );` 重新抛出错误，不然 promise 链中下一个函数将不会得到处理好的数据或者异常（因为已经处理掉了）。\n\n最后别忘了将对象导出。\n\n```javascript\nmodule.exports = hibiki;\n```\n\n同理，另外两个广播站的代码基本都一样，不同的只是信息提取的部分。\n\n[響 - HiBiKi Radio Station -]: http://hibiki-radio.jp\n\n### 整合\n\n对于取数据的调用者而言，是无需理会数据从哪来的，只需要知道使用什么 API 就够了。\n\n再者，既然有 “整合” 之名，就要行 “整合” 之实。因此要将这三个或者日后出现的更多个广播站提取代码整合起来，只提供一个调用入口。\n\n新建目录 `provider`，将三个广播站的脚本都放进去。\n\n再新建一个 `provider.js` 文件，写入以下代码。\n\n```javascript\nvar catalogue = {\n    'hibiki': require( './provider/hibiki.js' ),\n    'onsen': require( './provider/onsen.js' ),\n    'animate': require( './provider/animate.js' )\n};\n\nvar provider = {\n    /**\n     * Get the list of catalogue\n     * @return {Array} list of catalogue\n     */\n    getCatalogueList: function () {\n        var arr = [],\n            item;\n\n        for ( item in catalogue ) {\n            arr.push({\n                id: item,\n                name: catalogue[item].catalogueName,\n                host: catalogue[item].host\n            });\n        }\n\n        return arr;\n    },\n    getCatalogueAsync: function ( id ) {\n        var c;\n\n        if ( !( c = catalogue[id] ) ) {\n            return;\n        }\n\n        return c.getCatalogueAsync();\n    },\n    getBangumiAsync: function ( catalogueID, bangumiID ) {\n        var c;\n\n        if ( !( c = catalogue[catalogueID] ) ) {\n            return;\n        }\n\n        return c.getBangumiAsync( bangumiID );\n    }\n};\n\nmodule.exports = provider;\n```\n\n整体思路是提供一个可调用的列表，然后根据参数调用相应脚本的功能，就是一个 `dispatcher` 的功能。\n\n如此，就实现了应用的一大部分主要功能了。","source":"_posts/build-application-with-angular-and-ng-material-based-on-electron/配合-angular-和-angular-material-来开发基于-electron-的应用-·-2-node-库的使用和抓取代码的编写.md","raw":"---\ntitle: 配合 angular 和 angular-material 来开发基于 electron 的应用 · 2--node 库的使用和抓取代码的编写\ncategories:\n  - [技术, electron]\n  - [编程语言, javascript]\ntags: [javascript, angularjs, angular-material, electron]\npermalink: build-application-with-angular-and-ng-material-based-on-electron-2-use-node-lib-and-code\nid: 44\nupdated: '2015-09-05 17:10:41'\ndate: 2015-06-29 16:11:33\n---\n\n## 使用 nodejs 的库\n\npython 脚本的详细编写，请看之前的博文：[radioit 计划——动画广播辅助脚本 radioitScript][1]。\n\n需要用 node 实现脚本中的某些逻辑是获取和提取广播的信息，整合成 JSON 格式的数据。\n\n而用一些库就能轻松做到。\n\n[1]: http://blog.e10t.net/radioit-plan-animate-radio-script-radioitscript/\n\n### superagent\n\n[superagent][superagent] 是一个极其简单的 AJAX 库。\n\n使用方法简单得令人发指。\n\n```javascript\nvar request = require( 'superagent' );\n\nrequest\n    .get( 'http://xxx.com' )\n    .end( function ( err, res ) {\n    // Do something\n});\n```\n\n还用介绍吗？不用了。\n\n[superagent]: https://github.com/visionmedia/superagent\n\n### bluebird\n\n[bluebird][bluebird] 是一个 Promise 库。\n\n凡是类似 IO 的操作，必定需要异步。经典的解决方法是回调，然而是时候用 Promise 了！\n\nbluebird 声称拥有无与伦比的速度。其实更实用的功能是它支持能够将一些本身是不支持 Promise 的库转化为支持 Promise 的库。\n\n然而，要配合之前的 superagent，则需要另外一个库 [superagent-bluebird-promise][superagent-bluebird-promise]。superagent 本身不支持 Promise，从上面的代码来看就是使用回调的方法，这个库就是将 superagent 和 bluebird 融合在一起的“融合卡”。\n\n使用的时候只需要：\n\n```javascript\nvar Promise = require( 'bluebird' );\nvar request = require( 'superagent-bluebird-promise' );\n\nrequest\n    .get( 'http://xxxx.com' )\n    .then( function ( res ) {\n        // do something when resolved\n    }, function ( err ) {\n        // do something when rejected\n    });\n```\n\n立刻就可以使用上 `then` 了，方便吧。\n\n[bluebird]: https://github.com/petkaantonov/bluebird/\n[superagent-bluebird-promise]: https://github.com/KyleAMathews/superagent-bluebird-promise\n\n### cherrio\n\n[cheerio][cheerio] 是一个语法类似 jQuery，为服务端提供 jQuery 核心功能的库。这里用到的是它的 CSS 选择器功能。\n\n代码同样很简单，使用过 jQuery 的人会倍感亲切。\n\n```javascript\nvar cheerio = require( 'cheerio' ),\n    $ = cheerio.load( '<h2 class=\"title\">Hello world</h2>' );\n\n$( '.title' ).text(); // Hello world\n```\n\n使用 cheerio 有比较推荐的做法就是添加上 `decodeEntities` 和 `lowerCaseAttributeNames` 这个两个 options 配置，能避免各种 HTML 文本的奇怪问题。\n\n```javascript\n$ = cheerio.load( HTMLtext, {\n                    'decodeEntities': true,\n                    'lowerCaseAttributeNames': true\n                });\n```\n\n[cheerio]: https://github.com/cheeriojs/cheerio\n\n综上，四个库的混合使用例子如下：\n\n```javascript\nvar Promise = require( 'bluebird' );\nvar request = require( 'superagent-bluebird-promise' );\nvar cheerio = require( 'cheerio' );\n\nrequest\n    .get( 'http://xxxx.com' )\n    .then( function ( res ) {\n        var $, text;\n        $ = cheerio.load( res.text, {\n                    'decodeEntities': true,\n                    'lowerCaseAttributeNames': true\n                });\n        text = $( 'p' ).text();\n    }, function ( err ) {\n        console.log( err );\n    });\n```\n\n## 编写逻辑\n\n> npm 安装库的过程略。\n\n因为是信息整合，那么必定需要有一个统一的数据格式。于是先来确定数据格式。\n\n广播站中所有广播的信息整合数据格式。\n\n```javascript\n// data will be formated as a json object in following structure:\n// {\n//     'name': 'String, name of the channel',\n//     'url': 'String, url of the channel',\n//     'timestamp': 'Number, timestamp of this data',\n//     'bangumi': {\n//         'mon': [\n//             {\n//                 'id': 'String, id of the bangumi',\n//                 'homepage': 'URL, homepage of the bangumi',\n//                 'name': 'String, name of the bangumi',\n//                 'image': 'String, image url  of the bangumi, optional',\n//                 'status': 'String, new / normal',\n//                 ...\n//             },\n//             {...}\n//         ],\n//         'tue': [{...},{...}],\n//         'wed': [{...},{...}],\n//         'thu': [{...},{...}],\n//         'fri': [{...},{...}],\n//         'sat': [{...},{...}],\n//         'sun': [{...},{...}],\n//         'irr': [{...},{...}],\n//     }\n// }\n```\n\n单个广播的信息整合数据格式。\n\n```javascript\n// data will be formated as a json object in following structure:\n// {http://hibiki-radio.jp\n//     'timestamp': 'Number',\n//     'name': 'String, name of the bangumi',\n//     'homepage': 'URL, homepage of the bangumi',\n//     'description': 'String, description of the bangumi',\n//     'title': 'String, title of the newest episode',\n//     'comment': 'String, comment of the newest episode',\n//     'schedule': 'String, schedule of the bangumi or the update date of the newest pisode',\n//     'personality': 'String, personality of the bangumi',\n//     'guest': 'String, guest of the newest episode',\n//     'images': 'String Array, array of images' url',\n//     'audio': 'String, url of audio'\n// }\n```\n\n有了输出的数据格式，抓取信息的时候就能有的放失。\n\n以 [響 - HiBiKi Radio Station -][響 - HiBiKi Radio Station -] 为例。因为在之前编写脚本的时候已经得到了页面上信息的位置，所以可以直接应用在代码中。\n\n```javascript\n// 一些固定的信息和变量\nvar NAME = '響 - HiBiKi Radio Station -';\nvar HOST = 'http://hibiki-radio.jp';\n\nvar URLs = {\n    'catalogue': 'http://hibiki-radio.jp/program',\n    'bangumi': 'http://hibiki-radio.jp/description/'\n}\n```\n\n以下开始获取广播站的广播。\n\n```javascript\n// 获取信息的对象\nvar hibiki = {\n    catalogueName: NAME,\n    host: HOST,\n\n    // 异步取得所有广播的基本信息，返回一个 promise 对象\n    getCatalogueAsync: function () {\n        return request\n            .get( URLs.catalogue )\n            .then( function ( res ) {\n                var $,\n                    days,\n                    bangumi,\n                    data;\n\n                days = 'mon tue wed thu fri sat sun irr'.split( ' ' );\n\n                $ = cheerio.load( res.text, {\n                    'decodeEntities': true,\n                    'lowerCaseAttributeNames': true\n                });\n\n                // Extract html and structure data\n                // 准备数据结构\n                data = {};\n                data.bangumi = {};\n                days.forEach( function ( el ) {\n                    data.bangumi[el] = [];\n                });\n\n\n                // Structure daily bangumis\n                // 一个 .hbkProgramTable 包含一天的广播\n                $( '.hbkProgramTable' ).each( function ( i, el ) {\n                    var _;\n\n                    // 一个 .hbkProgramTitleNew 或 .hbkProgramTitle 为一个广播\n                    data.bangumi[days[i]] = $( this ).find( '.hbkProgramTitleNew, .hbkProgramTitle' ).map( function ( _, el ) {\n                        _ = $( this );\n\n                        // 一个广播的基本信息\n                        return {\n                            'id': _.parent().attr( 'href' ).slice( 35 ),\n                            'homepage': _.parent().attr( 'href' ),\n                            'name': _.text(),\n                            'image': _.prev().children().eq( 0 ).attr( 'src' ),\n                            'status': _.attr( 'class' ) === 'hbkProgramTitleNew' ? 'new' : 'normal'\n                        };\n                    }).get();\n\n                    _ = null;\n                });\n\n                // add extra data\n                data.name = NAME;\n                data.url = HOST;\n                data.timestamp = Date.now();\n\n                return data;\n\n            }, function ( err ) {\n                console.log( 'hibiki:get catalogue error:' + err );\n                throw new Error( err );\n            });\n    }\n}\n```\n\n以下开始获取某个广播的详细信息，函数定义在上面的对象中。\n\n```javascript\n    getBangumiAsync: function ( id ) {\n        return request\n            .get( url.resolve( URLs.bangumi, id ) )\n            .then( function ( res ) {\n                var $,\n                    data;\n\n                $ = cheerio.load( res.text, {\n                    'decodeEntities': true,\n                    'lowerCaseAttributeNames': true\n                });\n\n                // Extract html and structure data\n                // 某个广播详细页的信息提取，信息的位置在 python 脚本中已经确定好了\n                data = {\n                    'timestamp': Date.now(),\n                    'name': $( 'title' ).text().slice( 27, -5 ),\n                    'homepage': url.resolve( URLs.bangumi, id ),\n                    'description': $( 'table.hbkTextTable td:nth-of-type(1) div:nth-of-type(1)' ).eq( 0 ).text().trim(),\n                    'title': $( 'table.hbkTextTable td:nth-of-type(1) div:nth-of-type(3) table:nth-of-type(1) div' ).eq( 0 ).text().trim(),\n                    'comment': $( 'table.hbkTextTable td:nth-of-type(1) div:nth-of-type(3) table:nth-of-type(2) td' ).eq( 0 ).text().trim(),\n                    'schedule': (function () {\n                        var _, text;\n                        _ = $( 'table.hbkTextTable > tr > td:nth-of-type(2) > div' );\n                        if ( !( text = _.eq( -5 ).text().trim() ) ) {\n                            text = _.eq( -3 ).text();\n                        }\n                        return text;\n                    })(),\n                    'update': $( '.hbkDescriptonContents' ).eq( -1 ).prev().prev().find( 'span' ).eq( 0 ).text(),\n                    'personality': $( 'table.hbkTextTable td:nth-of-type(1) > table table td:nth-of-type(2n) a' ).map( function () {return $( this ).text();} ).get().join( '' ),'guest':'',\n                    'images': $( 'table.hbkTextTable td:nth-of-type(1) div:nth-of-type(3) table:nth-of-type(2) td img' ).map( function () {return $( this ).attr( 'src' );}).get(),\n                    'audio': $( 'div.hbkDescriptonContents embed' ).eq( -1 ).attr( 'src' )\n                };\n\n                return data;\n\n            }, function ( err ) {\n                console.log( 'hibiki:get bangumi error:' + err );\n                throw new Error( err );\n            });\n    },\n```\n\n代码看似很多，其实就是多了信息提取的部分，其他代码完全就是上一节中四个库的混合使用。\n\n要注意的有一点，就是 promise 链中的 `then( fulfilledHandler, rejectedHandler )`。其中 `fulfilledHandler` 在最后需要使用 `return data;` 将数据传出去，而 `rejectedHandler` 也需要使用 `throw new Error( err );` 重新抛出错误，不然 promise 链中下一个函数将不会得到处理好的数据或者异常（因为已经处理掉了）。\n\n最后别忘了将对象导出。\n\n```javascript\nmodule.exports = hibiki;\n```\n\n同理，另外两个广播站的代码基本都一样，不同的只是信息提取的部分。\n\n[響 - HiBiKi Radio Station -]: http://hibiki-radio.jp\n\n### 整合\n\n对于取数据的调用者而言，是无需理会数据从哪来的，只需要知道使用什么 API 就够了。\n\n再者，既然有 “整合” 之名，就要行 “整合” 之实。因此要将这三个或者日后出现的更多个广播站提取代码整合起来，只提供一个调用入口。\n\n新建目录 `provider`，将三个广播站的脚本都放进去。\n\n再新建一个 `provider.js` 文件，写入以下代码。\n\n```javascript\nvar catalogue = {\n    'hibiki': require( './provider/hibiki.js' ),\n    'onsen': require( './provider/onsen.js' ),\n    'animate': require( './provider/animate.js' )\n};\n\nvar provider = {\n    /**\n     * Get the list of catalogue\n     * @return {Array} list of catalogue\n     */\n    getCatalogueList: function () {\n        var arr = [],\n            item;\n\n        for ( item in catalogue ) {\n            arr.push({\n                id: item,\n                name: catalogue[item].catalogueName,\n                host: catalogue[item].host\n            });\n        }\n\n        return arr;\n    },\n    getCatalogueAsync: function ( id ) {\n        var c;\n\n        if ( !( c = catalogue[id] ) ) {\n            return;\n        }\n\n        return c.getCatalogueAsync();\n    },\n    getBangumiAsync: function ( catalogueID, bangumiID ) {\n        var c;\n\n        if ( !( c = catalogue[catalogueID] ) ) {\n            return;\n        }\n\n        return c.getBangumiAsync( bangumiID );\n    }\n};\n\nmodule.exports = provider;\n```\n\n整体思路是提供一个可调用的列表，然后根据参数调用相应脚本的功能，就是一个 `dispatcher` 的功能。\n\n如此，就实现了应用的一大部分主要功能了。","slug":"build-application-with-angular-and-ng-material-based-on-electron-2-use-node-lib-and-code","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuwq00cyn7t48019uty1","content":"<h2 id=\"使用-nodejs-的库\"><a href=\"#使用-nodejs-的库\" class=\"headerlink\" title=\"使用 nodejs 的库\"></a>使用 nodejs 的库</h2><p>python 脚本的详细编写，请看之前的博文：<a href=\"http://blog.e10t.net/radioit-plan-animate-radio-script-radioitscript/\">radioit 计划——动画广播辅助脚本 radioitScript</a>。</p>\n<p>需要用 node 实现脚本中的某些逻辑是获取和提取广播的信息，整合成 JSON 格式的数据。</p>\n<p>而用一些库就能轻松做到。</p>\n<h3 id=\"superagent\"><a href=\"#superagent\" class=\"headerlink\" title=\"superagent\"></a>superagent</h3><p><a href=\"https://github.com/visionmedia/superagent\" target=\"_blank\" rel=\"noopener\">superagent</a> 是一个极其简单的 AJAX 库。</p>\n<p>使用方法简单得令人发指。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>( <span class=\"string\">'superagent'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">request</span><br><span class=\"line\">    .get( <span class=\"string\">'http://xxx.com'</span> )</span><br><span class=\"line\">    .end( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> err, res </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>还用介绍吗？不用了。</p>\n<h3 id=\"bluebird\"><a href=\"#bluebird\" class=\"headerlink\" title=\"bluebird\"></a>bluebird</h3><p><a href=\"https://github.com/petkaantonov/bluebird/\" target=\"_blank\" rel=\"noopener\">bluebird</a> 是一个 Promise 库。</p>\n<p>凡是类似 IO 的操作，必定需要异步。经典的解决方法是回调，然而是时候用 Promise 了！</p>\n<p>bluebird 声称拥有无与伦比的速度。其实更实用的功能是它支持能够将一些本身是不支持 Promise 的库转化为支持 Promise 的库。</p>\n<p>然而，要配合之前的 superagent，则需要另外一个库 <a href=\"https://github.com/KyleAMathews/superagent-bluebird-promise\" target=\"_blank\" rel=\"noopener\">superagent-bluebird-promise</a>。superagent 本身不支持 Promise，从上面的代码来看就是使用回调的方法，这个库就是将 superagent 和 bluebird 融合在一起的“融合卡”。</p>\n<p>使用的时候只需要：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>( <span class=\"string\">'bluebird'</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>( <span class=\"string\">'superagent-bluebird-promise'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">request</span><br><span class=\"line\">    .get( <span class=\"string\">'http://xxxx.com'</span> )</span><br><span class=\"line\">    .then( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> res </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something when resolved</span></span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> err </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something when rejected</span></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>立刻就可以使用上 <code>then</code> 了，方便吧。</p>\n<h3 id=\"cherrio\"><a href=\"#cherrio\" class=\"headerlink\" title=\"cherrio\"></a>cherrio</h3><p><a href=\"https://github.com/cheeriojs/cheerio\" target=\"_blank\" rel=\"noopener\">cheerio</a> 是一个语法类似 jQuery，为服务端提供 jQuery 核心功能的库。这里用到的是它的 CSS 选择器功能。</p>\n<p>代码同样很简单，使用过 jQuery 的人会倍感亲切。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cheerio = <span class=\"built_in\">require</span>( <span class=\"string\">'cheerio'</span> ),</span><br><span class=\"line\">    $ = cheerio.load( <span class=\"string\">'&lt;h2 class=\"title\"&gt;Hello world&lt;/h2&gt;'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">$( <span class=\"string\">'.title'</span> ).text(); <span class=\"comment\">// Hello world</span></span><br></pre></td></tr></table></figure>\n<p>使用 cheerio 有比较推荐的做法就是添加上 <code>decodeEntities</code> 和 <code>lowerCaseAttributeNames</code> 这个两个 options 配置，能避免各种 HTML 文本的奇怪问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ = cheerio.load( HTMLtext, &#123;</span><br><span class=\"line\">                    <span class=\"string\">'decodeEntities'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"string\">'lowerCaseAttributeNames'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;);</span><br></pre></td></tr></table></figure>\n<p>综上，四个库的混合使用例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>( <span class=\"string\">'bluebird'</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>( <span class=\"string\">'superagent-bluebird-promise'</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> cheerio = <span class=\"built_in\">require</span>( <span class=\"string\">'cheerio'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">request</span><br><span class=\"line\">    .get( <span class=\"string\">'http://xxxx.com'</span> )</span><br><span class=\"line\">    .then( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> res </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> $, text;</span><br><span class=\"line\">        $ = cheerio.load( res.text, &#123;</span><br><span class=\"line\">                    <span class=\"string\">'decodeEntities'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"string\">'lowerCaseAttributeNames'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        text = $( <span class=\"string\">'p'</span> ).text();</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> err </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( err );</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写逻辑\"><a href=\"#编写逻辑\" class=\"headerlink\" title=\"编写逻辑\"></a>编写逻辑</h2><blockquote>\n<p>npm 安装库的过程略。</p>\n</blockquote>\n<p>因为是信息整合，那么必定需要有一个统一的数据格式。于是先来确定数据格式。</p>\n<p>广播站中所有广播的信息整合数据格式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data will be formated as a json object in following structure:</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     'name': 'String, name of the channel',</span></span><br><span class=\"line\"><span class=\"comment\">//     'url': 'String, url of the channel',</span></span><br><span class=\"line\"><span class=\"comment\">//     'timestamp': 'Number, timestamp of this data',</span></span><br><span class=\"line\"><span class=\"comment\">//     'bangumi': &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         'mon': [</span></span><br><span class=\"line\"><span class=\"comment\">//             &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                 'id': 'String, id of the bangumi',</span></span><br><span class=\"line\"><span class=\"comment\">//                 'homepage': 'URL, homepage of the bangumi',</span></span><br><span class=\"line\"><span class=\"comment\">//                 'name': 'String, name of the bangumi',</span></span><br><span class=\"line\"><span class=\"comment\">//                 'image': 'String, image url  of the bangumi, optional',</span></span><br><span class=\"line\"><span class=\"comment\">//                 'status': 'String, new / normal',</span></span><br><span class=\"line\"><span class=\"comment\">//                 ...</span></span><br><span class=\"line\"><span class=\"comment\">//             &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//             &#123;...&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//         ],</span></span><br><span class=\"line\"><span class=\"comment\">//         'tue': [&#123;...&#125;,&#123;...&#125;],</span></span><br><span class=\"line\"><span class=\"comment\">//         'wed': [&#123;...&#125;,&#123;...&#125;],</span></span><br><span class=\"line\"><span class=\"comment\">//         'thu': [&#123;...&#125;,&#123;...&#125;],</span></span><br><span class=\"line\"><span class=\"comment\">//         'fri': [&#123;...&#125;,&#123;...&#125;],</span></span><br><span class=\"line\"><span class=\"comment\">//         'sat': [&#123;...&#125;,&#123;...&#125;],</span></span><br><span class=\"line\"><span class=\"comment\">//         'sun': [&#123;...&#125;,&#123;...&#125;],</span></span><br><span class=\"line\"><span class=\"comment\">//         'irr': [&#123;...&#125;,&#123;...&#125;],</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n<p>单个广播的信息整合数据格式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data will be formated as a json object in following structure:</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;http://hibiki-radio.jp</span></span><br><span class=\"line\"><span class=\"comment\">//     'timestamp': 'Number',</span></span><br><span class=\"line\"><span class=\"comment\">//     'name': 'String, name of the bangumi',</span></span><br><span class=\"line\"><span class=\"comment\">//     'homepage': 'URL, homepage of the bangumi',</span></span><br><span class=\"line\"><span class=\"comment\">//     'description': 'String, description of the bangumi',</span></span><br><span class=\"line\"><span class=\"comment\">//     'title': 'String, title of the newest episode',</span></span><br><span class=\"line\"><span class=\"comment\">//     'comment': 'String, comment of the newest episode',</span></span><br><span class=\"line\"><span class=\"comment\">//     'schedule': 'String, schedule of the bangumi or the update date of the newest pisode',</span></span><br><span class=\"line\"><span class=\"comment\">//     'personality': 'String, personality of the bangumi',</span></span><br><span class=\"line\"><span class=\"comment\">//     'guest': 'String, guest of the newest episode',</span></span><br><span class=\"line\"><span class=\"comment\">//     'images': 'String Array, array of images' url',</span></span><br><span class=\"line\"><span class=\"comment\">//     'audio': 'String, url of audio'</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n<p>有了输出的数据格式，抓取信息的时候就能有的放失。</p>\n<p>以 <a href=\"http://hibiki-radio.jp\" target=\"_blank\" rel=\"noopener\">響 - HiBiKi Radio Station -</a> 为例。因为在之前编写脚本的时候已经得到了页面上信息的位置，所以可以直接应用在代码中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一些固定的信息和变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> NAME = <span class=\"string\">'響 - HiBiKi Radio Station -'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> HOST = <span class=\"string\">'http://hibiki-radio.jp'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> URLs = &#123;</span><br><span class=\"line\">    <span class=\"string\">'catalogue'</span>: <span class=\"string\">'http://hibiki-radio.jp/program'</span>,</span><br><span class=\"line\">    <span class=\"string\">'bangumi'</span>: <span class=\"string\">'http://hibiki-radio.jp/description/'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下开始获取广播站的广播。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取信息的对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hibiki = &#123;</span><br><span class=\"line\">    catalogueName: NAME,</span><br><span class=\"line\">    host: HOST,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 异步取得所有广播的基本信息，返回一个 promise 对象</span></span><br><span class=\"line\">    getCatalogueAsync: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request</span><br><span class=\"line\">            .get( URLs.catalogue )</span><br><span class=\"line\">            .then( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> res </span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> $,</span><br><span class=\"line\">                    days,</span><br><span class=\"line\">                    bangumi,</span><br><span class=\"line\">                    data;</span><br><span class=\"line\"></span><br><span class=\"line\">                days = <span class=\"string\">'mon tue wed thu fri sat sun irr'</span>.split( <span class=\"string\">' '</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">                $ = cheerio.load( res.text, &#123;</span><br><span class=\"line\">                    <span class=\"string\">'decodeEntities'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"string\">'lowerCaseAttributeNames'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Extract html and structure data</span></span><br><span class=\"line\">                <span class=\"comment\">// 准备数据结构</span></span><br><span class=\"line\">                data = &#123;&#125;;</span><br><span class=\"line\">                data.bangumi = &#123;&#125;;</span><br><span class=\"line\">                days.forEach( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> el </span>) </span>&#123;</span><br><span class=\"line\">                    data.bangumi[el] = [];</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Structure daily bangumis</span></span><br><span class=\"line\">                <span class=\"comment\">// 一个 .hbkProgramTable 包含一天的广播</span></span><br><span class=\"line\">                $( <span class=\"string\">'.hbkProgramTable'</span> ).each( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> i, el </span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> _;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 一个 .hbkProgramTitleNew 或 .hbkProgramTitle 为一个广播</span></span><br><span class=\"line\">                    data.bangumi[days[i]] = $( <span class=\"keyword\">this</span> ).find( <span class=\"string\">'.hbkProgramTitleNew, .hbkProgramTitle'</span> ).map( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> _, el </span>) </span>&#123;</span><br><span class=\"line\">                        _ = $( <span class=\"keyword\">this</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 一个广播的基本信息</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                            <span class=\"string\">'id'</span>: _.parent().attr( <span class=\"string\">'href'</span> ).slice( <span class=\"number\">35</span> ),</span><br><span class=\"line\">                            <span class=\"string\">'homepage'</span>: _.parent().attr( <span class=\"string\">'href'</span> ),</span><br><span class=\"line\">                            <span class=\"string\">'name'</span>: _.text(),</span><br><span class=\"line\">                            <span class=\"string\">'image'</span>: _.prev().children().eq( <span class=\"number\">0</span> ).attr( <span class=\"string\">'src'</span> ),</span><br><span class=\"line\">                            <span class=\"string\">'status'</span>: _.attr( <span class=\"string\">'class'</span> ) === <span class=\"string\">'hbkProgramTitleNew'</span> ? <span class=\"string\">'new'</span> : <span class=\"string\">'normal'</span></span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                    &#125;).get();</span><br><span class=\"line\"></span><br><span class=\"line\">                    _ = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// add extra data</span></span><br><span class=\"line\">                data.name = NAME;</span><br><span class=\"line\">                data.url = HOST;</span><br><span class=\"line\">                data.timestamp = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> data;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> err </span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log( <span class=\"string\">'hibiki:get catalogue error:'</span> + err );</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>( err );</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下开始获取某个广播的详细信息，函数定义在上面的对象中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getBangumiAsync: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> id </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> request</span><br><span class=\"line\">        .get( url.resolve( URLs.bangumi, id ) )</span><br><span class=\"line\">        .then( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> res </span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> $,</span><br><span class=\"line\">                data;</span><br><span class=\"line\"></span><br><span class=\"line\">            $ = cheerio.load( res.text, &#123;</span><br><span class=\"line\">                <span class=\"string\">'decodeEntities'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"string\">'lowerCaseAttributeNames'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Extract html and structure data</span></span><br><span class=\"line\">            <span class=\"comment\">// 某个广播详细页的信息提取，信息的位置在 python 脚本中已经确定好了</span></span><br><span class=\"line\">            data = &#123;</span><br><span class=\"line\">                <span class=\"string\">'timestamp'</span>: <span class=\"built_in\">Date</span>.now(),</span><br><span class=\"line\">                <span class=\"string\">'name'</span>: $( <span class=\"string\">'title'</span> ).text().slice( <span class=\"number\">27</span>, <span class=\"number\">-5</span> ),</span><br><span class=\"line\">                <span class=\"string\">'homepage'</span>: url.resolve( URLs.bangumi, id ),</span><br><span class=\"line\">                <span class=\"string\">'description'</span>: $( <span class=\"string\">'table.hbkTextTable td:nth-of-type(1) div:nth-of-type(1)'</span> ).eq( <span class=\"number\">0</span> ).text().trim(),</span><br><span class=\"line\">                <span class=\"string\">'title'</span>: $( <span class=\"string\">'table.hbkTextTable td:nth-of-type(1) div:nth-of-type(3) table:nth-of-type(1) div'</span> ).eq( <span class=\"number\">0</span> ).text().trim(),</span><br><span class=\"line\">                <span class=\"string\">'comment'</span>: $( <span class=\"string\">'table.hbkTextTable td:nth-of-type(1) div:nth-of-type(3) table:nth-of-type(2) td'</span> ).eq( <span class=\"number\">0</span> ).text().trim(),</span><br><span class=\"line\">                <span class=\"string\">'schedule'</span>: (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> _, text;</span><br><span class=\"line\">                    _ = $( <span class=\"string\">'table.hbkTextTable &gt; tr &gt; td:nth-of-type(2) &gt; div'</span> );</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ( !( text = _.eq( <span class=\"number\">-5</span> ).text().trim() ) ) &#123;</span><br><span class=\"line\">                        text = _.eq( <span class=\"number\">-3</span> ).text();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">                &#125;)(),</span><br><span class=\"line\">                <span class=\"string\">'update'</span>: $( <span class=\"string\">'.hbkDescriptonContents'</span> ).eq( <span class=\"number\">-1</span> ).prev().prev().find( <span class=\"string\">'span'</span> ).eq( <span class=\"number\">0</span> ).text(),</span><br><span class=\"line\">                <span class=\"string\">'personality'</span>: $( <span class=\"string\">'table.hbkTextTable td:nth-of-type(1) &gt; table table td:nth-of-type(2n) a'</span> ).map( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> $( <span class=\"keyword\">this</span> ).text();&#125; ).get().join( <span class=\"string\">''</span> ),<span class=\"string\">'guest'</span>:<span class=\"string\">''</span>,</span><br><span class=\"line\">                <span class=\"string\">'images'</span>: $( <span class=\"string\">'table.hbkTextTable td:nth-of-type(1) div:nth-of-type(3) table:nth-of-type(2) td img'</span> ).map( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> $( <span class=\"keyword\">this</span> ).attr( <span class=\"string\">'src'</span> );&#125;).get(),</span><br><span class=\"line\">                <span class=\"string\">'audio'</span>: $( <span class=\"string\">'div.hbkDescriptonContents embed'</span> ).eq( <span class=\"number\">-1</span> ).attr( <span class=\"string\">'src'</span> )</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> data;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> err </span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log( <span class=\"string\">'hibiki:get bangumi error:'</span> + err );</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>( err );</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>代码看似很多，其实就是多了信息提取的部分，其他代码完全就是上一节中四个库的混合使用。</p>\n<p>要注意的有一点，就是 promise 链中的 <code>then( fulfilledHandler, rejectedHandler )</code>。其中 <code>fulfilledHandler</code> 在最后需要使用 <code>return data;</code> 将数据传出去，而 <code>rejectedHandler</code> 也需要使用 <code>throw new Error( err );</code> 重新抛出错误，不然 promise 链中下一个函数将不会得到处理好的数据或者异常（因为已经处理掉了）。</p>\n<p>最后别忘了将对象导出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = hibiki;</span><br></pre></td></tr></table></figure>\n<p>同理，另外两个广播站的代码基本都一样，不同的只是信息提取的部分。</p>\n<h3 id=\"整合\"><a href=\"#整合\" class=\"headerlink\" title=\"整合\"></a>整合</h3><p>对于取数据的调用者而言，是无需理会数据从哪来的，只需要知道使用什么 API 就够了。</p>\n<p>再者，既然有 “整合” 之名，就要行 “整合” 之实。因此要将这三个或者日后出现的更多个广播站提取代码整合起来，只提供一个调用入口。</p>\n<p>新建目录 <code>provider</code>，将三个广播站的脚本都放进去。</p>\n<p>再新建一个 <code>provider.js</code> 文件，写入以下代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> catalogue = &#123;</span><br><span class=\"line\">    <span class=\"string\">'hibiki'</span>: <span class=\"built_in\">require</span>( <span class=\"string\">'./provider/hibiki.js'</span> ),</span><br><span class=\"line\">    <span class=\"string\">'onsen'</span>: <span class=\"built_in\">require</span>( <span class=\"string\">'./provider/onsen.js'</span> ),</span><br><span class=\"line\">    <span class=\"string\">'animate'</span>: <span class=\"built_in\">require</span>( <span class=\"string\">'./provider/animate.js'</span> )</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> provider = &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Get the list of catalogue</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;Array&#125; list of catalogue</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    getCatalogueList: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = [],</span><br><span class=\"line\">            item;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( item <span class=\"keyword\">in</span> catalogue ) &#123;</span><br><span class=\"line\">            arr.push(&#123;</span><br><span class=\"line\">                id: item,</span><br><span class=\"line\">                name: catalogue[item].catalogueName,</span><br><span class=\"line\">                host: catalogue[item].host</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getCatalogueAsync: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> id </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> c;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !( c = catalogue[id] ) ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> c.getCatalogueAsync();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getBangumiAsync: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> catalogueID, bangumiID </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> c;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !( c = catalogue[catalogueID] ) ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> c.getBangumiAsync( bangumiID );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = provider;</span><br></pre></td></tr></table></figure>\n<p>整体思路是提供一个可调用的列表，然后根据参数调用相应脚本的功能，就是一个 <code>dispatcher</code> 的功能。</p>\n<p>如此，就实现了应用的一大部分主要功能了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用-nodejs-的库\"><a href=\"#使用-nodejs-的库\" class=\"headerlink\" title=\"使用 nodejs 的库\"></a>使用 nodejs 的库</h2><p>python 脚本的详细编写，请看之前的博文：<a href=\"http://blog.e10t.net/radioit-plan-animate-radio-script-radioitscript/\">radioit 计划——动画广播辅助脚本 radioitScript</a>。</p>\n<p>需要用 node 实现脚本中的某些逻辑是获取和提取广播的信息，整合成 JSON 格式的数据。</p>\n<p>而用一些库就能轻松做到。</p>\n<h3 id=\"superagent\"><a href=\"#superagent\" class=\"headerlink\" title=\"superagent\"></a>superagent</h3><p><a href=\"https://github.com/visionmedia/superagent\" target=\"_blank\" rel=\"noopener\">superagent</a> 是一个极其简单的 AJAX 库。</p>\n<p>使用方法简单得令人发指。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>( <span class=\"string\">'superagent'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">request</span><br><span class=\"line\">    .get( <span class=\"string\">'http://xxx.com'</span> )</span><br><span class=\"line\">    .end( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> err, res </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do something</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>还用介绍吗？不用了。</p>\n<h3 id=\"bluebird\"><a href=\"#bluebird\" class=\"headerlink\" title=\"bluebird\"></a>bluebird</h3><p><a href=\"https://github.com/petkaantonov/bluebird/\" target=\"_blank\" rel=\"noopener\">bluebird</a> 是一个 Promise 库。</p>\n<p>凡是类似 IO 的操作，必定需要异步。经典的解决方法是回调，然而是时候用 Promise 了！</p>\n<p>bluebird 声称拥有无与伦比的速度。其实更实用的功能是它支持能够将一些本身是不支持 Promise 的库转化为支持 Promise 的库。</p>\n<p>然而，要配合之前的 superagent，则需要另外一个库 <a href=\"https://github.com/KyleAMathews/superagent-bluebird-promise\" target=\"_blank\" rel=\"noopener\">superagent-bluebird-promise</a>。superagent 本身不支持 Promise，从上面的代码来看就是使用回调的方法，这个库就是将 superagent 和 bluebird 融合在一起的“融合卡”。</p>\n<p>使用的时候只需要：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>( <span class=\"string\">'bluebird'</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>( <span class=\"string\">'superagent-bluebird-promise'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">request</span><br><span class=\"line\">    .get( <span class=\"string\">'http://xxxx.com'</span> )</span><br><span class=\"line\">    .then( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> res </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something when resolved</span></span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> err </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// do something when rejected</span></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>立刻就可以使用上 <code>then</code> 了，方便吧。</p>\n<h3 id=\"cherrio\"><a href=\"#cherrio\" class=\"headerlink\" title=\"cherrio\"></a>cherrio</h3><p><a href=\"https://github.com/cheeriojs/cheerio\" target=\"_blank\" rel=\"noopener\">cheerio</a> 是一个语法类似 jQuery，为服务端提供 jQuery 核心功能的库。这里用到的是它的 CSS 选择器功能。</p>\n<p>代码同样很简单，使用过 jQuery 的人会倍感亲切。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cheerio = <span class=\"built_in\">require</span>( <span class=\"string\">'cheerio'</span> ),</span><br><span class=\"line\">    $ = cheerio.load( <span class=\"string\">'&lt;h2 class=\"title\"&gt;Hello world&lt;/h2&gt;'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">$( <span class=\"string\">'.title'</span> ).text(); <span class=\"comment\">// Hello world</span></span><br></pre></td></tr></table></figure>\n<p>使用 cheerio 有比较推荐的做法就是添加上 <code>decodeEntities</code> 和 <code>lowerCaseAttributeNames</code> 这个两个 options 配置，能避免各种 HTML 文本的奇怪问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ = cheerio.load( HTMLtext, &#123;</span><br><span class=\"line\">                    <span class=\"string\">'decodeEntities'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"string\">'lowerCaseAttributeNames'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;);</span><br></pre></td></tr></table></figure>\n<p>综上，四个库的混合使用例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>( <span class=\"string\">'bluebird'</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>( <span class=\"string\">'superagent-bluebird-promise'</span> );</span><br><span class=\"line\"><span class=\"keyword\">var</span> cheerio = <span class=\"built_in\">require</span>( <span class=\"string\">'cheerio'</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">request</span><br><span class=\"line\">    .get( <span class=\"string\">'http://xxxx.com'</span> )</span><br><span class=\"line\">    .then( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> res </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> $, text;</span><br><span class=\"line\">        $ = cheerio.load( res.text, &#123;</span><br><span class=\"line\">                    <span class=\"string\">'decodeEntities'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"string\">'lowerCaseAttributeNames'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        text = $( <span class=\"string\">'p'</span> ).text();</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> err </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log( err );</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写逻辑\"><a href=\"#编写逻辑\" class=\"headerlink\" title=\"编写逻辑\"></a>编写逻辑</h2><blockquote>\n<p>npm 安装库的过程略。</p>\n</blockquote>\n<p>因为是信息整合，那么必定需要有一个统一的数据格式。于是先来确定数据格式。</p>\n<p>广播站中所有广播的信息整合数据格式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data will be formated as a json object in following structure:</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     'name': 'String, name of the channel',</span></span><br><span class=\"line\"><span class=\"comment\">//     'url': 'String, url of the channel',</span></span><br><span class=\"line\"><span class=\"comment\">//     'timestamp': 'Number, timestamp of this data',</span></span><br><span class=\"line\"><span class=\"comment\">//     'bangumi': &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         'mon': [</span></span><br><span class=\"line\"><span class=\"comment\">//             &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                 'id': 'String, id of the bangumi',</span></span><br><span class=\"line\"><span class=\"comment\">//                 'homepage': 'URL, homepage of the bangumi',</span></span><br><span class=\"line\"><span class=\"comment\">//                 'name': 'String, name of the bangumi',</span></span><br><span class=\"line\"><span class=\"comment\">//                 'image': 'String, image url  of the bangumi, optional',</span></span><br><span class=\"line\"><span class=\"comment\">//                 'status': 'String, new / normal',</span></span><br><span class=\"line\"><span class=\"comment\">//                 ...</span></span><br><span class=\"line\"><span class=\"comment\">//             &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//             &#123;...&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//         ],</span></span><br><span class=\"line\"><span class=\"comment\">//         'tue': [&#123;...&#125;,&#123;...&#125;],</span></span><br><span class=\"line\"><span class=\"comment\">//         'wed': [&#123;...&#125;,&#123;...&#125;],</span></span><br><span class=\"line\"><span class=\"comment\">//         'thu': [&#123;...&#125;,&#123;...&#125;],</span></span><br><span class=\"line\"><span class=\"comment\">//         'fri': [&#123;...&#125;,&#123;...&#125;],</span></span><br><span class=\"line\"><span class=\"comment\">//         'sat': [&#123;...&#125;,&#123;...&#125;],</span></span><br><span class=\"line\"><span class=\"comment\">//         'sun': [&#123;...&#125;,&#123;...&#125;],</span></span><br><span class=\"line\"><span class=\"comment\">//         'irr': [&#123;...&#125;,&#123;...&#125;],</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n<p>单个广播的信息整合数据格式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// data will be formated as a json object in following structure:</span></span><br><span class=\"line\"><span class=\"comment\">// &#123;http://hibiki-radio.jp</span></span><br><span class=\"line\"><span class=\"comment\">//     'timestamp': 'Number',</span></span><br><span class=\"line\"><span class=\"comment\">//     'name': 'String, name of the bangumi',</span></span><br><span class=\"line\"><span class=\"comment\">//     'homepage': 'URL, homepage of the bangumi',</span></span><br><span class=\"line\"><span class=\"comment\">//     'description': 'String, description of the bangumi',</span></span><br><span class=\"line\"><span class=\"comment\">//     'title': 'String, title of the newest episode',</span></span><br><span class=\"line\"><span class=\"comment\">//     'comment': 'String, comment of the newest episode',</span></span><br><span class=\"line\"><span class=\"comment\">//     'schedule': 'String, schedule of the bangumi or the update date of the newest pisode',</span></span><br><span class=\"line\"><span class=\"comment\">//     'personality': 'String, personality of the bangumi',</span></span><br><span class=\"line\"><span class=\"comment\">//     'guest': 'String, guest of the newest episode',</span></span><br><span class=\"line\"><span class=\"comment\">//     'images': 'String Array, array of images' url',</span></span><br><span class=\"line\"><span class=\"comment\">//     'audio': 'String, url of audio'</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n<p>有了输出的数据格式，抓取信息的时候就能有的放失。</p>\n<p>以 <a href=\"http://hibiki-radio.jp\" target=\"_blank\" rel=\"noopener\">響 - HiBiKi Radio Station -</a> 为例。因为在之前编写脚本的时候已经得到了页面上信息的位置，所以可以直接应用在代码中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一些固定的信息和变量</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> NAME = <span class=\"string\">'響 - HiBiKi Radio Station -'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> HOST = <span class=\"string\">'http://hibiki-radio.jp'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> URLs = &#123;</span><br><span class=\"line\">    <span class=\"string\">'catalogue'</span>: <span class=\"string\">'http://hibiki-radio.jp/program'</span>,</span><br><span class=\"line\">    <span class=\"string\">'bangumi'</span>: <span class=\"string\">'http://hibiki-radio.jp/description/'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下开始获取广播站的广播。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取信息的对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hibiki = &#123;</span><br><span class=\"line\">    catalogueName: NAME,</span><br><span class=\"line\">    host: HOST,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 异步取得所有广播的基本信息，返回一个 promise 对象</span></span><br><span class=\"line\">    getCatalogueAsync: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> request</span><br><span class=\"line\">            .get( URLs.catalogue )</span><br><span class=\"line\">            .then( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> res </span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> $,</span><br><span class=\"line\">                    days,</span><br><span class=\"line\">                    bangumi,</span><br><span class=\"line\">                    data;</span><br><span class=\"line\"></span><br><span class=\"line\">                days = <span class=\"string\">'mon tue wed thu fri sat sun irr'</span>.split( <span class=\"string\">' '</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">                $ = cheerio.load( res.text, &#123;</span><br><span class=\"line\">                    <span class=\"string\">'decodeEntities'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"string\">'lowerCaseAttributeNames'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Extract html and structure data</span></span><br><span class=\"line\">                <span class=\"comment\">// 准备数据结构</span></span><br><span class=\"line\">                data = &#123;&#125;;</span><br><span class=\"line\">                data.bangumi = &#123;&#125;;</span><br><span class=\"line\">                days.forEach( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> el </span>) </span>&#123;</span><br><span class=\"line\">                    data.bangumi[el] = [];</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Structure daily bangumis</span></span><br><span class=\"line\">                <span class=\"comment\">// 一个 .hbkProgramTable 包含一天的广播</span></span><br><span class=\"line\">                $( <span class=\"string\">'.hbkProgramTable'</span> ).each( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> i, el </span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> _;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// 一个 .hbkProgramTitleNew 或 .hbkProgramTitle 为一个广播</span></span><br><span class=\"line\">                    data.bangumi[days[i]] = $( <span class=\"keyword\">this</span> ).find( <span class=\"string\">'.hbkProgramTitleNew, .hbkProgramTitle'</span> ).map( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> _, el </span>) </span>&#123;</span><br><span class=\"line\">                        _ = $( <span class=\"keyword\">this</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"comment\">// 一个广播的基本信息</span></span><br><span class=\"line\">                        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                            <span class=\"string\">'id'</span>: _.parent().attr( <span class=\"string\">'href'</span> ).slice( <span class=\"number\">35</span> ),</span><br><span class=\"line\">                            <span class=\"string\">'homepage'</span>: _.parent().attr( <span class=\"string\">'href'</span> ),</span><br><span class=\"line\">                            <span class=\"string\">'name'</span>: _.text(),</span><br><span class=\"line\">                            <span class=\"string\">'image'</span>: _.prev().children().eq( <span class=\"number\">0</span> ).attr( <span class=\"string\">'src'</span> ),</span><br><span class=\"line\">                            <span class=\"string\">'status'</span>: _.attr( <span class=\"string\">'class'</span> ) === <span class=\"string\">'hbkProgramTitleNew'</span> ? <span class=\"string\">'new'</span> : <span class=\"string\">'normal'</span></span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                    &#125;).get();</span><br><span class=\"line\"></span><br><span class=\"line\">                    _ = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// add extra data</span></span><br><span class=\"line\">                data.name = NAME;</span><br><span class=\"line\">                data.url = HOST;</span><br><span class=\"line\">                data.timestamp = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> data;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> err </span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log( <span class=\"string\">'hibiki:get catalogue error:'</span> + err );</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>( err );</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以下开始获取某个广播的详细信息，函数定义在上面的对象中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getBangumiAsync: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> id </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> request</span><br><span class=\"line\">        .get( url.resolve( URLs.bangumi, id ) )</span><br><span class=\"line\">        .then( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> res </span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> $,</span><br><span class=\"line\">                data;</span><br><span class=\"line\"></span><br><span class=\"line\">            $ = cheerio.load( res.text, &#123;</span><br><span class=\"line\">                <span class=\"string\">'decodeEntities'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                <span class=\"string\">'lowerCaseAttributeNames'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Extract html and structure data</span></span><br><span class=\"line\">            <span class=\"comment\">// 某个广播详细页的信息提取，信息的位置在 python 脚本中已经确定好了</span></span><br><span class=\"line\">            data = &#123;</span><br><span class=\"line\">                <span class=\"string\">'timestamp'</span>: <span class=\"built_in\">Date</span>.now(),</span><br><span class=\"line\">                <span class=\"string\">'name'</span>: $( <span class=\"string\">'title'</span> ).text().slice( <span class=\"number\">27</span>, <span class=\"number\">-5</span> ),</span><br><span class=\"line\">                <span class=\"string\">'homepage'</span>: url.resolve( URLs.bangumi, id ),</span><br><span class=\"line\">                <span class=\"string\">'description'</span>: $( <span class=\"string\">'table.hbkTextTable td:nth-of-type(1) div:nth-of-type(1)'</span> ).eq( <span class=\"number\">0</span> ).text().trim(),</span><br><span class=\"line\">                <span class=\"string\">'title'</span>: $( <span class=\"string\">'table.hbkTextTable td:nth-of-type(1) div:nth-of-type(3) table:nth-of-type(1) div'</span> ).eq( <span class=\"number\">0</span> ).text().trim(),</span><br><span class=\"line\">                <span class=\"string\">'comment'</span>: $( <span class=\"string\">'table.hbkTextTable td:nth-of-type(1) div:nth-of-type(3) table:nth-of-type(2) td'</span> ).eq( <span class=\"number\">0</span> ).text().trim(),</span><br><span class=\"line\">                <span class=\"string\">'schedule'</span>: (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> _, text;</span><br><span class=\"line\">                    _ = $( <span class=\"string\">'table.hbkTextTable &gt; tr &gt; td:nth-of-type(2) &gt; div'</span> );</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ( !( text = _.eq( <span class=\"number\">-5</span> ).text().trim() ) ) &#123;</span><br><span class=\"line\">                        text = _.eq( <span class=\"number\">-3</span> ).text();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> text;</span><br><span class=\"line\">                &#125;)(),</span><br><span class=\"line\">                <span class=\"string\">'update'</span>: $( <span class=\"string\">'.hbkDescriptonContents'</span> ).eq( <span class=\"number\">-1</span> ).prev().prev().find( <span class=\"string\">'span'</span> ).eq( <span class=\"number\">0</span> ).text(),</span><br><span class=\"line\">                <span class=\"string\">'personality'</span>: $( <span class=\"string\">'table.hbkTextTable td:nth-of-type(1) &gt; table table td:nth-of-type(2n) a'</span> ).map( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> $( <span class=\"keyword\">this</span> ).text();&#125; ).get().join( <span class=\"string\">''</span> ),<span class=\"string\">'guest'</span>:<span class=\"string\">''</span>,</span><br><span class=\"line\">                <span class=\"string\">'images'</span>: $( <span class=\"string\">'table.hbkTextTable td:nth-of-type(1) div:nth-of-type(3) table:nth-of-type(2) td img'</span> ).map( <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"keyword\">return</span> $( <span class=\"keyword\">this</span> ).attr( <span class=\"string\">'src'</span> );&#125;).get(),</span><br><span class=\"line\">                <span class=\"string\">'audio'</span>: $( <span class=\"string\">'div.hbkDescriptonContents embed'</span> ).eq( <span class=\"number\">-1</span> ).attr( <span class=\"string\">'src'</span> )</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> data;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> err </span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log( <span class=\"string\">'hibiki:get bangumi error:'</span> + err );</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>( err );</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>代码看似很多，其实就是多了信息提取的部分，其他代码完全就是上一节中四个库的混合使用。</p>\n<p>要注意的有一点，就是 promise 链中的 <code>then( fulfilledHandler, rejectedHandler )</code>。其中 <code>fulfilledHandler</code> 在最后需要使用 <code>return data;</code> 将数据传出去，而 <code>rejectedHandler</code> 也需要使用 <code>throw new Error( err );</code> 重新抛出错误，不然 promise 链中下一个函数将不会得到处理好的数据或者异常（因为已经处理掉了）。</p>\n<p>最后别忘了将对象导出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = hibiki;</span><br></pre></td></tr></table></figure>\n<p>同理，另外两个广播站的代码基本都一样，不同的只是信息提取的部分。</p>\n<h3 id=\"整合\"><a href=\"#整合\" class=\"headerlink\" title=\"整合\"></a>整合</h3><p>对于取数据的调用者而言，是无需理会数据从哪来的，只需要知道使用什么 API 就够了。</p>\n<p>再者，既然有 “整合” 之名，就要行 “整合” 之实。因此要将这三个或者日后出现的更多个广播站提取代码整合起来，只提供一个调用入口。</p>\n<p>新建目录 <code>provider</code>，将三个广播站的脚本都放进去。</p>\n<p>再新建一个 <code>provider.js</code> 文件，写入以下代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> catalogue = &#123;</span><br><span class=\"line\">    <span class=\"string\">'hibiki'</span>: <span class=\"built_in\">require</span>( <span class=\"string\">'./provider/hibiki.js'</span> ),</span><br><span class=\"line\">    <span class=\"string\">'onsen'</span>: <span class=\"built_in\">require</span>( <span class=\"string\">'./provider/onsen.js'</span> ),</span><br><span class=\"line\">    <span class=\"string\">'animate'</span>: <span class=\"built_in\">require</span>( <span class=\"string\">'./provider/animate.js'</span> )</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> provider = &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Get the list of catalogue</span></span><br><span class=\"line\"><span class=\"comment\">     * @return &#123;Array&#125; list of catalogue</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    getCatalogueList: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr = [],</span><br><span class=\"line\">            item;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( item <span class=\"keyword\">in</span> catalogue ) &#123;</span><br><span class=\"line\">            arr.push(&#123;</span><br><span class=\"line\">                id: item,</span><br><span class=\"line\">                name: catalogue[item].catalogueName,</span><br><span class=\"line\">                host: catalogue[item].host</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getCatalogueAsync: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> id </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> c;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !( c = catalogue[id] ) ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> c.getCatalogueAsync();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getBangumiAsync: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> catalogueID, bangumiID </span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> c;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !( c = catalogue[catalogueID] ) ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> c.getBangumiAsync( bangumiID );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = provider;</span><br></pre></td></tr></table></figure>\n<p>整体思路是提供一个可调用的列表，然后根据参数调用相应脚本的功能，就是一个 <code>dispatcher</code> 的功能。</p>\n<p>如此，就实现了应用的一大部分主要功能了。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Sat Sep 05 2015 17:10:41 GMT+0800 (China Standard Time)","title":"配合 angular 和 angular-material 来开发基于 electron 的应用 · 2--node 库的使用和抓取代码的编写","path":"build-application-with-angular-and-ng-material-based-on-electron-2-use-node-lib-and-code/","eyeCatchImage":null,"excerpt":null,"date":"2015-06-29T08:11:33.000Z","pv":0,"totalPV":0,"categories":"技术 > 编程语言 > javascript > electron","tags":["javascript","angularjs","angular-material","electron"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1525},{"title":"Google Chrome（谷歌浏览器）个人详细教程——总论篇","id":"5","updated":"2014-04-15T07:28:43.000Z","date":"2014-01-22T20:17:07.000Z","_content":"\n考试之前就承诺了写关于 Google Chrome 的使用教程，趁着刚放假还有动力就快快搞掂吧～教程会有点长，因为我想让看的人能逐步深入而不是看得云里雾里的并且力求内容够丰富。如果你看完后对电脑上必然有的网页浏览器有更深的认识，我就觉得值了。\n\n网页浏览器，在现今接入网络非常容易的时代，是一个必不可少的软件。就本人来说，一开始接触网络是使用 IE（Internet Explorer）的，相信基本上和我差不多年龄或者比我大的都是这样的情况。如果你知道有一个浏览器叫做 Netscape，那么你也应该对网页浏览器有比较深的了解了。不少人以为浏览器就是 IE，这个想法大错特错，甚至可以说是井底之蛙之见解。这样就好比说起操作系统就只知道 Windows 而不知道 Linux 和 Mac OS（好吧还有 Unix），说起手机只知道诺基亚而不知道苹果一样。\n\nIE 是微软公司捆绑在 Windows 操作系统里面的一个网页浏览器，IE 的流行很大程度上是托了 Windows 流行的福。IE 其实并不是指一个网页浏览器，它有不同的版本，常见的是：IE6、IE7、IE8、IE9、IE10。IE6 是捆绑在 WindowsXP 里面的，而 XP 在中国有不少用户（可以说基本上个人电脑上的使用率极大），所以 IE6 是最多人用的一个网页浏览器，注意，只是在中国。\n\n然而，随着网络越来越普及，接入越来越方便，网页浏览器也越来越重要，无论是对于商家还是对于个人。因此，也就出现了许多新的网页浏览器。本人使用浏览器的经历是（均是使用时间比较长的）：IE6->世界之窗 ->Maxthon2.x->Google Chrome。不过本人实际使用过的浏览器有：IE6、IE7、IE8、IE9、IE10、Firefox5、Firefox7、Opera、Safari、腾讯 TT、世界之窗、Maxthon2.x、Maxthon3、搜狗浏览器、360 安全浏览器、Google Chrome。不得不说，各款网页浏览器都其自身认为的 “特点” 和“卖点”，即使是同一款浏览器，不同的版本都有不同的功能侧重和改进，这本身代表着浏览器的发展和对开发人员对使用者的心理以及习惯的探索过程。\n\n总而言之，现在的网页浏览器多得满地都是，但主流的还是能数得出来。\n\n如果你对浏览器的历史还感兴趣，请去看下面的图片，非常清晰明了。图片较大，就只给链接了。\n[大图慎入](http://news.mydrivers.com/Img/20110328/08463928.jpg)\n\n那么，究竟怎么样的浏览器适合我们使用呢？\n\n这是个见仁见智的问题，基本回答都是“我觉得好用就好用咯”“习惯的最好”。无可置疑，使用得最舒服、最顺手的就是好浏览器，只是，没有使用过之前，你知道某款浏览器好用吗？你第一次使用网页浏览器你觉得习惯吗？不可能吧？使用的习惯需要一个长时间的养成，但是最开始的时候却是随机的选取。所以，使用习惯固然重要，但是并不能够成为你不使用其他浏览器的理由，因为你不知道其他浏览器是不是真的让你不习惯，真的不够你正在使用的浏览器好用。这是我使用过很多浏览器之后的感受。\n\n还是回到那个问题：用什么浏览器？或者，好的浏览器应该具备什么特点？以下是个人见解。\n\n1、打开网页的速度\n这个很重要，我想没有人会否定。没有人能忍受打开一个网页需要长时间的载入（当然，这也取决于网站自身的设计和优化），但是，打开同一个网页，速度快的浏览器无疑占有极大的优势。主流浏览器页面加载速度可以参考[太平洋网的评测](http://pcedu.pconline.com.cn/pingce/pingcenormal/1108/2494565_1.html)\n\n2、界面设计\n好的软件界面能让使用者愉悦，也能吸引新使用者。现在的主流是简洁。简洁的软件界面能使软件打开的更快，使用户更好地集中于所要做的事情上，而不是纠结于工具栏和各种按钮上。看看各种浏览器较新的版本吧，你会发现基本上都是有多简洁就多简洁：一个地址栏，一个便签栏，没了，从而有更大的空间来显示网页。Chrome 从一开始就是这个风格，让用户更好地忘记自己在用浏览器，更多地关注在网页上。说到底，浏览器不就是让你看网页的工具而已么？\n\n3、可扩展性\n我想一般人不会考虑到这个方面。只是，广义上说，除了让你浏览网页外的功能应该就是扩展了（个人意见），例如广告拦截、鼠标手势、沙箱模式、云同步什么的。以前给 IE 装这个那个的插件其实也是给 IE 弄上扩展了，但是后来各种流氓插件和主页劫持之类的让很多人都对其深恶痛绝。现在很多浏览器都支持安装官方提供的扩展应用，使浏览器的功能更加强大，firefox 和 chrome 在这方面就做得很好。相比国内的浏览器在此方面就弱势了或者甚至没有这种功能。但是可以预见，这将是浏览器的竞争优势。有了扩展，浏览器可以做更多的事，甚至取代电脑上的软件。\n\n4、安全性\n鉴于某些浏览器标榜自己拥有安全上网的功能，我就发表一下自己的见解。实际上，浏览器搞安全功能还不如给电脑装上一个杀毒软件和防火墙。安全上网，只是针对 IE6 而言的。众所周知，在普遍使用 IE6 的时候，经常出现浏览器安全漏洞和浏览到挂病毒挂木马的网站。这是没有办法的事，因为 IE6 的漏洞实在是太多了，而杀毒软件对于病毒的检测都还是处于“后知后觉”。后来杀毒软件都加上了主动防御和防火墙，上网中毒已经很少见了。而且通常中病毒的都是使用 IE 内核的浏览器，说安全上网什么在现在浏览器多极化发展的时候作用已经不大了。\n\n5、自身的亮点\n上面说到的所谓的 “安全上网” 就是浏览器自身的亮点例子之一。真的，也许功能并不实用，但是能吸引用户，就算是成功了。一个毫无自身特点的浏览器也就等同于可以被替换的浏览器。要知道新颖新奇永远能吊起人的好奇。当然，有些浏览器的高使用率也不是其自身有什么特别之处，而是其推广手段很强势甚至流氓，例如非要说你的原有的浏览器这不行那不行，必须使用它提供的才安全才好，或者每次软件升级就要在安装文件里面加上附加的它自家的浏览器安装什么的这一类推广手段实在令人恶心。\n\n打算写的是 Google Chrome 的使用教程，为什么谈了那么多？\n\n如果你压根没有尝试使用新的浏览器的勇气和念头，我希望我谈的能让你有兴趣去试一下。浏览器一定会变得越来越重要，因为网络正在变得越来越重要。浏览器并不是 “无所谓” 了，相反，更应该受到重视和了解。如果你还是懒得去尝试的，OK，继续使用你的 IE、搜狗、whatever… 起码这篇文章你看到了这里，我想你在用原先的浏览器的时候也会闪过某些不曾有过的念头。传说上一次体育抢课用 Chrome 的都登陆进去了，其他的悲剧，于是 Chrome 党多了不少… 虽然从理论上来说这不是太靠谱，但是想想网页没有打开之前你按个按钮都不行，我只要打开网页比你更快就能先登陆了…\n\n我要尝试用其他浏览器了，但是为什么用 Chrome？\n\n好吧，在经历过这么多浏览器之后（前文有提到喔），说真的，我对 Chrome 是一见钟情，无法自拔。它来自于一个浏览器开源项目，名字是 chromium。Chrome 可以说是 chromium 的稳定版。\n\n还记得我提到的好的浏览器的标准吗？从前文的评测你可以看得出，chrome 打开网页的速度基本都是最快的，在屏蔽了广告后更快（以后会提到）。界面也是率先设计得简洁和漂亮的，换皮肤换打开界面这些功能老早就有了。可扩展性好得没话可说，chrome 的应用商店就像苹果的应用市场一样可以随意下载应用供浏览器使用（免费！！）。而且 Google 是什么？是一个全球互联网巨头，全球的人都会发布应用在上面，所以应用的数量也是足够的多。你甚至可以用给浏览器装上游戏，例如：愤怒的小鸟。安全性有保障，使用的内核并不是传统的 IE 内核而是大部分的 webkit 内核，此内核下几乎没有病毒可言，而且浏览器也会在你浏览危险网页的时候阻止你。以上的特点其实就是它的亮点：能符合这么多的标准并不是轻松的事。但，Chrome 的魅力并不只有如此的少，不然就不少网站不会有专门研究 Chrome 的专区了。实际上，Google 想把 chrome 更多地作为一个应用的平台而不单单只是浏览器。Google 推出的上网本系统其实看起来就像一个浏览器。\n","source":"_posts/chrome-tutorial/Google-Chrome（谷歌浏览器）个人详细教程——总论篇.md","raw":"---\ntitle: Google Chrome（谷歌浏览器）个人详细教程——总论篇\ncategories:\n  - [技术, 教程]\ntags: [tutorial, chrome]\npermalink: chrome-tutorial-preface\nid: 5\nupdated: '2014-04-15 15:28:43'\ndate: 2014-01-23 04:17:07\n---\n\n考试之前就承诺了写关于 Google Chrome 的使用教程，趁着刚放假还有动力就快快搞掂吧～教程会有点长，因为我想让看的人能逐步深入而不是看得云里雾里的并且力求内容够丰富。如果你看完后对电脑上必然有的网页浏览器有更深的认识，我就觉得值了。\n\n网页浏览器，在现今接入网络非常容易的时代，是一个必不可少的软件。就本人来说，一开始接触网络是使用 IE（Internet Explorer）的，相信基本上和我差不多年龄或者比我大的都是这样的情况。如果你知道有一个浏览器叫做 Netscape，那么你也应该对网页浏览器有比较深的了解了。不少人以为浏览器就是 IE，这个想法大错特错，甚至可以说是井底之蛙之见解。这样就好比说起操作系统就只知道 Windows 而不知道 Linux 和 Mac OS（好吧还有 Unix），说起手机只知道诺基亚而不知道苹果一样。\n\nIE 是微软公司捆绑在 Windows 操作系统里面的一个网页浏览器，IE 的流行很大程度上是托了 Windows 流行的福。IE 其实并不是指一个网页浏览器，它有不同的版本，常见的是：IE6、IE7、IE8、IE9、IE10。IE6 是捆绑在 WindowsXP 里面的，而 XP 在中国有不少用户（可以说基本上个人电脑上的使用率极大），所以 IE6 是最多人用的一个网页浏览器，注意，只是在中国。\n\n然而，随着网络越来越普及，接入越来越方便，网页浏览器也越来越重要，无论是对于商家还是对于个人。因此，也就出现了许多新的网页浏览器。本人使用浏览器的经历是（均是使用时间比较长的）：IE6->世界之窗 ->Maxthon2.x->Google Chrome。不过本人实际使用过的浏览器有：IE6、IE7、IE8、IE9、IE10、Firefox5、Firefox7、Opera、Safari、腾讯 TT、世界之窗、Maxthon2.x、Maxthon3、搜狗浏览器、360 安全浏览器、Google Chrome。不得不说，各款网页浏览器都其自身认为的 “特点” 和“卖点”，即使是同一款浏览器，不同的版本都有不同的功能侧重和改进，这本身代表着浏览器的发展和对开发人员对使用者的心理以及习惯的探索过程。\n\n总而言之，现在的网页浏览器多得满地都是，但主流的还是能数得出来。\n\n如果你对浏览器的历史还感兴趣，请去看下面的图片，非常清晰明了。图片较大，就只给链接了。\n[大图慎入](http://news.mydrivers.com/Img/20110328/08463928.jpg)\n\n那么，究竟怎么样的浏览器适合我们使用呢？\n\n这是个见仁见智的问题，基本回答都是“我觉得好用就好用咯”“习惯的最好”。无可置疑，使用得最舒服、最顺手的就是好浏览器，只是，没有使用过之前，你知道某款浏览器好用吗？你第一次使用网页浏览器你觉得习惯吗？不可能吧？使用的习惯需要一个长时间的养成，但是最开始的时候却是随机的选取。所以，使用习惯固然重要，但是并不能够成为你不使用其他浏览器的理由，因为你不知道其他浏览器是不是真的让你不习惯，真的不够你正在使用的浏览器好用。这是我使用过很多浏览器之后的感受。\n\n还是回到那个问题：用什么浏览器？或者，好的浏览器应该具备什么特点？以下是个人见解。\n\n1、打开网页的速度\n这个很重要，我想没有人会否定。没有人能忍受打开一个网页需要长时间的载入（当然，这也取决于网站自身的设计和优化），但是，打开同一个网页，速度快的浏览器无疑占有极大的优势。主流浏览器页面加载速度可以参考[太平洋网的评测](http://pcedu.pconline.com.cn/pingce/pingcenormal/1108/2494565_1.html)\n\n2、界面设计\n好的软件界面能让使用者愉悦，也能吸引新使用者。现在的主流是简洁。简洁的软件界面能使软件打开的更快，使用户更好地集中于所要做的事情上，而不是纠结于工具栏和各种按钮上。看看各种浏览器较新的版本吧，你会发现基本上都是有多简洁就多简洁：一个地址栏，一个便签栏，没了，从而有更大的空间来显示网页。Chrome 从一开始就是这个风格，让用户更好地忘记自己在用浏览器，更多地关注在网页上。说到底，浏览器不就是让你看网页的工具而已么？\n\n3、可扩展性\n我想一般人不会考虑到这个方面。只是，广义上说，除了让你浏览网页外的功能应该就是扩展了（个人意见），例如广告拦截、鼠标手势、沙箱模式、云同步什么的。以前给 IE 装这个那个的插件其实也是给 IE 弄上扩展了，但是后来各种流氓插件和主页劫持之类的让很多人都对其深恶痛绝。现在很多浏览器都支持安装官方提供的扩展应用，使浏览器的功能更加强大，firefox 和 chrome 在这方面就做得很好。相比国内的浏览器在此方面就弱势了或者甚至没有这种功能。但是可以预见，这将是浏览器的竞争优势。有了扩展，浏览器可以做更多的事，甚至取代电脑上的软件。\n\n4、安全性\n鉴于某些浏览器标榜自己拥有安全上网的功能，我就发表一下自己的见解。实际上，浏览器搞安全功能还不如给电脑装上一个杀毒软件和防火墙。安全上网，只是针对 IE6 而言的。众所周知，在普遍使用 IE6 的时候，经常出现浏览器安全漏洞和浏览到挂病毒挂木马的网站。这是没有办法的事，因为 IE6 的漏洞实在是太多了，而杀毒软件对于病毒的检测都还是处于“后知后觉”。后来杀毒软件都加上了主动防御和防火墙，上网中毒已经很少见了。而且通常中病毒的都是使用 IE 内核的浏览器，说安全上网什么在现在浏览器多极化发展的时候作用已经不大了。\n\n5、自身的亮点\n上面说到的所谓的 “安全上网” 就是浏览器自身的亮点例子之一。真的，也许功能并不实用，但是能吸引用户，就算是成功了。一个毫无自身特点的浏览器也就等同于可以被替换的浏览器。要知道新颖新奇永远能吊起人的好奇。当然，有些浏览器的高使用率也不是其自身有什么特别之处，而是其推广手段很强势甚至流氓，例如非要说你的原有的浏览器这不行那不行，必须使用它提供的才安全才好，或者每次软件升级就要在安装文件里面加上附加的它自家的浏览器安装什么的这一类推广手段实在令人恶心。\n\n打算写的是 Google Chrome 的使用教程，为什么谈了那么多？\n\n如果你压根没有尝试使用新的浏览器的勇气和念头，我希望我谈的能让你有兴趣去试一下。浏览器一定会变得越来越重要，因为网络正在变得越来越重要。浏览器并不是 “无所谓” 了，相反，更应该受到重视和了解。如果你还是懒得去尝试的，OK，继续使用你的 IE、搜狗、whatever… 起码这篇文章你看到了这里，我想你在用原先的浏览器的时候也会闪过某些不曾有过的念头。传说上一次体育抢课用 Chrome 的都登陆进去了，其他的悲剧，于是 Chrome 党多了不少… 虽然从理论上来说这不是太靠谱，但是想想网页没有打开之前你按个按钮都不行，我只要打开网页比你更快就能先登陆了…\n\n我要尝试用其他浏览器了，但是为什么用 Chrome？\n\n好吧，在经历过这么多浏览器之后（前文有提到喔），说真的，我对 Chrome 是一见钟情，无法自拔。它来自于一个浏览器开源项目，名字是 chromium。Chrome 可以说是 chromium 的稳定版。\n\n还记得我提到的好的浏览器的标准吗？从前文的评测你可以看得出，chrome 打开网页的速度基本都是最快的，在屏蔽了广告后更快（以后会提到）。界面也是率先设计得简洁和漂亮的，换皮肤换打开界面这些功能老早就有了。可扩展性好得没话可说，chrome 的应用商店就像苹果的应用市场一样可以随意下载应用供浏览器使用（免费！！）。而且 Google 是什么？是一个全球互联网巨头，全球的人都会发布应用在上面，所以应用的数量也是足够的多。你甚至可以用给浏览器装上游戏，例如：愤怒的小鸟。安全性有保障，使用的内核并不是传统的 IE 内核而是大部分的 webkit 内核，此内核下几乎没有病毒可言，而且浏览器也会在你浏览危险网页的时候阻止你。以上的特点其实就是它的亮点：能符合这么多的标准并不是轻松的事。但，Chrome 的魅力并不只有如此的少，不然就不少网站不会有专门研究 Chrome 的专区了。实际上，Google 想把 chrome 更多地作为一个应用的平台而不单单只是浏览器。Google 推出的上网本系统其实看起来就像一个浏览器。\n","slug":"chrome-tutorial-preface","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuwr00d0n7t49vqjvle7","content":"<p>考试之前就承诺了写关于 Google Chrome 的使用教程，趁着刚放假还有动力就快快搞掂吧～教程会有点长，因为我想让看的人能逐步深入而不是看得云里雾里的并且力求内容够丰富。如果你看完后对电脑上必然有的网页浏览器有更深的认识，我就觉得值了。</p>\n<p>网页浏览器，在现今接入网络非常容易的时代，是一个必不可少的软件。就本人来说，一开始接触网络是使用 IE（Internet Explorer）的，相信基本上和我差不多年龄或者比我大的都是这样的情况。如果你知道有一个浏览器叫做 Netscape，那么你也应该对网页浏览器有比较深的了解了。不少人以为浏览器就是 IE，这个想法大错特错，甚至可以说是井底之蛙之见解。这样就好比说起操作系统就只知道 Windows 而不知道 Linux 和 Mac OS（好吧还有 Unix），说起手机只知道诺基亚而不知道苹果一样。</p>\n<p>IE 是微软公司捆绑在 Windows 操作系统里面的一个网页浏览器，IE 的流行很大程度上是托了 Windows 流行的福。IE 其实并不是指一个网页浏览器，它有不同的版本，常见的是：IE6、IE7、IE8、IE9、IE10。IE6 是捆绑在 WindowsXP 里面的，而 XP 在中国有不少用户（可以说基本上个人电脑上的使用率极大），所以 IE6 是最多人用的一个网页浏览器，注意，只是在中国。</p>\n<p>然而，随着网络越来越普及，接入越来越方便，网页浏览器也越来越重要，无论是对于商家还是对于个人。因此，也就出现了许多新的网页浏览器。本人使用浏览器的经历是（均是使用时间比较长的）：IE6-&gt;世界之窗 -&gt;Maxthon2.x-&gt;Google Chrome。不过本人实际使用过的浏览器有：IE6、IE7、IE8、IE9、IE10、Firefox5、Firefox7、Opera、Safari、腾讯 TT、世界之窗、Maxthon2.x、Maxthon3、搜狗浏览器、360 安全浏览器、Google Chrome。不得不说，各款网页浏览器都其自身认为的 “特点” 和“卖点”，即使是同一款浏览器，不同的版本都有不同的功能侧重和改进，这本身代表着浏览器的发展和对开发人员对使用者的心理以及习惯的探索过程。</p>\n<p>总而言之，现在的网页浏览器多得满地都是，但主流的还是能数得出来。</p>\n<p>如果你对浏览器的历史还感兴趣，请去看下面的图片，非常清晰明了。图片较大，就只给链接了。<br><a href=\"http://news.mydrivers.com/Img/20110328/08463928.jpg\" target=\"_blank\" rel=\"noopener\">大图慎入</a></p>\n<p>那么，究竟怎么样的浏览器适合我们使用呢？</p>\n<p>这是个见仁见智的问题，基本回答都是“我觉得好用就好用咯”“习惯的最好”。无可置疑，使用得最舒服、最顺手的就是好浏览器，只是，没有使用过之前，你知道某款浏览器好用吗？你第一次使用网页浏览器你觉得习惯吗？不可能吧？使用的习惯需要一个长时间的养成，但是最开始的时候却是随机的选取。所以，使用习惯固然重要，但是并不能够成为你不使用其他浏览器的理由，因为你不知道其他浏览器是不是真的让你不习惯，真的不够你正在使用的浏览器好用。这是我使用过很多浏览器之后的感受。</p>\n<p>还是回到那个问题：用什么浏览器？或者，好的浏览器应该具备什么特点？以下是个人见解。</p>\n<p>1、打开网页的速度<br>这个很重要，我想没有人会否定。没有人能忍受打开一个网页需要长时间的载入（当然，这也取决于网站自身的设计和优化），但是，打开同一个网页，速度快的浏览器无疑占有极大的优势。主流浏览器页面加载速度可以参考<a href=\"http://pcedu.pconline.com.cn/pingce/pingcenormal/1108/2494565_1.html\" target=\"_blank\" rel=\"noopener\">太平洋网的评测</a></p>\n<p>2、界面设计<br>好的软件界面能让使用者愉悦，也能吸引新使用者。现在的主流是简洁。简洁的软件界面能使软件打开的更快，使用户更好地集中于所要做的事情上，而不是纠结于工具栏和各种按钮上。看看各种浏览器较新的版本吧，你会发现基本上都是有多简洁就多简洁：一个地址栏，一个便签栏，没了，从而有更大的空间来显示网页。Chrome 从一开始就是这个风格，让用户更好地忘记自己在用浏览器，更多地关注在网页上。说到底，浏览器不就是让你看网页的工具而已么？</p>\n<p>3、可扩展性<br>我想一般人不会考虑到这个方面。只是，广义上说，除了让你浏览网页外的功能应该就是扩展了（个人意见），例如广告拦截、鼠标手势、沙箱模式、云同步什么的。以前给 IE 装这个那个的插件其实也是给 IE 弄上扩展了，但是后来各种流氓插件和主页劫持之类的让很多人都对其深恶痛绝。现在很多浏览器都支持安装官方提供的扩展应用，使浏览器的功能更加强大，firefox 和 chrome 在这方面就做得很好。相比国内的浏览器在此方面就弱势了或者甚至没有这种功能。但是可以预见，这将是浏览器的竞争优势。有了扩展，浏览器可以做更多的事，甚至取代电脑上的软件。</p>\n<p>4、安全性<br>鉴于某些浏览器标榜自己拥有安全上网的功能，我就发表一下自己的见解。实际上，浏览器搞安全功能还不如给电脑装上一个杀毒软件和防火墙。安全上网，只是针对 IE6 而言的。众所周知，在普遍使用 IE6 的时候，经常出现浏览器安全漏洞和浏览到挂病毒挂木马的网站。这是没有办法的事，因为 IE6 的漏洞实在是太多了，而杀毒软件对于病毒的检测都还是处于“后知后觉”。后来杀毒软件都加上了主动防御和防火墙，上网中毒已经很少见了。而且通常中病毒的都是使用 IE 内核的浏览器，说安全上网什么在现在浏览器多极化发展的时候作用已经不大了。</p>\n<p>5、自身的亮点<br>上面说到的所谓的 “安全上网” 就是浏览器自身的亮点例子之一。真的，也许功能并不实用，但是能吸引用户，就算是成功了。一个毫无自身特点的浏览器也就等同于可以被替换的浏览器。要知道新颖新奇永远能吊起人的好奇。当然，有些浏览器的高使用率也不是其自身有什么特别之处，而是其推广手段很强势甚至流氓，例如非要说你的原有的浏览器这不行那不行，必须使用它提供的才安全才好，或者每次软件升级就要在安装文件里面加上附加的它自家的浏览器安装什么的这一类推广手段实在令人恶心。</p>\n<p>打算写的是 Google Chrome 的使用教程，为什么谈了那么多？</p>\n<p>如果你压根没有尝试使用新的浏览器的勇气和念头，我希望我谈的能让你有兴趣去试一下。浏览器一定会变得越来越重要，因为网络正在变得越来越重要。浏览器并不是 “无所谓” 了，相反，更应该受到重视和了解。如果你还是懒得去尝试的，OK，继续使用你的 IE、搜狗、whatever… 起码这篇文章你看到了这里，我想你在用原先的浏览器的时候也会闪过某些不曾有过的念头。传说上一次体育抢课用 Chrome 的都登陆进去了，其他的悲剧，于是 Chrome 党多了不少… 虽然从理论上来说这不是太靠谱，但是想想网页没有打开之前你按个按钮都不行，我只要打开网页比你更快就能先登陆了…</p>\n<p>我要尝试用其他浏览器了，但是为什么用 Chrome？</p>\n<p>好吧，在经历过这么多浏览器之后（前文有提到喔），说真的，我对 Chrome 是一见钟情，无法自拔。它来自于一个浏览器开源项目，名字是 chromium。Chrome 可以说是 chromium 的稳定版。</p>\n<p>还记得我提到的好的浏览器的标准吗？从前文的评测你可以看得出，chrome 打开网页的速度基本都是最快的，在屏蔽了广告后更快（以后会提到）。界面也是率先设计得简洁和漂亮的，换皮肤换打开界面这些功能老早就有了。可扩展性好得没话可说，chrome 的应用商店就像苹果的应用市场一样可以随意下载应用供浏览器使用（免费！！）。而且 Google 是什么？是一个全球互联网巨头，全球的人都会发布应用在上面，所以应用的数量也是足够的多。你甚至可以用给浏览器装上游戏，例如：愤怒的小鸟。安全性有保障，使用的内核并不是传统的 IE 内核而是大部分的 webkit 内核，此内核下几乎没有病毒可言，而且浏览器也会在你浏览危险网页的时候阻止你。以上的特点其实就是它的亮点：能符合这么多的标准并不是轻松的事。但，Chrome 的魅力并不只有如此的少，不然就不少网站不会有专门研究 Chrome 的专区了。实际上，Google 想把 chrome 更多地作为一个应用的平台而不单单只是浏览器。Google 推出的上网本系统其实看起来就像一个浏览器。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>考试之前就承诺了写关于 Google Chrome 的使用教程，趁着刚放假还有动力就快快搞掂吧～教程会有点长，因为我想让看的人能逐步深入而不是看得云里雾里的并且力求内容够丰富。如果你看完后对电脑上必然有的网页浏览器有更深的认识，我就觉得值了。</p>\n<p>网页浏览器，在现今接入网络非常容易的时代，是一个必不可少的软件。就本人来说，一开始接触网络是使用 IE（Internet Explorer）的，相信基本上和我差不多年龄或者比我大的都是这样的情况。如果你知道有一个浏览器叫做 Netscape，那么你也应该对网页浏览器有比较深的了解了。不少人以为浏览器就是 IE，这个想法大错特错，甚至可以说是井底之蛙之见解。这样就好比说起操作系统就只知道 Windows 而不知道 Linux 和 Mac OS（好吧还有 Unix），说起手机只知道诺基亚而不知道苹果一样。</p>\n<p>IE 是微软公司捆绑在 Windows 操作系统里面的一个网页浏览器，IE 的流行很大程度上是托了 Windows 流行的福。IE 其实并不是指一个网页浏览器，它有不同的版本，常见的是：IE6、IE7、IE8、IE9、IE10。IE6 是捆绑在 WindowsXP 里面的，而 XP 在中国有不少用户（可以说基本上个人电脑上的使用率极大），所以 IE6 是最多人用的一个网页浏览器，注意，只是在中国。</p>\n<p>然而，随着网络越来越普及，接入越来越方便，网页浏览器也越来越重要，无论是对于商家还是对于个人。因此，也就出现了许多新的网页浏览器。本人使用浏览器的经历是（均是使用时间比较长的）：IE6-&gt;世界之窗 -&gt;Maxthon2.x-&gt;Google Chrome。不过本人实际使用过的浏览器有：IE6、IE7、IE8、IE9、IE10、Firefox5、Firefox7、Opera、Safari、腾讯 TT、世界之窗、Maxthon2.x、Maxthon3、搜狗浏览器、360 安全浏览器、Google Chrome。不得不说，各款网页浏览器都其自身认为的 “特点” 和“卖点”，即使是同一款浏览器，不同的版本都有不同的功能侧重和改进，这本身代表着浏览器的发展和对开发人员对使用者的心理以及习惯的探索过程。</p>\n<p>总而言之，现在的网页浏览器多得满地都是，但主流的还是能数得出来。</p>\n<p>如果你对浏览器的历史还感兴趣，请去看下面的图片，非常清晰明了。图片较大，就只给链接了。<br><a href=\"http://news.mydrivers.com/Img/20110328/08463928.jpg\" target=\"_blank\" rel=\"noopener\">大图慎入</a></p>\n<p>那么，究竟怎么样的浏览器适合我们使用呢？</p>\n<p>这是个见仁见智的问题，基本回答都是“我觉得好用就好用咯”“习惯的最好”。无可置疑，使用得最舒服、最顺手的就是好浏览器，只是，没有使用过之前，你知道某款浏览器好用吗？你第一次使用网页浏览器你觉得习惯吗？不可能吧？使用的习惯需要一个长时间的养成，但是最开始的时候却是随机的选取。所以，使用习惯固然重要，但是并不能够成为你不使用其他浏览器的理由，因为你不知道其他浏览器是不是真的让你不习惯，真的不够你正在使用的浏览器好用。这是我使用过很多浏览器之后的感受。</p>\n<p>还是回到那个问题：用什么浏览器？或者，好的浏览器应该具备什么特点？以下是个人见解。</p>\n<p>1、打开网页的速度<br>这个很重要，我想没有人会否定。没有人能忍受打开一个网页需要长时间的载入（当然，这也取决于网站自身的设计和优化），但是，打开同一个网页，速度快的浏览器无疑占有极大的优势。主流浏览器页面加载速度可以参考<a href=\"http://pcedu.pconline.com.cn/pingce/pingcenormal/1108/2494565_1.html\" target=\"_blank\" rel=\"noopener\">太平洋网的评测</a></p>\n<p>2、界面设计<br>好的软件界面能让使用者愉悦，也能吸引新使用者。现在的主流是简洁。简洁的软件界面能使软件打开的更快，使用户更好地集中于所要做的事情上，而不是纠结于工具栏和各种按钮上。看看各种浏览器较新的版本吧，你会发现基本上都是有多简洁就多简洁：一个地址栏，一个便签栏，没了，从而有更大的空间来显示网页。Chrome 从一开始就是这个风格，让用户更好地忘记自己在用浏览器，更多地关注在网页上。说到底，浏览器不就是让你看网页的工具而已么？</p>\n<p>3、可扩展性<br>我想一般人不会考虑到这个方面。只是，广义上说，除了让你浏览网页外的功能应该就是扩展了（个人意见），例如广告拦截、鼠标手势、沙箱模式、云同步什么的。以前给 IE 装这个那个的插件其实也是给 IE 弄上扩展了，但是后来各种流氓插件和主页劫持之类的让很多人都对其深恶痛绝。现在很多浏览器都支持安装官方提供的扩展应用，使浏览器的功能更加强大，firefox 和 chrome 在这方面就做得很好。相比国内的浏览器在此方面就弱势了或者甚至没有这种功能。但是可以预见，这将是浏览器的竞争优势。有了扩展，浏览器可以做更多的事，甚至取代电脑上的软件。</p>\n<p>4、安全性<br>鉴于某些浏览器标榜自己拥有安全上网的功能，我就发表一下自己的见解。实际上，浏览器搞安全功能还不如给电脑装上一个杀毒软件和防火墙。安全上网，只是针对 IE6 而言的。众所周知，在普遍使用 IE6 的时候，经常出现浏览器安全漏洞和浏览到挂病毒挂木马的网站。这是没有办法的事，因为 IE6 的漏洞实在是太多了，而杀毒软件对于病毒的检测都还是处于“后知后觉”。后来杀毒软件都加上了主动防御和防火墙，上网中毒已经很少见了。而且通常中病毒的都是使用 IE 内核的浏览器，说安全上网什么在现在浏览器多极化发展的时候作用已经不大了。</p>\n<p>5、自身的亮点<br>上面说到的所谓的 “安全上网” 就是浏览器自身的亮点例子之一。真的，也许功能并不实用，但是能吸引用户，就算是成功了。一个毫无自身特点的浏览器也就等同于可以被替换的浏览器。要知道新颖新奇永远能吊起人的好奇。当然，有些浏览器的高使用率也不是其自身有什么特别之处，而是其推广手段很强势甚至流氓，例如非要说你的原有的浏览器这不行那不行，必须使用它提供的才安全才好，或者每次软件升级就要在安装文件里面加上附加的它自家的浏览器安装什么的这一类推广手段实在令人恶心。</p>\n<p>打算写的是 Google Chrome 的使用教程，为什么谈了那么多？</p>\n<p>如果你压根没有尝试使用新的浏览器的勇气和念头，我希望我谈的能让你有兴趣去试一下。浏览器一定会变得越来越重要，因为网络正在变得越来越重要。浏览器并不是 “无所谓” 了，相反，更应该受到重视和了解。如果你还是懒得去尝试的，OK，继续使用你的 IE、搜狗、whatever… 起码这篇文章你看到了这里，我想你在用原先的浏览器的时候也会闪过某些不曾有过的念头。传说上一次体育抢课用 Chrome 的都登陆进去了，其他的悲剧，于是 Chrome 党多了不少… 虽然从理论上来说这不是太靠谱，但是想想网页没有打开之前你按个按钮都不行，我只要打开网页比你更快就能先登陆了…</p>\n<p>我要尝试用其他浏览器了，但是为什么用 Chrome？</p>\n<p>好吧，在经历过这么多浏览器之后（前文有提到喔），说真的，我对 Chrome 是一见钟情，无法自拔。它来自于一个浏览器开源项目，名字是 chromium。Chrome 可以说是 chromium 的稳定版。</p>\n<p>还记得我提到的好的浏览器的标准吗？从前文的评测你可以看得出，chrome 打开网页的速度基本都是最快的，在屏蔽了广告后更快（以后会提到）。界面也是率先设计得简洁和漂亮的，换皮肤换打开界面这些功能老早就有了。可扩展性好得没话可说，chrome 的应用商店就像苹果的应用市场一样可以随意下载应用供浏览器使用（免费！！）。而且 Google 是什么？是一个全球互联网巨头，全球的人都会发布应用在上面，所以应用的数量也是足够的多。你甚至可以用给浏览器装上游戏，例如：愤怒的小鸟。安全性有保障，使用的内核并不是传统的 IE 内核而是大部分的 webkit 内核，此内核下几乎没有病毒可言，而且浏览器也会在你浏览危险网页的时候阻止你。以上的特点其实就是它的亮点：能符合这么多的标准并不是轻松的事。但，Chrome 的魅力并不只有如此的少，不然就不少网站不会有专门研究 Chrome 的专区了。实际上，Google 想把 chrome 更多地作为一个应用的平台而不单单只是浏览器。Google 推出的上网本系统其实看起来就像一个浏览器。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":null,"popularPost_tmp_gaData":{"updated":"Tue Apr 15 2014 15:28:43 GMT+0800 (China Standard Time)","title":"Google Chrome（谷歌浏览器）个人详细教程——总论篇","path":"chrome-tutorial-preface/","eyeCatchImage":null,"excerpt":null,"date":"2014-01-22T20:17:07.000Z","pv":0,"totalPV":0,"categories":"技术 > 教程","tags":["tutorial","chrome"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3318},{"title":"python × Qt 应用开发 · 1 -- 基本界面","id":"11","updated":"2015-03-01T04:52:52.000Z","date":"2014-03-13T15:54:43.000Z","_content":"\n## 至少出来一个窗口\n既然是 GUI，那么最起码能运行并显示一个窗口出来。\n\n首先在 python 的工程里面建好工程结构。\n\n![工程结构](https://i.imgur.com/97PENH0.jpg)\n\n结构并非必要，只是个人习惯这样建而已。下面来解说一下。\n\n* `main.py`，整个应用的入口\n* `app` 包，用来放应用的文件\n* `app.view` 包，用来放应用 ui 相关的文件\n\n打开 QtDesigner，会有一个自动弹出框，直接选择其中的“Main Window”，然后点 create，一个窗口就出来啦。QtDesigner 的主界面暂时没什么好说的，有经历过 GUI 设计的读者估计也很熟悉。\n\n![新建 ui](https://i.imgur.com/LpPm5Sz.png)\n\n现在我们先保存，文件名为 `ui_mainwindow.ui`，保存到 `app.view` 下。\n\n接下来是比较重要的一步，也是之后经常用到的步骤：将. ui 文件编译成. py 文件。\n\n执行以下命令。\n```bash\npyside-uic mainwindow.ui -o mainwindow.py\n```\n\n非常好理解，使用 `pyside-uic` 将 `ui_mainwindow.ui` 编译，输出为 `ui_mianwindow.py`。\n\n以后每一次更改了. ui 文件，都要这样执行一下取得. py 文件。我自己为了方便，写了一个批处理文件，要编译. ui 文件的时候就可以直接拖到这个批处理文件上自动编译了。代码如下，保存为 `ui2py.bat`。\n```batchfile\npyside-uic %1 -o %~n1.py\n```\n\n好的，现在我们已经拥有这个窗口的类的基本代码了。好奇的你可能想知道生成了什么。\n\n![基本界面代码](https://i.imgur.com/hbBWmnm.jpg)\n\n哇，一堆代码。都是编译生成的，无需做修改，只是要留意类名 `Ui_MainWindow`，之后要使用这个类。\n\nOK 下面来调用这个 `Ui_MainWindow` 类。在 app 包下新建 `MainWindow.py`，写入以下代码。\n\n```python\nfrom PySide import QtCore, QtGui\nfrom view.ui_mainwindow import Ui_MainWindow\n\nclass MainWindow(QtGui.QMainWindow):\n    def __init__(self, parent=None):\n        super(MainWindow, self).__init__(parent)\n        self.ui = Ui_MainWindow()\n        self.ui.setupUi(self)\n```\n\n这个就是最基本的对窗口类的使用。从代码上可以看出，自定义的 `MainWindow` 类继承了 `QtGui.QMainWindow` 并且初始化，接着调用 `Ui_MainWindow` 来生成 ui。一个窗口其实就创建好了。这里超前说一下，以后的功能实现代码基本都写在这个类里面了，所以这个类并不是 ui 类，而是类似于 MVC 中的 Controller，ui 类是 `Ui_MainWindow`。\n\n窗口创建之后还要显示出来，注意应用程序跟窗口是两个概念。现在，在 `main.py` 中写入如下代码。\n\n```python\nimport sys\nfrom PySide import QtCore, QtGui\n\nfrom app.MainWindow import MainWindow\n\nif __name__ == \"__main__\":\n    app = QtGui.QApplication(sys.argv)\n    window = MainWindow()\n    window.show()\n    sys.exit(app.exec_())\n```\n\n写过 python 代码的读者应该很熟悉这个判断的代码了，就是入口嘛。代码生成了一个变量名为 `app` 的 `QApplication` 实例，生成了 `MainWindow` 实例（自己写的），然后最后一句是运行 app 实例，等待其返回的状态码来关闭程序。实际上在程序运行的时候，代码是会卡在 `app.exec_()` 这里的，一旦执行了什么关闭程序的操作之后才会执行 `sys.exit()`，所以这里并不是显示窗口之后立刻结束。\n\n啊，终于可以运行了。\n\n![基本界面运行图](https://i.imgur.com/wpfSWcF.jpg)\n\n啥都没有，正常，我们还没有加入控件呢。\n\n## 加入一些控件\n回到 QtDesigner，从左边的 `Widget Box` 里面找到到 `Label`、`Line Edit`、`Push Button` 这三个 widget，点击拖动到中间的窗口设计上。\n\n![放上了 widget 的设计](https://i.imgur.com/qUthBdW.jpg)\n\n从右上角的 `Object Inspector` 中可以看到刚刚添加的 widget，每一个都有自己唯一的标识，现在来把这些标识改成符合自己风格或者标准的新标识。双击标识或者点选 widget 之后在右下角的 `Property Editor` 里面的 `objectName` 进行修改。\n\n![Object Inspector 修改](https://i.imgur.com/XDrxpTZ.jpg)\n![Property Editor 修改](https://i.imgur.com/uO1DbF1.jpg)\n\n进行以下修改：\n\n* label -> labelTest\n* lineEdit -> lineEditTest\n* pushButton -> pushButtonTest / buttonTest\n\n可以看出是偏向 “类型 + 自定义标识” 的命名，这样修改的好处是使用的 IDE 有自动补全功能的话，只要输入例如 `pushBu`，IDE 就会自动列出所有的 `pushButton`widget 供选择。至于自定义标识单词首字母大写，则是个人习惯而已。\n\n保存 & 编译一下，回 IDE 运行查看。（以后不会再提醒保存 & 编译了）\n\n![带 widget 运行](https://i.imgur.com/NZ9ptnS.jpg)\n\n现在除了输入框可以输入、按钮可以按之外，没什么可以做的事，因为我们还没有指定这些操作会触发哪些事件。接下来就是比较难的部分：使用 Qt 的信号 & 槽机制。\n\n## Signals & Slots(信号 & 槽)\n接下来的步骤可能有点难以理解，我尽量解释。先贴一段从 IBM 上找到的文字。[原文](https://www.ibm.com/developerworks/cn/linux/guitoolkit/qt/signal-slot/)\n\n> 所有从 QObject 或其子类 ( 例如 Qwidget) 派生的类都能够包含信号和槽。当对象改变其状态时，信号就由该对象发射 (emit) 出去，这就是对象所要做的全部事情，它不知道另一端是谁在接收这个信号。这就是真正的信息封装，它确保对象被当作一个真正的软件组件来使用。槽用于接收信号，但它们是普通的对象成员函数。一个槽并不知道是否有任何信号与自己相连接。而且，对象并不了解具体的通信机制。\n\n简单来说，只要对象继承于 QObject 或其子类，就可以发射（emit）信号和使用槽来接收信号。对象可以通过 emit signal（发射信号）来告诉外界自己正在做什么或者某种状态，而能够接收到信号的 slot（槽）则会被信号激活而调用（因为其本身是一个对象成员函数）。那么顺理成章地，widget（显然是从 QObject 继承下来的）可以通过 emit signal 来报告状态，然后我们只要用 slot 来接收就行了。\n\n具体一点，在我们在上面写的简单界面中，输入框的内容改变了，应该能够发射信号告诉外界这件事，而我们只要编写一个 slot 来接收这个信号就可以做爱做的事了。* 如果有 GTK 编程经历的读者可能发现跟 GTK 的信号和回调函数有点像。*\n\n直接 Google 关键字 `QLineEdit`（widget 前都会加上一个 Q），从官方文档中可以查出在输入框文字变化的时候会 emit 一个 `textEdited` 的 signal。\n\n在 `MainWindow.py` 里简单实现一下。\n\n```python\nclass MainWindow(QMainWindow):\n    def __init__(self, parent=None):\n        super(MainWindow, self).__init__(parent)\n        self.ui = Ui_MainWindow()\n        self.ui.setupUi(self)\n\n        # initialize ui\n        self.initUI()\n\n    def initUI(self):\n        self.ui.lineEditTest.textEdited[str].connect(self.updateLabelText)\n        self.ui.pushButtonTest.clicked.connect(self.buttonClick)\n\n    def buttonClick(self):\n        QMessageBox.about(self, 'title', 'content')\n\n    def updateLabelText(self, text):\n        self.ui.labelTest.setText(text)\n```\n\n添加了一个 `initUI(self)` 作为自己对窗口初始化的函数和一个 `buttonClick(self)` 和 `updateLabelText(self, text)` 作为 slot。\n\n慢慢来解释。首先是两个 slot，`buttonClick(self)` 的作用是弹出一个消息框，标题是“title”，内容是“content”；`updateLabelText(self, text)` 的作用是将接收到的文字更新到 label 上。\n\n注意这里调用窗口中的某个叫 xxx 的 widget 是使用 `self.ui.xxx` 来调用的，简单易懂。\n\n`initUI(self)` 函数是专门用来自定义的 ui 的（注意只是自己写的并不是什么必要的函数）。函数内第一行和第二行的代码的意思是将 widget 上的一些信号“connect”（连接）到我们自己定义的 slot。通过将 signal 和 slot 连接起来，emit signal 的时候这些 slot 就会被触发，也就是相当于执行了。但是！第一行代码到 `textEdited[str]` 可能有读者就开始不明白了，为什么比下面的信号 `clicked` 多了 `[str]`？在上面就已经说明过 `textEdited` 是代表文本变化的 signal，于是 signal 里面携带上变化后的文本也是理所当然的事情，但是问题就在这里了：普遍来说，signal 里面是可以包括不同数据 / 多个数据的（或者说，你可以理解成不同类型的参数 / 多个参数），在 C++ 上有类似重载的机制来分辨，但是在 python 里面是没有提供重载（[为什么不提供](http://www.zhihu.com/question/20053359)，来自知乎)，如何分辨？我猜测 PySide 是使用了 map 来解决的，实际上在系列之后的文章中也会使用到一个叫 `QSignalMapper` 的类来实现从多个无参数的 signal 转换成有参数的 signal。\n\n那说了那么多，那这里的 `[str]` 究竟是怎么回事？我认为，这里可以理解为假定这个 signal 有可能携带一个数据，但这个数据可以有几种类型，用 `[str]` 就是选定了其中带文本类型的数据的 signal 来进行跟 slot 的连接。就像取数组里面的一个元素，不是吗:)\n\n而 `clicked` 就容易理解了，就是点击了按钮呗，无需要传参，直接连接到 `buttonClick`。\n\n下面来运行一下，记得运行的文件是 `main.py`。gif 动态图展示。\n\n![连接了槽的运行](https://i.imgur.com/wqsveLg.gif)\n\n## 小记\n这篇博文实际涉及的东西不多，但是就是后面开发的基础，特别是 signal&slot 的概念，有不清楚的，尽量去问 Google。本系列的重点也不在这些概念上，以后的博文就不再作解释了。\n\n最后来总结一下重点：\n\n* 工程结构\n* QtDesigner 的基础使用\n* ui 文件编译\n* 应用运行的最小代码和 widget（包括窗体）的调用\n* Signals & Slots","source":"_posts/python-with-Qt-application-development/python-×-Qt应用开发-·-1-基本界面.md","raw":"---\ntitle: python × Qt 应用开发 · 1 -- 基本界面\ncategories:\n  - [技术, 软件]\n  - [编程语言, python]\ntags: [python, Qt, software]\npermalink: python-with-qt-application-development-1-basic-view\nid: 11\nupdated: '2015-03-01 12:52:52'\ndate: 2014-03-13 23:54:43\n---\n\n## 至少出来一个窗口\n既然是 GUI，那么最起码能运行并显示一个窗口出来。\n\n首先在 python 的工程里面建好工程结构。\n\n![工程结构](https://i.imgur.com/97PENH0.jpg)\n\n结构并非必要，只是个人习惯这样建而已。下面来解说一下。\n\n* `main.py`，整个应用的入口\n* `app` 包，用来放应用的文件\n* `app.view` 包，用来放应用 ui 相关的文件\n\n打开 QtDesigner，会有一个自动弹出框，直接选择其中的“Main Window”，然后点 create，一个窗口就出来啦。QtDesigner 的主界面暂时没什么好说的，有经历过 GUI 设计的读者估计也很熟悉。\n\n![新建 ui](https://i.imgur.com/LpPm5Sz.png)\n\n现在我们先保存，文件名为 `ui_mainwindow.ui`，保存到 `app.view` 下。\n\n接下来是比较重要的一步，也是之后经常用到的步骤：将. ui 文件编译成. py 文件。\n\n执行以下命令。\n```bash\npyside-uic mainwindow.ui -o mainwindow.py\n```\n\n非常好理解，使用 `pyside-uic` 将 `ui_mainwindow.ui` 编译，输出为 `ui_mianwindow.py`。\n\n以后每一次更改了. ui 文件，都要这样执行一下取得. py 文件。我自己为了方便，写了一个批处理文件，要编译. ui 文件的时候就可以直接拖到这个批处理文件上自动编译了。代码如下，保存为 `ui2py.bat`。\n```batchfile\npyside-uic %1 -o %~n1.py\n```\n\n好的，现在我们已经拥有这个窗口的类的基本代码了。好奇的你可能想知道生成了什么。\n\n![基本界面代码](https://i.imgur.com/hbBWmnm.jpg)\n\n哇，一堆代码。都是编译生成的，无需做修改，只是要留意类名 `Ui_MainWindow`，之后要使用这个类。\n\nOK 下面来调用这个 `Ui_MainWindow` 类。在 app 包下新建 `MainWindow.py`，写入以下代码。\n\n```python\nfrom PySide import QtCore, QtGui\nfrom view.ui_mainwindow import Ui_MainWindow\n\nclass MainWindow(QtGui.QMainWindow):\n    def __init__(self, parent=None):\n        super(MainWindow, self).__init__(parent)\n        self.ui = Ui_MainWindow()\n        self.ui.setupUi(self)\n```\n\n这个就是最基本的对窗口类的使用。从代码上可以看出，自定义的 `MainWindow` 类继承了 `QtGui.QMainWindow` 并且初始化，接着调用 `Ui_MainWindow` 来生成 ui。一个窗口其实就创建好了。这里超前说一下，以后的功能实现代码基本都写在这个类里面了，所以这个类并不是 ui 类，而是类似于 MVC 中的 Controller，ui 类是 `Ui_MainWindow`。\n\n窗口创建之后还要显示出来，注意应用程序跟窗口是两个概念。现在，在 `main.py` 中写入如下代码。\n\n```python\nimport sys\nfrom PySide import QtCore, QtGui\n\nfrom app.MainWindow import MainWindow\n\nif __name__ == \"__main__\":\n    app = QtGui.QApplication(sys.argv)\n    window = MainWindow()\n    window.show()\n    sys.exit(app.exec_())\n```\n\n写过 python 代码的读者应该很熟悉这个判断的代码了，就是入口嘛。代码生成了一个变量名为 `app` 的 `QApplication` 实例，生成了 `MainWindow` 实例（自己写的），然后最后一句是运行 app 实例，等待其返回的状态码来关闭程序。实际上在程序运行的时候，代码是会卡在 `app.exec_()` 这里的，一旦执行了什么关闭程序的操作之后才会执行 `sys.exit()`，所以这里并不是显示窗口之后立刻结束。\n\n啊，终于可以运行了。\n\n![基本界面运行图](https://i.imgur.com/wpfSWcF.jpg)\n\n啥都没有，正常，我们还没有加入控件呢。\n\n## 加入一些控件\n回到 QtDesigner，从左边的 `Widget Box` 里面找到到 `Label`、`Line Edit`、`Push Button` 这三个 widget，点击拖动到中间的窗口设计上。\n\n![放上了 widget 的设计](https://i.imgur.com/qUthBdW.jpg)\n\n从右上角的 `Object Inspector` 中可以看到刚刚添加的 widget，每一个都有自己唯一的标识，现在来把这些标识改成符合自己风格或者标准的新标识。双击标识或者点选 widget 之后在右下角的 `Property Editor` 里面的 `objectName` 进行修改。\n\n![Object Inspector 修改](https://i.imgur.com/XDrxpTZ.jpg)\n![Property Editor 修改](https://i.imgur.com/uO1DbF1.jpg)\n\n进行以下修改：\n\n* label -> labelTest\n* lineEdit -> lineEditTest\n* pushButton -> pushButtonTest / buttonTest\n\n可以看出是偏向 “类型 + 自定义标识” 的命名，这样修改的好处是使用的 IDE 有自动补全功能的话，只要输入例如 `pushBu`，IDE 就会自动列出所有的 `pushButton`widget 供选择。至于自定义标识单词首字母大写，则是个人习惯而已。\n\n保存 & 编译一下，回 IDE 运行查看。（以后不会再提醒保存 & 编译了）\n\n![带 widget 运行](https://i.imgur.com/NZ9ptnS.jpg)\n\n现在除了输入框可以输入、按钮可以按之外，没什么可以做的事，因为我们还没有指定这些操作会触发哪些事件。接下来就是比较难的部分：使用 Qt 的信号 & 槽机制。\n\n## Signals & Slots(信号 & 槽)\n接下来的步骤可能有点难以理解，我尽量解释。先贴一段从 IBM 上找到的文字。[原文](https://www.ibm.com/developerworks/cn/linux/guitoolkit/qt/signal-slot/)\n\n> 所有从 QObject 或其子类 ( 例如 Qwidget) 派生的类都能够包含信号和槽。当对象改变其状态时，信号就由该对象发射 (emit) 出去，这就是对象所要做的全部事情，它不知道另一端是谁在接收这个信号。这就是真正的信息封装，它确保对象被当作一个真正的软件组件来使用。槽用于接收信号，但它们是普通的对象成员函数。一个槽并不知道是否有任何信号与自己相连接。而且，对象并不了解具体的通信机制。\n\n简单来说，只要对象继承于 QObject 或其子类，就可以发射（emit）信号和使用槽来接收信号。对象可以通过 emit signal（发射信号）来告诉外界自己正在做什么或者某种状态，而能够接收到信号的 slot（槽）则会被信号激活而调用（因为其本身是一个对象成员函数）。那么顺理成章地，widget（显然是从 QObject 继承下来的）可以通过 emit signal 来报告状态，然后我们只要用 slot 来接收就行了。\n\n具体一点，在我们在上面写的简单界面中，输入框的内容改变了，应该能够发射信号告诉外界这件事，而我们只要编写一个 slot 来接收这个信号就可以做爱做的事了。* 如果有 GTK 编程经历的读者可能发现跟 GTK 的信号和回调函数有点像。*\n\n直接 Google 关键字 `QLineEdit`（widget 前都会加上一个 Q），从官方文档中可以查出在输入框文字变化的时候会 emit 一个 `textEdited` 的 signal。\n\n在 `MainWindow.py` 里简单实现一下。\n\n```python\nclass MainWindow(QMainWindow):\n    def __init__(self, parent=None):\n        super(MainWindow, self).__init__(parent)\n        self.ui = Ui_MainWindow()\n        self.ui.setupUi(self)\n\n        # initialize ui\n        self.initUI()\n\n    def initUI(self):\n        self.ui.lineEditTest.textEdited[str].connect(self.updateLabelText)\n        self.ui.pushButtonTest.clicked.connect(self.buttonClick)\n\n    def buttonClick(self):\n        QMessageBox.about(self, 'title', 'content')\n\n    def updateLabelText(self, text):\n        self.ui.labelTest.setText(text)\n```\n\n添加了一个 `initUI(self)` 作为自己对窗口初始化的函数和一个 `buttonClick(self)` 和 `updateLabelText(self, text)` 作为 slot。\n\n慢慢来解释。首先是两个 slot，`buttonClick(self)` 的作用是弹出一个消息框，标题是“title”，内容是“content”；`updateLabelText(self, text)` 的作用是将接收到的文字更新到 label 上。\n\n注意这里调用窗口中的某个叫 xxx 的 widget 是使用 `self.ui.xxx` 来调用的，简单易懂。\n\n`initUI(self)` 函数是专门用来自定义的 ui 的（注意只是自己写的并不是什么必要的函数）。函数内第一行和第二行的代码的意思是将 widget 上的一些信号“connect”（连接）到我们自己定义的 slot。通过将 signal 和 slot 连接起来，emit signal 的时候这些 slot 就会被触发，也就是相当于执行了。但是！第一行代码到 `textEdited[str]` 可能有读者就开始不明白了，为什么比下面的信号 `clicked` 多了 `[str]`？在上面就已经说明过 `textEdited` 是代表文本变化的 signal，于是 signal 里面携带上变化后的文本也是理所当然的事情，但是问题就在这里了：普遍来说，signal 里面是可以包括不同数据 / 多个数据的（或者说，你可以理解成不同类型的参数 / 多个参数），在 C++ 上有类似重载的机制来分辨，但是在 python 里面是没有提供重载（[为什么不提供](http://www.zhihu.com/question/20053359)，来自知乎)，如何分辨？我猜测 PySide 是使用了 map 来解决的，实际上在系列之后的文章中也会使用到一个叫 `QSignalMapper` 的类来实现从多个无参数的 signal 转换成有参数的 signal。\n\n那说了那么多，那这里的 `[str]` 究竟是怎么回事？我认为，这里可以理解为假定这个 signal 有可能携带一个数据，但这个数据可以有几种类型，用 `[str]` 就是选定了其中带文本类型的数据的 signal 来进行跟 slot 的连接。就像取数组里面的一个元素，不是吗:)\n\n而 `clicked` 就容易理解了，就是点击了按钮呗，无需要传参，直接连接到 `buttonClick`。\n\n下面来运行一下，记得运行的文件是 `main.py`。gif 动态图展示。\n\n![连接了槽的运行](https://i.imgur.com/wqsveLg.gif)\n\n## 小记\n这篇博文实际涉及的东西不多，但是就是后面开发的基础，特别是 signal&slot 的概念，有不清楚的，尽量去问 Google。本系列的重点也不在这些概念上，以后的博文就不再作解释了。\n\n最后来总结一下重点：\n\n* 工程结构\n* QtDesigner 的基础使用\n* ui 文件编译\n* 应用运行的最小代码和 widget（包括窗体）的调用\n* Signals & Slots","slug":"python-with-qt-application-development-1-basic-view","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuwt00d2n7t4bzsthwxo","content":"<h2 id=\"至少出来一个窗口\"><a href=\"#至少出来一个窗口\" class=\"headerlink\" title=\"至少出来一个窗口\"></a>至少出来一个窗口</h2><p>既然是 GUI，那么最起码能运行并显示一个窗口出来。</p>\n<p>首先在 python 的工程里面建好工程结构。</p>\n<p><img src=\"https://i.imgur.com/97PENH0.jpg\" alt=\"工程结构\"></p>\n<p>结构并非必要，只是个人习惯这样建而已。下面来解说一下。</p>\n<ul>\n<li><code>main.py</code>，整个应用的入口</li>\n<li><code>app</code> 包，用来放应用的文件</li>\n<li><code>app.view</code> 包，用来放应用 ui 相关的文件</li>\n</ul>\n<p>打开 QtDesigner，会有一个自动弹出框，直接选择其中的“Main Window”，然后点 create，一个窗口就出来啦。QtDesigner 的主界面暂时没什么好说的，有经历过 GUI 设计的读者估计也很熟悉。</p>\n<p><img src=\"https://i.imgur.com/LpPm5Sz.png\" alt=\"新建 ui\"></p>\n<p>现在我们先保存，文件名为 <code>ui_mainwindow.ui</code>，保存到 <code>app.view</code> 下。</p>\n<p>接下来是比较重要的一步，也是之后经常用到的步骤：将. ui 文件编译成. py 文件。</p>\n<p>执行以下命令。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyside-uic mainwindow.ui -o mainwindow.py</span><br></pre></td></tr></table></figure></p>\n<p>非常好理解，使用 <code>pyside-uic</code> 将 <code>ui_mainwindow.ui</code> 编译，输出为 <code>ui_mianwindow.py</code>。</p>\n<p>以后每一次更改了. ui 文件，都要这样执行一下取得. py 文件。我自己为了方便，写了一个批处理文件，要编译. ui 文件的时候就可以直接拖到这个批处理文件上自动编译了。代码如下，保存为 <code>ui2py.bat</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyside-uic %1 -o %~n1.py</span><br></pre></td></tr></table></figure></p>\n<p>好的，现在我们已经拥有这个窗口的类的基本代码了。好奇的你可能想知道生成了什么。</p>\n<p><img src=\"https://i.imgur.com/hbBWmnm.jpg\" alt=\"基本界面代码\"></p>\n<p>哇，一堆代码。都是编译生成的，无需做修改，只是要留意类名 <code>Ui_MainWindow</code>，之后要使用这个类。</p>\n<p>OK 下面来调用这个 <code>Ui_MainWindow</code> 类。在 app 包下新建 <code>MainWindow.py</code>，写入以下代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PySide <span class=\"keyword\">import</span> QtCore, QtGui</span><br><span class=\"line\"><span class=\"keyword\">from</span> view.ui_mainwindow <span class=\"keyword\">import</span> Ui_MainWindow</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainWindow</span><span class=\"params\">(QtGui.QMainWindow)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, parent=None)</span>:</span></span><br><span class=\"line\">        super(MainWindow, self).__init__(parent)</span><br><span class=\"line\">        self.ui = Ui_MainWindow()</span><br><span class=\"line\">        self.ui.setupUi(self)</span><br></pre></td></tr></table></figure>\n<p>这个就是最基本的对窗口类的使用。从代码上可以看出，自定义的 <code>MainWindow</code> 类继承了 <code>QtGui.QMainWindow</code> 并且初始化，接着调用 <code>Ui_MainWindow</code> 来生成 ui。一个窗口其实就创建好了。这里超前说一下，以后的功能实现代码基本都写在这个类里面了，所以这个类并不是 ui 类，而是类似于 MVC 中的 Controller，ui 类是 <code>Ui_MainWindow</code>。</p>\n<p>窗口创建之后还要显示出来，注意应用程序跟窗口是两个概念。现在，在 <code>main.py</code> 中写入如下代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PySide <span class=\"keyword\">import</span> QtCore, QtGui</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> app.MainWindow <span class=\"keyword\">import</span> MainWindow</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    app = QtGui.QApplication(sys.argv)</span><br><span class=\"line\">    window = MainWindow()</span><br><span class=\"line\">    window.show()</span><br><span class=\"line\">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>\n<p>写过 python 代码的读者应该很熟悉这个判断的代码了，就是入口嘛。代码生成了一个变量名为 <code>app</code> 的 <code>QApplication</code> 实例，生成了 <code>MainWindow</code> 实例（自己写的），然后最后一句是运行 app 实例，等待其返回的状态码来关闭程序。实际上在程序运行的时候，代码是会卡在 <code>app.exec_()</code> 这里的，一旦执行了什么关闭程序的操作之后才会执行 <code>sys.exit()</code>，所以这里并不是显示窗口之后立刻结束。</p>\n<p>啊，终于可以运行了。</p>\n<p><img src=\"https://i.imgur.com/wpfSWcF.jpg\" alt=\"基本界面运行图\"></p>\n<p>啥都没有，正常，我们还没有加入控件呢。</p>\n<h2 id=\"加入一些控件\"><a href=\"#加入一些控件\" class=\"headerlink\" title=\"加入一些控件\"></a>加入一些控件</h2><p>回到 QtDesigner，从左边的 <code>Widget Box</code> 里面找到到 <code>Label</code>、<code>Line Edit</code>、<code>Push Button</code> 这三个 widget，点击拖动到中间的窗口设计上。</p>\n<p><img src=\"https://i.imgur.com/qUthBdW.jpg\" alt=\"放上了 widget 的设计\"></p>\n<p>从右上角的 <code>Object Inspector</code> 中可以看到刚刚添加的 widget，每一个都有自己唯一的标识，现在来把这些标识改成符合自己风格或者标准的新标识。双击标识或者点选 widget 之后在右下角的 <code>Property Editor</code> 里面的 <code>objectName</code> 进行修改。</p>\n<p><img src=\"https://i.imgur.com/XDrxpTZ.jpg\" alt=\"Object Inspector 修改\"><br><img src=\"https://i.imgur.com/uO1DbF1.jpg\" alt=\"Property Editor 修改\"></p>\n<p>进行以下修改：</p>\n<ul>\n<li>label -&gt; labelTest</li>\n<li>lineEdit -&gt; lineEditTest</li>\n<li>pushButton -&gt; pushButtonTest / buttonTest</li>\n</ul>\n<p>可以看出是偏向 “类型 + 自定义标识” 的命名，这样修改的好处是使用的 IDE 有自动补全功能的话，只要输入例如 <code>pushBu</code>，IDE 就会自动列出所有的 <code>pushButton</code>widget 供选择。至于自定义标识单词首字母大写，则是个人习惯而已。</p>\n<p>保存 &amp; 编译一下，回 IDE 运行查看。（以后不会再提醒保存 &amp; 编译了）</p>\n<p><img src=\"https://i.imgur.com/NZ9ptnS.jpg\" alt=\"带 widget 运行\"></p>\n<p>现在除了输入框可以输入、按钮可以按之外，没什么可以做的事，因为我们还没有指定这些操作会触发哪些事件。接下来就是比较难的部分：使用 Qt 的信号 &amp; 槽机制。</p>\n<h2 id=\"Signals-amp-Slots-信号-amp-槽\"><a href=\"#Signals-amp-Slots-信号-amp-槽\" class=\"headerlink\" title=\"Signals &amp; Slots(信号 &amp; 槽)\"></a>Signals &amp; Slots(信号 &amp; 槽)</h2><p>接下来的步骤可能有点难以理解，我尽量解释。先贴一段从 IBM 上找到的文字。<a href=\"https://www.ibm.com/developerworks/cn/linux/guitoolkit/qt/signal-slot/\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<blockquote>\n<p>所有从 QObject 或其子类 ( 例如 Qwidget) 派生的类都能够包含信号和槽。当对象改变其状态时，信号就由该对象发射 (emit) 出去，这就是对象所要做的全部事情，它不知道另一端是谁在接收这个信号。这就是真正的信息封装，它确保对象被当作一个真正的软件组件来使用。槽用于接收信号，但它们是普通的对象成员函数。一个槽并不知道是否有任何信号与自己相连接。而且，对象并不了解具体的通信机制。</p>\n</blockquote>\n<p>简单来说，只要对象继承于 QObject 或其子类，就可以发射（emit）信号和使用槽来接收信号。对象可以通过 emit signal（发射信号）来告诉外界自己正在做什么或者某种状态，而能够接收到信号的 slot（槽）则会被信号激活而调用（因为其本身是一个对象成员函数）。那么顺理成章地，widget（显然是从 QObject 继承下来的）可以通过 emit signal 来报告状态，然后我们只要用 slot 来接收就行了。</p>\n<p>具体一点，在我们在上面写的简单界面中，输入框的内容改变了，应该能够发射信号告诉外界这件事，而我们只要编写一个 slot 来接收这个信号就可以做爱做的事了。<em> 如果有 GTK 编程经历的读者可能发现跟 GTK 的信号和回调函数有点像。</em></p>\n<p>直接 Google 关键字 <code>QLineEdit</code>（widget 前都会加上一个 Q），从官方文档中可以查出在输入框文字变化的时候会 emit 一个 <code>textEdited</code> 的 signal。</p>\n<p>在 <code>MainWindow.py</code> 里简单实现一下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainWindow</span><span class=\"params\">(QMainWindow)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, parent=None)</span>:</span></span><br><span class=\"line\">        super(MainWindow, self).__init__(parent)</span><br><span class=\"line\">        self.ui = Ui_MainWindow()</span><br><span class=\"line\">        self.ui.setupUi(self)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># initialize ui</span></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initUI</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.ui.lineEditTest.textEdited[str].connect(self.updateLabelText)</span><br><span class=\"line\">        self.ui.pushButtonTest.clicked.connect(self.buttonClick)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buttonClick</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        QMessageBox.about(self, <span class=\"string\">'title'</span>, <span class=\"string\">'content'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateLabelText</span><span class=\"params\">(self, text)</span>:</span></span><br><span class=\"line\">        self.ui.labelTest.setText(text)</span><br></pre></td></tr></table></figure>\n<p>添加了一个 <code>initUI(self)</code> 作为自己对窗口初始化的函数和一个 <code>buttonClick(self)</code> 和 <code>updateLabelText(self, text)</code> 作为 slot。</p>\n<p>慢慢来解释。首先是两个 slot，<code>buttonClick(self)</code> 的作用是弹出一个消息框，标题是“title”，内容是“content”；<code>updateLabelText(self, text)</code> 的作用是将接收到的文字更新到 label 上。</p>\n<p>注意这里调用窗口中的某个叫 xxx 的 widget 是使用 <code>self.ui.xxx</code> 来调用的，简单易懂。</p>\n<p><code>initUI(self)</code> 函数是专门用来自定义的 ui 的（注意只是自己写的并不是什么必要的函数）。函数内第一行和第二行的代码的意思是将 widget 上的一些信号“connect”（连接）到我们自己定义的 slot。通过将 signal 和 slot 连接起来，emit signal 的时候这些 slot 就会被触发，也就是相当于执行了。但是！第一行代码到 <code>textEdited[str]</code> 可能有读者就开始不明白了，为什么比下面的信号 <code>clicked</code> 多了 <code>[str]</code>？在上面就已经说明过 <code>textEdited</code> 是代表文本变化的 signal，于是 signal 里面携带上变化后的文本也是理所当然的事情，但是问题就在这里了：普遍来说，signal 里面是可以包括不同数据 / 多个数据的（或者说，你可以理解成不同类型的参数 / 多个参数），在 C++ 上有类似重载的机制来分辨，但是在 python 里面是没有提供重载（<a href=\"http://www.zhihu.com/question/20053359\" target=\"_blank\" rel=\"noopener\">为什么不提供</a>，来自知乎)，如何分辨？我猜测 PySide 是使用了 map 来解决的，实际上在系列之后的文章中也会使用到一个叫 <code>QSignalMapper</code> 的类来实现从多个无参数的 signal 转换成有参数的 signal。</p>\n<p>那说了那么多，那这里的 <code>[str]</code> 究竟是怎么回事？我认为，这里可以理解为假定这个 signal 有可能携带一个数据，但这个数据可以有几种类型，用 <code>[str]</code> 就是选定了其中带文本类型的数据的 signal 来进行跟 slot 的连接。就像取数组里面的一个元素，不是吗:)</p>\n<p>而 <code>clicked</code> 就容易理解了，就是点击了按钮呗，无需要传参，直接连接到 <code>buttonClick</code>。</p>\n<p>下面来运行一下，记得运行的文件是 <code>main.py</code>。gif 动态图展示。</p>\n<p><img src=\"https://i.imgur.com/wqsveLg.gif\" alt=\"连接了槽的运行\"></p>\n<h2 id=\"小记\"><a href=\"#小记\" class=\"headerlink\" title=\"小记\"></a>小记</h2><p>这篇博文实际涉及的东西不多，但是就是后面开发的基础，特别是 signal&amp;slot 的概念，有不清楚的，尽量去问 Google。本系列的重点也不在这些概念上，以后的博文就不再作解释了。</p>\n<p>最后来总结一下重点：</p>\n<ul>\n<li>工程结构</li>\n<li>QtDesigner 的基础使用</li>\n<li>ui 文件编译</li>\n<li>应用运行的最小代码和 widget（包括窗体）的调用</li>\n<li>Signals &amp; Slots</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"至少出来一个窗口\"><a href=\"#至少出来一个窗口\" class=\"headerlink\" title=\"至少出来一个窗口\"></a>至少出来一个窗口</h2><p>既然是 GUI，那么最起码能运行并显示一个窗口出来。</p>\n<p>首先在 python 的工程里面建好工程结构。</p>\n<p><img src=\"https://i.imgur.com/97PENH0.jpg\" alt=\"工程结构\"></p>\n<p>结构并非必要，只是个人习惯这样建而已。下面来解说一下。</p>\n<ul>\n<li><code>main.py</code>，整个应用的入口</li>\n<li><code>app</code> 包，用来放应用的文件</li>\n<li><code>app.view</code> 包，用来放应用 ui 相关的文件</li>\n</ul>\n<p>打开 QtDesigner，会有一个自动弹出框，直接选择其中的“Main Window”，然后点 create，一个窗口就出来啦。QtDesigner 的主界面暂时没什么好说的，有经历过 GUI 设计的读者估计也很熟悉。</p>\n<p><img src=\"https://i.imgur.com/LpPm5Sz.png\" alt=\"新建 ui\"></p>\n<p>现在我们先保存，文件名为 <code>ui_mainwindow.ui</code>，保存到 <code>app.view</code> 下。</p>\n<p>接下来是比较重要的一步，也是之后经常用到的步骤：将. ui 文件编译成. py 文件。</p>\n<p>执行以下命令。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyside-uic mainwindow.ui -o mainwindow.py</span><br></pre></td></tr></table></figure></p>\n<p>非常好理解，使用 <code>pyside-uic</code> 将 <code>ui_mainwindow.ui</code> 编译，输出为 <code>ui_mianwindow.py</code>。</p>\n<p>以后每一次更改了. ui 文件，都要这样执行一下取得. py 文件。我自己为了方便，写了一个批处理文件，要编译. ui 文件的时候就可以直接拖到这个批处理文件上自动编译了。代码如下，保存为 <code>ui2py.bat</code>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyside-uic %1 -o %~n1.py</span><br></pre></td></tr></table></figure></p>\n<p>好的，现在我们已经拥有这个窗口的类的基本代码了。好奇的你可能想知道生成了什么。</p>\n<p><img src=\"https://i.imgur.com/hbBWmnm.jpg\" alt=\"基本界面代码\"></p>\n<p>哇，一堆代码。都是编译生成的，无需做修改，只是要留意类名 <code>Ui_MainWindow</code>，之后要使用这个类。</p>\n<p>OK 下面来调用这个 <code>Ui_MainWindow</code> 类。在 app 包下新建 <code>MainWindow.py</code>，写入以下代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> PySide <span class=\"keyword\">import</span> QtCore, QtGui</span><br><span class=\"line\"><span class=\"keyword\">from</span> view.ui_mainwindow <span class=\"keyword\">import</span> Ui_MainWindow</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainWindow</span><span class=\"params\">(QtGui.QMainWindow)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, parent=None)</span>:</span></span><br><span class=\"line\">        super(MainWindow, self).__init__(parent)</span><br><span class=\"line\">        self.ui = Ui_MainWindow()</span><br><span class=\"line\">        self.ui.setupUi(self)</span><br></pre></td></tr></table></figure>\n<p>这个就是最基本的对窗口类的使用。从代码上可以看出，自定义的 <code>MainWindow</code> 类继承了 <code>QtGui.QMainWindow</code> 并且初始化，接着调用 <code>Ui_MainWindow</code> 来生成 ui。一个窗口其实就创建好了。这里超前说一下，以后的功能实现代码基本都写在这个类里面了，所以这个类并不是 ui 类，而是类似于 MVC 中的 Controller，ui 类是 <code>Ui_MainWindow</code>。</p>\n<p>窗口创建之后还要显示出来，注意应用程序跟窗口是两个概念。现在，在 <code>main.py</code> 中写入如下代码。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PySide <span class=\"keyword\">import</span> QtCore, QtGui</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> app.MainWindow <span class=\"keyword\">import</span> MainWindow</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    app = QtGui.QApplication(sys.argv)</span><br><span class=\"line\">    window = MainWindow()</span><br><span class=\"line\">    window.show()</span><br><span class=\"line\">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>\n<p>写过 python 代码的读者应该很熟悉这个判断的代码了，就是入口嘛。代码生成了一个变量名为 <code>app</code> 的 <code>QApplication</code> 实例，生成了 <code>MainWindow</code> 实例（自己写的），然后最后一句是运行 app 实例，等待其返回的状态码来关闭程序。实际上在程序运行的时候，代码是会卡在 <code>app.exec_()</code> 这里的，一旦执行了什么关闭程序的操作之后才会执行 <code>sys.exit()</code>，所以这里并不是显示窗口之后立刻结束。</p>\n<p>啊，终于可以运行了。</p>\n<p><img src=\"https://i.imgur.com/wpfSWcF.jpg\" alt=\"基本界面运行图\"></p>\n<p>啥都没有，正常，我们还没有加入控件呢。</p>\n<h2 id=\"加入一些控件\"><a href=\"#加入一些控件\" class=\"headerlink\" title=\"加入一些控件\"></a>加入一些控件</h2><p>回到 QtDesigner，从左边的 <code>Widget Box</code> 里面找到到 <code>Label</code>、<code>Line Edit</code>、<code>Push Button</code> 这三个 widget，点击拖动到中间的窗口设计上。</p>\n<p><img src=\"https://i.imgur.com/qUthBdW.jpg\" alt=\"放上了 widget 的设计\"></p>\n<p>从右上角的 <code>Object Inspector</code> 中可以看到刚刚添加的 widget，每一个都有自己唯一的标识，现在来把这些标识改成符合自己风格或者标准的新标识。双击标识或者点选 widget 之后在右下角的 <code>Property Editor</code> 里面的 <code>objectName</code> 进行修改。</p>\n<p><img src=\"https://i.imgur.com/XDrxpTZ.jpg\" alt=\"Object Inspector 修改\"><br><img src=\"https://i.imgur.com/uO1DbF1.jpg\" alt=\"Property Editor 修改\"></p>\n<p>进行以下修改：</p>\n<ul>\n<li>label -&gt; labelTest</li>\n<li>lineEdit -&gt; lineEditTest</li>\n<li>pushButton -&gt; pushButtonTest / buttonTest</li>\n</ul>\n<p>可以看出是偏向 “类型 + 自定义标识” 的命名，这样修改的好处是使用的 IDE 有自动补全功能的话，只要输入例如 <code>pushBu</code>，IDE 就会自动列出所有的 <code>pushButton</code>widget 供选择。至于自定义标识单词首字母大写，则是个人习惯而已。</p>\n<p>保存 &amp; 编译一下，回 IDE 运行查看。（以后不会再提醒保存 &amp; 编译了）</p>\n<p><img src=\"https://i.imgur.com/NZ9ptnS.jpg\" alt=\"带 widget 运行\"></p>\n<p>现在除了输入框可以输入、按钮可以按之外，没什么可以做的事，因为我们还没有指定这些操作会触发哪些事件。接下来就是比较难的部分：使用 Qt 的信号 &amp; 槽机制。</p>\n<h2 id=\"Signals-amp-Slots-信号-amp-槽\"><a href=\"#Signals-amp-Slots-信号-amp-槽\" class=\"headerlink\" title=\"Signals &amp; Slots(信号 &amp; 槽)\"></a>Signals &amp; Slots(信号 &amp; 槽)</h2><p>接下来的步骤可能有点难以理解，我尽量解释。先贴一段从 IBM 上找到的文字。<a href=\"https://www.ibm.com/developerworks/cn/linux/guitoolkit/qt/signal-slot/\" target=\"_blank\" rel=\"noopener\">原文</a></p>\n<blockquote>\n<p>所有从 QObject 或其子类 ( 例如 Qwidget) 派生的类都能够包含信号和槽。当对象改变其状态时，信号就由该对象发射 (emit) 出去，这就是对象所要做的全部事情，它不知道另一端是谁在接收这个信号。这就是真正的信息封装，它确保对象被当作一个真正的软件组件来使用。槽用于接收信号，但它们是普通的对象成员函数。一个槽并不知道是否有任何信号与自己相连接。而且，对象并不了解具体的通信机制。</p>\n</blockquote>\n<p>简单来说，只要对象继承于 QObject 或其子类，就可以发射（emit）信号和使用槽来接收信号。对象可以通过 emit signal（发射信号）来告诉外界自己正在做什么或者某种状态，而能够接收到信号的 slot（槽）则会被信号激活而调用（因为其本身是一个对象成员函数）。那么顺理成章地，widget（显然是从 QObject 继承下来的）可以通过 emit signal 来报告状态，然后我们只要用 slot 来接收就行了。</p>\n<p>具体一点，在我们在上面写的简单界面中，输入框的内容改变了，应该能够发射信号告诉外界这件事，而我们只要编写一个 slot 来接收这个信号就可以做爱做的事了。<em> 如果有 GTK 编程经历的读者可能发现跟 GTK 的信号和回调函数有点像。</em></p>\n<p>直接 Google 关键字 <code>QLineEdit</code>（widget 前都会加上一个 Q），从官方文档中可以查出在输入框文字变化的时候会 emit 一个 <code>textEdited</code> 的 signal。</p>\n<p>在 <code>MainWindow.py</code> 里简单实现一下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainWindow</span><span class=\"params\">(QMainWindow)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, parent=None)</span>:</span></span><br><span class=\"line\">        super(MainWindow, self).__init__(parent)</span><br><span class=\"line\">        self.ui = Ui_MainWindow()</span><br><span class=\"line\">        self.ui.setupUi(self)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># initialize ui</span></span><br><span class=\"line\">        self.initUI()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">initUI</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.ui.lineEditTest.textEdited[str].connect(self.updateLabelText)</span><br><span class=\"line\">        self.ui.pushButtonTest.clicked.connect(self.buttonClick)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buttonClick</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        QMessageBox.about(self, <span class=\"string\">'title'</span>, <span class=\"string\">'content'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updateLabelText</span><span class=\"params\">(self, text)</span>:</span></span><br><span class=\"line\">        self.ui.labelTest.setText(text)</span><br></pre></td></tr></table></figure>\n<p>添加了一个 <code>initUI(self)</code> 作为自己对窗口初始化的函数和一个 <code>buttonClick(self)</code> 和 <code>updateLabelText(self, text)</code> 作为 slot。</p>\n<p>慢慢来解释。首先是两个 slot，<code>buttonClick(self)</code> 的作用是弹出一个消息框，标题是“title”，内容是“content”；<code>updateLabelText(self, text)</code> 的作用是将接收到的文字更新到 label 上。</p>\n<p>注意这里调用窗口中的某个叫 xxx 的 widget 是使用 <code>self.ui.xxx</code> 来调用的，简单易懂。</p>\n<p><code>initUI(self)</code> 函数是专门用来自定义的 ui 的（注意只是自己写的并不是什么必要的函数）。函数内第一行和第二行的代码的意思是将 widget 上的一些信号“connect”（连接）到我们自己定义的 slot。通过将 signal 和 slot 连接起来，emit signal 的时候这些 slot 就会被触发，也就是相当于执行了。但是！第一行代码到 <code>textEdited[str]</code> 可能有读者就开始不明白了，为什么比下面的信号 <code>clicked</code> 多了 <code>[str]</code>？在上面就已经说明过 <code>textEdited</code> 是代表文本变化的 signal，于是 signal 里面携带上变化后的文本也是理所当然的事情，但是问题就在这里了：普遍来说，signal 里面是可以包括不同数据 / 多个数据的（或者说，你可以理解成不同类型的参数 / 多个参数），在 C++ 上有类似重载的机制来分辨，但是在 python 里面是没有提供重载（<a href=\"http://www.zhihu.com/question/20053359\" target=\"_blank\" rel=\"noopener\">为什么不提供</a>，来自知乎)，如何分辨？我猜测 PySide 是使用了 map 来解决的，实际上在系列之后的文章中也会使用到一个叫 <code>QSignalMapper</code> 的类来实现从多个无参数的 signal 转换成有参数的 signal。</p>\n<p>那说了那么多，那这里的 <code>[str]</code> 究竟是怎么回事？我认为，这里可以理解为假定这个 signal 有可能携带一个数据，但这个数据可以有几种类型，用 <code>[str]</code> 就是选定了其中带文本类型的数据的 signal 来进行跟 slot 的连接。就像取数组里面的一个元素，不是吗:)</p>\n<p>而 <code>clicked</code> 就容易理解了，就是点击了按钮呗，无需要传参，直接连接到 <code>buttonClick</code>。</p>\n<p>下面来运行一下，记得运行的文件是 <code>main.py</code>。gif 动态图展示。</p>\n<p><img src=\"https://i.imgur.com/wqsveLg.gif\" alt=\"连接了槽的运行\"></p>\n<h2 id=\"小记\"><a href=\"#小记\" class=\"headerlink\" title=\"小记\"></a>小记</h2><p>这篇博文实际涉及的东西不多，但是就是后面开发的基础，特别是 signal&amp;slot 的概念，有不清楚的，尽量去问 Google。本系列的重点也不在这些概念上，以后的博文就不再作解释了。</p>\n<p>最后来总结一下重点：</p>\n<ul>\n<li>工程结构</li>\n<li>QtDesigner 的基础使用</li>\n<li>ui 文件编译</li>\n<li>应用运行的最小代码和 widget（包括窗体）的调用</li>\n<li>Signals &amp; Slots</li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://i.imgur.com/97PENH0.jpg","popularPost_tmp_gaData":{"updated":"Sun Mar 01 2015 12:52:52 GMT+0800 (China Standard Time)","title":"python × Qt 应用开发 · 1 -- 基本界面","path":"python-with-qt-application-development-1-basic-view/","eyeCatchImage":"https://i.imgur.com/97PENH0.jpg","excerpt":null,"date":"2014-03-13T15:54:43.000Z","pv":0,"totalPV":0,"categories":"技术 > 编程语言 > python > 软件","tags":["python","Qt","software"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3705},{"title":"python × Qt 应用开发 · 3 -- MVC 中 model 的基本实现","id":"14","updated":"2015-03-02T09:00:36.000Z","date":"2014-03-22T08:14:29.000Z","_content":"\n上一篇博文中，界面是设计好了，也能运行了，但是这个应用还只是个空壳子，widget 里什么都没有。这篇博文就来充实其中一个的 widget，左边的文件夹列表。\n\n## MVC 大法好\n有过一些开发经验的读者肯定会听说过 MVC，这里不详细解释 MVC 了。Qt 中也有提供这样的模式，而且既有提供已经整合好的 widget，也有提供单单 view 而自己需要编写相应的 model 和 controller。后一种显然要比前一种麻烦，但是使用上可能后一种反而更多。为什么？因为在实际开发中，涉及到数据的显示很多时候都要附带上数据的操作，那些整合好的 widget——比如 `List Widget` 和 `Tree Widget` 和 `Table Widget`——能做到的基本只是将数据都转化为字符串来输出，一旦涉及到数据的修改的话…… 也不是不可以做到，但是编写出来的代码既繁琐又不通用。\n\n从 Qt 的官方文档来看，这些 widget 的函数大多数都是操作 view 这个层面的，函数名字里面大多包含 `item`，比如插入数据核心步骤是使用 `QTableWidgetItem(data)` 生成一个包含单个数据——data 的 item 然后用 `setItem (row, column, item)` 将这个 item 设置在特定位置，这里的 item 其实相当于一个单元格了。但注意修改了这个 item 是并不能保证影响到原先的 data 的，而且这样单独地设置 item 的数据数据的操作，稍加思考便能明白，已经丢失了原来数据——也就是 data——跟其他可能存在的 data 的关系了。更进一步，如果修改了这个 item 的数据，要怎么找回原来的 data 也是个大问题。\n\n根据之前博文的要求，如果编写文件夹列表这个 widget，我们考虑用 `Tree View` 然后自己编写 model 会比较好，因为文件夹本身就天然具备树的特征。另外文件夹还允许重名，我们不能只根据文件夹名来标识，而是需要另外的唯一标识，这就暗示了一个树节点所包含的数据是多个的了，最起码包含了节点的名称和节点的标识，单单 `QTableWidgetItem` 是比较难满足要求的。\n\n## 实现一个简单的 model\n上一篇博文全程在用 QtDesigner，这次就转到 python 代码上了。在 app 包下新建 model 包，再在里面新建 `treeModel.py`。\n\n接下来…… 怎么写啊……\n\n还是先来一些前置知识吧。\n\n### Qt 中 model 的基本概念\n\n![基本概念图](http://qt-project.org/doc/qt-4.8/images/modelview-models.png)\n\n上图来自 Qt 官方文档，简单易懂。可以看到，三个基本的 model——List Model、Table Model 和 Tree Model——都有着类似的结构：有一个根 `Root item`，有 row（行）的概念，有列 column（列）的概念。\n\n相似的结构暗示了 view 和 model 应该是可以自由配对的，因为可以基于某些规定的接口来结合在一起，而且这些接口估计跟根节点 `Root item` 和行列的属性（长度是最显著的特征了）有关。`List Model` 就是一个一维数组，以单下标确定位置；`Table Model` 是一个而为数组，以双下标确定位置；`Tree Model` 就是一棵树，以父节点和行数确定位置。或许你会觉得这跟普通的数据解结构没什么分别，但是注意了，途中的一个节点（就是一个正方格）是没有规定成什么数据类型，也就是不局限于是数字或者字符这样的基本类型，也可以是更复杂的对象甚至对象的数据结构形式。这些一个个的节点（正方格）只是在模型的层面上表现一致而已。\n\n另外似乎除了 `Table Model` 以外并不能看出 column 的作用，实际上 `List Model` 和 `Tree Model` 也有 column 的概念，只不过基本上在模型层面上是只有一列。这个是什么意思呢？也就是说，对于 `List Model` 而言，最关心的特征是 row 也就是行数，但读取数据时非要加上 column 来定位的话应该在节点（正方格）内的数据上体现出数组来，对比 `Table Model` 则是在节点（正方格）上就体现出需要 row 和 column 同时定位。对于 `Tree Model` 而言也是同样。\n\n文字太多不要觉得麻烦，当你先阅读了大概的描述，潜意识有了一些模糊的概念之后，立刻去写代码，理解起来比一边写一边看容易得多。\n\n### 上代码\n我们来先用代码描述这些 “节点”（正方格），以 `Tree Model` 为例。\n\n```python\nclass GenericNode(object):\n    def __init__(self, data, parent=None):\n        self._data = data\n        self._parent = parent\n        self._children = []\n\n        if parent is not None:\n            parent.appendChild(self)\n```\n\n先写一个一般性的节点类 `GenericNode`，一个节点包含了三个必要的域：父节点、子节点列表和数据。一个节点在被创造出来的时候就可以决定其父节点和数据，而父节点是可以为空的（根节点或者孤立节点），若指定的父节点不为空则需要要求父节点将新创造的节点加入到它自身的子节点列表中。注意此时 appendNode 函数我们还没有实现。\n\n然后立刻就是 appendNode 函数。\n\n```python\n    def appendChild(self, child):\n        self._children.append(child)\n        child._parent = self\n```\n\n非常简单，将节点加入自身的子节点列表中。这里考虑到加入的子节点有可能并没有指定过父节点，所以追加了一句 `child._parent = self`。\n\n接下来是数据的访问。\n\n```python\n    def data(self):\n        return self._data\n\n    def setData(self, value):\n        self._data = value\n```\n\ngetter、setter，没什么值得解释。\n\n再来是对查询节点关系的回应。\n\n```python\n    def parent(self):\n        return self._parent\n\n    def child(self, row):\n        return self._children[row]\n\n    def childCount(self):\n        return len(self._children)\n\n    def row(self):\n        if self._parent:\n            return self._parent._children.index(self)\n```\n\n都是非常简单的函数。`parent(self)` 和 `child(self, row)` 分别是返回父节点和和指定的子节点（对应着上面的图可以明显看出应该通过数组方式访问子节点）。`childCount(self)` 是返回子节点长度以便能遍历子节点，`row(self)` 则是查询本节点在兄弟节点中的位置。\n\n最后加入一个属性来跟其他类型的节点区别一下，因为其他节点将会继承自这个类。\n\n```python\n    @property\n    def type(self):\n        \"\"\"custom function\"\"\"\n        return \"generic\"\n```\n\n接着是特殊节点。\n\n```python\nclass NotebookNode(GenericNode):\n    @property\n    def type(self):\n        \"\"\"OVERRIDE\"\"\"\n        return \"notebook\"\n\nclass ChapterNode(GenericNode):\n    @property\n    def type(self):\n        \"\"\"OVERRIDE\"\"\"\n        return \"chapter\"\n```\n\n继承的同时重写了 `type` 属性来区分不同的节点，暂时不去写更详细的函数。\n\n节点部分就基本写好了，接下来是模型结构部分。基本框架的代码如下。\n\n```python\nclass TreeModel(QtCore.QAbstractItemModel):\n    def __init__(self, root=None, parent=None):\n        super(TreeModel, self).__init__(parent)\n\n        self._rootNode = GenericNode(None) if root is None else root\n\n    def rowCount(self, parent):\n        \"\"\"IMPLEMENT\"\"\"\n        if not parent.isValid():\n            parentNode = self._rootNode\n        else:\n            parentNode = parent.internalPointer()\n\n        return parentNode.childCount()\n\n    def columnCount(self, parent):\n        \"\"\"IMPLEMENT\"\"\"\n        return 1\n\n    def index(self, row, column, parent):\n        \"\"\"IMPLEMENT\"\"\"\n        if not parent.isValid():\n            parentNode = self._rootNode\n        else:\n            parentNode = parent.internalPointer()\n\n        childNode = parentNode.child(row)\n\n        if childNode:\n            return self.createIndex(row, column, childNode)\n        else:\n            return QtCore.QModelIndex()\n\n    def flags(self, index):\n        \"\"\"IMPLEMENT\"\"\"\n        if not index.isValid():\n            return QtCore.Qt.NoItemFlags\n\n        return QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsEditable\n\n    def headerData(self, section, orientation, role=None):\n        \"\"\"IMPLEMENT\"\"\"\n        pass\n\n    def parent(self, index):\n        \"\"\"IMPLEMENT\"\"\"\n        if not index.isValid():\n            return QtCore.QModelIndex()\n\n        node = index.internalPointer()\n        parentNode = node.parent()\n\n        if parentNode == self._rootNode:\n            return QtCore.QModelIndex()\n\n        return self.createIndex(parentNode.row(), 0, parentNode)\n\n    def data(self, index, role):\n        \"\"\"IMPLEMENT\"\"\"\n        pass\n```\n\nDon't panic，待我慢慢解释。\n根据官方文档，继承 `QtCore.QAbstractItemModel` 和 init 函数没什么好说的，注意到其他函数里面，都注释有 `IMPLEMENT` 字眼，已经明显地说明这些函数需要重写实现的了。\n\n> rowCount(self, parent)\n\n返回本层节点的个数。\n\n> columnCount(self, parent)\n\n返回节点中数据的个数，直接返回 1 是因为数据显然只有 1 个。\n\n> index(self, row, column, parent)\n\n这个函数实现 view 对 model 的访问，`parent` 是一个从 view 传过来的 `QModelIndex` 对象，通过参数 `row` 和 `column` 来确定访问其某一个子节点，`isValid()` 是其用以检测此对象是否有效的函数，取得了子节点之后需要将其包装成 `QModelIndex` 对象返回，也就是需要语句 `self.createIndex(row, column, childNode)` 的原因。由于包装的关系 `parent` 也需要使用 `internalPointer()` 得到真正的节点对象（在这里就是 GenericNode 或其子类）才能继续操作。\n\n个人理解就这就相当于在 view 和 model 直接加入了一层数据访问实现层，官方文档称之为 * index-based system*。使用的时候不用管那么多，记得中间需要这样转换就是了。当然你要研究的话可以去看源码，但是显然文章的重点并不在这里。\n\n> flags(self, index)\n\n概括来说，这个函数可以设定节点在 view 中的表现方式。从它需要返回的常量的名字可以看得出来，节点是有多种组合方式的，这里的代码表示了节点是 “可选择的”（Selectable）、“可交互的”（Enabled）和 “可编辑的”（Editable）。\n\n[常量列表](http://qt-project.org/doc/qt-4.8/qt.html#ItemFlag-enum)：\n\n* QtCore.Qt.NoItemFlags\n* QtCore.Qt.ItemIsSelectable\n* QtCore.Qt.ItemIsEditable\n* QtCore.Qt.ItemIsDragEnabled\n* QtCore.Qt.ItemIsDropEnabled\n* QtCore.Qt.ItemIsUserCheckable\n* QtCore.Qt.ItemIsEnabled\n* QtCore.Qt.ItemIsTristate\n\n多种属性的组合可以通过或运算 `|` 将其组合在一起，比如代码中的 `QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled`。\n\n> headerData(self, section, orientation, role)\n\n是对于数据段的标题显示的设置，我们这里只有一个数据，又不需要显示标题，暂时不管。\n\n> parent(self, index)\n\n根据官网所说，这个函数直接用官网的代码保证不会在 view 查询节点的时候得到根节点就可以了，所以这里的代码原封不动使用官网提供的例子。\n\n> data(self, index, role)\n\n需要重点讲解的函数。顾名思义就是对数据的访问，参数 `index` 毫无疑问就是一个 `QModelIndex`，而 `role` 是什么呢？`role` 可以理解为 “角色”，它的值表明了 view 对于数据的要求，比如 `QtCore.Qt.DisplayRole` 说明 view 要求 model 提供一个可以供显示的字符串，会作为 view 中节点的名字；再比如 `QtCore.Qt.DecorationRole` 说明 view 要求提供一个图标作为节点中的装饰，等。我认为这个是 model 的精华所在，通过这样不同的角色的区分，同一个节点可以为 view 提供不同的数据类型，分别用作操作和显示等。比起 `Tree Widget`，使用这种方式无疑更具灵活性。更厉害的是，如果你觉得常量提供的角色不够，可以使用 `QtCore.Qt.UserRole` 和 `QtCore.Qt.UserRole + 1`、`QtCore.Qt.UserRole + 2` 这样来扩充。因为这些常量本质上只是数字而已。\n\n一部分常量列表：\n\n* QtCore.Qt.DisplayRole\n* QtCore.Qt.DecorationRole\n* QtCore.Qt.EditRole\n* QtCore.Qt.ToolTipRole\n* QtCore.Qt.StatusTipRole\n* QtCore.Qt.WhatsThisRole\n* QtCore.Qt.SizeHintRole\n* ....\n\n[更详细的列表](http://qt-project.org/doc/qt-4.8/qt.html#ItemDataRole-enum)\n\n现在来实现这个函数。\n\n```python\n    def data(self, index, role):\n        \"\"\"IMPLEMENT\"\"\"\n        if not index.isValid():\n            return None\n\n        node = index.internalPointer()\n\n        if role == QtCore.Qt.DisplayRole:\n            return node.data()\n        elif role == QtCore.Qt.DecorationRole:\n            pass\n        elif role == QtCore.Qt.ToolTipRole:\n            return node.type\n```\n\n要做的事情就是先判断一下 `index` 是否有效，然后就判断 `role` 的值，返回不同的数据。这里是名字显示数据 data，而悬浮提示则是节点的类型。\n\n至此 model 基本实现了，最后是使用。\n\n返回 `MainWindow.py`，在 `MainWindow` 类中加入：\n\n```python\n    def buildCatalog(self):\n        root = treeModel.GenericNode(\"root\")\n\n        notebook1 = treeModel.NotebookNode(\"NotebookNode1\", root)\n        chapter2 = treeModel.ChapterNode(\"ChapterNode2\", folder1)\n\n        notebook3 = treeModel.NotebookNode(\"NotebookNode3\", root)\n        chapter4 = treeModel.ChapterNode(\"ChapterNode4\", notebook3)\n\n        self._folderModel = treeModel.CatalogTreeModel(root)\n\n        self.ui.treeViewCatalog.setModel(self._folderModel)\n        self.ui.treeViewCatalog.expandAll()\n```\n\n做的事情很简单，使用之前编写的代码建一棵树，结构是：\n\nnotebook1\n┗chapter2<br>\nnotebook3\n┗chapter4\n\n把根节点交给 model，使用 `setModel` 函数将 model 绑定到 view 上。为了好看把树全部展开。\n\n最后在 `__init__` 函数中调用这个函数，运行。\n\n![最终运行图](https://i.imgur.com/PICCd6F.png)\n\n## 小结\n终于结束了本博文，使用 MVC 模式的代码也能工作了。回想文章开头的 “MVC 大法好”，这句话的可是有前提的，就是能理解好概念和驾驭到代码。","source":"_posts/python-with-Qt-application-development/python-×-Qt应用开发-·-3-MVC中model的基本实现.md","raw":"---\ntitle: python × Qt 应用开发 · 3 -- MVC 中 model 的基本实现\ncategories:\n  - [技术, 软件]\n  - [编程语言, python]\ntags: [python, Qt, software]\npermalink: python-with-qt-application-development-3-basic-model-in-mvc\nid: 14\nupdated: '2015-03-02 17:00:36'\ndate: 2014-03-22 16:14:29\n---\n\n上一篇博文中，界面是设计好了，也能运行了，但是这个应用还只是个空壳子，widget 里什么都没有。这篇博文就来充实其中一个的 widget，左边的文件夹列表。\n\n## MVC 大法好\n有过一些开发经验的读者肯定会听说过 MVC，这里不详细解释 MVC 了。Qt 中也有提供这样的模式，而且既有提供已经整合好的 widget，也有提供单单 view 而自己需要编写相应的 model 和 controller。后一种显然要比前一种麻烦，但是使用上可能后一种反而更多。为什么？因为在实际开发中，涉及到数据的显示很多时候都要附带上数据的操作，那些整合好的 widget——比如 `List Widget` 和 `Tree Widget` 和 `Table Widget`——能做到的基本只是将数据都转化为字符串来输出，一旦涉及到数据的修改的话…… 也不是不可以做到，但是编写出来的代码既繁琐又不通用。\n\n从 Qt 的官方文档来看，这些 widget 的函数大多数都是操作 view 这个层面的，函数名字里面大多包含 `item`，比如插入数据核心步骤是使用 `QTableWidgetItem(data)` 生成一个包含单个数据——data 的 item 然后用 `setItem (row, column, item)` 将这个 item 设置在特定位置，这里的 item 其实相当于一个单元格了。但注意修改了这个 item 是并不能保证影响到原先的 data 的，而且这样单独地设置 item 的数据数据的操作，稍加思考便能明白，已经丢失了原来数据——也就是 data——跟其他可能存在的 data 的关系了。更进一步，如果修改了这个 item 的数据，要怎么找回原来的 data 也是个大问题。\n\n根据之前博文的要求，如果编写文件夹列表这个 widget，我们考虑用 `Tree View` 然后自己编写 model 会比较好，因为文件夹本身就天然具备树的特征。另外文件夹还允许重名，我们不能只根据文件夹名来标识，而是需要另外的唯一标识，这就暗示了一个树节点所包含的数据是多个的了，最起码包含了节点的名称和节点的标识，单单 `QTableWidgetItem` 是比较难满足要求的。\n\n## 实现一个简单的 model\n上一篇博文全程在用 QtDesigner，这次就转到 python 代码上了。在 app 包下新建 model 包，再在里面新建 `treeModel.py`。\n\n接下来…… 怎么写啊……\n\n还是先来一些前置知识吧。\n\n### Qt 中 model 的基本概念\n\n![基本概念图](http://qt-project.org/doc/qt-4.8/images/modelview-models.png)\n\n上图来自 Qt 官方文档，简单易懂。可以看到，三个基本的 model——List Model、Table Model 和 Tree Model——都有着类似的结构：有一个根 `Root item`，有 row（行）的概念，有列 column（列）的概念。\n\n相似的结构暗示了 view 和 model 应该是可以自由配对的，因为可以基于某些规定的接口来结合在一起，而且这些接口估计跟根节点 `Root item` 和行列的属性（长度是最显著的特征了）有关。`List Model` 就是一个一维数组，以单下标确定位置；`Table Model` 是一个而为数组，以双下标确定位置；`Tree Model` 就是一棵树，以父节点和行数确定位置。或许你会觉得这跟普通的数据解结构没什么分别，但是注意了，途中的一个节点（就是一个正方格）是没有规定成什么数据类型，也就是不局限于是数字或者字符这样的基本类型，也可以是更复杂的对象甚至对象的数据结构形式。这些一个个的节点（正方格）只是在模型的层面上表现一致而已。\n\n另外似乎除了 `Table Model` 以外并不能看出 column 的作用，实际上 `List Model` 和 `Tree Model` 也有 column 的概念，只不过基本上在模型层面上是只有一列。这个是什么意思呢？也就是说，对于 `List Model` 而言，最关心的特征是 row 也就是行数，但读取数据时非要加上 column 来定位的话应该在节点（正方格）内的数据上体现出数组来，对比 `Table Model` 则是在节点（正方格）上就体现出需要 row 和 column 同时定位。对于 `Tree Model` 而言也是同样。\n\n文字太多不要觉得麻烦，当你先阅读了大概的描述，潜意识有了一些模糊的概念之后，立刻去写代码，理解起来比一边写一边看容易得多。\n\n### 上代码\n我们来先用代码描述这些 “节点”（正方格），以 `Tree Model` 为例。\n\n```python\nclass GenericNode(object):\n    def __init__(self, data, parent=None):\n        self._data = data\n        self._parent = parent\n        self._children = []\n\n        if parent is not None:\n            parent.appendChild(self)\n```\n\n先写一个一般性的节点类 `GenericNode`，一个节点包含了三个必要的域：父节点、子节点列表和数据。一个节点在被创造出来的时候就可以决定其父节点和数据，而父节点是可以为空的（根节点或者孤立节点），若指定的父节点不为空则需要要求父节点将新创造的节点加入到它自身的子节点列表中。注意此时 appendNode 函数我们还没有实现。\n\n然后立刻就是 appendNode 函数。\n\n```python\n    def appendChild(self, child):\n        self._children.append(child)\n        child._parent = self\n```\n\n非常简单，将节点加入自身的子节点列表中。这里考虑到加入的子节点有可能并没有指定过父节点，所以追加了一句 `child._parent = self`。\n\n接下来是数据的访问。\n\n```python\n    def data(self):\n        return self._data\n\n    def setData(self, value):\n        self._data = value\n```\n\ngetter、setter，没什么值得解释。\n\n再来是对查询节点关系的回应。\n\n```python\n    def parent(self):\n        return self._parent\n\n    def child(self, row):\n        return self._children[row]\n\n    def childCount(self):\n        return len(self._children)\n\n    def row(self):\n        if self._parent:\n            return self._parent._children.index(self)\n```\n\n都是非常简单的函数。`parent(self)` 和 `child(self, row)` 分别是返回父节点和和指定的子节点（对应着上面的图可以明显看出应该通过数组方式访问子节点）。`childCount(self)` 是返回子节点长度以便能遍历子节点，`row(self)` 则是查询本节点在兄弟节点中的位置。\n\n最后加入一个属性来跟其他类型的节点区别一下，因为其他节点将会继承自这个类。\n\n```python\n    @property\n    def type(self):\n        \"\"\"custom function\"\"\"\n        return \"generic\"\n```\n\n接着是特殊节点。\n\n```python\nclass NotebookNode(GenericNode):\n    @property\n    def type(self):\n        \"\"\"OVERRIDE\"\"\"\n        return \"notebook\"\n\nclass ChapterNode(GenericNode):\n    @property\n    def type(self):\n        \"\"\"OVERRIDE\"\"\"\n        return \"chapter\"\n```\n\n继承的同时重写了 `type` 属性来区分不同的节点，暂时不去写更详细的函数。\n\n节点部分就基本写好了，接下来是模型结构部分。基本框架的代码如下。\n\n```python\nclass TreeModel(QtCore.QAbstractItemModel):\n    def __init__(self, root=None, parent=None):\n        super(TreeModel, self).__init__(parent)\n\n        self._rootNode = GenericNode(None) if root is None else root\n\n    def rowCount(self, parent):\n        \"\"\"IMPLEMENT\"\"\"\n        if not parent.isValid():\n            parentNode = self._rootNode\n        else:\n            parentNode = parent.internalPointer()\n\n        return parentNode.childCount()\n\n    def columnCount(self, parent):\n        \"\"\"IMPLEMENT\"\"\"\n        return 1\n\n    def index(self, row, column, parent):\n        \"\"\"IMPLEMENT\"\"\"\n        if not parent.isValid():\n            parentNode = self._rootNode\n        else:\n            parentNode = parent.internalPointer()\n\n        childNode = parentNode.child(row)\n\n        if childNode:\n            return self.createIndex(row, column, childNode)\n        else:\n            return QtCore.QModelIndex()\n\n    def flags(self, index):\n        \"\"\"IMPLEMENT\"\"\"\n        if not index.isValid():\n            return QtCore.Qt.NoItemFlags\n\n        return QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsEditable\n\n    def headerData(self, section, orientation, role=None):\n        \"\"\"IMPLEMENT\"\"\"\n        pass\n\n    def parent(self, index):\n        \"\"\"IMPLEMENT\"\"\"\n        if not index.isValid():\n            return QtCore.QModelIndex()\n\n        node = index.internalPointer()\n        parentNode = node.parent()\n\n        if parentNode == self._rootNode:\n            return QtCore.QModelIndex()\n\n        return self.createIndex(parentNode.row(), 0, parentNode)\n\n    def data(self, index, role):\n        \"\"\"IMPLEMENT\"\"\"\n        pass\n```\n\nDon't panic，待我慢慢解释。\n根据官方文档，继承 `QtCore.QAbstractItemModel` 和 init 函数没什么好说的，注意到其他函数里面，都注释有 `IMPLEMENT` 字眼，已经明显地说明这些函数需要重写实现的了。\n\n> rowCount(self, parent)\n\n返回本层节点的个数。\n\n> columnCount(self, parent)\n\n返回节点中数据的个数，直接返回 1 是因为数据显然只有 1 个。\n\n> index(self, row, column, parent)\n\n这个函数实现 view 对 model 的访问，`parent` 是一个从 view 传过来的 `QModelIndex` 对象，通过参数 `row` 和 `column` 来确定访问其某一个子节点，`isValid()` 是其用以检测此对象是否有效的函数，取得了子节点之后需要将其包装成 `QModelIndex` 对象返回，也就是需要语句 `self.createIndex(row, column, childNode)` 的原因。由于包装的关系 `parent` 也需要使用 `internalPointer()` 得到真正的节点对象（在这里就是 GenericNode 或其子类）才能继续操作。\n\n个人理解就这就相当于在 view 和 model 直接加入了一层数据访问实现层，官方文档称之为 * index-based system*。使用的时候不用管那么多，记得中间需要这样转换就是了。当然你要研究的话可以去看源码，但是显然文章的重点并不在这里。\n\n> flags(self, index)\n\n概括来说，这个函数可以设定节点在 view 中的表现方式。从它需要返回的常量的名字可以看得出来，节点是有多种组合方式的，这里的代码表示了节点是 “可选择的”（Selectable）、“可交互的”（Enabled）和 “可编辑的”（Editable）。\n\n[常量列表](http://qt-project.org/doc/qt-4.8/qt.html#ItemFlag-enum)：\n\n* QtCore.Qt.NoItemFlags\n* QtCore.Qt.ItemIsSelectable\n* QtCore.Qt.ItemIsEditable\n* QtCore.Qt.ItemIsDragEnabled\n* QtCore.Qt.ItemIsDropEnabled\n* QtCore.Qt.ItemIsUserCheckable\n* QtCore.Qt.ItemIsEnabled\n* QtCore.Qt.ItemIsTristate\n\n多种属性的组合可以通过或运算 `|` 将其组合在一起，比如代码中的 `QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled`。\n\n> headerData(self, section, orientation, role)\n\n是对于数据段的标题显示的设置，我们这里只有一个数据，又不需要显示标题，暂时不管。\n\n> parent(self, index)\n\n根据官网所说，这个函数直接用官网的代码保证不会在 view 查询节点的时候得到根节点就可以了，所以这里的代码原封不动使用官网提供的例子。\n\n> data(self, index, role)\n\n需要重点讲解的函数。顾名思义就是对数据的访问，参数 `index` 毫无疑问就是一个 `QModelIndex`，而 `role` 是什么呢？`role` 可以理解为 “角色”，它的值表明了 view 对于数据的要求，比如 `QtCore.Qt.DisplayRole` 说明 view 要求 model 提供一个可以供显示的字符串，会作为 view 中节点的名字；再比如 `QtCore.Qt.DecorationRole` 说明 view 要求提供一个图标作为节点中的装饰，等。我认为这个是 model 的精华所在，通过这样不同的角色的区分，同一个节点可以为 view 提供不同的数据类型，分别用作操作和显示等。比起 `Tree Widget`，使用这种方式无疑更具灵活性。更厉害的是，如果你觉得常量提供的角色不够，可以使用 `QtCore.Qt.UserRole` 和 `QtCore.Qt.UserRole + 1`、`QtCore.Qt.UserRole + 2` 这样来扩充。因为这些常量本质上只是数字而已。\n\n一部分常量列表：\n\n* QtCore.Qt.DisplayRole\n* QtCore.Qt.DecorationRole\n* QtCore.Qt.EditRole\n* QtCore.Qt.ToolTipRole\n* QtCore.Qt.StatusTipRole\n* QtCore.Qt.WhatsThisRole\n* QtCore.Qt.SizeHintRole\n* ....\n\n[更详细的列表](http://qt-project.org/doc/qt-4.8/qt.html#ItemDataRole-enum)\n\n现在来实现这个函数。\n\n```python\n    def data(self, index, role):\n        \"\"\"IMPLEMENT\"\"\"\n        if not index.isValid():\n            return None\n\n        node = index.internalPointer()\n\n        if role == QtCore.Qt.DisplayRole:\n            return node.data()\n        elif role == QtCore.Qt.DecorationRole:\n            pass\n        elif role == QtCore.Qt.ToolTipRole:\n            return node.type\n```\n\n要做的事情就是先判断一下 `index` 是否有效，然后就判断 `role` 的值，返回不同的数据。这里是名字显示数据 data，而悬浮提示则是节点的类型。\n\n至此 model 基本实现了，最后是使用。\n\n返回 `MainWindow.py`，在 `MainWindow` 类中加入：\n\n```python\n    def buildCatalog(self):\n        root = treeModel.GenericNode(\"root\")\n\n        notebook1 = treeModel.NotebookNode(\"NotebookNode1\", root)\n        chapter2 = treeModel.ChapterNode(\"ChapterNode2\", folder1)\n\n        notebook3 = treeModel.NotebookNode(\"NotebookNode3\", root)\n        chapter4 = treeModel.ChapterNode(\"ChapterNode4\", notebook3)\n\n        self._folderModel = treeModel.CatalogTreeModel(root)\n\n        self.ui.treeViewCatalog.setModel(self._folderModel)\n        self.ui.treeViewCatalog.expandAll()\n```\n\n做的事情很简单，使用之前编写的代码建一棵树，结构是：\n\nnotebook1\n┗chapter2<br>\nnotebook3\n┗chapter4\n\n把根节点交给 model，使用 `setModel` 函数将 model 绑定到 view 上。为了好看把树全部展开。\n\n最后在 `__init__` 函数中调用这个函数，运行。\n\n![最终运行图](https://i.imgur.com/PICCd6F.png)\n\n## 小结\n终于结束了本博文，使用 MVC 模式的代码也能工作了。回想文章开头的 “MVC 大法好”，这句话的可是有前提的，就是能理解好概念和驾驭到代码。","slug":"python-with-qt-application-development-3-basic-model-in-mvc","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyuwv00d4n7t4svu71l67","content":"<p>上一篇博文中，界面是设计好了，也能运行了，但是这个应用还只是个空壳子，widget 里什么都没有。这篇博文就来充实其中一个的 widget，左边的文件夹列表。</p>\n<h2 id=\"MVC-大法好\"><a href=\"#MVC-大法好\" class=\"headerlink\" title=\"MVC 大法好\"></a>MVC 大法好</h2><p>有过一些开发经验的读者肯定会听说过 MVC，这里不详细解释 MVC 了。Qt 中也有提供这样的模式，而且既有提供已经整合好的 widget，也有提供单单 view 而自己需要编写相应的 model 和 controller。后一种显然要比前一种麻烦，但是使用上可能后一种反而更多。为什么？因为在实际开发中，涉及到数据的显示很多时候都要附带上数据的操作，那些整合好的 widget——比如 <code>List Widget</code> 和 <code>Tree Widget</code> 和 <code>Table Widget</code>——能做到的基本只是将数据都转化为字符串来输出，一旦涉及到数据的修改的话…… 也不是不可以做到，但是编写出来的代码既繁琐又不通用。</p>\n<p>从 Qt 的官方文档来看，这些 widget 的函数大多数都是操作 view 这个层面的，函数名字里面大多包含 <code>item</code>，比如插入数据核心步骤是使用 <code>QTableWidgetItem(data)</code> 生成一个包含单个数据——data 的 item 然后用 <code>setItem (row, column, item)</code> 将这个 item 设置在特定位置，这里的 item 其实相当于一个单元格了。但注意修改了这个 item 是并不能保证影响到原先的 data 的，而且这样单独地设置 item 的数据数据的操作，稍加思考便能明白，已经丢失了原来数据——也就是 data——跟其他可能存在的 data 的关系了。更进一步，如果修改了这个 item 的数据，要怎么找回原来的 data 也是个大问题。</p>\n<p>根据之前博文的要求，如果编写文件夹列表这个 widget，我们考虑用 <code>Tree View</code> 然后自己编写 model 会比较好，因为文件夹本身就天然具备树的特征。另外文件夹还允许重名，我们不能只根据文件夹名来标识，而是需要另外的唯一标识，这就暗示了一个树节点所包含的数据是多个的了，最起码包含了节点的名称和节点的标识，单单 <code>QTableWidgetItem</code> 是比较难满足要求的。</p>\n<h2 id=\"实现一个简单的-model\"><a href=\"#实现一个简单的-model\" class=\"headerlink\" title=\"实现一个简单的 model\"></a>实现一个简单的 model</h2><p>上一篇博文全程在用 QtDesigner，这次就转到 python 代码上了。在 app 包下新建 model 包，再在里面新建 <code>treeModel.py</code>。</p>\n<p>接下来…… 怎么写啊……</p>\n<p>还是先来一些前置知识吧。</p>\n<h3 id=\"Qt-中-model-的基本概念\"><a href=\"#Qt-中-model-的基本概念\" class=\"headerlink\" title=\"Qt 中 model 的基本概念\"></a>Qt 中 model 的基本概念</h3><p><img src=\"http://qt-project.org/doc/qt-4.8/images/modelview-models.png\" alt=\"基本概念图\"></p>\n<p>上图来自 Qt 官方文档，简单易懂。可以看到，三个基本的 model——List Model、Table Model 和 Tree Model——都有着类似的结构：有一个根 <code>Root item</code>，有 row（行）的概念，有列 column（列）的概念。</p>\n<p>相似的结构暗示了 view 和 model 应该是可以自由配对的，因为可以基于某些规定的接口来结合在一起，而且这些接口估计跟根节点 <code>Root item</code> 和行列的属性（长度是最显著的特征了）有关。<code>List Model</code> 就是一个一维数组，以单下标确定位置；<code>Table Model</code> 是一个而为数组，以双下标确定位置；<code>Tree Model</code> 就是一棵树，以父节点和行数确定位置。或许你会觉得这跟普通的数据解结构没什么分别，但是注意了，途中的一个节点（就是一个正方格）是没有规定成什么数据类型，也就是不局限于是数字或者字符这样的基本类型，也可以是更复杂的对象甚至对象的数据结构形式。这些一个个的节点（正方格）只是在模型的层面上表现一致而已。</p>\n<p>另外似乎除了 <code>Table Model</code> 以外并不能看出 column 的作用，实际上 <code>List Model</code> 和 <code>Tree Model</code> 也有 column 的概念，只不过基本上在模型层面上是只有一列。这个是什么意思呢？也就是说，对于 <code>List Model</code> 而言，最关心的特征是 row 也就是行数，但读取数据时非要加上 column 来定位的话应该在节点（正方格）内的数据上体现出数组来，对比 <code>Table Model</code> 则是在节点（正方格）上就体现出需要 row 和 column 同时定位。对于 <code>Tree Model</code> 而言也是同样。</p>\n<p>文字太多不要觉得麻烦，当你先阅读了大概的描述，潜意识有了一些模糊的概念之后，立刻去写代码，理解起来比一边写一边看容易得多。</p>\n<h3 id=\"上代码\"><a href=\"#上代码\" class=\"headerlink\" title=\"上代码\"></a>上代码</h3><p>我们来先用代码描述这些 “节点”（正方格），以 <code>Tree Model</code> 为例。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, data, parent=None)</span>:</span></span><br><span class=\"line\">        self._data = data</span><br><span class=\"line\">        self._parent = parent</span><br><span class=\"line\">        self._children = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> parent <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            parent.appendChild(self)</span><br></pre></td></tr></table></figure>\n<p>先写一个一般性的节点类 <code>GenericNode</code>，一个节点包含了三个必要的域：父节点、子节点列表和数据。一个节点在被创造出来的时候就可以决定其父节点和数据，而父节点是可以为空的（根节点或者孤立节点），若指定的父节点不为空则需要要求父节点将新创造的节点加入到它自身的子节点列表中。注意此时 appendNode 函数我们还没有实现。</p>\n<p>然后立刻就是 appendNode 函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">appendChild</span><span class=\"params\">(self, child)</span>:</span></span><br><span class=\"line\">    self._children.append(child)</span><br><span class=\"line\">    child._parent = self</span><br></pre></td></tr></table></figure>\n<p>非常简单，将节点加入自身的子节点列表中。这里考虑到加入的子节点有可能并没有指定过父节点，所以追加了一句 <code>child._parent = self</code>。</p>\n<p>接下来是数据的访问。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">data</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self._data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setData</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">    self._data = value</span><br></pre></td></tr></table></figure>\n<p>getter、setter，没什么值得解释。</p>\n<p>再来是对查询节点关系的回应。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parent</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self._parent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">child</span><span class=\"params\">(self, row)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self._children[row]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">childCount</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> len(self._children)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">row</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self._parent:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._parent._children.index(self)</span><br></pre></td></tr></table></figure>\n<p>都是非常简单的函数。<code>parent(self)</code> 和 <code>child(self, row)</code> 分别是返回父节点和和指定的子节点（对应着上面的图可以明显看出应该通过数组方式访问子节点）。<code>childCount(self)</code> 是返回子节点长度以便能遍历子节点，<code>row(self)</code> 则是查询本节点在兄弟节点中的位置。</p>\n<p>最后加入一个属性来跟其他类型的节点区别一下，因为其他节点将会继承自这个类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">type</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"custom function\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"generic\"</span></span><br></pre></td></tr></table></figure>\n<p>接着是特殊节点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NotebookNode</span><span class=\"params\">(GenericNode)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">type</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"OVERRIDE\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"notebook\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChapterNode</span><span class=\"params\">(GenericNode)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">type</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"OVERRIDE\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"chapter\"</span></span><br></pre></td></tr></table></figure>\n<p>继承的同时重写了 <code>type</code> 属性来区分不同的节点，暂时不去写更详细的函数。</p>\n<p>节点部分就基本写好了，接下来是模型结构部分。基本框架的代码如下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeModel</span><span class=\"params\">(QtCore.QAbstractItemModel)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, root=None, parent=None)</span>:</span></span><br><span class=\"line\">        super(TreeModel, self).__init__(parent)</span><br><span class=\"line\"></span><br><span class=\"line\">        self._rootNode = GenericNode(<span class=\"literal\">None</span>) <span class=\"keyword\">if</span> root <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">else</span> root</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rowCount</span><span class=\"params\">(self, parent)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"IMPLEMENT\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> parent.isValid():</span><br><span class=\"line\">            parentNode = self._rootNode</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            parentNode = parent.internalPointer()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> parentNode.childCount()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">columnCount</span><span class=\"params\">(self, parent)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"IMPLEMENT\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(self, row, column, parent)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"IMPLEMENT\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> parent.isValid():</span><br><span class=\"line\">            parentNode = self._rootNode</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            parentNode = parent.internalPointer()</span><br><span class=\"line\"></span><br><span class=\"line\">        childNode = parentNode.child(row)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> childNode:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.createIndex(row, column, childNode)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> QtCore.QModelIndex()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">flags</span><span class=\"params\">(self, index)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"IMPLEMENT\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> index.isValid():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> QtCore.Qt.NoItemFlags</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsEditable</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">headerData</span><span class=\"params\">(self, section, orientation, role=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"IMPLEMENT\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parent</span><span class=\"params\">(self, index)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"IMPLEMENT\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> index.isValid():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> QtCore.QModelIndex()</span><br><span class=\"line\"></span><br><span class=\"line\">        node = index.internalPointer()</span><br><span class=\"line\">        parentNode = node.parent()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> parentNode == self._rootNode:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> QtCore.QModelIndex()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.createIndex(parentNode.row(), <span class=\"number\">0</span>, parentNode)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">data</span><span class=\"params\">(self, index, role)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"IMPLEMENT\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>Don’t panic，待我慢慢解释。<br>根据官方文档，继承 <code>QtCore.QAbstractItemModel</code> 和 init 函数没什么好说的，注意到其他函数里面，都注释有 <code>IMPLEMENT</code> 字眼，已经明显地说明这些函数需要重写实现的了。</p>\n<blockquote>\n<p>rowCount(self, parent)</p>\n</blockquote>\n<p>返回本层节点的个数。</p>\n<blockquote>\n<p>columnCount(self, parent)</p>\n</blockquote>\n<p>返回节点中数据的个数，直接返回 1 是因为数据显然只有 1 个。</p>\n<blockquote>\n<p>index(self, row, column, parent)</p>\n</blockquote>\n<p>这个函数实现 view 对 model 的访问，<code>parent</code> 是一个从 view 传过来的 <code>QModelIndex</code> 对象，通过参数 <code>row</code> 和 <code>column</code> 来确定访问其某一个子节点，<code>isValid()</code> 是其用以检测此对象是否有效的函数，取得了子节点之后需要将其包装成 <code>QModelIndex</code> 对象返回，也就是需要语句 <code>self.createIndex(row, column, childNode)</code> 的原因。由于包装的关系 <code>parent</code> 也需要使用 <code>internalPointer()</code> 得到真正的节点对象（在这里就是 GenericNode 或其子类）才能继续操作。</p>\n<p>个人理解就这就相当于在 view 和 model 直接加入了一层数据访问实现层，官方文档称之为 <em> index-based system</em>。使用的时候不用管那么多，记得中间需要这样转换就是了。当然你要研究的话可以去看源码，但是显然文章的重点并不在这里。</p>\n<blockquote>\n<p>flags(self, index)</p>\n</blockquote>\n<p>概括来说，这个函数可以设定节点在 view 中的表现方式。从它需要返回的常量的名字可以看得出来，节点是有多种组合方式的，这里的代码表示了节点是 “可选择的”（Selectable）、“可交互的”（Enabled）和 “可编辑的”（Editable）。</p>\n<p><a href=\"http://qt-project.org/doc/qt-4.8/qt.html#ItemFlag-enum\" target=\"_blank\" rel=\"noopener\">常量列表</a>：</p>\n<ul>\n<li>QtCore.Qt.NoItemFlags</li>\n<li>QtCore.Qt.ItemIsSelectable</li>\n<li>QtCore.Qt.ItemIsEditable</li>\n<li>QtCore.Qt.ItemIsDragEnabled</li>\n<li>QtCore.Qt.ItemIsDropEnabled</li>\n<li>QtCore.Qt.ItemIsUserCheckable</li>\n<li>QtCore.Qt.ItemIsEnabled</li>\n<li>QtCore.Qt.ItemIsTristate</li>\n</ul>\n<p>多种属性的组合可以通过或运算 <code>|</code> 将其组合在一起，比如代码中的 <code>QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled</code>。</p>\n<blockquote>\n<p>headerData(self, section, orientation, role)</p>\n</blockquote>\n<p>是对于数据段的标题显示的设置，我们这里只有一个数据，又不需要显示标题，暂时不管。</p>\n<blockquote>\n<p>parent(self, index)</p>\n</blockquote>\n<p>根据官网所说，这个函数直接用官网的代码保证不会在 view 查询节点的时候得到根节点就可以了，所以这里的代码原封不动使用官网提供的例子。</p>\n<blockquote>\n<p>data(self, index, role)</p>\n</blockquote>\n<p>需要重点讲解的函数。顾名思义就是对数据的访问，参数 <code>index</code> 毫无疑问就是一个 <code>QModelIndex</code>，而 <code>role</code> 是什么呢？<code>role</code> 可以理解为 “角色”，它的值表明了 view 对于数据的要求，比如 <code>QtCore.Qt.DisplayRole</code> 说明 view 要求 model 提供一个可以供显示的字符串，会作为 view 中节点的名字；再比如 <code>QtCore.Qt.DecorationRole</code> 说明 view 要求提供一个图标作为节点中的装饰，等。我认为这个是 model 的精华所在，通过这样不同的角色的区分，同一个节点可以为 view 提供不同的数据类型，分别用作操作和显示等。比起 <code>Tree Widget</code>，使用这种方式无疑更具灵活性。更厉害的是，如果你觉得常量提供的角色不够，可以使用 <code>QtCore.Qt.UserRole</code> 和 <code>QtCore.Qt.UserRole + 1</code>、<code>QtCore.Qt.UserRole + 2</code> 这样来扩充。因为这些常量本质上只是数字而已。</p>\n<p>一部分常量列表：</p>\n<ul>\n<li>QtCore.Qt.DisplayRole</li>\n<li>QtCore.Qt.DecorationRole</li>\n<li>QtCore.Qt.EditRole</li>\n<li>QtCore.Qt.ToolTipRole</li>\n<li>QtCore.Qt.StatusTipRole</li>\n<li>QtCore.Qt.WhatsThisRole</li>\n<li>QtCore.Qt.SizeHintRole</li>\n<li>….</li>\n</ul>\n<p><a href=\"http://qt-project.org/doc/qt-4.8/qt.html#ItemDataRole-enum\" target=\"_blank\" rel=\"noopener\">更详细的列表</a></p>\n<p>现在来实现这个函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">data</span><span class=\"params\">(self, index, role)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"IMPLEMENT\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> index.isValid():</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    node = index.internalPointer()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> role == QtCore.Qt.DisplayRole:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.data()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> role == QtCore.Qt.DecorationRole:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> role == QtCore.Qt.ToolTipRole:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.type</span><br></pre></td></tr></table></figure>\n<p>要做的事情就是先判断一下 <code>index</code> 是否有效，然后就判断 <code>role</code> 的值，返回不同的数据。这里是名字显示数据 data，而悬浮提示则是节点的类型。</p>\n<p>至此 model 基本实现了，最后是使用。</p>\n<p>返回 <code>MainWindow.py</code>，在 <code>MainWindow</code> 类中加入：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buildCatalog</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    root = treeModel.GenericNode(<span class=\"string\">\"root\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    notebook1 = treeModel.NotebookNode(<span class=\"string\">\"NotebookNode1\"</span>, root)</span><br><span class=\"line\">    chapter2 = treeModel.ChapterNode(<span class=\"string\">\"ChapterNode2\"</span>, folder1)</span><br><span class=\"line\"></span><br><span class=\"line\">    notebook3 = treeModel.NotebookNode(<span class=\"string\">\"NotebookNode3\"</span>, root)</span><br><span class=\"line\">    chapter4 = treeModel.ChapterNode(<span class=\"string\">\"ChapterNode4\"</span>, notebook3)</span><br><span class=\"line\"></span><br><span class=\"line\">    self._folderModel = treeModel.CatalogTreeModel(root)</span><br><span class=\"line\"></span><br><span class=\"line\">    self.ui.treeViewCatalog.setModel(self._folderModel)</span><br><span class=\"line\">    self.ui.treeViewCatalog.expandAll()</span><br></pre></td></tr></table></figure>\n<p>做的事情很简单，使用之前编写的代码建一棵树，结构是：</p>\n<p>notebook1<br>┗chapter2<br><br>notebook3<br>┗chapter4</p>\n<p>把根节点交给 model，使用 <code>setModel</code> 函数将 model 绑定到 view 上。为了好看把树全部展开。</p>\n<p>最后在 <code>__init__</code> 函数中调用这个函数，运行。</p>\n<p><img src=\"https://i.imgur.com/PICCd6F.png\" alt=\"最终运行图\"></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>终于结束了本博文，使用 MVC 模式的代码也能工作了。回想文章开头的 “MVC 大法好”，这句话的可是有前提的，就是能理解好概念和驾驭到代码。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇博文中，界面是设计好了，也能运行了，但是这个应用还只是个空壳子，widget 里什么都没有。这篇博文就来充实其中一个的 widget，左边的文件夹列表。</p>\n<h2 id=\"MVC-大法好\"><a href=\"#MVC-大法好\" class=\"headerlink\" title=\"MVC 大法好\"></a>MVC 大法好</h2><p>有过一些开发经验的读者肯定会听说过 MVC，这里不详细解释 MVC 了。Qt 中也有提供这样的模式，而且既有提供已经整合好的 widget，也有提供单单 view 而自己需要编写相应的 model 和 controller。后一种显然要比前一种麻烦，但是使用上可能后一种反而更多。为什么？因为在实际开发中，涉及到数据的显示很多时候都要附带上数据的操作，那些整合好的 widget——比如 <code>List Widget</code> 和 <code>Tree Widget</code> 和 <code>Table Widget</code>——能做到的基本只是将数据都转化为字符串来输出，一旦涉及到数据的修改的话…… 也不是不可以做到，但是编写出来的代码既繁琐又不通用。</p>\n<p>从 Qt 的官方文档来看，这些 widget 的函数大多数都是操作 view 这个层面的，函数名字里面大多包含 <code>item</code>，比如插入数据核心步骤是使用 <code>QTableWidgetItem(data)</code> 生成一个包含单个数据——data 的 item 然后用 <code>setItem (row, column, item)</code> 将这个 item 设置在特定位置，这里的 item 其实相当于一个单元格了。但注意修改了这个 item 是并不能保证影响到原先的 data 的，而且这样单独地设置 item 的数据数据的操作，稍加思考便能明白，已经丢失了原来数据——也就是 data——跟其他可能存在的 data 的关系了。更进一步，如果修改了这个 item 的数据，要怎么找回原来的 data 也是个大问题。</p>\n<p>根据之前博文的要求，如果编写文件夹列表这个 widget，我们考虑用 <code>Tree View</code> 然后自己编写 model 会比较好，因为文件夹本身就天然具备树的特征。另外文件夹还允许重名，我们不能只根据文件夹名来标识，而是需要另外的唯一标识，这就暗示了一个树节点所包含的数据是多个的了，最起码包含了节点的名称和节点的标识，单单 <code>QTableWidgetItem</code> 是比较难满足要求的。</p>\n<h2 id=\"实现一个简单的-model\"><a href=\"#实现一个简单的-model\" class=\"headerlink\" title=\"实现一个简单的 model\"></a>实现一个简单的 model</h2><p>上一篇博文全程在用 QtDesigner，这次就转到 python 代码上了。在 app 包下新建 model 包，再在里面新建 <code>treeModel.py</code>。</p>\n<p>接下来…… 怎么写啊……</p>\n<p>还是先来一些前置知识吧。</p>\n<h3 id=\"Qt-中-model-的基本概念\"><a href=\"#Qt-中-model-的基本概念\" class=\"headerlink\" title=\"Qt 中 model 的基本概念\"></a>Qt 中 model 的基本概念</h3><p><img src=\"http://qt-project.org/doc/qt-4.8/images/modelview-models.png\" alt=\"基本概念图\"></p>\n<p>上图来自 Qt 官方文档，简单易懂。可以看到，三个基本的 model——List Model、Table Model 和 Tree Model——都有着类似的结构：有一个根 <code>Root item</code>，有 row（行）的概念，有列 column（列）的概念。</p>\n<p>相似的结构暗示了 view 和 model 应该是可以自由配对的，因为可以基于某些规定的接口来结合在一起，而且这些接口估计跟根节点 <code>Root item</code> 和行列的属性（长度是最显著的特征了）有关。<code>List Model</code> 就是一个一维数组，以单下标确定位置；<code>Table Model</code> 是一个而为数组，以双下标确定位置；<code>Tree Model</code> 就是一棵树，以父节点和行数确定位置。或许你会觉得这跟普通的数据解结构没什么分别，但是注意了，途中的一个节点（就是一个正方格）是没有规定成什么数据类型，也就是不局限于是数字或者字符这样的基本类型，也可以是更复杂的对象甚至对象的数据结构形式。这些一个个的节点（正方格）只是在模型的层面上表现一致而已。</p>\n<p>另外似乎除了 <code>Table Model</code> 以外并不能看出 column 的作用，实际上 <code>List Model</code> 和 <code>Tree Model</code> 也有 column 的概念，只不过基本上在模型层面上是只有一列。这个是什么意思呢？也就是说，对于 <code>List Model</code> 而言，最关心的特征是 row 也就是行数，但读取数据时非要加上 column 来定位的话应该在节点（正方格）内的数据上体现出数组来，对比 <code>Table Model</code> 则是在节点（正方格）上就体现出需要 row 和 column 同时定位。对于 <code>Tree Model</code> 而言也是同样。</p>\n<p>文字太多不要觉得麻烦，当你先阅读了大概的描述，潜意识有了一些模糊的概念之后，立刻去写代码，理解起来比一边写一边看容易得多。</p>\n<h3 id=\"上代码\"><a href=\"#上代码\" class=\"headerlink\" title=\"上代码\"></a>上代码</h3><p>我们来先用代码描述这些 “节点”（正方格），以 <code>Tree Model</code> 为例。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GenericNode</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, data, parent=None)</span>:</span></span><br><span class=\"line\">        self._data = data</span><br><span class=\"line\">        self._parent = parent</span><br><span class=\"line\">        self._children = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> parent <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            parent.appendChild(self)</span><br></pre></td></tr></table></figure>\n<p>先写一个一般性的节点类 <code>GenericNode</code>，一个节点包含了三个必要的域：父节点、子节点列表和数据。一个节点在被创造出来的时候就可以决定其父节点和数据，而父节点是可以为空的（根节点或者孤立节点），若指定的父节点不为空则需要要求父节点将新创造的节点加入到它自身的子节点列表中。注意此时 appendNode 函数我们还没有实现。</p>\n<p>然后立刻就是 appendNode 函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">appendChild</span><span class=\"params\">(self, child)</span>:</span></span><br><span class=\"line\">    self._children.append(child)</span><br><span class=\"line\">    child._parent = self</span><br></pre></td></tr></table></figure>\n<p>非常简单，将节点加入自身的子节点列表中。这里考虑到加入的子节点有可能并没有指定过父节点，所以追加了一句 <code>child._parent = self</code>。</p>\n<p>接下来是数据的访问。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">data</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self._data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setData</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">    self._data = value</span><br></pre></td></tr></table></figure>\n<p>getter、setter，没什么值得解释。</p>\n<p>再来是对查询节点关系的回应。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parent</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self._parent</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">child</span><span class=\"params\">(self, row)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> self._children[row]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">childCount</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> len(self._children)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">row</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self._parent:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._parent._children.index(self)</span><br></pre></td></tr></table></figure>\n<p>都是非常简单的函数。<code>parent(self)</code> 和 <code>child(self, row)</code> 分别是返回父节点和和指定的子节点（对应着上面的图可以明显看出应该通过数组方式访问子节点）。<code>childCount(self)</code> 是返回子节点长度以便能遍历子节点，<code>row(self)</code> 则是查询本节点在兄弟节点中的位置。</p>\n<p>最后加入一个属性来跟其他类型的节点区别一下，因为其他节点将会继承自这个类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@property</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">type</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"custom function\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"generic\"</span></span><br></pre></td></tr></table></figure>\n<p>接着是特殊节点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NotebookNode</span><span class=\"params\">(GenericNode)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">type</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"OVERRIDE\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"notebook\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChapterNode</span><span class=\"params\">(GenericNode)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">type</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"OVERRIDE\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"chapter\"</span></span><br></pre></td></tr></table></figure>\n<p>继承的同时重写了 <code>type</code> 属性来区分不同的节点，暂时不去写更详细的函数。</p>\n<p>节点部分就基本写好了，接下来是模型结构部分。基本框架的代码如下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TreeModel</span><span class=\"params\">(QtCore.QAbstractItemModel)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, root=None, parent=None)</span>:</span></span><br><span class=\"line\">        super(TreeModel, self).__init__(parent)</span><br><span class=\"line\"></span><br><span class=\"line\">        self._rootNode = GenericNode(<span class=\"literal\">None</span>) <span class=\"keyword\">if</span> root <span class=\"keyword\">is</span> <span class=\"literal\">None</span> <span class=\"keyword\">else</span> root</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rowCount</span><span class=\"params\">(self, parent)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"IMPLEMENT\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> parent.isValid():</span><br><span class=\"line\">            parentNode = self._rootNode</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            parentNode = parent.internalPointer()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> parentNode.childCount()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">columnCount</span><span class=\"params\">(self, parent)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"IMPLEMENT\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(self, row, column, parent)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"IMPLEMENT\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> parent.isValid():</span><br><span class=\"line\">            parentNode = self._rootNode</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            parentNode = parent.internalPointer()</span><br><span class=\"line\"></span><br><span class=\"line\">        childNode = parentNode.child(row)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> childNode:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.createIndex(row, column, childNode)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> QtCore.QModelIndex()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">flags</span><span class=\"params\">(self, index)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"IMPLEMENT\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> index.isValid():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> QtCore.Qt.NoItemFlags</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled | QtCore.Qt.ItemIsEditable</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">headerData</span><span class=\"params\">(self, section, orientation, role=None)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"IMPLEMENT\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parent</span><span class=\"params\">(self, index)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"IMPLEMENT\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> index.isValid():</span><br><span class=\"line\">            <span class=\"keyword\">return</span> QtCore.QModelIndex()</span><br><span class=\"line\"></span><br><span class=\"line\">        node = index.internalPointer()</span><br><span class=\"line\">        parentNode = node.parent()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> parentNode == self._rootNode:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> QtCore.QModelIndex()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.createIndex(parentNode.row(), <span class=\"number\">0</span>, parentNode)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">data</span><span class=\"params\">(self, index, role)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"IMPLEMENT\"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>Don’t panic，待我慢慢解释。<br>根据官方文档，继承 <code>QtCore.QAbstractItemModel</code> 和 init 函数没什么好说的，注意到其他函数里面，都注释有 <code>IMPLEMENT</code> 字眼，已经明显地说明这些函数需要重写实现的了。</p>\n<blockquote>\n<p>rowCount(self, parent)</p>\n</blockquote>\n<p>返回本层节点的个数。</p>\n<blockquote>\n<p>columnCount(self, parent)</p>\n</blockquote>\n<p>返回节点中数据的个数，直接返回 1 是因为数据显然只有 1 个。</p>\n<blockquote>\n<p>index(self, row, column, parent)</p>\n</blockquote>\n<p>这个函数实现 view 对 model 的访问，<code>parent</code> 是一个从 view 传过来的 <code>QModelIndex</code> 对象，通过参数 <code>row</code> 和 <code>column</code> 来确定访问其某一个子节点，<code>isValid()</code> 是其用以检测此对象是否有效的函数，取得了子节点之后需要将其包装成 <code>QModelIndex</code> 对象返回，也就是需要语句 <code>self.createIndex(row, column, childNode)</code> 的原因。由于包装的关系 <code>parent</code> 也需要使用 <code>internalPointer()</code> 得到真正的节点对象（在这里就是 GenericNode 或其子类）才能继续操作。</p>\n<p>个人理解就这就相当于在 view 和 model 直接加入了一层数据访问实现层，官方文档称之为 <em> index-based system</em>。使用的时候不用管那么多，记得中间需要这样转换就是了。当然你要研究的话可以去看源码，但是显然文章的重点并不在这里。</p>\n<blockquote>\n<p>flags(self, index)</p>\n</blockquote>\n<p>概括来说，这个函数可以设定节点在 view 中的表现方式。从它需要返回的常量的名字可以看得出来，节点是有多种组合方式的，这里的代码表示了节点是 “可选择的”（Selectable）、“可交互的”（Enabled）和 “可编辑的”（Editable）。</p>\n<p><a href=\"http://qt-project.org/doc/qt-4.8/qt.html#ItemFlag-enum\" target=\"_blank\" rel=\"noopener\">常量列表</a>：</p>\n<ul>\n<li>QtCore.Qt.NoItemFlags</li>\n<li>QtCore.Qt.ItemIsSelectable</li>\n<li>QtCore.Qt.ItemIsEditable</li>\n<li>QtCore.Qt.ItemIsDragEnabled</li>\n<li>QtCore.Qt.ItemIsDropEnabled</li>\n<li>QtCore.Qt.ItemIsUserCheckable</li>\n<li>QtCore.Qt.ItemIsEnabled</li>\n<li>QtCore.Qt.ItemIsTristate</li>\n</ul>\n<p>多种属性的组合可以通过或运算 <code>|</code> 将其组合在一起，比如代码中的 <code>QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled</code>。</p>\n<blockquote>\n<p>headerData(self, section, orientation, role)</p>\n</blockquote>\n<p>是对于数据段的标题显示的设置，我们这里只有一个数据，又不需要显示标题，暂时不管。</p>\n<blockquote>\n<p>parent(self, index)</p>\n</blockquote>\n<p>根据官网所说，这个函数直接用官网的代码保证不会在 view 查询节点的时候得到根节点就可以了，所以这里的代码原封不动使用官网提供的例子。</p>\n<blockquote>\n<p>data(self, index, role)</p>\n</blockquote>\n<p>需要重点讲解的函数。顾名思义就是对数据的访问，参数 <code>index</code> 毫无疑问就是一个 <code>QModelIndex</code>，而 <code>role</code> 是什么呢？<code>role</code> 可以理解为 “角色”，它的值表明了 view 对于数据的要求，比如 <code>QtCore.Qt.DisplayRole</code> 说明 view 要求 model 提供一个可以供显示的字符串，会作为 view 中节点的名字；再比如 <code>QtCore.Qt.DecorationRole</code> 说明 view 要求提供一个图标作为节点中的装饰，等。我认为这个是 model 的精华所在，通过这样不同的角色的区分，同一个节点可以为 view 提供不同的数据类型，分别用作操作和显示等。比起 <code>Tree Widget</code>，使用这种方式无疑更具灵活性。更厉害的是，如果你觉得常量提供的角色不够，可以使用 <code>QtCore.Qt.UserRole</code> 和 <code>QtCore.Qt.UserRole + 1</code>、<code>QtCore.Qt.UserRole + 2</code> 这样来扩充。因为这些常量本质上只是数字而已。</p>\n<p>一部分常量列表：</p>\n<ul>\n<li>QtCore.Qt.DisplayRole</li>\n<li>QtCore.Qt.DecorationRole</li>\n<li>QtCore.Qt.EditRole</li>\n<li>QtCore.Qt.ToolTipRole</li>\n<li>QtCore.Qt.StatusTipRole</li>\n<li>QtCore.Qt.WhatsThisRole</li>\n<li>QtCore.Qt.SizeHintRole</li>\n<li>….</li>\n</ul>\n<p><a href=\"http://qt-project.org/doc/qt-4.8/qt.html#ItemDataRole-enum\" target=\"_blank\" rel=\"noopener\">更详细的列表</a></p>\n<p>现在来实现这个函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">data</span><span class=\"params\">(self, index, role)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"IMPLEMENT\"\"\"</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> index.isValid():</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    node = index.internalPointer()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> role == QtCore.Qt.DisplayRole:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.data()</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> role == QtCore.Qt.DecorationRole:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> role == QtCore.Qt.ToolTipRole:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> node.type</span><br></pre></td></tr></table></figure>\n<p>要做的事情就是先判断一下 <code>index</code> 是否有效，然后就判断 <code>role</code> 的值，返回不同的数据。这里是名字显示数据 data，而悬浮提示则是节点的类型。</p>\n<p>至此 model 基本实现了，最后是使用。</p>\n<p>返回 <code>MainWindow.py</code>，在 <code>MainWindow</code> 类中加入：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">buildCatalog</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    root = treeModel.GenericNode(<span class=\"string\">\"root\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    notebook1 = treeModel.NotebookNode(<span class=\"string\">\"NotebookNode1\"</span>, root)</span><br><span class=\"line\">    chapter2 = treeModel.ChapterNode(<span class=\"string\">\"ChapterNode2\"</span>, folder1)</span><br><span class=\"line\"></span><br><span class=\"line\">    notebook3 = treeModel.NotebookNode(<span class=\"string\">\"NotebookNode3\"</span>, root)</span><br><span class=\"line\">    chapter4 = treeModel.ChapterNode(<span class=\"string\">\"ChapterNode4\"</span>, notebook3)</span><br><span class=\"line\"></span><br><span class=\"line\">    self._folderModel = treeModel.CatalogTreeModel(root)</span><br><span class=\"line\"></span><br><span class=\"line\">    self.ui.treeViewCatalog.setModel(self._folderModel)</span><br><span class=\"line\">    self.ui.treeViewCatalog.expandAll()</span><br></pre></td></tr></table></figure>\n<p>做的事情很简单，使用之前编写的代码建一棵树，结构是：</p>\n<p>notebook1<br>┗chapter2<br><br>notebook3<br>┗chapter4</p>\n<p>把根节点交给 model，使用 <code>setModel</code> 函数将 model 绑定到 view 上。为了好看把树全部展开。</p>\n<p>最后在 <code>__init__</code> 函数中调用这个函数，运行。</p>\n<p><img src=\"https://i.imgur.com/PICCd6F.png\" alt=\"最终运行图\"></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>终于结束了本博文，使用 MVC 模式的代码也能工作了。回想文章开头的 “MVC 大法好”，这句话的可是有前提的，就是能理解好概念和驾驭到代码。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"http://qt-project.org/doc/qt-4.8/images/modelview-models.png","popularPost_tmp_gaData":{"updated":"Mon Mar 02 2015 17:00:36 GMT+0800 (China Standard Time)","title":"python × Qt 应用开发 · 3 -- MVC 中 model 的基本实现","path":"python-with-qt-application-development-3-basic-model-in-mvc/","eyeCatchImage":"http://qt-project.org/doc/qt-4.8/images/modelview-models.png","excerpt":null,"date":"2014-03-22T08:14:29.000Z","pv":0,"totalPV":0,"categories":"技术 > 编程语言 > python > 软件","tags":["python","Qt","software"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":4756},{"title":"python × Qt 应用开发 · 5 -- 数据库 helper 类的编写","id":"17","updated":"2015-03-02T09:10:09.000Z","date":"2014-03-29T00:46:11.000Z","_content":"\n在 [上一篇博文](http://blog.e10t.net/python-with-qt-application-development-4-database-design/) 中已经生成了数据库，而代码中的视图和模型也准备好了，但是怎么将两者联系起来呢？显然我们需要在其中做做文章，找一个 “中间人” 去读取数据库的数据并且转化为适合模型的数据。通常称这个 “中间人” 为数据库 helper 类。\n\n## 什么是 helper 类\n顾名思义就是类似助手的一个类，数据库的 helper 类就是一个帮助程序员方便调用数据库的类。此类可以做的事情通常都是包括连接数据库，执行 SQL，转换数据类型等。\n\n## 操作 Python 自带的 sqlite3 库\n\n可以自己纯手写 python 代码来全程管理数据库，需要操心的地方有点多。\n\n### databaseHelper\n\n在 `app` 包下新建一个 `store` 包，新建一个 `databaseHelper.py` 文件。\n\n为帮助代码的理解，极其推荐先去阅读 [Introduction to SQLite in Python](http://www.pythoncentral.io/introduction-to-sqlite-in-python/) 和[Advanced SQLite Usage in Python](http://www.pythoncentral.io/advanced-sqlite-usage-in-python/)，SQLite 的基本操作和进阶应用都有详细而清晰的介绍，在这就没必要重新再说。\n\n经过以上的阅读，数据库的操作基本能掌握了，然而我们的目标是写出一个比较通用的类。\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n__author__ = 'draco'\n\nimport sqlite3\n\nclass SqliteHelper(object):\n    \"\"\"\"\"\"\n    @property\n    def last_error(self):\n        return self._last_error\n\n    def __init__(self, db=\":memory:\"):\n        super(SqliteHelper, self).__init__()\n\n        self._last_error = None\n        self._db = db\n        self._con = None\n\n    def config(self, db):\n        self._db = db\n        self._con = None\n\n    def _connect(self):\n        self.reset_error()\n        self._con = sqlite3.connect(self._db, detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES, check_same_thread=True)\n        # foreign key support\n        self._con.execute(\"pragma foreign_keys = on\")\n        return self._con.cursor()\n\n    def on_error(self, err):\n        self._last_error = err\n\n    def reset_error(self):\n        self._last_error = None\n\n    def execute(self, sql, param):\n        lid = 0\n        cur = self._connect()\n\n        with self._con:\n            try:\n                if param:\n                    cur.execute(sql, param)\n                else:\n                    cur.execute(sql)\n\n                self._con.commit()\n                if cur.lastrowid is not None:\n                    lid = cur.lastrowid\n\n                self.reset_error()\n\n            except sqlite3.Error, e:\n                if self._con:\n                    self._con.rollback()\n                self.on_error(e)\n\n            finally:\n                return lid\n\n    def get_raw(self, sql, param=None):\n        cur = self._connect()\n        data = None\n\n        with self._con:\n            try:\n                if param:\n                    cur.execute(sql, param)\n                else:\n                    cur.execute(sql)\n\n                data = cur.fetchone()[0]\n\n                self.reset_error()\n\n            except sqlite3.Error, e:\n                if self._con:\n                    self._con.rollback()\n                self.on_error(e)\n\n            finally:\n                return data\n\n    def query(self, sql, param=None):\n        cur = self._connect()\n        data = []\n\n        with self._con:\n            try:\n                if param:\n                    cur.execute(sql, param)\n                else:\n                    cur.execute(sql)\n\n                row = cur.fetchone()\n\n                # format data\n                if row:\n                    field_names = [f[0] for f in cur.description]\n                    data = dict(zip(field_names, row))\n\n                self.reset_error()\n\n            except sqlite3.Error, e:\n                if self._con:\n                    self._con.rollback()\n                self.on_error(e)\n\n            finally:\n                return data\n\n    def query_all(self, sql, param=None):\n        cur = self._connect()\n        data = []\n\n        with self._con:\n            try:\n                if param:\n                    cur.execute(sql, param)\n                else:\n                    cur.execute(sql)\n\n                rows = cur.fetchall()\n\n                # format data\n                if len(rows) > 0:\n                    field_names = [f[0] for f in cur.description]\n                    data = [dict(zip(field_names, r)) for r in rows]\n\n                self.reset_error()\n\n            except sqlite3.Error, e:\n                if self._con:\n                    self._con.rollback()\n                self.on_error(e)\n\n            finally:\n                return data\n```\n\n`SqliteHelper` 这个类是专门对应 SQLite 数据库的，如果要采用其他数据库就另外写对应的 Helper 类就行。\n\n如果你有先阅读推荐的两篇文章，那么这段看似很长的代码其实一点都不难，无非就是 `_connect()` 连接数据库、`execute()` 执行 SQL 语句、`query_all()` 查询所有结果和 `query()` 查询一个结果这三个基本的功能。只是各种 try 和 except 比较多，因为数据库需要在操作失败的时候进行回滚。\n\n`query_all()` 和 `query()` 函数中把原始的数据查询出来之后，将数据打包成了一个数组，使用字典保存每一行的数据，继而作为一个数组元素存在。所以在访问结果（一个表）的时候，通过下标可以访问每一行，通过字段名字访问值。\n\n比较需要注意的是 `_connect()` 函数的第一行 `sqlite3.connect(self._db, detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES, check_same_thread=True)`。这个是让 sqlite 支持日期的设置。\n\n另一个地方是连接数据库之后，必须手动执行一句 SQL 语句，使 sqlite3 支持外键。\n\n```python\nself._con.execute(\"pragma foreign_keys = on\")\n```\n\n现在已经封装好了数据库的连接、查询和执行功能了，只需要一句语句就能查询 / 执行 SQL 语句了。\n\n### \\_\\_init\\_\\_.py\n\n接下来是为设计好的数据库编写特定的 API 了。\n\n我希望直接使用 store 这个包来操作了，不再在包里面再另外弄文件。于是可以直接在包的 `__init__.py` 里面写一下静态的 API。\n\n```python\n# in __init.py__\nimport time\n\nimport databaseHelper\n\n_db = databaseHelper.SqliteHelper(\"data.db\")\n\n\ndef error():\n    return _db.last_error\n\n\nclass notebook(object):\n    @staticmethod\n    def new(name):\n        return _db.execute(\"INSERT INTO notebook VALUES(null,?)\", (name,))\n\n    @staticmethod\n    def delete(id):\n        return _db.execute(\"DELETE FROM notebook WHERE id=?\", (id,))\n\n    @staticmethod\n    def update(id, name):\n        return _db.execute(\"UPDATE notebook SET name=? WHERE id=?\", (name, id))\n\n    @staticmethod\n    def get_all():\n        return _db.query_all(\"SELECT * FROM notebook ORDER BY id ASC\")\n\n\nclass chapter(object):\n    @staticmethod\n    def new(name, notebook_id=1):\n        return _db.execute(\"INSERT INTO chapter VALUES(null,?,?)\", (name, notebook_id))\n\n    @staticmethod\n    def delete(id):\n        return _db.execute(\"DELETE FROM chapter WHERE id=?\", (id,))\n\n    @staticmethod\n    def update(id, name):\n        return _db.execute(\"UPDATE chapter SET name=? WHERE id=?\", (name, id))\n\n    @staticmethod\n    def get_all(notebook_id=None):\n        if notebook_id:\n            return _db.query_all(\"SELECT * FROM chapter ORDER BY id ASC WHERE nid=?\", (notebook_id,))\n        else:\n            return _db.query_all(\"SELECT * FROM chapter ORDER BY id ASC\")\n```\n\n这样的话，只要执行了 `import store`，就可以用形似 `store.notebook.new(...)` 的 API 来操作文件夹，语义十分清晰。\n\n在应用中需要得到的数据基本都能定下来，例如取所有的文件夹、取某文件夹下所有的文档等。为这些比较基础的写一下封装有利于避免在应用中写 SQL 语句，也能避免数据库有什么更改而连带造成应用中的代码也需要更改。\n\n也就是，应用只需要知道调用什么 API 操作数据就行了，无需考虑应该数据怎么取。\n\n随意插入几个数据，可以看到数据成功存入数据库了。\n\n> 查看 SQLite 的数据库（一个 db 文件）可以使用‘SQLite Database Browser’。\n\n![插入数据库 1](https://i.imgur.com/bTr0dyQ.png)\n\n## 是否可用 Pyside 提供的 QtSql\n\nPyside 本身也提供丰富的数据库支持，如果源数据是比较平面，例如表格和列表，那么使用 Pyside 自带的 QSqlTableModel、QSqlRelationalTableModel、QSqlQueryModel 会比自己写更好，无需自己再造轮子。这些 Pyside 提供的 “轮子” 已经带有对数据库的操作，而且因为是官方写的，总比自己写出来的放心。\n\n然而树状的阶级型数据，并没有原生 model 支持，过程都必定要涉及将数据库的表格型结构转化为树状，所以自己写也没差。\n\n形象一点的话，数据的流向如下：\n\n`treeModel <--> 自定义数据结构（数组） <--> 数据库 `\n\n这是自己写操作数据库类的情况。\n\n`treeModel <--> QSqlTableModel/QSqlRelationalTableModel/QSqlQueryModel <--> 数据库 `\n\n这是用原生 model 的情况。\n\n需要注意的是上面的流中，treeModel 和数据库才是重要的，中间只是一个类似 adapter 的存在，那么明显直接用自定义的数据结构更方便。\n\n> 类 QSqlTableModel、QSqlRelationalTableModel、QSqlQueryModel 都在 PySide.QtSql 下。\n\n## 小记\n\n注意真的开发软件如果像这系列的想到一个功能就开发一个，写一段代码就运行一下来测试是不行。尤其是团队开发的时候，不可能每次写一段代码就整个应用运行一次。应用如果很大，编译起来时间长是一个问题，有些必要模块甚至还没开发出来也是一个问题。真正的软件开发还需要架构设计、写文档、画层次图和使用测试驱动开发等流程。此系列的文章只是入门和熟悉 python+QT 的开发，读者还需要额外学习更多的开发知识。","source":"_posts/python-with-Qt-application-development/python-×-Qt应用开发-·-5-数据库helper类的编写.md","raw":"---\ntitle: python × Qt 应用开发 · 5 -- 数据库 helper 类的编写\ncategories:\n  - [技术, 软件]\n  - [编程语言, python]\ntags: [python, Qt, software]\npermalink: python-with-qt-application-development-5-database-helper\nid: 17\nupdated: '2015-03-02 17:10:09'\ndate: 2014-03-29 08:46:11\n---\n\n在 [上一篇博文](http://blog.e10t.net/python-with-qt-application-development-4-database-design/) 中已经生成了数据库，而代码中的视图和模型也准备好了，但是怎么将两者联系起来呢？显然我们需要在其中做做文章，找一个 “中间人” 去读取数据库的数据并且转化为适合模型的数据。通常称这个 “中间人” 为数据库 helper 类。\n\n## 什么是 helper 类\n顾名思义就是类似助手的一个类，数据库的 helper 类就是一个帮助程序员方便调用数据库的类。此类可以做的事情通常都是包括连接数据库，执行 SQL，转换数据类型等。\n\n## 操作 Python 自带的 sqlite3 库\n\n可以自己纯手写 python 代码来全程管理数据库，需要操心的地方有点多。\n\n### databaseHelper\n\n在 `app` 包下新建一个 `store` 包，新建一个 `databaseHelper.py` 文件。\n\n为帮助代码的理解，极其推荐先去阅读 [Introduction to SQLite in Python](http://www.pythoncentral.io/introduction-to-sqlite-in-python/) 和[Advanced SQLite Usage in Python](http://www.pythoncentral.io/advanced-sqlite-usage-in-python/)，SQLite 的基本操作和进阶应用都有详细而清晰的介绍，在这就没必要重新再说。\n\n经过以上的阅读，数据库的操作基本能掌握了，然而我们的目标是写出一个比较通用的类。\n\n```python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n__author__ = 'draco'\n\nimport sqlite3\n\nclass SqliteHelper(object):\n    \"\"\"\"\"\"\n    @property\n    def last_error(self):\n        return self._last_error\n\n    def __init__(self, db=\":memory:\"):\n        super(SqliteHelper, self).__init__()\n\n        self._last_error = None\n        self._db = db\n        self._con = None\n\n    def config(self, db):\n        self._db = db\n        self._con = None\n\n    def _connect(self):\n        self.reset_error()\n        self._con = sqlite3.connect(self._db, detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES, check_same_thread=True)\n        # foreign key support\n        self._con.execute(\"pragma foreign_keys = on\")\n        return self._con.cursor()\n\n    def on_error(self, err):\n        self._last_error = err\n\n    def reset_error(self):\n        self._last_error = None\n\n    def execute(self, sql, param):\n        lid = 0\n        cur = self._connect()\n\n        with self._con:\n            try:\n                if param:\n                    cur.execute(sql, param)\n                else:\n                    cur.execute(sql)\n\n                self._con.commit()\n                if cur.lastrowid is not None:\n                    lid = cur.lastrowid\n\n                self.reset_error()\n\n            except sqlite3.Error, e:\n                if self._con:\n                    self._con.rollback()\n                self.on_error(e)\n\n            finally:\n                return lid\n\n    def get_raw(self, sql, param=None):\n        cur = self._connect()\n        data = None\n\n        with self._con:\n            try:\n                if param:\n                    cur.execute(sql, param)\n                else:\n                    cur.execute(sql)\n\n                data = cur.fetchone()[0]\n\n                self.reset_error()\n\n            except sqlite3.Error, e:\n                if self._con:\n                    self._con.rollback()\n                self.on_error(e)\n\n            finally:\n                return data\n\n    def query(self, sql, param=None):\n        cur = self._connect()\n        data = []\n\n        with self._con:\n            try:\n                if param:\n                    cur.execute(sql, param)\n                else:\n                    cur.execute(sql)\n\n                row = cur.fetchone()\n\n                # format data\n                if row:\n                    field_names = [f[0] for f in cur.description]\n                    data = dict(zip(field_names, row))\n\n                self.reset_error()\n\n            except sqlite3.Error, e:\n                if self._con:\n                    self._con.rollback()\n                self.on_error(e)\n\n            finally:\n                return data\n\n    def query_all(self, sql, param=None):\n        cur = self._connect()\n        data = []\n\n        with self._con:\n            try:\n                if param:\n                    cur.execute(sql, param)\n                else:\n                    cur.execute(sql)\n\n                rows = cur.fetchall()\n\n                # format data\n                if len(rows) > 0:\n                    field_names = [f[0] for f in cur.description]\n                    data = [dict(zip(field_names, r)) for r in rows]\n\n                self.reset_error()\n\n            except sqlite3.Error, e:\n                if self._con:\n                    self._con.rollback()\n                self.on_error(e)\n\n            finally:\n                return data\n```\n\n`SqliteHelper` 这个类是专门对应 SQLite 数据库的，如果要采用其他数据库就另外写对应的 Helper 类就行。\n\n如果你有先阅读推荐的两篇文章，那么这段看似很长的代码其实一点都不难，无非就是 `_connect()` 连接数据库、`execute()` 执行 SQL 语句、`query_all()` 查询所有结果和 `query()` 查询一个结果这三个基本的功能。只是各种 try 和 except 比较多，因为数据库需要在操作失败的时候进行回滚。\n\n`query_all()` 和 `query()` 函数中把原始的数据查询出来之后，将数据打包成了一个数组，使用字典保存每一行的数据，继而作为一个数组元素存在。所以在访问结果（一个表）的时候，通过下标可以访问每一行，通过字段名字访问值。\n\n比较需要注意的是 `_connect()` 函数的第一行 `sqlite3.connect(self._db, detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES, check_same_thread=True)`。这个是让 sqlite 支持日期的设置。\n\n另一个地方是连接数据库之后，必须手动执行一句 SQL 语句，使 sqlite3 支持外键。\n\n```python\nself._con.execute(\"pragma foreign_keys = on\")\n```\n\n现在已经封装好了数据库的连接、查询和执行功能了，只需要一句语句就能查询 / 执行 SQL 语句了。\n\n### \\_\\_init\\_\\_.py\n\n接下来是为设计好的数据库编写特定的 API 了。\n\n我希望直接使用 store 这个包来操作了，不再在包里面再另外弄文件。于是可以直接在包的 `__init__.py` 里面写一下静态的 API。\n\n```python\n# in __init.py__\nimport time\n\nimport databaseHelper\n\n_db = databaseHelper.SqliteHelper(\"data.db\")\n\n\ndef error():\n    return _db.last_error\n\n\nclass notebook(object):\n    @staticmethod\n    def new(name):\n        return _db.execute(\"INSERT INTO notebook VALUES(null,?)\", (name,))\n\n    @staticmethod\n    def delete(id):\n        return _db.execute(\"DELETE FROM notebook WHERE id=?\", (id,))\n\n    @staticmethod\n    def update(id, name):\n        return _db.execute(\"UPDATE notebook SET name=? WHERE id=?\", (name, id))\n\n    @staticmethod\n    def get_all():\n        return _db.query_all(\"SELECT * FROM notebook ORDER BY id ASC\")\n\n\nclass chapter(object):\n    @staticmethod\n    def new(name, notebook_id=1):\n        return _db.execute(\"INSERT INTO chapter VALUES(null,?,?)\", (name, notebook_id))\n\n    @staticmethod\n    def delete(id):\n        return _db.execute(\"DELETE FROM chapter WHERE id=?\", (id,))\n\n    @staticmethod\n    def update(id, name):\n        return _db.execute(\"UPDATE chapter SET name=? WHERE id=?\", (name, id))\n\n    @staticmethod\n    def get_all(notebook_id=None):\n        if notebook_id:\n            return _db.query_all(\"SELECT * FROM chapter ORDER BY id ASC WHERE nid=?\", (notebook_id,))\n        else:\n            return _db.query_all(\"SELECT * FROM chapter ORDER BY id ASC\")\n```\n\n这样的话，只要执行了 `import store`，就可以用形似 `store.notebook.new(...)` 的 API 来操作文件夹，语义十分清晰。\n\n在应用中需要得到的数据基本都能定下来，例如取所有的文件夹、取某文件夹下所有的文档等。为这些比较基础的写一下封装有利于避免在应用中写 SQL 语句，也能避免数据库有什么更改而连带造成应用中的代码也需要更改。\n\n也就是，应用只需要知道调用什么 API 操作数据就行了，无需考虑应该数据怎么取。\n\n随意插入几个数据，可以看到数据成功存入数据库了。\n\n> 查看 SQLite 的数据库（一个 db 文件）可以使用‘SQLite Database Browser’。\n\n![插入数据库 1](https://i.imgur.com/bTr0dyQ.png)\n\n## 是否可用 Pyside 提供的 QtSql\n\nPyside 本身也提供丰富的数据库支持，如果源数据是比较平面，例如表格和列表，那么使用 Pyside 自带的 QSqlTableModel、QSqlRelationalTableModel、QSqlQueryModel 会比自己写更好，无需自己再造轮子。这些 Pyside 提供的 “轮子” 已经带有对数据库的操作，而且因为是官方写的，总比自己写出来的放心。\n\n然而树状的阶级型数据，并没有原生 model 支持，过程都必定要涉及将数据库的表格型结构转化为树状，所以自己写也没差。\n\n形象一点的话，数据的流向如下：\n\n`treeModel <--> 自定义数据结构（数组） <--> 数据库 `\n\n这是自己写操作数据库类的情况。\n\n`treeModel <--> QSqlTableModel/QSqlRelationalTableModel/QSqlQueryModel <--> 数据库 `\n\n这是用原生 model 的情况。\n\n需要注意的是上面的流中，treeModel 和数据库才是重要的，中间只是一个类似 adapter 的存在，那么明显直接用自定义的数据结构更方便。\n\n> 类 QSqlTableModel、QSqlRelationalTableModel、QSqlQueryModel 都在 PySide.QtSql 下。\n\n## 小记\n\n注意真的开发软件如果像这系列的想到一个功能就开发一个，写一段代码就运行一下来测试是不行。尤其是团队开发的时候，不可能每次写一段代码就整个应用运行一次。应用如果很大，编译起来时间长是一个问题，有些必要模块甚至还没开发出来也是一个问题。真正的软件开发还需要架构设计、写文档、画层次图和使用测试驱动开发等流程。此系列的文章只是入门和熟悉 python+QT 的开发，读者还需要额外学习更多的开发知识。","slug":"python-with-qt-application-development-5-database-helper","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyux100d6n7t4kuibeuzv","content":"<p>在 <a href=\"http://blog.e10t.net/python-with-qt-application-development-4-database-design/\">上一篇博文</a> 中已经生成了数据库，而代码中的视图和模型也准备好了，但是怎么将两者联系起来呢？显然我们需要在其中做做文章，找一个 “中间人” 去读取数据库的数据并且转化为适合模型的数据。通常称这个 “中间人” 为数据库 helper 类。</p>\n<h2 id=\"什么是-helper-类\"><a href=\"#什么是-helper-类\" class=\"headerlink\" title=\"什么是 helper 类\"></a>什么是 helper 类</h2><p>顾名思义就是类似助手的一个类，数据库的 helper 类就是一个帮助程序员方便调用数据库的类。此类可以做的事情通常都是包括连接数据库，执行 SQL，转换数据类型等。</p>\n<h2 id=\"操作-Python-自带的-sqlite3-库\"><a href=\"#操作-Python-自带的-sqlite3-库\" class=\"headerlink\" title=\"操作 Python 自带的 sqlite3 库\"></a>操作 Python 自带的 sqlite3 库</h2><p>可以自己纯手写 python 代码来全程管理数据库，需要操心的地方有点多。</p>\n<h3 id=\"databaseHelper\"><a href=\"#databaseHelper\" class=\"headerlink\" title=\"databaseHelper\"></a>databaseHelper</h3><p>在 <code>app</code> 包下新建一个 <code>store</code> 包，新建一个 <code>databaseHelper.py</code> 文件。</p>\n<p>为帮助代码的理解，极其推荐先去阅读 <a href=\"http://www.pythoncentral.io/introduction-to-sqlite-in-python/\" target=\"_blank\" rel=\"noopener\">Introduction to SQLite in Python</a> 和<a href=\"http://www.pythoncentral.io/advanced-sqlite-usage-in-python/\" target=\"_blank\" rel=\"noopener\">Advanced SQLite Usage in Python</a>，SQLite 的基本操作和进阶应用都有详细而清晰的介绍，在这就没必要重新再说。</p>\n<p>经过以上的阅读，数据库的操作基本能掌握了，然而我们的目标是写出一个比较通用的类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = <span class=\"string\">'draco'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqliteHelper</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"\"\"\"</span></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">last_error</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._last_error</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, db=<span class=\"string\">\":memory:\"</span>)</span>:</span></span><br><span class=\"line\">        super(SqliteHelper, self).__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self._last_error = <span class=\"literal\">None</span></span><br><span class=\"line\">        self._db = db</span><br><span class=\"line\">        self._con = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">config</span><span class=\"params\">(self, db)</span>:</span></span><br><span class=\"line\">        self._db = db</span><br><span class=\"line\">        self._con = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_connect</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.reset_error()</span><br><span class=\"line\">        self._con = sqlite3.connect(self._db, detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES, check_same_thread=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"comment\"># foreign key support</span></span><br><span class=\"line\">        self._con.execute(<span class=\"string\">\"pragma foreign_keys = on\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._con.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_error</span><span class=\"params\">(self, err)</span>:</span></span><br><span class=\"line\">        self._last_error = err</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reset_error</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._last_error = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span><span class=\"params\">(self, sql, param)</span>:</span></span><br><span class=\"line\">        lid = <span class=\"number\">0</span></span><br><span class=\"line\">        cur = self._connect()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> self._con:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> param:</span><br><span class=\"line\">                    cur.execute(sql, param)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    cur.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">                self._con.commit()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> cur.lastrowid <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    lid = cur.lastrowid</span><br><span class=\"line\"></span><br><span class=\"line\">                self.reset_error()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">except</span> sqlite3.Error, e:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> self._con:</span><br><span class=\"line\">                    self._con.rollback()</span><br><span class=\"line\">                self.on_error(e)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> lid</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_raw</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        cur = self._connect()</span><br><span class=\"line\">        data = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> self._con:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> param:</span><br><span class=\"line\">                    cur.execute(sql, param)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    cur.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">                data = cur.fetchone()[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">                self.reset_error()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">except</span> sqlite3.Error, e:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> self._con:</span><br><span class=\"line\">                    self._con.rollback()</span><br><span class=\"line\">                self.on_error(e)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">query</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        cur = self._connect()</span><br><span class=\"line\">        data = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> self._con:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> param:</span><br><span class=\"line\">                    cur.execute(sql, param)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    cur.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">                row = cur.fetchone()</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># format data</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> row:</span><br><span class=\"line\">                    field_names = [f[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> cur.description]</span><br><span class=\"line\">                    data = dict(zip(field_names, row))</span><br><span class=\"line\"></span><br><span class=\"line\">                self.reset_error()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">except</span> sqlite3.Error, e:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> self._con:</span><br><span class=\"line\">                    self._con.rollback()</span><br><span class=\"line\">                self.on_error(e)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">query_all</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        cur = self._connect()</span><br><span class=\"line\">        data = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> self._con:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> param:</span><br><span class=\"line\">                    cur.execute(sql, param)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    cur.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">                rows = cur.fetchall()</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># format data</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> len(rows) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    field_names = [f[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> cur.description]</span><br><span class=\"line\">                    data = [dict(zip(field_names, r)) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> rows]</span><br><span class=\"line\"></span><br><span class=\"line\">                self.reset_error()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">except</span> sqlite3.Error, e:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> self._con:</span><br><span class=\"line\">                    self._con.rollback()</span><br><span class=\"line\">                self.on_error(e)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n<p><code>SqliteHelper</code> 这个类是专门对应 SQLite 数据库的，如果要采用其他数据库就另外写对应的 Helper 类就行。</p>\n<p>如果你有先阅读推荐的两篇文章，那么这段看似很长的代码其实一点都不难，无非就是 <code>_connect()</code> 连接数据库、<code>execute()</code> 执行 SQL 语句、<code>query_all()</code> 查询所有结果和 <code>query()</code> 查询一个结果这三个基本的功能。只是各种 try 和 except 比较多，因为数据库需要在操作失败的时候进行回滚。</p>\n<p><code>query_all()</code> 和 <code>query()</code> 函数中把原始的数据查询出来之后，将数据打包成了一个数组，使用字典保存每一行的数据，继而作为一个数组元素存在。所以在访问结果（一个表）的时候，通过下标可以访问每一行，通过字段名字访问值。</p>\n<p>比较需要注意的是 <code>_connect()</code> 函数的第一行 <code>sqlite3.connect(self._db, detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES, check_same_thread=True)</code>。这个是让 sqlite 支持日期的设置。</p>\n<p>另一个地方是连接数据库之后，必须手动执行一句 SQL 语句，使 sqlite3 支持外键。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self._con.execute(<span class=\"string\">\"pragma foreign_keys = on\"</span>)</span><br></pre></td></tr></table></figure>\n<p>现在已经封装好了数据库的连接、查询和执行功能了，只需要一句语句就能查询 / 执行 SQL 语句了。</p>\n<h3 id=\"init-py\"><a href=\"#init-py\" class=\"headerlink\" title=\"__init__.py\"></a>__init__.py</h3><p>接下来是为设计好的数据库编写特定的 API 了。</p>\n<p>我希望直接使用 store 这个包来操作了，不再在包里面再另外弄文件。于是可以直接在包的 <code>__init__.py</code> 里面写一下静态的 API。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># in __init.py__</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> databaseHelper</span><br><span class=\"line\"></span><br><span class=\"line\">_db = databaseHelper.SqliteHelper(<span class=\"string\">\"data.db\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">error</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _db.last_error</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">notebook</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">new</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _db.execute(<span class=\"string\">\"INSERT INTO notebook VALUES(null,?)\"</span>, (name,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(id)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _db.execute(<span class=\"string\">\"DELETE FROM notebook WHERE id=?\"</span>, (id,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(id, name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _db.execute(<span class=\"string\">\"UPDATE notebook SET name=? WHERE id=?\"</span>, (name, id))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_all</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _db.query_all(<span class=\"string\">\"SELECT * FROM notebook ORDER BY id ASC\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">chapter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">new</span><span class=\"params\">(name, notebook_id=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _db.execute(<span class=\"string\">\"INSERT INTO chapter VALUES(null,?,?)\"</span>, (name, notebook_id))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(id)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _db.execute(<span class=\"string\">\"DELETE FROM chapter WHERE id=?\"</span>, (id,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(id, name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _db.execute(<span class=\"string\">\"UPDATE chapter SET name=? WHERE id=?\"</span>, (name, id))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_all</span><span class=\"params\">(notebook_id=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> notebook_id:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _db.query_all(<span class=\"string\">\"SELECT * FROM chapter ORDER BY id ASC WHERE nid=?\"</span>, (notebook_id,))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _db.query_all(<span class=\"string\">\"SELECT * FROM chapter ORDER BY id ASC\"</span>)</span><br></pre></td></tr></table></figure>\n<p>这样的话，只要执行了 <code>import store</code>，就可以用形似 <code>store.notebook.new(...)</code> 的 API 来操作文件夹，语义十分清晰。</p>\n<p>在应用中需要得到的数据基本都能定下来，例如取所有的文件夹、取某文件夹下所有的文档等。为这些比较基础的写一下封装有利于避免在应用中写 SQL 语句，也能避免数据库有什么更改而连带造成应用中的代码也需要更改。</p>\n<p>也就是，应用只需要知道调用什么 API 操作数据就行了，无需考虑应该数据怎么取。</p>\n<p>随意插入几个数据，可以看到数据成功存入数据库了。</p>\n<blockquote>\n<p>查看 SQLite 的数据库（一个 db 文件）可以使用‘SQLite Database Browser’。</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/bTr0dyQ.png\" alt=\"插入数据库 1\"></p>\n<h2 id=\"是否可用-Pyside-提供的-QtSql\"><a href=\"#是否可用-Pyside-提供的-QtSql\" class=\"headerlink\" title=\"是否可用 Pyside 提供的 QtSql\"></a>是否可用 Pyside 提供的 QtSql</h2><p>Pyside 本身也提供丰富的数据库支持，如果源数据是比较平面，例如表格和列表，那么使用 Pyside 自带的 QSqlTableModel、QSqlRelationalTableModel、QSqlQueryModel 会比自己写更好，无需自己再造轮子。这些 Pyside 提供的 “轮子” 已经带有对数据库的操作，而且因为是官方写的，总比自己写出来的放心。</p>\n<p>然而树状的阶级型数据，并没有原生 model 支持，过程都必定要涉及将数据库的表格型结构转化为树状，所以自己写也没差。</p>\n<p>形象一点的话，数据的流向如下：</p>\n<p><code>treeModel &lt;--&gt; 自定义数据结构（数组） &lt;--&gt; 数据库</code></p>\n<p>这是自己写操作数据库类的情况。</p>\n<p><code>treeModel &lt;--&gt; QSqlTableModel/QSqlRelationalTableModel/QSqlQueryModel &lt;--&gt; 数据库</code></p>\n<p>这是用原生 model 的情况。</p>\n<p>需要注意的是上面的流中，treeModel 和数据库才是重要的，中间只是一个类似 adapter 的存在，那么明显直接用自定义的数据结构更方便。</p>\n<blockquote>\n<p>类 QSqlTableModel、QSqlRelationalTableModel、QSqlQueryModel 都在 PySide.QtSql 下。</p>\n</blockquote>\n<h2 id=\"小记\"><a href=\"#小记\" class=\"headerlink\" title=\"小记\"></a>小记</h2><p>注意真的开发软件如果像这系列的想到一个功能就开发一个，写一段代码就运行一下来测试是不行。尤其是团队开发的时候，不可能每次写一段代码就整个应用运行一次。应用如果很大，编译起来时间长是一个问题，有些必要模块甚至还没开发出来也是一个问题。真正的软件开发还需要架构设计、写文档、画层次图和使用测试驱动开发等流程。此系列的文章只是入门和熟悉 python+QT 的开发，读者还需要额外学习更多的开发知识。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 <a href=\"http://blog.e10t.net/python-with-qt-application-development-4-database-design/\">上一篇博文</a> 中已经生成了数据库，而代码中的视图和模型也准备好了，但是怎么将两者联系起来呢？显然我们需要在其中做做文章，找一个 “中间人” 去读取数据库的数据并且转化为适合模型的数据。通常称这个 “中间人” 为数据库 helper 类。</p>\n<h2 id=\"什么是-helper-类\"><a href=\"#什么是-helper-类\" class=\"headerlink\" title=\"什么是 helper 类\"></a>什么是 helper 类</h2><p>顾名思义就是类似助手的一个类，数据库的 helper 类就是一个帮助程序员方便调用数据库的类。此类可以做的事情通常都是包括连接数据库，执行 SQL，转换数据类型等。</p>\n<h2 id=\"操作-Python-自带的-sqlite3-库\"><a href=\"#操作-Python-自带的-sqlite3-库\" class=\"headerlink\" title=\"操作 Python 自带的 sqlite3 库\"></a>操作 Python 自带的 sqlite3 库</h2><p>可以自己纯手写 python 代码来全程管理数据库，需要操心的地方有点多。</p>\n<h3 id=\"databaseHelper\"><a href=\"#databaseHelper\" class=\"headerlink\" title=\"databaseHelper\"></a>databaseHelper</h3><p>在 <code>app</code> 包下新建一个 <code>store</code> 包，新建一个 <code>databaseHelper.py</code> 文件。</p>\n<p>为帮助代码的理解，极其推荐先去阅读 <a href=\"http://www.pythoncentral.io/introduction-to-sqlite-in-python/\" target=\"_blank\" rel=\"noopener\">Introduction to SQLite in Python</a> 和<a href=\"http://www.pythoncentral.io/advanced-sqlite-usage-in-python/\" target=\"_blank\" rel=\"noopener\">Advanced SQLite Usage in Python</a>，SQLite 的基本操作和进阶应用都有详细而清晰的介绍，在这就没必要重新再说。</p>\n<p>经过以上的阅读，数据库的操作基本能掌握了，然而我们的目标是写出一个比较通用的类。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = <span class=\"string\">'draco'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sqlite3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SqliteHelper</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"\"\"\"</span></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">last_error</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._last_error</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, db=<span class=\"string\">\":memory:\"</span>)</span>:</span></span><br><span class=\"line\">        super(SqliteHelper, self).__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">        self._last_error = <span class=\"literal\">None</span></span><br><span class=\"line\">        self._db = db</span><br><span class=\"line\">        self._con = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">config</span><span class=\"params\">(self, db)</span>:</span></span><br><span class=\"line\">        self._db = db</span><br><span class=\"line\">        self._con = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_connect</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.reset_error()</span><br><span class=\"line\">        self._con = sqlite3.connect(self._db, detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES, check_same_thread=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"comment\"># foreign key support</span></span><br><span class=\"line\">        self._con.execute(<span class=\"string\">\"pragma foreign_keys = on\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._con.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">on_error</span><span class=\"params\">(self, err)</span>:</span></span><br><span class=\"line\">        self._last_error = err</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">reset_error</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._last_error = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute</span><span class=\"params\">(self, sql, param)</span>:</span></span><br><span class=\"line\">        lid = <span class=\"number\">0</span></span><br><span class=\"line\">        cur = self._connect()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> self._con:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> param:</span><br><span class=\"line\">                    cur.execute(sql, param)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    cur.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">                self._con.commit()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> cur.lastrowid <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    lid = cur.lastrowid</span><br><span class=\"line\"></span><br><span class=\"line\">                self.reset_error()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">except</span> sqlite3.Error, e:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> self._con:</span><br><span class=\"line\">                    self._con.rollback()</span><br><span class=\"line\">                self.on_error(e)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> lid</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_raw</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        cur = self._connect()</span><br><span class=\"line\">        data = <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> self._con:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> param:</span><br><span class=\"line\">                    cur.execute(sql, param)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    cur.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">                data = cur.fetchone()[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">                self.reset_error()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">except</span> sqlite3.Error, e:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> self._con:</span><br><span class=\"line\">                    self._con.rollback()</span><br><span class=\"line\">                self.on_error(e)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">query</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        cur = self._connect()</span><br><span class=\"line\">        data = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> self._con:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> param:</span><br><span class=\"line\">                    cur.execute(sql, param)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    cur.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">                row = cur.fetchone()</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># format data</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> row:</span><br><span class=\"line\">                    field_names = [f[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> cur.description]</span><br><span class=\"line\">                    data = dict(zip(field_names, row))</span><br><span class=\"line\"></span><br><span class=\"line\">                self.reset_error()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">except</span> sqlite3.Error, e:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> self._con:</span><br><span class=\"line\">                    self._con.rollback()</span><br><span class=\"line\">                self.on_error(e)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">query_all</span><span class=\"params\">(self, sql, param=None)</span>:</span></span><br><span class=\"line\">        cur = self._connect()</span><br><span class=\"line\">        data = []</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">with</span> self._con:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> param:</span><br><span class=\"line\">                    cur.execute(sql, param)</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    cur.execute(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">                rows = cur.fetchall()</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># format data</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> len(rows) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                    field_names = [f[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> f <span class=\"keyword\">in</span> cur.description]</span><br><span class=\"line\">                    data = [dict(zip(field_names, r)) <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> rows]</span><br><span class=\"line\"></span><br><span class=\"line\">                self.reset_error()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">except</span> sqlite3.Error, e:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> self._con:</span><br><span class=\"line\">                    self._con.rollback()</span><br><span class=\"line\">                self.on_error(e)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n<p><code>SqliteHelper</code> 这个类是专门对应 SQLite 数据库的，如果要采用其他数据库就另外写对应的 Helper 类就行。</p>\n<p>如果你有先阅读推荐的两篇文章，那么这段看似很长的代码其实一点都不难，无非就是 <code>_connect()</code> 连接数据库、<code>execute()</code> 执行 SQL 语句、<code>query_all()</code> 查询所有结果和 <code>query()</code> 查询一个结果这三个基本的功能。只是各种 try 和 except 比较多，因为数据库需要在操作失败的时候进行回滚。</p>\n<p><code>query_all()</code> 和 <code>query()</code> 函数中把原始的数据查询出来之后，将数据打包成了一个数组，使用字典保存每一行的数据，继而作为一个数组元素存在。所以在访问结果（一个表）的时候，通过下标可以访问每一行，通过字段名字访问值。</p>\n<p>比较需要注意的是 <code>_connect()</code> 函数的第一行 <code>sqlite3.connect(self._db, detect_types=sqlite3.PARSE_DECLTYPES|sqlite3.PARSE_COLNAMES, check_same_thread=True)</code>。这个是让 sqlite 支持日期的设置。</p>\n<p>另一个地方是连接数据库之后，必须手动执行一句 SQL 语句，使 sqlite3 支持外键。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self._con.execute(<span class=\"string\">\"pragma foreign_keys = on\"</span>)</span><br></pre></td></tr></table></figure>\n<p>现在已经封装好了数据库的连接、查询和执行功能了，只需要一句语句就能查询 / 执行 SQL 语句了。</p>\n<h3 id=\"init-py\"><a href=\"#init-py\" class=\"headerlink\" title=\"__init__.py\"></a>__init__.py</h3><p>接下来是为设计好的数据库编写特定的 API 了。</p>\n<p>我希望直接使用 store 这个包来操作了，不再在包里面再另外弄文件。于是可以直接在包的 <code>__init__.py</code> 里面写一下静态的 API。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># in __init.py__</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> databaseHelper</span><br><span class=\"line\"></span><br><span class=\"line\">_db = databaseHelper.SqliteHelper(<span class=\"string\">\"data.db\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">error</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _db.last_error</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">notebook</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">new</span><span class=\"params\">(name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _db.execute(<span class=\"string\">\"INSERT INTO notebook VALUES(null,?)\"</span>, (name,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(id)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _db.execute(<span class=\"string\">\"DELETE FROM notebook WHERE id=?\"</span>, (id,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(id, name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _db.execute(<span class=\"string\">\"UPDATE notebook SET name=? WHERE id=?\"</span>, (name, id))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_all</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _db.query_all(<span class=\"string\">\"SELECT * FROM notebook ORDER BY id ASC\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">chapter</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">new</span><span class=\"params\">(name, notebook_id=<span class=\"number\">1</span>)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _db.execute(<span class=\"string\">\"INSERT INTO chapter VALUES(null,?,?)\"</span>, (name, notebook_id))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span><span class=\"params\">(id)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _db.execute(<span class=\"string\">\"DELETE FROM chapter WHERE id=?\"</span>, (id,))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(id, name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _db.execute(<span class=\"string\">\"UPDATE chapter SET name=? WHERE id=?\"</span>, (name, id))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_all</span><span class=\"params\">(notebook_id=None)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> notebook_id:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _db.query_all(<span class=\"string\">\"SELECT * FROM chapter ORDER BY id ASC WHERE nid=?\"</span>, (notebook_id,))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> _db.query_all(<span class=\"string\">\"SELECT * FROM chapter ORDER BY id ASC\"</span>)</span><br></pre></td></tr></table></figure>\n<p>这样的话，只要执行了 <code>import store</code>，就可以用形似 <code>store.notebook.new(...)</code> 的 API 来操作文件夹，语义十分清晰。</p>\n<p>在应用中需要得到的数据基本都能定下来，例如取所有的文件夹、取某文件夹下所有的文档等。为这些比较基础的写一下封装有利于避免在应用中写 SQL 语句，也能避免数据库有什么更改而连带造成应用中的代码也需要更改。</p>\n<p>也就是，应用只需要知道调用什么 API 操作数据就行了，无需考虑应该数据怎么取。</p>\n<p>随意插入几个数据，可以看到数据成功存入数据库了。</p>\n<blockquote>\n<p>查看 SQLite 的数据库（一个 db 文件）可以使用‘SQLite Database Browser’。</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/bTr0dyQ.png\" alt=\"插入数据库 1\"></p>\n<h2 id=\"是否可用-Pyside-提供的-QtSql\"><a href=\"#是否可用-Pyside-提供的-QtSql\" class=\"headerlink\" title=\"是否可用 Pyside 提供的 QtSql\"></a>是否可用 Pyside 提供的 QtSql</h2><p>Pyside 本身也提供丰富的数据库支持，如果源数据是比较平面，例如表格和列表，那么使用 Pyside 自带的 QSqlTableModel、QSqlRelationalTableModel、QSqlQueryModel 会比自己写更好，无需自己再造轮子。这些 Pyside 提供的 “轮子” 已经带有对数据库的操作，而且因为是官方写的，总比自己写出来的放心。</p>\n<p>然而树状的阶级型数据，并没有原生 model 支持，过程都必定要涉及将数据库的表格型结构转化为树状，所以自己写也没差。</p>\n<p>形象一点的话，数据的流向如下：</p>\n<p><code>treeModel &lt;--&gt; 自定义数据结构（数组） &lt;--&gt; 数据库</code></p>\n<p>这是自己写操作数据库类的情况。</p>\n<p><code>treeModel &lt;--&gt; QSqlTableModel/QSqlRelationalTableModel/QSqlQueryModel &lt;--&gt; 数据库</code></p>\n<p>这是用原生 model 的情况。</p>\n<p>需要注意的是上面的流中，treeModel 和数据库才是重要的，中间只是一个类似 adapter 的存在，那么明显直接用自定义的数据结构更方便。</p>\n<blockquote>\n<p>类 QSqlTableModel、QSqlRelationalTableModel、QSqlQueryModel 都在 PySide.QtSql 下。</p>\n</blockquote>\n<h2 id=\"小记\"><a href=\"#小记\" class=\"headerlink\" title=\"小记\"></a>小记</h2><p>注意真的开发软件如果像这系列的想到一个功能就开发一个，写一段代码就运行一下来测试是不行。尤其是团队开发的时候，不可能每次写一段代码就整个应用运行一次。应用如果很大，编译起来时间长是一个问题，有些必要模块甚至还没开发出来也是一个问题。真正的软件开发还需要架构设计、写文档、画层次图和使用测试驱动开发等流程。此系列的文章只是入门和熟悉 python+QT 的开发，读者还需要额外学习更多的开发知识。</p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://i.imgur.com/bTr0dyQ.png","popularPost_tmp_gaData":{"updated":"Mon Mar 02 2015 17:10:09 GMT+0800 (China Standard Time)","title":"python × Qt 应用开发 · 5 -- 数据库 helper 类的编写","path":"python-with-qt-application-development-5-database-helper/","eyeCatchImage":"https://i.imgur.com/bTr0dyQ.png","excerpt":null,"date":"2014-03-29T00:46:11.000Z","pv":0,"totalPV":0,"categories":"技术 > 编程语言 > python > 软件","tags":["python","Qt","software"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2313},{"title":"Google Chrome（谷歌浏览器）个人详细教程——扩展程序篇","id":"8","updated":"2014-04-15T07:32:57.000Z","date":"2014-01-22T20:45:24.000Z","_content":"\n从这篇个人教程开始，就是 Google Chrome 的进阶使用了，如果你只是偶尔使用浏览器上上网电脑小白，看了之前的教程基本就可以流畅地使用这个浏览器了，大可不再追看。只是，接下来所要涉及的，才是 Google Chrome 的迷人之处。\n\n不知道大家还是否记得 IE 时代的时候，如果你安装软件不留神，就有可能给 IE 装上不少所谓的“插件”，而且还删除不了（有点还是赤裸裸的病毒、木马），就是所谓的流氓插件了。其中最著名的似乎是“3721 中文上网助手”，大家上网一搜就知道这东西当年多么的难缠，用到的手段比如改注册表，注册系统内核，挂全局钩子，进程守护，简直就是木马和病毒了。如果知道了这东西是谁搞出来的你就会觉得非常滑稽，不过这话题不在本教程讨论的范围内，还请大家自己去了解。\n\n总之，插件存在的意义应该是辅助浏览器更好地工作的，而 IE 这样对于插件的容忍的方式却不能被大众所容忍。其实 IE 上只有很少有用的插件，比如各种下载工具添加在右键的下载选项，可以说几乎不需要插件。\n\n在插件上著名的就是 FireFox（火狐）了，其中最著名的插件大概是 FireBug 了。这是一个可以对网页进行各种 “解剖” 的插件，能让你了解每一个网页元素的所有属性、看清楚 DOM 树、看脚本的执行情况、查看文件的加载时间等。这是一个开发者必备的插件（前提是你使用火狐）。火狐的插件还有很多很多，在新版的火狐里有一个专门的页面指导你搜索和安装插件。在我的记忆里，火狐的插件然而，有一个恼人的弊病，那就是——安装了插件要重启火狐插件才能工作。其实，这也没办法，毕竟名字是“插件”，顾名思义大概就是要主程序加载的东东（个人理解，有误请指正）。还有，插件越装得多，浏览器就越慢，因为进程要处理的东西变多了。\n\n来看看 Google Chrome 如何？在 Chrome 上也有所谓的 “插件”，但是名字是“扩展程序”，也就是并不是插件，虽然也是能起到辅助浏览器的工作。Chrome 上的扩展程序安装了之后不需要重启浏览器，立刻就能使用，这是个优点。另外，根据官方的介绍，扩展程序都运行在分离的进程中，并不会影响浏览器的性能（当然还要看你的电脑的性能，这跟开很多个程序的情况差不多），也不会影响浏览器的安全性。让人不太爽的大概就是打开任务管理器会看到很多名字是“chrome.exe” 的进程，还有主进程占用内存比较多。\n\n现在就介绍怎么为 chrome 装上扩展程序。点击“扳手”->“工具”->“扩展程序”，浏览器会自动打开一个标签，其实就是设置里面的“扩展程序”。如果你并没有安装任何应用程序，那么右边的列表是空的，只有一个超链接。以下是我的 chrome 扩展程序截图：\n![chrome 扩展程序截图](http://i.imgur.com/1Y9dM.jpg)\n点击超链接来到 Google Chrome 网上应用商店。\n页面非常友好，左边有分类和搜索框，你可以根据自身需要来选择。\n比如我要安装这个应用（别吐槽有些图片加载不了，中国网络你懂的）\n![input tool](http://i.imgur.com/2eGnb.jpg)\n点击“添加至 CHROME”，弹出确认安装的对话框，按“安装”\n![setup](http://i.imgur.com/AxGXy.jpg)\n等按钮变成“已添加至 CHROME”，就搞掂了。\n\n要管理扩展程序，同样是在设置里面的 “扩展程序” 就可以进行卸载或者配置。\n\n至于每个扩展程序的配置，就不再讨论了。\n\n下面是个人推荐的扩展程序：\n\nspeed dial 2\n![speed dial 2](http://i.imgur.com/mRUVK.jpg)\n快捷工具\n![快捷工具](http://i.imgur.com/w58Oi.jpg)\n易词典\n![易词典](http://i.imgur.com/1BFHw.jpg)\nireader\n![ireader](http://i.imgur.com/MIcgw.jpg)\nProxy Switchy!\n![Proxy Switchy!](http://i.imgur.com/ZTM2L.jpg)\nread later fast\n![read later fast](http://i.imgur.com/57nsh.jpg)\n图片搜索\n![图片搜索](http://i.imgur.com/cv0HW.jpg)\n\n","source":"_posts/chrome-tutorial/Google-Chrome（谷歌浏览器）个人详细教程——扩展程序篇.md","raw":"---\ntitle: Google Chrome（谷歌浏览器）个人详细教程——扩展程序篇\ncategories:\n  - [技术, 教程]\ntags: [tutorial, chrome]\npermalink: chrome-tutorial-extension\nid: 8\nupdated: '2014-04-15 15:32:57'\ndate: 2014-01-23 04:45:24\n---\n\n从这篇个人教程开始，就是 Google Chrome 的进阶使用了，如果你只是偶尔使用浏览器上上网电脑小白，看了之前的教程基本就可以流畅地使用这个浏览器了，大可不再追看。只是，接下来所要涉及的，才是 Google Chrome 的迷人之处。\n\n不知道大家还是否记得 IE 时代的时候，如果你安装软件不留神，就有可能给 IE 装上不少所谓的“插件”，而且还删除不了（有点还是赤裸裸的病毒、木马），就是所谓的流氓插件了。其中最著名的似乎是“3721 中文上网助手”，大家上网一搜就知道这东西当年多么的难缠，用到的手段比如改注册表，注册系统内核，挂全局钩子，进程守护，简直就是木马和病毒了。如果知道了这东西是谁搞出来的你就会觉得非常滑稽，不过这话题不在本教程讨论的范围内，还请大家自己去了解。\n\n总之，插件存在的意义应该是辅助浏览器更好地工作的，而 IE 这样对于插件的容忍的方式却不能被大众所容忍。其实 IE 上只有很少有用的插件，比如各种下载工具添加在右键的下载选项，可以说几乎不需要插件。\n\n在插件上著名的就是 FireFox（火狐）了，其中最著名的插件大概是 FireBug 了。这是一个可以对网页进行各种 “解剖” 的插件，能让你了解每一个网页元素的所有属性、看清楚 DOM 树、看脚本的执行情况、查看文件的加载时间等。这是一个开发者必备的插件（前提是你使用火狐）。火狐的插件还有很多很多，在新版的火狐里有一个专门的页面指导你搜索和安装插件。在我的记忆里，火狐的插件然而，有一个恼人的弊病，那就是——安装了插件要重启火狐插件才能工作。其实，这也没办法，毕竟名字是“插件”，顾名思义大概就是要主程序加载的东东（个人理解，有误请指正）。还有，插件越装得多，浏览器就越慢，因为进程要处理的东西变多了。\n\n来看看 Google Chrome 如何？在 Chrome 上也有所谓的 “插件”，但是名字是“扩展程序”，也就是并不是插件，虽然也是能起到辅助浏览器的工作。Chrome 上的扩展程序安装了之后不需要重启浏览器，立刻就能使用，这是个优点。另外，根据官方的介绍，扩展程序都运行在分离的进程中，并不会影响浏览器的性能（当然还要看你的电脑的性能，这跟开很多个程序的情况差不多），也不会影响浏览器的安全性。让人不太爽的大概就是打开任务管理器会看到很多名字是“chrome.exe” 的进程，还有主进程占用内存比较多。\n\n现在就介绍怎么为 chrome 装上扩展程序。点击“扳手”->“工具”->“扩展程序”，浏览器会自动打开一个标签，其实就是设置里面的“扩展程序”。如果你并没有安装任何应用程序，那么右边的列表是空的，只有一个超链接。以下是我的 chrome 扩展程序截图：\n![chrome 扩展程序截图](http://i.imgur.com/1Y9dM.jpg)\n点击超链接来到 Google Chrome 网上应用商店。\n页面非常友好，左边有分类和搜索框，你可以根据自身需要来选择。\n比如我要安装这个应用（别吐槽有些图片加载不了，中国网络你懂的）\n![input tool](http://i.imgur.com/2eGnb.jpg)\n点击“添加至 CHROME”，弹出确认安装的对话框，按“安装”\n![setup](http://i.imgur.com/AxGXy.jpg)\n等按钮变成“已添加至 CHROME”，就搞掂了。\n\n要管理扩展程序，同样是在设置里面的 “扩展程序” 就可以进行卸载或者配置。\n\n至于每个扩展程序的配置，就不再讨论了。\n\n下面是个人推荐的扩展程序：\n\nspeed dial 2\n![speed dial 2](http://i.imgur.com/mRUVK.jpg)\n快捷工具\n![快捷工具](http://i.imgur.com/w58Oi.jpg)\n易词典\n![易词典](http://i.imgur.com/1BFHw.jpg)\nireader\n![ireader](http://i.imgur.com/MIcgw.jpg)\nProxy Switchy!\n![Proxy Switchy!](http://i.imgur.com/ZTM2L.jpg)\nread later fast\n![read later fast](http://i.imgur.com/57nsh.jpg)\n图片搜索\n![图片搜索](http://i.imgur.com/cv0HW.jpg)\n\n","slug":"chrome-tutorial-extension","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyux200d9n7t4thfi551r","content":"<p>从这篇个人教程开始，就是 Google Chrome 的进阶使用了，如果你只是偶尔使用浏览器上上网电脑小白，看了之前的教程基本就可以流畅地使用这个浏览器了，大可不再追看。只是，接下来所要涉及的，才是 Google Chrome 的迷人之处。</p>\n<p>不知道大家还是否记得 IE 时代的时候，如果你安装软件不留神，就有可能给 IE 装上不少所谓的“插件”，而且还删除不了（有点还是赤裸裸的病毒、木马），就是所谓的流氓插件了。其中最著名的似乎是“3721 中文上网助手”，大家上网一搜就知道这东西当年多么的难缠，用到的手段比如改注册表，注册系统内核，挂全局钩子，进程守护，简直就是木马和病毒了。如果知道了这东西是谁搞出来的你就会觉得非常滑稽，不过这话题不在本教程讨论的范围内，还请大家自己去了解。</p>\n<p>总之，插件存在的意义应该是辅助浏览器更好地工作的，而 IE 这样对于插件的容忍的方式却不能被大众所容忍。其实 IE 上只有很少有用的插件，比如各种下载工具添加在右键的下载选项，可以说几乎不需要插件。</p>\n<p>在插件上著名的就是 FireFox（火狐）了，其中最著名的插件大概是 FireBug 了。这是一个可以对网页进行各种 “解剖” 的插件，能让你了解每一个网页元素的所有属性、看清楚 DOM 树、看脚本的执行情况、查看文件的加载时间等。这是一个开发者必备的插件（前提是你使用火狐）。火狐的插件还有很多很多，在新版的火狐里有一个专门的页面指导你搜索和安装插件。在我的记忆里，火狐的插件然而，有一个恼人的弊病，那就是——安装了插件要重启火狐插件才能工作。其实，这也没办法，毕竟名字是“插件”，顾名思义大概就是要主程序加载的东东（个人理解，有误请指正）。还有，插件越装得多，浏览器就越慢，因为进程要处理的东西变多了。</p>\n<p>来看看 Google Chrome 如何？在 Chrome 上也有所谓的 “插件”，但是名字是“扩展程序”，也就是并不是插件，虽然也是能起到辅助浏览器的工作。Chrome 上的扩展程序安装了之后不需要重启浏览器，立刻就能使用，这是个优点。另外，根据官方的介绍，扩展程序都运行在分离的进程中，并不会影响浏览器的性能（当然还要看你的电脑的性能，这跟开很多个程序的情况差不多），也不会影响浏览器的安全性。让人不太爽的大概就是打开任务管理器会看到很多名字是“chrome.exe” 的进程，还有主进程占用内存比较多。</p>\n<p>现在就介绍怎么为 chrome 装上扩展程序。点击“扳手”-&gt;“工具”-&gt;“扩展程序”，浏览器会自动打开一个标签，其实就是设置里面的“扩展程序”。如果你并没有安装任何应用程序，那么右边的列表是空的，只有一个超链接。以下是我的 chrome 扩展程序截图：<br><img src=\"http://i.imgur.com/1Y9dM.jpg\" alt=\"chrome 扩展程序截图\"><br>点击超链接来到 Google Chrome 网上应用商店。<br>页面非常友好，左边有分类和搜索框，你可以根据自身需要来选择。<br>比如我要安装这个应用（别吐槽有些图片加载不了，中国网络你懂的）<br><img src=\"http://i.imgur.com/2eGnb.jpg\" alt=\"input tool\"><br>点击“添加至 CHROME”，弹出确认安装的对话框，按“安装”<br><img src=\"http://i.imgur.com/AxGXy.jpg\" alt=\"setup\"><br>等按钮变成“已添加至 CHROME”，就搞掂了。</p>\n<p>要管理扩展程序，同样是在设置里面的 “扩展程序” 就可以进行卸载或者配置。</p>\n<p>至于每个扩展程序的配置，就不再讨论了。</p>\n<p>下面是个人推荐的扩展程序：</p>\n<p>speed dial 2<br><img src=\"http://i.imgur.com/mRUVK.jpg\" alt=\"speed dial 2\"><br>快捷工具<br><img src=\"http://i.imgur.com/w58Oi.jpg\" alt=\"快捷工具\"><br>易词典<br><img src=\"http://i.imgur.com/1BFHw.jpg\" alt=\"易词典\"><br>ireader<br><img src=\"http://i.imgur.com/MIcgw.jpg\" alt=\"ireader\"><br>Proxy Switchy!<br><img src=\"http://i.imgur.com/ZTM2L.jpg\" alt=\"Proxy Switchy!\"><br>read later fast<br><img src=\"http://i.imgur.com/57nsh.jpg\" alt=\"read later fast\"><br>图片搜索<br><img src=\"http://i.imgur.com/cv0HW.jpg\" alt=\"图片搜索\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>从这篇个人教程开始，就是 Google Chrome 的进阶使用了，如果你只是偶尔使用浏览器上上网电脑小白，看了之前的教程基本就可以流畅地使用这个浏览器了，大可不再追看。只是，接下来所要涉及的，才是 Google Chrome 的迷人之处。</p>\n<p>不知道大家还是否记得 IE 时代的时候，如果你安装软件不留神，就有可能给 IE 装上不少所谓的“插件”，而且还删除不了（有点还是赤裸裸的病毒、木马），就是所谓的流氓插件了。其中最著名的似乎是“3721 中文上网助手”，大家上网一搜就知道这东西当年多么的难缠，用到的手段比如改注册表，注册系统内核，挂全局钩子，进程守护，简直就是木马和病毒了。如果知道了这东西是谁搞出来的你就会觉得非常滑稽，不过这话题不在本教程讨论的范围内，还请大家自己去了解。</p>\n<p>总之，插件存在的意义应该是辅助浏览器更好地工作的，而 IE 这样对于插件的容忍的方式却不能被大众所容忍。其实 IE 上只有很少有用的插件，比如各种下载工具添加在右键的下载选项，可以说几乎不需要插件。</p>\n<p>在插件上著名的就是 FireFox（火狐）了，其中最著名的插件大概是 FireBug 了。这是一个可以对网页进行各种 “解剖” 的插件，能让你了解每一个网页元素的所有属性、看清楚 DOM 树、看脚本的执行情况、查看文件的加载时间等。这是一个开发者必备的插件（前提是你使用火狐）。火狐的插件还有很多很多，在新版的火狐里有一个专门的页面指导你搜索和安装插件。在我的记忆里，火狐的插件然而，有一个恼人的弊病，那就是——安装了插件要重启火狐插件才能工作。其实，这也没办法，毕竟名字是“插件”，顾名思义大概就是要主程序加载的东东（个人理解，有误请指正）。还有，插件越装得多，浏览器就越慢，因为进程要处理的东西变多了。</p>\n<p>来看看 Google Chrome 如何？在 Chrome 上也有所谓的 “插件”，但是名字是“扩展程序”，也就是并不是插件，虽然也是能起到辅助浏览器的工作。Chrome 上的扩展程序安装了之后不需要重启浏览器，立刻就能使用，这是个优点。另外，根据官方的介绍，扩展程序都运行在分离的进程中，并不会影响浏览器的性能（当然还要看你的电脑的性能，这跟开很多个程序的情况差不多），也不会影响浏览器的安全性。让人不太爽的大概就是打开任务管理器会看到很多名字是“chrome.exe” 的进程，还有主进程占用内存比较多。</p>\n<p>现在就介绍怎么为 chrome 装上扩展程序。点击“扳手”-&gt;“工具”-&gt;“扩展程序”，浏览器会自动打开一个标签，其实就是设置里面的“扩展程序”。如果你并没有安装任何应用程序，那么右边的列表是空的，只有一个超链接。以下是我的 chrome 扩展程序截图：<br><img src=\"http://i.imgur.com/1Y9dM.jpg\" alt=\"chrome 扩展程序截图\"><br>点击超链接来到 Google Chrome 网上应用商店。<br>页面非常友好，左边有分类和搜索框，你可以根据自身需要来选择。<br>比如我要安装这个应用（别吐槽有些图片加载不了，中国网络你懂的）<br><img src=\"http://i.imgur.com/2eGnb.jpg\" alt=\"input tool\"><br>点击“添加至 CHROME”，弹出确认安装的对话框，按“安装”<br><img src=\"http://i.imgur.com/AxGXy.jpg\" alt=\"setup\"><br>等按钮变成“已添加至 CHROME”，就搞掂了。</p>\n<p>要管理扩展程序，同样是在设置里面的 “扩展程序” 就可以进行卸载或者配置。</p>\n<p>至于每个扩展程序的配置，就不再讨论了。</p>\n<p>下面是个人推荐的扩展程序：</p>\n<p>speed dial 2<br><img src=\"http://i.imgur.com/mRUVK.jpg\" alt=\"speed dial 2\"><br>快捷工具<br><img src=\"http://i.imgur.com/w58Oi.jpg\" alt=\"快捷工具\"><br>易词典<br><img src=\"http://i.imgur.com/1BFHw.jpg\" alt=\"易词典\"><br>ireader<br><img src=\"http://i.imgur.com/MIcgw.jpg\" alt=\"ireader\"><br>Proxy Switchy!<br><img src=\"http://i.imgur.com/ZTM2L.jpg\" alt=\"Proxy Switchy!\"><br>read later fast<br><img src=\"http://i.imgur.com/57nsh.jpg\" alt=\"read later fast\"><br>图片搜索<br><img src=\"http://i.imgur.com/cv0HW.jpg\" alt=\"图片搜索\"></p>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"http://i.imgur.com/1Y9dM.jpg","popularPost_tmp_gaData":{"updated":"Tue Apr 15 2014 15:32:57 GMT+0800 (China Standard Time)","title":"Google Chrome（谷歌浏览器）个人详细教程——扩展程序篇","path":"chrome-tutorial-extension/","eyeCatchImage":"http://i.imgur.com/1Y9dM.jpg","excerpt":null,"date":"2014-01-22T20:45:24.000Z","pv":0,"totalPV":0,"categories":"技术 > 教程","tags":["tutorial","chrome"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1413},{"title":"30 分钟速成古埃及历史","author":"exoticknight","_content":"\n前几天在 bilibili 上看了一个 up 主的埃及旅游系列 [vlog][开放世界埃及篇]，了解了一些关于古埃及历史的知识，再通过维基什么学习，写下本文以做笔记。\n\n本文基本来源中英文维基，英文为主中文为辅，精简了大量不太重要的细节，比较适合快速了解和学习古埃及历史。如果对内容有什么疑问或者质疑，请务必留下评论或者联系我做讨论。\n\n[开放世界埃及篇]: https://www.bilibili.com/medialist/play/ml454556918\n\n## 综述\n\n时间上只会覆盖到中世纪之前，个人认为古埃及在阿拉伯人入侵之后就算是玩完了，所以之后的时期不做记录。\n\n首先，整个古埃及基本就是沿着尼罗河建立的。尼罗河的走向是自南向北，古埃及也经常因为统治的原因，一段时期分成上埃及和下埃及，一段时期则是统一，正所谓分久必合，合久必分。上埃及是在南边即上游，而下埃及则是在北边即下游。\n\n埃及学者一般根据托勒密王朝早期古埃及祭祀曼涅托的《埃及史》将古埃及历史分成八到九个时期，三十一个王朝（一个王朝不一定只有一位法老），而古埃及人则似乎是不划分历史时期的。另外考古出来的历史也各国不一，这里以维基为准。\n\n这几个时期分别是前王朝时期、早王朝时期、古王国时期、第一中间期、中王国时期、第二中间期、新王国时期、第三中间期和古埃及后期。实际并不需要将所有的时期都记得一清二楚，只需要记得一些时期和王朝比较有名的事件和法老即可。\n\n另外古埃及到了第三中间期之后的后期，已经无力回天，被外族来回入侵，再之后又来了马其顿和罗马，最后被阿拉伯完全控制后到现在基本就已经是一个穆斯林国家了。\n\n古埃及年表在时间上的认定也不一，相差会有几十年，不过其开始一般都在 BC（before century，公元前）3100 左右。\n\n{% note info %}\n点击图片查看清晰大图\n{% endnote %}\n\n<img alt=\"古埃及地图，显示主要城市和地图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Ancient_Egypt_map-en.svg/293px-Ancient_Egypt_map-en.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/1/17/Ancient_Egypt_map-en.svg\" />\n\n## 前王朝时期（BC3100 之前）\n\n经历了旧石器时代和新石器时代，大概 BC3600 年开始，尼罗河沿岸出现几十个「诺姆」，相互各自斗争。\n\n> 诺姆：nome，源自希腊语 Νομός，意为 “行政区”；埃及语：Gau，中译「州」。\n\n## 早王朝时期（Early dynastic period, BC3100 - BC2686）\n\n### 第一王朝建立者，美尼斯\n\n传说中美尼斯（Menes）统一了上下埃及开创古埃及王朝。但从考古证据上则很难支持有这么一个人，反而认为是纳尔迈（Narmer）才是统一埃及第一人，或者说两者是同一个。\n\n包含一至二王朝，两个王朝，2 / 31。\n\n## 古王国时期（Old Kingdom, BC2686 - BC2181）\n\n### 第一个建造金字塔，左塞王\n\n现在看到的著名金字塔基本就在这个时期被建造。\n\n此时期第一个法老（pharaoh）左塞王（King Djoser）开始建造阶梯金字塔（最常见最有名那种），位置在萨卡拉（开罗以南约 30 公里）。\n\n阶梯金字塔据说是是伊姆霍特普（Imhotep）设计的。\n\n{% cq %}\n伊姆霍特普，出身平民，但因智慧过人，学识渊博，受到法老的破格重用。他在整个法老时代受到崇拜，死后被尊为神，名号被刻在法老左塞雕像的基座上。…… 古埃及医学的奠基人…… 被誉为历史上第一位留下姓名的建筑师与医师，被奉为医学之神\n*维基百科*\n{% endcq %}\n\n甚至有伊姆霍特普博物馆，见 [维基][wiki of Imhotep museum]，[egyptsites 博客][egyptsites 博客]。\n\n<img alt=\"左塞尔金字塔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/60/Saqqara_BW_5.jpg/640px-Saqqara_BW_5.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/6/60/Saqqara_BW_5.jpg\" />\n\n### 最大的金字塔，胡夫金字塔\n\n胡夫是第四王朝的第二位法老，是首位在吉萨建造金字塔的法老。今天去埃及旅游看的三座大金字塔就在吉萨，其中最大的就是胡夫下令修建。\n\n胡夫金字塔塔高大概 146.5 米，现为大概 137 米，边长接近 230 米，由 230 万块巨石搭建而成，最重的可达 50 吨，最小的也有 1.5 吨。\n\n胡夫金字塔是古代世界七大奇迹中最为古老和唯一尚存的建筑物。\n\n有一个入口，但是现在被封禁，只使用某位哈里发在 CE820 开凿的盗墓通道作为入口。\n\n> 尽管建造了最大的金字塔，但胡夫本人的雕像却是考古发掘中所有法老雕像中最小的。\n\n<img alt=\"胡夫金字塔，又名吉萨大金字塔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Gizeh_Cheops_BW_1.jpg/640px-Gizeh_Cheops_BW_1.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/d/d1/Gizeh_Cheops_BW_1.jpg\" />\n\n### 第二大金字塔，卡夫拉金字塔\n\n卡夫拉是胡夫的孙子。尽管看起来卡夫拉金字塔比胡夫金字塔小一点，但是卡夫拉金字塔底座更高了 10 米，塔周边也更多附属设施。\n\n狮身人面像斯芬克斯就属于附近的建筑，但并不是问路人问题杀人那只。\n\n<img alt=\"卡夫拉金字塔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Pyramid_of_Khufu.jpg/640px-Pyramid_of_Khufu.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/af/Pyramid_of_Khufu.jpg\" />\n\n\n\n<img alt=\"狮身人面像斯芬克斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a5/Cairo%2C_Gizeh%2C_Sphinx_and_Pyramid_of_Khufu%2C_Egypt%2C_Oct_2004.jpg/640px-Cairo%2C_Gizeh%2C_Sphinx_and_Pyramid_of_Khufu%2C_Egypt%2C_Oct_2004.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/a5/Cairo%2C_Gizeh%2C_Sphinx_and_Pyramid_of_Khufu%2C_Egypt%2C_Oct_2004.jpg\" />\n\n### 孟卡拉金字塔\n\n孟卡拉是第四王朝时期的第 16 位法老，孟卡拉金字塔远小于前两座金字塔，它的高度只有大约 65 米，总体积大约只有卡夫拉金字塔 1/10。\n\n萨拉丁的儿子奥斯曼曾试图拆除孟卡拉金字塔，最后太过困难而作罢，给金字塔北面留下很大的垂直裂缝。\n\n<img alt=\"孟卡拉金字塔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/Menkaures_Pyramid_Giza_Egypt.jpg/640px-Menkaures_Pyramid_Giza_Egypt.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/ab/Menkaures_Pyramid_Giza_Egypt.jpg\" />\n\n\n\n<img alt=\"金字塔俯视图，从右上到左下分别是胡夫金字塔，卡夫拉金字塔，孟卡拉金字塔，狮身人面像在右边与卡夫拉金字塔有一条堤道相连。via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Giza_pyramid_complex_%28map%29.svg/614px-Giza_pyramid_complex_%28map%29.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/e7/Giza_pyramid_complex_%28map%29.svg\" />\n\n包含三至六王朝，四个王朝，6 / 31。\n\n[wiki of Imhotep museum]: https://en.wikipedia.org/wiki/Imhotep_Museum\n[egyptsites 博客]: https://egyptsites.wordpress.com/2009/02/21/imhotep-museum/\n\n## 第一中间期（First Intermediate Period, BC2181 - BC2055）\n\n古王国时期后期出现严重干旱，国力下降，封建制度也削弱了中央权利，出现第一个黑暗时期，极其混乱的一个时期。这个时期法老权力被极度削弱，地方官员权利变大，在自己领地几乎就成了法老。\n\n七八王朝极度混乱，史书记录不清。\n\n### 曼图霍特普二世（Mentuhotep II）重新统一\n\n古埃及也分成了上下埃及，下埃及经历九十两个王朝，上埃及则是十和十一王朝。最终上埃及由曼图霍特普二世（Mentuhotep II）向北进攻击败下埃及统治者再次统一古埃及，并继续主持十一王朝，进入中王国时期。\n\n经历大概第七王朝到第十王朝，四个王朝，10 / 31。\n\n## 中王国时期（Middle Kingdom, BC2030 - BC1650）\n\n十一王朝再次统一之后，开始重新收复失地，包括南边曾经在古王国和中间时期失落给努比亚的土地。\n\n> 努比亚相当于今天埃及和苏丹交界位置。\n\n十二王朝迁都底比斯（今卢克索）。\n\n### 塞索斯特利斯三世（Sesostris III）扩张到努比亚\n\n塞索斯特利斯三世（Sesostris III）是十二王朝法老，善战，向努比亚扩张，然后还建造了很多堡垒，被认为是这个王朝最强大的法老。\n\n之后他的儿子阿蒙涅姆赫特三世（Amenemhat III）的统治时期被认为是中王国时期经济最好的时期。不过他从西亚邀请了希克索人（Hyksos）到尼罗河下游三角洲定居，也给后面十三十四王朝的结束埋下了隐患。其实十二王朝末期尼罗河洪水减少也为国家带来打击。\n\n### 第一位可考的女法老，塞贝克涅弗鲁（Sobekneferu）\n\n阿蒙涅姆赫特四世（Amenemhat IV）去世后，其子年幼，于是其姐妹塞贝克涅弗鲁（Sobekneferu）成为了历史考证上第一位女法老。她在位三年后去世，政权持续衰弱，是十二王朝最后的法老。\n\n奥西里斯在这个时期成为了最重要的神。\n\n经历十一王朝到十三王朝，三个王朝，13 / 31。\n\n## 第二中间期（Second Intermediate Period, BC1650 - BC1550）\n\n十三王朝的继续衰弱导致尼罗河三角洲（属于下埃及）的政权脱离并独立，是为十四王朝。统治者可能是迦南人（闪米特人）血统。\n\n注意十三王朝和十四王朝几乎是共存的，直到 BC1650 希克索人全面控制下埃及，攻占了古首都孟菲斯。\n\n### 希克索人的外族统治\n\n希克索人对下埃及的统治被视为十五王朝，而南边的底比斯统治者也趁十三王朝的真空宣布独立并宣布十六王朝。\n\n希克索人继续南下把十六王朝打败后，北退，上埃及建立十七王朝与希克索共存。\n\n十七王朝学习希克索人的战术和武器，在十七王朝最后两个法老统治期间反攻北面希克索人。\n\n阿赫摩斯一世（Ahmose I）是十七王朝最后一个法老的弟弟，继续父亲和兄长意志将希克索人赶出埃及，开创十八王朝，进入新王国时期。\n\n包含十四王朝到十七王朝，共四个王朝，17 / 31。\n\n## 新王国时期（New Kingdom, BC1570 － BC1070）\n\n这个时期有很多有名的法老。宗教上也有不少的变动。\n\n在神明崇拜上，由于此时统一埃及十七王朝的统治者就是底比斯的家族，所以底比斯的地方神祇阿蒙（Amun）被推举到了主神的地位。由于古埃及一直以来一般都认为主神是太阳神拉（Ra），所以这段时期又经常将阿蒙和拉结合为同一个神，叫阿蒙-拉。\n\n古埃及历史上最强盛的十八王朝就在这个时期内。\n\n### 阿赫摩斯一世（Ahmose I）赶走外族，统一上下埃及\n\n十八王朝第一任法老阿赫摩斯一世（Ahmose I），他登基的时候可能只有十岁，并可能在二十岁左右完成了「驱逐胡虏」，恢复了埃及对努比亚的统治。\n\n之后是阿赫摩斯一世的儿子阿蒙霍特普一世（Amenhotep I）继位。\n\n接下来的法老图特摩斯一世（Thutmose I）的身世则有点模糊，有可能是阿蒙霍特普一世的儿子，或者是他的军队指挥官。他意图扩大埃及版图，并第一个在帝王谷建造坟墓。\n\n<img alt=\"Valley of the Kings，帝王谷。via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/ValleeDesRois.JPG/800px-ValleeDesRois.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/2/2a/ValleeDesRois.JPG\" />\n\n图特摩斯一世儿女中有一个儿子，图特摩斯二世（Thutmose II），是由妃子所生；其中有一个女儿，哈特谢普苏特（Hatshepsut），是由王后所生。\n\n王后没有儿子，于是图特摩斯二世娶了他的姐姐哈特谢普苏特并登上王位，但很快就死了，而哈特谢普苏特只生了一个女儿，所以又从图特摩斯二世的妃子中找了个儿子当图特摩斯三世（Thutmose III）。\n\n### 古埃及的「武则天」，哈特谢普苏特\n\n或许是因为图特摩斯三世太幼小，又或者是因为哈特谢普苏特觉得自己是正统王室之后，因此虽然作为摄政王，但是肯定是想自己当甚至极有可能当上了法老。而且考古学者从资料和建筑中考据，亦基本承认了她法老的地位（同时图特摩斯三世仍然在位）。\n\n哈特谢普苏特在位期间的贡献主要为重新建立被希克索人入侵时破坏的贸易路线，以及大兴土木建造了很多建筑。她停止了土地扩张，使埃及在叙利亚及巴勒斯坦的统治权动摇（死后更丢失了统治权，但后来图特摩斯三世重新收复），但加强了和邻国的贸易，使埃及变得富庶。\n\n她在卡纳克神庙建造了两个方尖碑，其中之一是埃及现存方尖碑中最高的，约 29 米高。\n\n她在曼图霍特普二世神庙旁建造的哈特谢普苏特神庙，是古埃及建筑杰作以及热门景区。\n\n<img alt=\"卡纳克神庙，埃及现存最大神庙，中王国时期开始建造，一直是法老们建造崇拜神明和歌颂自己的建筑的地方 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/Temple_Complex_at_Karnak.jpg/640px-Temple_Complex_at_Karnak.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/3/3b/Temple_Complex_at_Karnak.jpg\" />\n\n\n\n<img alt=\"哈特谢普苏特方尖碑 via www.obelisks.org\" src=\"http://www.obelisk.co3.jp/thumbnail/karnak_hatshepsut_south.jpg\" data-original=\"http://www.obelisk.co3.jp/karnak_hatshepsut_south.jpg\" />\n\n\n\n<img alt=\"左为曼图霍特普二世神庙，已倒塌，右为哈特谢普苏特神庙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/42/SFEC_AEH_-ThebesNecropolis-2010-Hatshepsut-023.jpg/640px-SFEC_AEH_-ThebesNecropolis-2010-Hatshepsut-023.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/4/42/SFEC_AEH_-ThebesNecropolis-2010-Hatshepsut-023.jpg\" />\n\n\n\n<img alt=\"哈特谢普苏特神庙正面照 via www.egypt.travel\" src=\"http://www.egypt.travel/media/1717/temple-of-hatshupsut_800x600.jpg\" data-original=\"http://www.egypt.travel/media/1717/temple-of-hatshupsut_800x600.jpg\" />\n\n经历王女、王后、摄政王和法老，哈特谢普苏特让人联想起中国的「武则天」。\n\n### 埃及的拿破仑，图特摩斯三世\n\n图特摩斯三世在哈特谢普苏特统治二十一到二十二年后重新归来，并积极扩充军队和埃及版图，征服了地中海沿岸的以色列和叙利亚地区，甚至让邻国给其纳贡。图特摩斯三世也被后人称为「埃及的拿破仑」。\n\n<img alt=\"新王国时期古埃及在公元前15世纪的最大领土范围 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Egypt_1450_BC.svg/520px-Egypt_1450_BC.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/a8/Egypt_1450_BC.svg\" />\n\n图特摩斯三世重获权力后，通过破坏纪念碑等方式极力抹除哈特谢普苏特的存在。后面的王朝在王表编纂上也似乎故意忽略了这个法老。\n\n> 哈特谢普苏特和图特摩斯三世之间的关系，一般认为图特摩斯三世怨恨哈特谢普苏特。但最近一些研究进展称此说法不准确，并声称图特摩斯三世一直担当哈特谢普苏特的军事统治领袖，哈特谢普苏特也没有取其性命；而且损毁行动在图特摩斯三世统治晚期集中进行，哈特谢普苏特的资料也不是唯一被损毁的资料；从而推测图特摩斯三世是为了巩固继承人地位而作出如此的行为，他本人和他的继母并没有过节。这部分说法维基暂时没有找到证据支持。\n\n\b埃及在图特摩斯三世以及几位法老的努力下，终于\b在阿蒙霍特普三世（Amenhotep III）治下达到艺术和国力顶峰。阿蒙霍特普三世一生建造了很多宏伟的建筑和雕像，其中有著名的门农巨像。门农巨像座落在是蒙霍特普三世神庙的门口守卫。而阿蒙霍特普三世神庙是埃及最大最华丽的建筑群，可是后来因为地震和被拆除的缘故，现在已经不存在了，剩下两尊残破的门农巨像。\n\n<img alt=\"门农巨像正面照 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Colossi_of_Memnon_May_2015_2.JPG/640px-Colossi_of_Memnon_May_2015_2.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/ee/Colossi_of_Memnon_May_2015_2.JPG\" />\n\n\n\n<img alt=\"阿蒙霍特普三世神庙鸟瞰图，门农巨像在右边 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/ba/Amenhotep_III_mortuary_Temple.jpg/640px-Amenhotep_III_mortuary_Temple.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/b/ba/Amenhotep_III_mortuary_Temple.jpg\" />\n\n帝国的强盛、对阿蒙神的崇拜和皇家经常修建神殿，令阿蒙神庙的祭司获得极大的财富和权力，祭司们不免出现腐败和干预朝政的行为。\n\n### 被后继者视为异端的宗教改革者，阿蒙霍特普四世\n\n于是阿蒙霍特普三世的儿子，阿蒙霍特普四世，相信是为了打击祭司和权贵，进行了宗教改革。他简化多神系统，要求全国改为崇拜唯一的太阳神阿顿（Aten），甚至把自己的名字改为阿肯那顿（Akhenaten），迁都埃赫塔顿（Akhetaten），摧毁阿蒙神庙。有学者认为这表明了他创造了世界上最早的一神教。但他沉迷新兴宗教事务，以至于对边疆情况置若罔闻，而此时地中海北面的赫梯人正值盛时。于是古埃及逐渐失去了西亚地区的影响力。\n\n他的大皇后，娜芙蒂蒂（Nefertiti），很有可能和他一同统治埃及。\n\n<img alt=\"有名的半身像 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Nofretete_Neues_Museum.jpg/328px-Nofretete_Neues_Museum.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/1/1f/Nofretete_Neues_Museum.jpg\" />\n\n阿肯那顿的后继者在他死后又把旧宗教恢复回来，并大力抹消新兴宗教的记录和影响。\n\n<img alt=\"阿顿 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Aten.svg/640px-Aten.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/af/Aten.svg\" />\n\n### 生前不出名，死后却最出名的法老，图坦卡蒙\n\n阿肯那顿之后经过了一个或者两个短暂统治的法老（可能是他儿子或者王后摄政），王位传到了最著名的法老——图坦卡蒙（Tutankhamun）。\n\n<img alt=\"图坦卡蒙的木乃伊面具 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/TUT-Ausstellung_FFM_2012_47_%287117819557%29.jpg/360px-TUT-Ausstellung_FFM_2012_47_%287117819557%29.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/e5/TUT-Ausstellung_FFM_2012_47_%287117819557%29.jpg\" />\n\n图坦卡蒙曾用名图坦卡顿（Tutankhaten），从名字的更改可以看出信仰的更改。他将首都迁回底比斯，重开神庙，重新恢复阿蒙神的崇拜。\n\n图坦卡蒙的出名是因为所有法老的坟墓都几乎被盗空了，而唯有他在帝王谷的坟墓三千多年来从没被盗，以至于发掘出近五千件文物，令法老以及图坦卡蒙成为流行文化。\n\n关于有名的「法老的诅咒」，可以说没有任何证据表明诅咒存在，坟墓内也没有发现任何诅咒的存在。打开坟墓和棺材的在场 58 人，据研究只有 8 - 10 人在十几年内死亡，根本不足为诅咒的依据。\n\n{% note info %}\n2019 年（本年） 1 月，图坦卡蒙坟墓向游客开放。\n{% endnote %}\n\n### 混乱的最后几任十八王朝法老\n\n然而图坦卡蒙似乎一直疾病缠身，18 岁就死了，死因有各种猜测，包括疟疾、腿疾或者被谋杀。他与其异母姐姐安克姗海娜曼的两个女儿也早年夭折，因此图特摩斯家族就绝后了。安克姗海娜曼似乎曾经写信给赫梯国王苏庇路里乌玛一世要求他要一个王子嫁给她，但是王子还没到就被杀了。\n\n之后是阿肯那顿和图坦卡蒙大臣，甚至可能是其背后的操纵者，阿伊（Ay），极有可能娶了安克姗海娜曼，当上了法老，统治了一个很短暂的时期。之后就被图坦卡蒙的将军，霍朗赫布（又或者哈伦海布，Horemheb）夺取了法老位置。\n\n霍朗赫布以孟菲斯为首都，继续抹除阿顿以及其前任等人的痕迹，算是个解决宗教动荡和国家分裂等麻烦的人。\n\n霍朗赫布跟王室没有关系，也没有儿子，法老位置传给了当时的大臣门帕提拉（原名普拉美斯，Paramesse），即十九王朝的第一任法老拉美西斯一世（Ramesses I）。\n\n### 被儿子盖住名声的塞提一世\n\n拉美西斯一世的儿子塞提一世（Seti I）和她父亲重建了王国的秩序，并在叙利亚和迦南地区打击赫梯人的势力。从纪念碑上可以找到他的伟大功绩，虽然一般来说都是倾向于夸大。总的来说，塞提一世可以说是恢复新王国时期的荣光。\n\n塞提一世也兴建了很多建筑，包括位于底比斯的塞提一世祭庙、位于阿拜多斯的塞提一世纪念庙以及大柱式大厅，虽然大部分应该是在拉美西斯二世时期完成的。\n\n<img alt=\"塞提一世神庙 via www.egypt.travel\" src=\"http://www.egypt.travel/media/1297/temple-of-seti-1.jpg\" data-original=\"http://www.egypt.travel/media/1297/temple-of-seti-1.jpg\" />\n\n阿拜多斯的塞提一世纪念庙虽然外表其貌不扬，但是内部壁画精美，而且有不少壁画仍然有颜色。其中一面墙上按时间顺序记录了大多数王朝的法老的名字，从美尼斯到塞提一世共 76 个，被称为阿拜多斯王表，是后世研究历史的主要来源之一。\n\n<img alt=\"塞提一世纪念庙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/3/33/AbydosFacade.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/3/33/AbydosFacade.jpg\" />\n\n\n\n<img alt=\"阿拜多斯王表，法老的名字是圈起来的 via pharaoh.se\" src=\"https://pharaoh.se/hiero/ABY1200.jpg\" data-original=\"https://pharaoh.se/hiero/ABY1200.jpg\" />\n\n\n\n<img alt=\"阿拜多斯王表，法老的名字是圈起来的 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f1/AbydosKinglistDrawing.png/640px-AbydosKinglistDrawing.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/f/f1/AbydosKinglistDrawing.png\" />\n\n\n\n<img alt=\"大柱式大厅、神龛大厅 via www.egypt.travel\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/Pillars_of_Great_Hypostyle_Hall_in_Karnak_Luxor_Egypt.JPG/800px-Pillars_of_Great_Hypostyle_Hall_in_Karnak_Luxor_Egypt.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/5/5c/Pillars_of_Great_Hypostyle_Hall_in_Karnak_Luxor_Egypt.JPG\" />\n\n### 鼎鼎大名的拉美西斯二世\n\n塞提一世的儿子就是赫赫有名的拉美西斯二世（Ramesses II）了。他如此的有名以至于后来有九位法老使用了拉美西斯这名字。他在位长达 66 到 67 年，执政的时期是新王国最后的强盛年代。\n\n但凡古埃及强盛的时期，统治的法老无不是领土争端和宏伟建筑这两方面有所建树，拉美西斯二世也不例外。他打败从地中海入侵的海盗，向东北占领迦南地区和南叙利亚地区，和北面的强敌赫梯国王穆瓦塔利二世（Muwatalli II）来回地打拉锯战，最后分庭抗礼；稳定南边的努比亚。他在位时间比较长，也在埃及各地建造非常多的建筑，甚至在不是他建造的建筑上也留下标志。\n\n卡迭石战役是埃及和赫梯之间比较著名的战役。战役的情况很可能是这样：埃及想进军占领卡迭石，但被赫梯战车袭击并击溃；法老在营地受困的时候雇佣兵到了，反击了赫梯，导致赫梯军败退；埃及虽然赢了这场战斗但是也无法攻克卡迭石，战略上算是输了。之后双方一直僵持不下。卡迭石战役有非常详细的记录，但基本都是埃及方面一面之词，因此也存在夸大拉美西斯二世的可能性。\n\n<img alt=\"两个帝国接壤的卡迭石（Qadesh） via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Hitt_Egypt_Perseus.png/310px-Hitt_Egypt_Perseus.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/e9/Hitt_Egypt_Perseus.png\" />\n\n之后穆瓦塔利二世病逝，拉美西斯二世和继位的哈图西里三世（Hattusili III）缔结埃及赫梯和约，此时距离卡迭石战役已经十五六年了。\n\n埃及赫梯和平条约，或称卡迭石条约、永恒条约、银条约，是古代近东（即今西亚、中东地区）地区协议双方都有保存下来的最古老的条约。缔结和约结束了长期的冷战实际上对签署双方都有利益。埃及的目的，很可能是为了吹嘘法老功绩，并成立军事同盟以共同对抗西亚更东边的新贵力量亚述；而赫梯的目的，则可能是新王为了巩固地位以及利用法老的国际影响力提升自己的国际地位。\n\n<img alt=\"赫梯人版本的和约 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Treaty_of_Kadesh.jpg/200px-Treaty_of_Kadesh.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/Treaty_of_Kadesh.jpg\" />\n\n\n\n<img alt=\"埃及人版本的和约 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/%C3%84gyptisch-Hethitischer_Friedensvertrag_Karnaktempel.jpg/200px-%C3%84gyptisch-Hethitischer_Friedensvertrag_Karnaktempel.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/9/93/%C3%84gyptisch-Hethitischer_Friedensvertrag_Karnaktempel.jpg\" />\n\n拉美西斯二世的闻名也许也来自于他遍布埃及的大型建筑和到处刻画自己的荣光事迹。\n\n比较有名的建筑是拉美西姆神庙、哈布城神庙和阿布辛贝勒神庙。\n\n拉美西姆神庙现今已经是废墟，往日的样子只能靠门口和后面的建筑来想像了。\n\n<img alt=\"拉美西姆神庙鸟瞰图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/SFEC_AEH_-ThebesNecropolis-2010-RamsesII-021.jpg/640px-SFEC_AEH_-ThebesNecropolis-2010-RamsesII-021.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/8/80/SFEC_AEH_-ThebesNecropolis-2010-RamsesII-021.jpg\" />\n\n\n\n<img alt=\"门口的四个奥西里斯雕像 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/SFEC-RAMASSEUM-2009-11-14-0034.JPG/640px-SFEC-RAMASSEUM-2009-11-14-0034.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/1/1c/SFEC-RAMASSEUM-2009-11-14-0034.JPG\" />\n\n比较值得注意的是庙内有一副拉美西姆国王名单（Ramesseum king list），列出了新王朝的大部分法老。\n\n<img alt=\"拉美西姆国王名单手绘图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Ramesseum_King_list.png/800px-Ramesseum_King_list.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Ramesseum_King_list.png/1920px-Ramesseum_King_list.png\" />\n\n哈布城神庙（Medinet Habu）离哈特谢普苏特神庙不远，很多法老都在这修建过建筑，刻过壁画。然而拉美西斯二世应该是其中最张扬的了，似乎很害怕被人遗忘。\n\n<img alt=\"哈布城神庙鸟瞰图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/SFEC_AEH_-ThebesNecropolis-2010-RamsesIII036.jpg/640px-SFEC_AEH_-ThebesNecropolis-2010-RamsesIII036.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/4/4e/SFEC_AEH_-ThebesNecropolis-2010-RamsesIII036.jpg\" />\n\n拉美西斯二世本身就喜欢乱改别人的壁画，因此他也害怕别人抹掉他的壁画，于是他的壁画都刻得非常深。\n\n<img alt=\"哈布城壁画 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/Habu_Temple_court_in_sesson.JPG/640px-Habu_Temple_court_in_sesson.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/9/93/Habu_Temple_court_in_sesson.JPG\" />\n\n阿布辛贝勒神庙（Abu Simbel temples）应该是很多人从电视媒体等看到过的神庙之一，整个神庙在岩石上开凿而成，门口四个雕像也是其标志之一。\n\n<img alt=\"阿布辛贝勒神庙正面 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/28/Abu_Simbel%2C_Ramesses_Temple%2C_front%2C_Egypt%2C_Oct_2004.jpg/640px-Abu_Simbel%2C_Ramesses_Temple%2C_front%2C_Egypt%2C_Oct_2004.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/2/28/Abu_Simbel%2C_Ramesses_Temple%2C_front%2C_Egypt%2C_Oct_2004.jpg\" />\n\n神庙东北面是法老为哈索尔（Hathor，古埃及女神）和妮菲塔莉（Nefertari，拉美西斯二世的大王后）所建的小庙（the Small Temple）。妮菲塔莉的雕像跟拉美西斯二世一样高，表明地位跟他几乎平起平坐，也是几乎唯一一位在世就被神格化的埃及王后。其他同样有名的王后是克利奥帕特拉七世（埃及艳后）、娜芙蒂蒂（阿肯那顿的大王后）和哈特谢普苏特（埃及「武则天」）。\n\n<img alt=\"左为阿布辛贝勒神庙，右为小庙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/63/Panorama_Abu_Simbel_crop.jpg/640px-Panorama_Abu_Simbel_crop.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/6/63/Panorama_Abu_Simbel_crop.jpg\" />\n\n近代由于在阿斯旺兴建水坝，联合国筹钱将阿布辛贝勒神庙和小庙搬离到比原地高 200 米处。\n\n<img alt=\"搬迁前后位置对比 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/06/Abu_Simbel_relocation_by_Zureks.jpg/640px-Abu_Simbel_relocation_by_Zureks.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/06/Abu_Simbel_relocation_by_Zureks.jpg\" />\n\n频繁的战争、大兴土木，造就了巨大的国库开销，加大了国力下降。在拉美西斯二世死后，埃及就立刻开始走下坡路。\n\n### 第二十王朝的祭司当权\n\n过了几任法老后，到了第二十王朝第二任法老拉美西斯三世的统治。他抵抗了几次地中海和利比亚的入侵，治下还出现了人类历史上第一次有记录的劳工罢工。他的一个妃子还曾试图毒杀他，\b最后是失败了。\n\n拉美西斯五世，土地和财政基本就已经被阿蒙神庙的祭司所控制了。\n\n拉美西斯六世在建造坟墓时无意间将图坦卡蒙坟墓埋在了地下，避免了其日后被盗掘。\n\n第二十王朝，古埃及陷入内忧外患，尼罗河水位下降、内政动乱、法老坟墓被盗、官员腐败，又丢了叙利亚和巴勒斯坦，最后法老基本就没有统一埃及的权力了。\n\n包含十八王朝到二十王朝，共三个王朝，20 / 31。\n\n## 第三中间期（3rd Intermediate Period, BC1069 - BC664）\n\n拉美西斯十一世死后，结束二十王朝，斯门代斯一世（Smendes I）开创二十一王朝，然而此时法老权力已经极弱，基本被赶到下埃及去了，上埃及和中埃及地区则是由底比斯阿蒙神庙的大祭司们所控制。\n\n### 利比亚人的二十二、二十三、二十四王朝\n\n之前二十王朝已经在尼罗河三角洲定居的利比亚人，在舍顺克一世（Shoshenq I）统领下统一埃及，创立二十二王朝，这里的法老已经不是本土埃及人了。然后二十三王朝二十四王朝，王室和内政仍然比较动荡，南方起源于库施（kush）的努比亚王国趁乱北上把整个埃及打了下来，赶走了利比亚人，建立二十五王朝。\n\n### 努比亚人的二十五王朝\n\n努比亚人重新恢复了古埃及的的宗教传统，修复和建造了不少寺庙和纪念碑，还在家乡（位于现在的苏丹）重新建造起金字塔来。\n\n<img alt=\"二十五王朝的库施帝国 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Egypt_kush.svg/523px-Egypt_kush.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/1/1a/Egypt_kush.svg\" />\n\n包含二十一王朝到二十五王朝，共五个王朝，25 / 31。\n\n## 古埃及晚期 / 波斯帝国时期（Late Period, BC664 - BC332）\n\n之后西亚的亚述人开始入侵古埃及，努比亚人不敌，向南退回努比亚。亚述人可能对占着古埃及没有兴趣，在洗劫一番后退了回去，扶植了普萨美提克一世（Psammetichus I）作为法老。\n\n### 古埃及本土最后的荣光，二十六王朝\b\n\n之后，普萨美提克一世趁亚述帝国忙于战乱，联合古希腊的雇佣军，又重新统一了古埃及，建立二十六王朝，恢复了繁荣稳定。之后亚述被内部独立的新巴比伦帝国推翻，普萨美提克一世也曾想恢复西亚的霸权，但被尼布甲尼撒二世（Nebuchadnezzar II）统治的新巴比伦帝国打了回来。\n\n那个古埃及法老用婴儿做实验，实验听不到别人说话怎么学语言的故事，就是普萨美提克一世的故事，记录在希罗多德写的书「历史」第二卷中。\n\n<img alt=\"亚述帝国最大版图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/e/eb/Assy3.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/eb/Assy3.JPG\" />\n\n然而二十六王朝已经是最后一个埃及本土王朝了。更东边的波斯阿契美尼德帝国（波斯第一帝国）灭了新巴比伦帝国，接着吞并了古埃及，波斯国王冈比西斯二世（Cambyses II）成了法老，称为二十七王朝。\n\n之后二十六王朝后裔推翻波斯的统治，先后建立短暂的二十八、二十九、三十王朝。\n\n然后波斯人再次征服古埃及，是为三十一王朝。\n\n包含二十六王朝到三十一王朝，共六个王朝，31 / 31。\n\n## 马其顿的亚历山大解放埃及 -> 托勒密王朝（Macedonian and Ptolemaic Egypt, BC332 - BC30）\n\n### 埃及解放者，亚历山大\n\n当无人不知的亚历山大击溃波斯大军并来到埃及的时候，根本没有遇到什么抵抗，埃及当地的波斯管理者就直接将埃及献给他了，埃及人民还视其为埃及的解放者。\n\n亚历山大尊重当地信仰，去绿洲朝圣得到神谕。神谕宣称他是阿蒙的儿子。实际上就是得到了祭司等有权势的人的承认。他成立了一个新的希腊城市名为亚历山大（他到哪就在哪建亚历山大城），并任命希腊人——而不是埃及人——作为高官。\n\n亚历山大没有在埃及待很久，就去征服其他地方了，从此再没有回来过。他的部下托勒密留在埃及统治，并从亚历山大死后分崩离析的亚历山大帝国中独立出来，创立托勒密王朝统治了近三百年。\n\n### 希腊法老，托勒密王朝\n\n托勒密王朝中，男性都叫托勒密（Ptolemy），女性一般叫克利奥帕特拉（Cleopatra）、贝勒尼基（Berenice）和阿尔西诺伊（Arsinoe），因此所有统治者都是这四个名字的加几世这样的称呼。最为人知的就是末代法老，埃及艳后，克利奥帕特拉七世。\n\n托勒密王朝没有使用希腊文明取代埃及文明，反而扶持其延续，修建埃及风格的神庙，维护传统宗教仪式。当然也带来了希腊文明的影响，这个时期很多文艺作品都有两个文明融合的风格。\n\n### 罗塞塔石碑，托勒密五世诏书\n\n罗塞塔石碑本来并不是什么比较特别的石碑，只是托勒密五世加冕一周内纪念所制，但碑上同时使用了三种语言，分别是圣书体（埃及象形文字）、埃及草书（世俗体）和古希腊文，令后世学者可以做参考比对，通过古希腊文来解读圣书体，从而使这块石碑无比珍贵，也因此罗塞塔石碑在现代也被引申为「暗喻」、「翻译」和「关键线索」等的含义。\n\n<img alt=\"罗塞塔石碑 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Rosetta_Stone.JPG/410px-Rosetta_Stone.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/2/23/Rosetta_Stone.JPG\" />\n\n### 艳后与凯撒\n\n克利奥帕特拉七世是托勒密王朝中第一个学会埃及语并接受埃及信仰和埃及神明的人，这是其他王室成员所拒绝的事（想想罗塞塔石碑还需要古希腊文书写）。她早年在就政治上活跃，应该算是被迫和托勒密十三世（同父异母弟弟）结婚以一同统治埃及。但之后两人发生冲突，艳后被迫流亡叙利亚，招兵买马打算反攻托勒密十三世。\n\n此时罗马内部也正在争斗，凯撒打败了庞培，后者被迫跑到埃及。而托勒密十三世可能希望寻求凯撒支持而擅自将凯撒老对手庞培暗杀了，在凯撒追到埃及时献上庞培的头颅。这可能令凯撒十分不满，因为庞培是他的劲敌、女婿，也是罗马执政官，不应该被异国人杀死。\n\n克利奥帕特拉七世可能看准了这个机会潜回埃及，并将自己献给凯撒，做他的情人，取得凯撒的支持。之后凯撒对埃及统治者的仲裁，是克利奥帕特拉七世上位。\n\n{% cq %}\n传说当时克利奥帕特拉把自己伸直，用毯子卷起来包覆其中，命人抬着进入王宫，这时克利奥帕特拉年仅21岁，凯撒52岁。\n*维基百科*\n{% endcq %}\n\n托勒密十三世当然十分不满，率军围攻亚历山大城内罗马军。凯撒等到增援到来，脱围之后在尼罗河战役打败托勒密十三世，随后另立了托勒密十四世（仍旧是艳后的弟弟）和艳后结婚统治埃及。艳后虽然名义上嫁给托勒密十四世，但是实际上却和凯撒相好，还生了一个孩子托勒密·凯撒。\n\nBC46，艳后来到罗马，遭到罗马人民的厌恶，因为凯撒已婚，而她和凯撒关系暧昧。但凯撒不愧为独裁者，完全罔顾旁人，甚至为艳后制作黄金雕像，和罗马人先祖维纳斯神像一起摆放。在凯撒被刺后，艳后还留在罗马，可能是希望自己儿子继承凯撒。但是凯撒大概没有承认这个儿子，而是在遗嘱另立他的养子屋大维作为继承人。于是她回到埃及，毒死了托勒密十四世，与其儿子共同统治埃及。\n\n### 艳后与安东尼\n\n安东尼是凯撒生前最重要的军队指挥官。凯撒被刺后，他和屋大维解决了反凯撒势力。之后在埃及传唤艳后的时候也应该是被迷住了，和她在 BC41 到 BC40 年度过了一段时光。接着安东尼离开了埃及，艳后不久后生下一男一女双胞胎，相信就是安东尼的儿女。\n\n安东尼和屋大维从 BC41 年开始就不和，因为安东尼妻子发起了和屋大维对抗的战争。虽然后来妻子突然身亡，安东尼也娶了屋大维的姐姐小屋大薇以维持稳定，但是两人仍然是竞争关系。安东尼把大量土地给予了艳后，屋大维利用这一点宣称其为外国女王而牺牲共和国权利。两人关系持续恶化，安东尼也冷落小屋大薇。之后对安息帝国的战争失利，安东尼回到埃及。BC36 年，艳后又为安东尼生下第二个儿子。\n\nBC34 年赢得对亚美尼亚的战争后，安东尼和艳后在大胜后的举动被屋大维大肆利用，煽动罗马对安东尼的不满，包括艳后以神的名义宣称自己和凯撒的儿子是万王之王，自己则是万王之女王，和安东尼的儿女则分别册封国王等。安东尼更公然向罗马宣称将包括打下亚美尼亚等一部分罗马行省赠予克利奥帕特拉七世。最冒犯屋大维的，是安东尼宣称艳后和凯撒的儿子托勒密·凯撒才应该是凯撒的继承人。\n\n屋大维借机行事向埃及女王宣战，在亚克兴角海战中打败安东尼。安东尼输掉海战的原因可能是因为海军在战事胶着时出现叛逃，安东尼和艳后逃回了埃及，陆军见势也投降屋大维了。\n\n屋大维乘胜追击到埃及，退无可退的安东尼误认为艳后已自杀，用剑刺自己，可能是被带到艳后藏身的坟墓才真正死去。艳后随后也被捕了。\n\n关于克利奥帕特拉七世的死法，无人知道。流传最广的版本是她让毒蛇咬自己而毒发身亡，也有观点认为他是被屋大维下令处死。\n\n她和凯撒的儿子托勒密·凯撒被屋大维处死，从此埃及成为了罗马帝国的行省，托勒密王朝终结，埃及的法老时代也终结了。\n\n<img alt=\"丹达拉的哈索尔神庙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3c/Dendera_7_977.PNG/621px-Dendera_7_977.PNG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/3/3c/Dendera_7_977.PNG\" />\n\n\n\n<img alt=\"哈索尔神庙墙上的克利奥帕特拉七世和她的儿子托勒密·凯撒 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/4/49/Denderah3_Cleopatra_Cesarion.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/4/49/Denderah3_Cleopatra_Cesarion.jpg\" />\n\n## 罗马统治时期 -> 阿拉伯人入侵\n\n作为罗马帝国行省的埃及，发生的事情属于罗马的历史了，这里不详述。只是 CE264 年的时候，反抗罗马的帕尔米拉女王季诺碧亚征服了埃及使其脱离罗马，并自称埃及女王，说她的家族可追溯到克利奥帕特拉七世。后来罗马也没有战胜她，只能是围城断粮逼其投降。\n\n埃及有一段时间曾被萨珊王朝所占领（CE621 - CE629），拜占庭（东罗马帝国）虽然重新夺回，但十年后阿拉伯帝国入侵的时候，已经无力抵抗，自此埃及伊斯兰化，埃及文明也不复存在。\n\n## 古埃及神明\n\n古埃及是一个宗教特色很浓的国家，了解其神明系统有助于深入理解古埃及，不过没有兴趣也可不看。\n\n见 [古埃及神明][古埃及神明] 一文。\n\n[古埃及神明]: /learn-ancient-egyptian-gods-in-5-minutes\n\n## 一些小知识\n\n法老的头冠分两部分，代表上埃及的白色王冠，代表下埃及的红色王冠，一般法老会戴着两个，诏示其为整个埃及的统治者。\n\n古埃及神话中的神明都是兄妹 / 姐弟结合，这可能造成了古埃及王室基本都是近亲结合。如果侧室的儿子登基法老，一般也要娶正室的女儿。统治者可能借此保持所谓的血统纯正。\n\n建造金字塔和神庙的大石头、花岗岩等，很多是从阿斯旺开凿的。\n\n## 部分参考资料\n\n[开放世界埃及篇](https://www.bilibili.com/medialist/play/ml454556918)\n[古埃及 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/古埃及)\n[古埃及历史 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/古埃及历史)\n[阿姨学、古埃及 | 阿姨学词典 Wikia | FANDOM powered by Wikia](https://auntology.fandom.com/wiki/阿姨学、古埃及)\n[History of ancient Egypt - Wikipedia](https://en.wikipedia.org/wiki/History_of_ancient_Egypt)\n[Prehistoric Egypt - Wikipedia](https://en.wikipedia.org/wiki/Prehistoric_Egypt)\n[Early Dynastic Period (Egypt) - Wikipedia](https://en.wikipedia.org/wiki/Early_Dynastic_Period_%28Egypt%29)\n[Old Kingdom of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Old_Kingdom_of_Egypt)\n[First Intermediate Period of Egypt - Wikipedia](https://en.wikipedia.org/wiki/First_Intermediate_Period_of_Egypt)\n[Middle Kingdom of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Middle_Kingdom_of_Egypt)\n[Second Intermediate Period of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Second_Intermediate_Period_of_Egypt)\n[New Kingdom of Egypt - Wikipedia](https://en.wikipedia.org/wiki/New_Kingdom_of_Egypt)\n[Third Intermediate Period of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Third_Intermediate_Period_of_Egypt)\n[Late Period of ancient Egypt - Wikipedia](https://en.wikipedia.org/wiki/Late_Period_of_ancient_Egypt)\n[Ptolemaic Kingdom - Wikipedia](https://en.wikipedia.org/wiki/Ptolemaic_Kingdom)\n[Sasanian Egypt - Wikipedia](https://en.wikipedia.org/wiki/Sasanian_Egypt)\n[First Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/First_Dynasty_of_Egypt)\n[Second Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Second_Dynasty_of_Egypt)\n[Third Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Third_Dynasty_of_Egypt)\n[Fourth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Fourth_Dynasty_of_Egypt)\n[Fifth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Fifth_Dynasty_of_Egypt)\n[Sixth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Sixth_Dynasty_of_Egypt)\n[Seventh Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Seventh_Dynasty_of_Egypt)\n[Eighth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Eighth_Dynasty_of_Egypt)\n[Ninth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Ninth_Dynasty_of_Egypt)\n[Tenth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Tenth_Dynasty_of_Egypt)\n[Eleventh Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Eleventh_Dynasty_of_Egypt)\n[Eleventh Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Eleventh_Dynasty_of_Egypt)\n[Twelfth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twelfth_Dynasty_of_Egypt)\n[Thirteenth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Thirteenth_Dynasty_of_Egypt)\n[Fourteenth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Fourteenth_Dynasty_of_Egypt)\n[Fifteenth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Fifteenth_Dynasty_of_Egypt)\n[Sixteenth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Sixteenth_Dynasty_of_Egypt)\n[Abydos Dynasty - Wikipedia](https://en.wikipedia.org/wiki/Abydos_Dynasty)\n[Seventeenth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Seventeenth_Dynasty_of_Egypt)\n[Eighteenth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Eighteenth_Dynasty_of_Egypt)\n[Nineteenth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Nineteenth_Dynasty_of_Egypt)\n[Twentieth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twentieth_Dynasty_of_Egypt)\n[Twenty-first Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twenty-first_Dynasty_of_Egypt)\n[Twenty-second Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twenty-second_Dynasty_of_Egypt)\n[Twenty-third Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twenty-third_Dynasty_of_Egypt)\n[Twenty-fourth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twenty-fourth_Dynasty_of_Egypt)\n[Twenty-fifth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twenty-fifth_Dynasty_of_Egypt)\n[Twenty-sixth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twenty-sixth_Dynasty_of_Egypt)\n[Twenty-eighth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twenty-eighth_Dynasty_of_Egypt)\n[Twenty-ninth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twenty-ninth_Dynasty_of_Egypt)\n[Thirtieth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Thirtieth_Dynasty_of_Egypt)\n[Argead dynasty - Wikipedia](https://en.wikipedia.org/wiki/Argead_dynasty)\n[Ptolemaic Kingdom - Wikipedia](https://en.wikipedia.org/wiki/Ptolemaic_Kingdom)\n[Valley of the Kings - Wikipedia](https://en.wikipedia.org/wiki/Valley_of_the_Kings)\n[Giza pyramid complex - Wikipedia](https://en.wikipedia.org/wiki/Giza_pyramid_complex)\n[Histories (Herodotus) - Wikipedia](https://en.wikipedia.org/wiki/Histories_%28Herodotus%29)\n[Assyria - Wikipedia](https://en.wikipedia.org/wiki/Assyria)\n[Kingdom of Kush - Wikipedia](https://en.wikipedia.org/wiki/Kingdom_of_Kush)\n[Hyksos - Wikipedia](https://en.wikipedia.org/wiki/Hyksos)\n[Ramesseum - Wikipedia](https://en.wikipedia.org/wiki/Ramesseum)\n[Ancient Near East - Wikipedia](https://en.wikipedia.org/wiki/Ancient_Near_East)\n[Abu Simbel temples - Wikipedia](https://en.wikipedia.org/wiki/Abu_Simbel_temples)\n[Egyptian–Hittite peace treaty - Wikipedia](https://en.wikipedia.org/wiki/Egyptian%E2%80%93Hittite_peace_treaty)\n[Battle of Kadesh - Wikipedia](https://en.wikipedia.org/wiki/Battle_of_Kadesh)\n[Abydos King List - Wikipedia](https://en.wikipedia.org/wiki/Abydos_King_List)\n[Abydos, Egypt - Wikipedia](https://en.wikipedia.org/wiki/Abydos,_Egypt)\n[Canaan - Wikipedia](https://en.wikipedia.org/wiki/Canaan)\n[Karnak - Wikipedia](https://en.wikipedia.org/wiki/Karnak)\n[早王朝时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/早王朝时期)\n[古王国时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/古王国时期)\n[第一中间时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/第一中间时期)\n[中王国时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/中王国时期)\n[第二中间时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/第二中间时期)\n[新王国时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/新王国时期)\n[第三中间时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/第三中间时期)\n[古埃及晚期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/古埃及晚期)\n[阿契美尼德王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/阿契美尼德王朝)\n[托勒密时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/托勒密时王朝)\n[罗马及拜占庭时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及_%28羅馬帝國行省%29)\n[萨珊时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/萨珊王朝)\n[埃及第一王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第一王朝)\n[埃及第二王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二王朝)\n[埃及第三王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第三王朝)\n[埃及第四王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第四王朝)\n[埃及第五王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第五王朝)\n[埃及第六王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第六王朝)\n[埃及第七王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第七王朝)\n[埃及第十一王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十一王朝)\n[埃及第十二王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十二王朝)\n[埃及第十三王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十三王朝)\n[埃及第十四王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十四王朝)\n[埃及第十五王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十五王朝)\n[埃及第十六王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十六王朝)\n[埃及第十七王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十七王朝)\n[埃及第十八王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十八王朝)\n[埃及第十九王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十九王朝)\n[埃及第二十王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十王朝)\n[埃及第二十一王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十一王朝)\n[埃及第二十二王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十二王朝)\n[埃及第二十三王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十三王朝)\n[埃及第二十四王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十四王朝)\n[埃及第二十五王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十五王朝)\n[埃及第二十六王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十六王朝)\n[埃及第二十七王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十七王朝)\n[埃及第二十八王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十八王朝)\n[埃及第二十九王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十九王朝)\n[埃及第三十王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第三十王朝)\n[埃及第三十一王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第三十一王朝)\n[古希腊 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/古希腊)\n[馬其頓王國 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/馬其頓王國)\n[托勒密王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/托勒密王朝)\n[波斯 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/波斯)\n[帝王谷 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/帝王谷)\n[吉萨金字塔群 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/吉萨金字塔群)\n[历史 (希罗多德) - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/吉萨金字塔群/历史_%28希罗多德%29)\n[亚述 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/亚述)\n[库施 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/库施)\n[喜克索斯人 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/喜克索斯人)\n[拉美西姆 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/拉美西姆)\n[古代近东 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/古代近东)\n[阿布辛贝勒神庙 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/阿布辛贝勒神庙)\n[埃及赫梯和约 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及赫梯和约)\n[卡迭石战役 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/卡迭石战役)\n[阿拜多斯王表 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/阿拜多斯王表)\n[阿拜多斯 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/阿拜多斯)\n[迦南 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/迦南)\n[卡纳克神庙 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/卡纳克神庙)\n\n## 修订记录\n\n### 2019.05.15\n\n* 搜集材料\n* 完成文章结构\n\n### 2019.05.20\n\n* 完成初稿\n\n### 2019.05.21\n\n* 新增缩略图\n* 整体润色\n\n### 2019.05.22\n\n* 整理参考资料\n* 增补早期王朝的内容\n\n### 2019.05.23\n\n* 新增「古埃及神明」一节\n","source":"_posts/30 分钟速成古埃及历史.md","raw":"---\ntitle: 30 分钟速成古埃及历史\ncategories:\n  - [知识, 古埃及]\ntags: [ancient-egypt, history]\nauthor: exoticknight\npermalink: learn-ancient-egyptian-history-in-30-minutes\n---\n\n前几天在 bilibili 上看了一个 up 主的埃及旅游系列 [vlog][开放世界埃及篇]，了解了一些关于古埃及历史的知识，再通过维基什么学习，写下本文以做笔记。\n\n本文基本来源中英文维基，英文为主中文为辅，精简了大量不太重要的细节，比较适合快速了解和学习古埃及历史。如果对内容有什么疑问或者质疑，请务必留下评论或者联系我做讨论。\n\n[开放世界埃及篇]: https://www.bilibili.com/medialist/play/ml454556918\n\n## 综述\n\n时间上只会覆盖到中世纪之前，个人认为古埃及在阿拉伯人入侵之后就算是玩完了，所以之后的时期不做记录。\n\n首先，整个古埃及基本就是沿着尼罗河建立的。尼罗河的走向是自南向北，古埃及也经常因为统治的原因，一段时期分成上埃及和下埃及，一段时期则是统一，正所谓分久必合，合久必分。上埃及是在南边即上游，而下埃及则是在北边即下游。\n\n埃及学者一般根据托勒密王朝早期古埃及祭祀曼涅托的《埃及史》将古埃及历史分成八到九个时期，三十一个王朝（一个王朝不一定只有一位法老），而古埃及人则似乎是不划分历史时期的。另外考古出来的历史也各国不一，这里以维基为准。\n\n这几个时期分别是前王朝时期、早王朝时期、古王国时期、第一中间期、中王国时期、第二中间期、新王国时期、第三中间期和古埃及后期。实际并不需要将所有的时期都记得一清二楚，只需要记得一些时期和王朝比较有名的事件和法老即可。\n\n另外古埃及到了第三中间期之后的后期，已经无力回天，被外族来回入侵，再之后又来了马其顿和罗马，最后被阿拉伯完全控制后到现在基本就已经是一个穆斯林国家了。\n\n古埃及年表在时间上的认定也不一，相差会有几十年，不过其开始一般都在 BC（before century，公元前）3100 左右。\n\n{% note info %}\n点击图片查看清晰大图\n{% endnote %}\n\n<img alt=\"古埃及地图，显示主要城市和地图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Ancient_Egypt_map-en.svg/293px-Ancient_Egypt_map-en.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/1/17/Ancient_Egypt_map-en.svg\" />\n\n## 前王朝时期（BC3100 之前）\n\n经历了旧石器时代和新石器时代，大概 BC3600 年开始，尼罗河沿岸出现几十个「诺姆」，相互各自斗争。\n\n> 诺姆：nome，源自希腊语 Νομός，意为 “行政区”；埃及语：Gau，中译「州」。\n\n## 早王朝时期（Early dynastic period, BC3100 - BC2686）\n\n### 第一王朝建立者，美尼斯\n\n传说中美尼斯（Menes）统一了上下埃及开创古埃及王朝。但从考古证据上则很难支持有这么一个人，反而认为是纳尔迈（Narmer）才是统一埃及第一人，或者说两者是同一个。\n\n包含一至二王朝，两个王朝，2 / 31。\n\n## 古王国时期（Old Kingdom, BC2686 - BC2181）\n\n### 第一个建造金字塔，左塞王\n\n现在看到的著名金字塔基本就在这个时期被建造。\n\n此时期第一个法老（pharaoh）左塞王（King Djoser）开始建造阶梯金字塔（最常见最有名那种），位置在萨卡拉（开罗以南约 30 公里）。\n\n阶梯金字塔据说是是伊姆霍特普（Imhotep）设计的。\n\n{% cq %}\n伊姆霍特普，出身平民，但因智慧过人，学识渊博，受到法老的破格重用。他在整个法老时代受到崇拜，死后被尊为神，名号被刻在法老左塞雕像的基座上。…… 古埃及医学的奠基人…… 被誉为历史上第一位留下姓名的建筑师与医师，被奉为医学之神\n*维基百科*\n{% endcq %}\n\n甚至有伊姆霍特普博物馆，见 [维基][wiki of Imhotep museum]，[egyptsites 博客][egyptsites 博客]。\n\n<img alt=\"左塞尔金字塔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/60/Saqqara_BW_5.jpg/640px-Saqqara_BW_5.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/6/60/Saqqara_BW_5.jpg\" />\n\n### 最大的金字塔，胡夫金字塔\n\n胡夫是第四王朝的第二位法老，是首位在吉萨建造金字塔的法老。今天去埃及旅游看的三座大金字塔就在吉萨，其中最大的就是胡夫下令修建。\n\n胡夫金字塔塔高大概 146.5 米，现为大概 137 米，边长接近 230 米，由 230 万块巨石搭建而成，最重的可达 50 吨，最小的也有 1.5 吨。\n\n胡夫金字塔是古代世界七大奇迹中最为古老和唯一尚存的建筑物。\n\n有一个入口，但是现在被封禁，只使用某位哈里发在 CE820 开凿的盗墓通道作为入口。\n\n> 尽管建造了最大的金字塔，但胡夫本人的雕像却是考古发掘中所有法老雕像中最小的。\n\n<img alt=\"胡夫金字塔，又名吉萨大金字塔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Gizeh_Cheops_BW_1.jpg/640px-Gizeh_Cheops_BW_1.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/d/d1/Gizeh_Cheops_BW_1.jpg\" />\n\n### 第二大金字塔，卡夫拉金字塔\n\n卡夫拉是胡夫的孙子。尽管看起来卡夫拉金字塔比胡夫金字塔小一点，但是卡夫拉金字塔底座更高了 10 米，塔周边也更多附属设施。\n\n狮身人面像斯芬克斯就属于附近的建筑，但并不是问路人问题杀人那只。\n\n<img alt=\"卡夫拉金字塔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Pyramid_of_Khufu.jpg/640px-Pyramid_of_Khufu.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/af/Pyramid_of_Khufu.jpg\" />\n\n\n\n<img alt=\"狮身人面像斯芬克斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a5/Cairo%2C_Gizeh%2C_Sphinx_and_Pyramid_of_Khufu%2C_Egypt%2C_Oct_2004.jpg/640px-Cairo%2C_Gizeh%2C_Sphinx_and_Pyramid_of_Khufu%2C_Egypt%2C_Oct_2004.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/a5/Cairo%2C_Gizeh%2C_Sphinx_and_Pyramid_of_Khufu%2C_Egypt%2C_Oct_2004.jpg\" />\n\n### 孟卡拉金字塔\n\n孟卡拉是第四王朝时期的第 16 位法老，孟卡拉金字塔远小于前两座金字塔，它的高度只有大约 65 米，总体积大约只有卡夫拉金字塔 1/10。\n\n萨拉丁的儿子奥斯曼曾试图拆除孟卡拉金字塔，最后太过困难而作罢，给金字塔北面留下很大的垂直裂缝。\n\n<img alt=\"孟卡拉金字塔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/Menkaures_Pyramid_Giza_Egypt.jpg/640px-Menkaures_Pyramid_Giza_Egypt.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/ab/Menkaures_Pyramid_Giza_Egypt.jpg\" />\n\n\n\n<img alt=\"金字塔俯视图，从右上到左下分别是胡夫金字塔，卡夫拉金字塔，孟卡拉金字塔，狮身人面像在右边与卡夫拉金字塔有一条堤道相连。via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Giza_pyramid_complex_%28map%29.svg/614px-Giza_pyramid_complex_%28map%29.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/e7/Giza_pyramid_complex_%28map%29.svg\" />\n\n包含三至六王朝，四个王朝，6 / 31。\n\n[wiki of Imhotep museum]: https://en.wikipedia.org/wiki/Imhotep_Museum\n[egyptsites 博客]: https://egyptsites.wordpress.com/2009/02/21/imhotep-museum/\n\n## 第一中间期（First Intermediate Period, BC2181 - BC2055）\n\n古王国时期后期出现严重干旱，国力下降，封建制度也削弱了中央权利，出现第一个黑暗时期，极其混乱的一个时期。这个时期法老权力被极度削弱，地方官员权利变大，在自己领地几乎就成了法老。\n\n七八王朝极度混乱，史书记录不清。\n\n### 曼图霍特普二世（Mentuhotep II）重新统一\n\n古埃及也分成了上下埃及，下埃及经历九十两个王朝，上埃及则是十和十一王朝。最终上埃及由曼图霍特普二世（Mentuhotep II）向北进攻击败下埃及统治者再次统一古埃及，并继续主持十一王朝，进入中王国时期。\n\n经历大概第七王朝到第十王朝，四个王朝，10 / 31。\n\n## 中王国时期（Middle Kingdom, BC2030 - BC1650）\n\n十一王朝再次统一之后，开始重新收复失地，包括南边曾经在古王国和中间时期失落给努比亚的土地。\n\n> 努比亚相当于今天埃及和苏丹交界位置。\n\n十二王朝迁都底比斯（今卢克索）。\n\n### 塞索斯特利斯三世（Sesostris III）扩张到努比亚\n\n塞索斯特利斯三世（Sesostris III）是十二王朝法老，善战，向努比亚扩张，然后还建造了很多堡垒，被认为是这个王朝最强大的法老。\n\n之后他的儿子阿蒙涅姆赫特三世（Amenemhat III）的统治时期被认为是中王国时期经济最好的时期。不过他从西亚邀请了希克索人（Hyksos）到尼罗河下游三角洲定居，也给后面十三十四王朝的结束埋下了隐患。其实十二王朝末期尼罗河洪水减少也为国家带来打击。\n\n### 第一位可考的女法老，塞贝克涅弗鲁（Sobekneferu）\n\n阿蒙涅姆赫特四世（Amenemhat IV）去世后，其子年幼，于是其姐妹塞贝克涅弗鲁（Sobekneferu）成为了历史考证上第一位女法老。她在位三年后去世，政权持续衰弱，是十二王朝最后的法老。\n\n奥西里斯在这个时期成为了最重要的神。\n\n经历十一王朝到十三王朝，三个王朝，13 / 31。\n\n## 第二中间期（Second Intermediate Period, BC1650 - BC1550）\n\n十三王朝的继续衰弱导致尼罗河三角洲（属于下埃及）的政权脱离并独立，是为十四王朝。统治者可能是迦南人（闪米特人）血统。\n\n注意十三王朝和十四王朝几乎是共存的，直到 BC1650 希克索人全面控制下埃及，攻占了古首都孟菲斯。\n\n### 希克索人的外族统治\n\n希克索人对下埃及的统治被视为十五王朝，而南边的底比斯统治者也趁十三王朝的真空宣布独立并宣布十六王朝。\n\n希克索人继续南下把十六王朝打败后，北退，上埃及建立十七王朝与希克索共存。\n\n十七王朝学习希克索人的战术和武器，在十七王朝最后两个法老统治期间反攻北面希克索人。\n\n阿赫摩斯一世（Ahmose I）是十七王朝最后一个法老的弟弟，继续父亲和兄长意志将希克索人赶出埃及，开创十八王朝，进入新王国时期。\n\n包含十四王朝到十七王朝，共四个王朝，17 / 31。\n\n## 新王国时期（New Kingdom, BC1570 － BC1070）\n\n这个时期有很多有名的法老。宗教上也有不少的变动。\n\n在神明崇拜上，由于此时统一埃及十七王朝的统治者就是底比斯的家族，所以底比斯的地方神祇阿蒙（Amun）被推举到了主神的地位。由于古埃及一直以来一般都认为主神是太阳神拉（Ra），所以这段时期又经常将阿蒙和拉结合为同一个神，叫阿蒙-拉。\n\n古埃及历史上最强盛的十八王朝就在这个时期内。\n\n### 阿赫摩斯一世（Ahmose I）赶走外族，统一上下埃及\n\n十八王朝第一任法老阿赫摩斯一世（Ahmose I），他登基的时候可能只有十岁，并可能在二十岁左右完成了「驱逐胡虏」，恢复了埃及对努比亚的统治。\n\n之后是阿赫摩斯一世的儿子阿蒙霍特普一世（Amenhotep I）继位。\n\n接下来的法老图特摩斯一世（Thutmose I）的身世则有点模糊，有可能是阿蒙霍特普一世的儿子，或者是他的军队指挥官。他意图扩大埃及版图，并第一个在帝王谷建造坟墓。\n\n<img alt=\"Valley of the Kings，帝王谷。via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/ValleeDesRois.JPG/800px-ValleeDesRois.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/2/2a/ValleeDesRois.JPG\" />\n\n图特摩斯一世儿女中有一个儿子，图特摩斯二世（Thutmose II），是由妃子所生；其中有一个女儿，哈特谢普苏特（Hatshepsut），是由王后所生。\n\n王后没有儿子，于是图特摩斯二世娶了他的姐姐哈特谢普苏特并登上王位，但很快就死了，而哈特谢普苏特只生了一个女儿，所以又从图特摩斯二世的妃子中找了个儿子当图特摩斯三世（Thutmose III）。\n\n### 古埃及的「武则天」，哈特谢普苏特\n\n或许是因为图特摩斯三世太幼小，又或者是因为哈特谢普苏特觉得自己是正统王室之后，因此虽然作为摄政王，但是肯定是想自己当甚至极有可能当上了法老。而且考古学者从资料和建筑中考据，亦基本承认了她法老的地位（同时图特摩斯三世仍然在位）。\n\n哈特谢普苏特在位期间的贡献主要为重新建立被希克索人入侵时破坏的贸易路线，以及大兴土木建造了很多建筑。她停止了土地扩张，使埃及在叙利亚及巴勒斯坦的统治权动摇（死后更丢失了统治权，但后来图特摩斯三世重新收复），但加强了和邻国的贸易，使埃及变得富庶。\n\n她在卡纳克神庙建造了两个方尖碑，其中之一是埃及现存方尖碑中最高的，约 29 米高。\n\n她在曼图霍特普二世神庙旁建造的哈特谢普苏特神庙，是古埃及建筑杰作以及热门景区。\n\n<img alt=\"卡纳克神庙，埃及现存最大神庙，中王国时期开始建造，一直是法老们建造崇拜神明和歌颂自己的建筑的地方 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/Temple_Complex_at_Karnak.jpg/640px-Temple_Complex_at_Karnak.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/3/3b/Temple_Complex_at_Karnak.jpg\" />\n\n\n\n<img alt=\"哈特谢普苏特方尖碑 via www.obelisks.org\" src=\"http://www.obelisk.co3.jp/thumbnail/karnak_hatshepsut_south.jpg\" data-original=\"http://www.obelisk.co3.jp/karnak_hatshepsut_south.jpg\" />\n\n\n\n<img alt=\"左为曼图霍特普二世神庙，已倒塌，右为哈特谢普苏特神庙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/42/SFEC_AEH_-ThebesNecropolis-2010-Hatshepsut-023.jpg/640px-SFEC_AEH_-ThebesNecropolis-2010-Hatshepsut-023.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/4/42/SFEC_AEH_-ThebesNecropolis-2010-Hatshepsut-023.jpg\" />\n\n\n\n<img alt=\"哈特谢普苏特神庙正面照 via www.egypt.travel\" src=\"http://www.egypt.travel/media/1717/temple-of-hatshupsut_800x600.jpg\" data-original=\"http://www.egypt.travel/media/1717/temple-of-hatshupsut_800x600.jpg\" />\n\n经历王女、王后、摄政王和法老，哈特谢普苏特让人联想起中国的「武则天」。\n\n### 埃及的拿破仑，图特摩斯三世\n\n图特摩斯三世在哈特谢普苏特统治二十一到二十二年后重新归来，并积极扩充军队和埃及版图，征服了地中海沿岸的以色列和叙利亚地区，甚至让邻国给其纳贡。图特摩斯三世也被后人称为「埃及的拿破仑」。\n\n<img alt=\"新王国时期古埃及在公元前15世纪的最大领土范围 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Egypt_1450_BC.svg/520px-Egypt_1450_BC.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/a8/Egypt_1450_BC.svg\" />\n\n图特摩斯三世重获权力后，通过破坏纪念碑等方式极力抹除哈特谢普苏特的存在。后面的王朝在王表编纂上也似乎故意忽略了这个法老。\n\n> 哈特谢普苏特和图特摩斯三世之间的关系，一般认为图特摩斯三世怨恨哈特谢普苏特。但最近一些研究进展称此说法不准确，并声称图特摩斯三世一直担当哈特谢普苏特的军事统治领袖，哈特谢普苏特也没有取其性命；而且损毁行动在图特摩斯三世统治晚期集中进行，哈特谢普苏特的资料也不是唯一被损毁的资料；从而推测图特摩斯三世是为了巩固继承人地位而作出如此的行为，他本人和他的继母并没有过节。这部分说法维基暂时没有找到证据支持。\n\n\b埃及在图特摩斯三世以及几位法老的努力下，终于\b在阿蒙霍特普三世（Amenhotep III）治下达到艺术和国力顶峰。阿蒙霍特普三世一生建造了很多宏伟的建筑和雕像，其中有著名的门农巨像。门农巨像座落在是蒙霍特普三世神庙的门口守卫。而阿蒙霍特普三世神庙是埃及最大最华丽的建筑群，可是后来因为地震和被拆除的缘故，现在已经不存在了，剩下两尊残破的门农巨像。\n\n<img alt=\"门农巨像正面照 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Colossi_of_Memnon_May_2015_2.JPG/640px-Colossi_of_Memnon_May_2015_2.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/ee/Colossi_of_Memnon_May_2015_2.JPG\" />\n\n\n\n<img alt=\"阿蒙霍特普三世神庙鸟瞰图，门农巨像在右边 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/ba/Amenhotep_III_mortuary_Temple.jpg/640px-Amenhotep_III_mortuary_Temple.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/b/ba/Amenhotep_III_mortuary_Temple.jpg\" />\n\n帝国的强盛、对阿蒙神的崇拜和皇家经常修建神殿，令阿蒙神庙的祭司获得极大的财富和权力，祭司们不免出现腐败和干预朝政的行为。\n\n### 被后继者视为异端的宗教改革者，阿蒙霍特普四世\n\n于是阿蒙霍特普三世的儿子，阿蒙霍特普四世，相信是为了打击祭司和权贵，进行了宗教改革。他简化多神系统，要求全国改为崇拜唯一的太阳神阿顿（Aten），甚至把自己的名字改为阿肯那顿（Akhenaten），迁都埃赫塔顿（Akhetaten），摧毁阿蒙神庙。有学者认为这表明了他创造了世界上最早的一神教。但他沉迷新兴宗教事务，以至于对边疆情况置若罔闻，而此时地中海北面的赫梯人正值盛时。于是古埃及逐渐失去了西亚地区的影响力。\n\n他的大皇后，娜芙蒂蒂（Nefertiti），很有可能和他一同统治埃及。\n\n<img alt=\"有名的半身像 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Nofretete_Neues_Museum.jpg/328px-Nofretete_Neues_Museum.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/1/1f/Nofretete_Neues_Museum.jpg\" />\n\n阿肯那顿的后继者在他死后又把旧宗教恢复回来，并大力抹消新兴宗教的记录和影响。\n\n<img alt=\"阿顿 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Aten.svg/640px-Aten.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/af/Aten.svg\" />\n\n### 生前不出名，死后却最出名的法老，图坦卡蒙\n\n阿肯那顿之后经过了一个或者两个短暂统治的法老（可能是他儿子或者王后摄政），王位传到了最著名的法老——图坦卡蒙（Tutankhamun）。\n\n<img alt=\"图坦卡蒙的木乃伊面具 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/TUT-Ausstellung_FFM_2012_47_%287117819557%29.jpg/360px-TUT-Ausstellung_FFM_2012_47_%287117819557%29.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/e5/TUT-Ausstellung_FFM_2012_47_%287117819557%29.jpg\" />\n\n图坦卡蒙曾用名图坦卡顿（Tutankhaten），从名字的更改可以看出信仰的更改。他将首都迁回底比斯，重开神庙，重新恢复阿蒙神的崇拜。\n\n图坦卡蒙的出名是因为所有法老的坟墓都几乎被盗空了，而唯有他在帝王谷的坟墓三千多年来从没被盗，以至于发掘出近五千件文物，令法老以及图坦卡蒙成为流行文化。\n\n关于有名的「法老的诅咒」，可以说没有任何证据表明诅咒存在，坟墓内也没有发现任何诅咒的存在。打开坟墓和棺材的在场 58 人，据研究只有 8 - 10 人在十几年内死亡，根本不足为诅咒的依据。\n\n{% note info %}\n2019 年（本年） 1 月，图坦卡蒙坟墓向游客开放。\n{% endnote %}\n\n### 混乱的最后几任十八王朝法老\n\n然而图坦卡蒙似乎一直疾病缠身，18 岁就死了，死因有各种猜测，包括疟疾、腿疾或者被谋杀。他与其异母姐姐安克姗海娜曼的两个女儿也早年夭折，因此图特摩斯家族就绝后了。安克姗海娜曼似乎曾经写信给赫梯国王苏庇路里乌玛一世要求他要一个王子嫁给她，但是王子还没到就被杀了。\n\n之后是阿肯那顿和图坦卡蒙大臣，甚至可能是其背后的操纵者，阿伊（Ay），极有可能娶了安克姗海娜曼，当上了法老，统治了一个很短暂的时期。之后就被图坦卡蒙的将军，霍朗赫布（又或者哈伦海布，Horemheb）夺取了法老位置。\n\n霍朗赫布以孟菲斯为首都，继续抹除阿顿以及其前任等人的痕迹，算是个解决宗教动荡和国家分裂等麻烦的人。\n\n霍朗赫布跟王室没有关系，也没有儿子，法老位置传给了当时的大臣门帕提拉（原名普拉美斯，Paramesse），即十九王朝的第一任法老拉美西斯一世（Ramesses I）。\n\n### 被儿子盖住名声的塞提一世\n\n拉美西斯一世的儿子塞提一世（Seti I）和她父亲重建了王国的秩序，并在叙利亚和迦南地区打击赫梯人的势力。从纪念碑上可以找到他的伟大功绩，虽然一般来说都是倾向于夸大。总的来说，塞提一世可以说是恢复新王国时期的荣光。\n\n塞提一世也兴建了很多建筑，包括位于底比斯的塞提一世祭庙、位于阿拜多斯的塞提一世纪念庙以及大柱式大厅，虽然大部分应该是在拉美西斯二世时期完成的。\n\n<img alt=\"塞提一世神庙 via www.egypt.travel\" src=\"http://www.egypt.travel/media/1297/temple-of-seti-1.jpg\" data-original=\"http://www.egypt.travel/media/1297/temple-of-seti-1.jpg\" />\n\n阿拜多斯的塞提一世纪念庙虽然外表其貌不扬，但是内部壁画精美，而且有不少壁画仍然有颜色。其中一面墙上按时间顺序记录了大多数王朝的法老的名字，从美尼斯到塞提一世共 76 个，被称为阿拜多斯王表，是后世研究历史的主要来源之一。\n\n<img alt=\"塞提一世纪念庙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/3/33/AbydosFacade.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/3/33/AbydosFacade.jpg\" />\n\n\n\n<img alt=\"阿拜多斯王表，法老的名字是圈起来的 via pharaoh.se\" src=\"https://pharaoh.se/hiero/ABY1200.jpg\" data-original=\"https://pharaoh.se/hiero/ABY1200.jpg\" />\n\n\n\n<img alt=\"阿拜多斯王表，法老的名字是圈起来的 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f1/AbydosKinglistDrawing.png/640px-AbydosKinglistDrawing.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/f/f1/AbydosKinglistDrawing.png\" />\n\n\n\n<img alt=\"大柱式大厅、神龛大厅 via www.egypt.travel\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/Pillars_of_Great_Hypostyle_Hall_in_Karnak_Luxor_Egypt.JPG/800px-Pillars_of_Great_Hypostyle_Hall_in_Karnak_Luxor_Egypt.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/5/5c/Pillars_of_Great_Hypostyle_Hall_in_Karnak_Luxor_Egypt.JPG\" />\n\n### 鼎鼎大名的拉美西斯二世\n\n塞提一世的儿子就是赫赫有名的拉美西斯二世（Ramesses II）了。他如此的有名以至于后来有九位法老使用了拉美西斯这名字。他在位长达 66 到 67 年，执政的时期是新王国最后的强盛年代。\n\n但凡古埃及强盛的时期，统治的法老无不是领土争端和宏伟建筑这两方面有所建树，拉美西斯二世也不例外。他打败从地中海入侵的海盗，向东北占领迦南地区和南叙利亚地区，和北面的强敌赫梯国王穆瓦塔利二世（Muwatalli II）来回地打拉锯战，最后分庭抗礼；稳定南边的努比亚。他在位时间比较长，也在埃及各地建造非常多的建筑，甚至在不是他建造的建筑上也留下标志。\n\n卡迭石战役是埃及和赫梯之间比较著名的战役。战役的情况很可能是这样：埃及想进军占领卡迭石，但被赫梯战车袭击并击溃；法老在营地受困的时候雇佣兵到了，反击了赫梯，导致赫梯军败退；埃及虽然赢了这场战斗但是也无法攻克卡迭石，战略上算是输了。之后双方一直僵持不下。卡迭石战役有非常详细的记录，但基本都是埃及方面一面之词，因此也存在夸大拉美西斯二世的可能性。\n\n<img alt=\"两个帝国接壤的卡迭石（Qadesh） via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Hitt_Egypt_Perseus.png/310px-Hitt_Egypt_Perseus.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/e9/Hitt_Egypt_Perseus.png\" />\n\n之后穆瓦塔利二世病逝，拉美西斯二世和继位的哈图西里三世（Hattusili III）缔结埃及赫梯和约，此时距离卡迭石战役已经十五六年了。\n\n埃及赫梯和平条约，或称卡迭石条约、永恒条约、银条约，是古代近东（即今西亚、中东地区）地区协议双方都有保存下来的最古老的条约。缔结和约结束了长期的冷战实际上对签署双方都有利益。埃及的目的，很可能是为了吹嘘法老功绩，并成立军事同盟以共同对抗西亚更东边的新贵力量亚述；而赫梯的目的，则可能是新王为了巩固地位以及利用法老的国际影响力提升自己的国际地位。\n\n<img alt=\"赫梯人版本的和约 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Treaty_of_Kadesh.jpg/200px-Treaty_of_Kadesh.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/Treaty_of_Kadesh.jpg\" />\n\n\n\n<img alt=\"埃及人版本的和约 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/%C3%84gyptisch-Hethitischer_Friedensvertrag_Karnaktempel.jpg/200px-%C3%84gyptisch-Hethitischer_Friedensvertrag_Karnaktempel.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/9/93/%C3%84gyptisch-Hethitischer_Friedensvertrag_Karnaktempel.jpg\" />\n\n拉美西斯二世的闻名也许也来自于他遍布埃及的大型建筑和到处刻画自己的荣光事迹。\n\n比较有名的建筑是拉美西姆神庙、哈布城神庙和阿布辛贝勒神庙。\n\n拉美西姆神庙现今已经是废墟，往日的样子只能靠门口和后面的建筑来想像了。\n\n<img alt=\"拉美西姆神庙鸟瞰图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/SFEC_AEH_-ThebesNecropolis-2010-RamsesII-021.jpg/640px-SFEC_AEH_-ThebesNecropolis-2010-RamsesII-021.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/8/80/SFEC_AEH_-ThebesNecropolis-2010-RamsesII-021.jpg\" />\n\n\n\n<img alt=\"门口的四个奥西里斯雕像 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/SFEC-RAMASSEUM-2009-11-14-0034.JPG/640px-SFEC-RAMASSEUM-2009-11-14-0034.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/1/1c/SFEC-RAMASSEUM-2009-11-14-0034.JPG\" />\n\n比较值得注意的是庙内有一副拉美西姆国王名单（Ramesseum king list），列出了新王朝的大部分法老。\n\n<img alt=\"拉美西姆国王名单手绘图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Ramesseum_King_list.png/800px-Ramesseum_King_list.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Ramesseum_King_list.png/1920px-Ramesseum_King_list.png\" />\n\n哈布城神庙（Medinet Habu）离哈特谢普苏特神庙不远，很多法老都在这修建过建筑，刻过壁画。然而拉美西斯二世应该是其中最张扬的了，似乎很害怕被人遗忘。\n\n<img alt=\"哈布城神庙鸟瞰图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/SFEC_AEH_-ThebesNecropolis-2010-RamsesIII036.jpg/640px-SFEC_AEH_-ThebesNecropolis-2010-RamsesIII036.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/4/4e/SFEC_AEH_-ThebesNecropolis-2010-RamsesIII036.jpg\" />\n\n拉美西斯二世本身就喜欢乱改别人的壁画，因此他也害怕别人抹掉他的壁画，于是他的壁画都刻得非常深。\n\n<img alt=\"哈布城壁画 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/Habu_Temple_court_in_sesson.JPG/640px-Habu_Temple_court_in_sesson.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/9/93/Habu_Temple_court_in_sesson.JPG\" />\n\n阿布辛贝勒神庙（Abu Simbel temples）应该是很多人从电视媒体等看到过的神庙之一，整个神庙在岩石上开凿而成，门口四个雕像也是其标志之一。\n\n<img alt=\"阿布辛贝勒神庙正面 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/28/Abu_Simbel%2C_Ramesses_Temple%2C_front%2C_Egypt%2C_Oct_2004.jpg/640px-Abu_Simbel%2C_Ramesses_Temple%2C_front%2C_Egypt%2C_Oct_2004.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/2/28/Abu_Simbel%2C_Ramesses_Temple%2C_front%2C_Egypt%2C_Oct_2004.jpg\" />\n\n神庙东北面是法老为哈索尔（Hathor，古埃及女神）和妮菲塔莉（Nefertari，拉美西斯二世的大王后）所建的小庙（the Small Temple）。妮菲塔莉的雕像跟拉美西斯二世一样高，表明地位跟他几乎平起平坐，也是几乎唯一一位在世就被神格化的埃及王后。其他同样有名的王后是克利奥帕特拉七世（埃及艳后）、娜芙蒂蒂（阿肯那顿的大王后）和哈特谢普苏特（埃及「武则天」）。\n\n<img alt=\"左为阿布辛贝勒神庙，右为小庙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/63/Panorama_Abu_Simbel_crop.jpg/640px-Panorama_Abu_Simbel_crop.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/6/63/Panorama_Abu_Simbel_crop.jpg\" />\n\n近代由于在阿斯旺兴建水坝，联合国筹钱将阿布辛贝勒神庙和小庙搬离到比原地高 200 米处。\n\n<img alt=\"搬迁前后位置对比 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/06/Abu_Simbel_relocation_by_Zureks.jpg/640px-Abu_Simbel_relocation_by_Zureks.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/06/Abu_Simbel_relocation_by_Zureks.jpg\" />\n\n频繁的战争、大兴土木，造就了巨大的国库开销，加大了国力下降。在拉美西斯二世死后，埃及就立刻开始走下坡路。\n\n### 第二十王朝的祭司当权\n\n过了几任法老后，到了第二十王朝第二任法老拉美西斯三世的统治。他抵抗了几次地中海和利比亚的入侵，治下还出现了人类历史上第一次有记录的劳工罢工。他的一个妃子还曾试图毒杀他，\b最后是失败了。\n\n拉美西斯五世，土地和财政基本就已经被阿蒙神庙的祭司所控制了。\n\n拉美西斯六世在建造坟墓时无意间将图坦卡蒙坟墓埋在了地下，避免了其日后被盗掘。\n\n第二十王朝，古埃及陷入内忧外患，尼罗河水位下降、内政动乱、法老坟墓被盗、官员腐败，又丢了叙利亚和巴勒斯坦，最后法老基本就没有统一埃及的权力了。\n\n包含十八王朝到二十王朝，共三个王朝，20 / 31。\n\n## 第三中间期（3rd Intermediate Period, BC1069 - BC664）\n\n拉美西斯十一世死后，结束二十王朝，斯门代斯一世（Smendes I）开创二十一王朝，然而此时法老权力已经极弱，基本被赶到下埃及去了，上埃及和中埃及地区则是由底比斯阿蒙神庙的大祭司们所控制。\n\n### 利比亚人的二十二、二十三、二十四王朝\n\n之前二十王朝已经在尼罗河三角洲定居的利比亚人，在舍顺克一世（Shoshenq I）统领下统一埃及，创立二十二王朝，这里的法老已经不是本土埃及人了。然后二十三王朝二十四王朝，王室和内政仍然比较动荡，南方起源于库施（kush）的努比亚王国趁乱北上把整个埃及打了下来，赶走了利比亚人，建立二十五王朝。\n\n### 努比亚人的二十五王朝\n\n努比亚人重新恢复了古埃及的的宗教传统，修复和建造了不少寺庙和纪念碑，还在家乡（位于现在的苏丹）重新建造起金字塔来。\n\n<img alt=\"二十五王朝的库施帝国 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Egypt_kush.svg/523px-Egypt_kush.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/1/1a/Egypt_kush.svg\" />\n\n包含二十一王朝到二十五王朝，共五个王朝，25 / 31。\n\n## 古埃及晚期 / 波斯帝国时期（Late Period, BC664 - BC332）\n\n之后西亚的亚述人开始入侵古埃及，努比亚人不敌，向南退回努比亚。亚述人可能对占着古埃及没有兴趣，在洗劫一番后退了回去，扶植了普萨美提克一世（Psammetichus I）作为法老。\n\n### 古埃及本土最后的荣光，二十六王朝\b\n\n之后，普萨美提克一世趁亚述帝国忙于战乱，联合古希腊的雇佣军，又重新统一了古埃及，建立二十六王朝，恢复了繁荣稳定。之后亚述被内部独立的新巴比伦帝国推翻，普萨美提克一世也曾想恢复西亚的霸权，但被尼布甲尼撒二世（Nebuchadnezzar II）统治的新巴比伦帝国打了回来。\n\n那个古埃及法老用婴儿做实验，实验听不到别人说话怎么学语言的故事，就是普萨美提克一世的故事，记录在希罗多德写的书「历史」第二卷中。\n\n<img alt=\"亚述帝国最大版图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/e/eb/Assy3.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/eb/Assy3.JPG\" />\n\n然而二十六王朝已经是最后一个埃及本土王朝了。更东边的波斯阿契美尼德帝国（波斯第一帝国）灭了新巴比伦帝国，接着吞并了古埃及，波斯国王冈比西斯二世（Cambyses II）成了法老，称为二十七王朝。\n\n之后二十六王朝后裔推翻波斯的统治，先后建立短暂的二十八、二十九、三十王朝。\n\n然后波斯人再次征服古埃及，是为三十一王朝。\n\n包含二十六王朝到三十一王朝，共六个王朝，31 / 31。\n\n## 马其顿的亚历山大解放埃及 -> 托勒密王朝（Macedonian and Ptolemaic Egypt, BC332 - BC30）\n\n### 埃及解放者，亚历山大\n\n当无人不知的亚历山大击溃波斯大军并来到埃及的时候，根本没有遇到什么抵抗，埃及当地的波斯管理者就直接将埃及献给他了，埃及人民还视其为埃及的解放者。\n\n亚历山大尊重当地信仰，去绿洲朝圣得到神谕。神谕宣称他是阿蒙的儿子。实际上就是得到了祭司等有权势的人的承认。他成立了一个新的希腊城市名为亚历山大（他到哪就在哪建亚历山大城），并任命希腊人——而不是埃及人——作为高官。\n\n亚历山大没有在埃及待很久，就去征服其他地方了，从此再没有回来过。他的部下托勒密留在埃及统治，并从亚历山大死后分崩离析的亚历山大帝国中独立出来，创立托勒密王朝统治了近三百年。\n\n### 希腊法老，托勒密王朝\n\n托勒密王朝中，男性都叫托勒密（Ptolemy），女性一般叫克利奥帕特拉（Cleopatra）、贝勒尼基（Berenice）和阿尔西诺伊（Arsinoe），因此所有统治者都是这四个名字的加几世这样的称呼。最为人知的就是末代法老，埃及艳后，克利奥帕特拉七世。\n\n托勒密王朝没有使用希腊文明取代埃及文明，反而扶持其延续，修建埃及风格的神庙，维护传统宗教仪式。当然也带来了希腊文明的影响，这个时期很多文艺作品都有两个文明融合的风格。\n\n### 罗塞塔石碑，托勒密五世诏书\n\n罗塞塔石碑本来并不是什么比较特别的石碑，只是托勒密五世加冕一周内纪念所制，但碑上同时使用了三种语言，分别是圣书体（埃及象形文字）、埃及草书（世俗体）和古希腊文，令后世学者可以做参考比对，通过古希腊文来解读圣书体，从而使这块石碑无比珍贵，也因此罗塞塔石碑在现代也被引申为「暗喻」、「翻译」和「关键线索」等的含义。\n\n<img alt=\"罗塞塔石碑 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Rosetta_Stone.JPG/410px-Rosetta_Stone.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/2/23/Rosetta_Stone.JPG\" />\n\n### 艳后与凯撒\n\n克利奥帕特拉七世是托勒密王朝中第一个学会埃及语并接受埃及信仰和埃及神明的人，这是其他王室成员所拒绝的事（想想罗塞塔石碑还需要古希腊文书写）。她早年在就政治上活跃，应该算是被迫和托勒密十三世（同父异母弟弟）结婚以一同统治埃及。但之后两人发生冲突，艳后被迫流亡叙利亚，招兵买马打算反攻托勒密十三世。\n\n此时罗马内部也正在争斗，凯撒打败了庞培，后者被迫跑到埃及。而托勒密十三世可能希望寻求凯撒支持而擅自将凯撒老对手庞培暗杀了，在凯撒追到埃及时献上庞培的头颅。这可能令凯撒十分不满，因为庞培是他的劲敌、女婿，也是罗马执政官，不应该被异国人杀死。\n\n克利奥帕特拉七世可能看准了这个机会潜回埃及，并将自己献给凯撒，做他的情人，取得凯撒的支持。之后凯撒对埃及统治者的仲裁，是克利奥帕特拉七世上位。\n\n{% cq %}\n传说当时克利奥帕特拉把自己伸直，用毯子卷起来包覆其中，命人抬着进入王宫，这时克利奥帕特拉年仅21岁，凯撒52岁。\n*维基百科*\n{% endcq %}\n\n托勒密十三世当然十分不满，率军围攻亚历山大城内罗马军。凯撒等到增援到来，脱围之后在尼罗河战役打败托勒密十三世，随后另立了托勒密十四世（仍旧是艳后的弟弟）和艳后结婚统治埃及。艳后虽然名义上嫁给托勒密十四世，但是实际上却和凯撒相好，还生了一个孩子托勒密·凯撒。\n\nBC46，艳后来到罗马，遭到罗马人民的厌恶，因为凯撒已婚，而她和凯撒关系暧昧。但凯撒不愧为独裁者，完全罔顾旁人，甚至为艳后制作黄金雕像，和罗马人先祖维纳斯神像一起摆放。在凯撒被刺后，艳后还留在罗马，可能是希望自己儿子继承凯撒。但是凯撒大概没有承认这个儿子，而是在遗嘱另立他的养子屋大维作为继承人。于是她回到埃及，毒死了托勒密十四世，与其儿子共同统治埃及。\n\n### 艳后与安东尼\n\n安东尼是凯撒生前最重要的军队指挥官。凯撒被刺后，他和屋大维解决了反凯撒势力。之后在埃及传唤艳后的时候也应该是被迷住了，和她在 BC41 到 BC40 年度过了一段时光。接着安东尼离开了埃及，艳后不久后生下一男一女双胞胎，相信就是安东尼的儿女。\n\n安东尼和屋大维从 BC41 年开始就不和，因为安东尼妻子发起了和屋大维对抗的战争。虽然后来妻子突然身亡，安东尼也娶了屋大维的姐姐小屋大薇以维持稳定，但是两人仍然是竞争关系。安东尼把大量土地给予了艳后，屋大维利用这一点宣称其为外国女王而牺牲共和国权利。两人关系持续恶化，安东尼也冷落小屋大薇。之后对安息帝国的战争失利，安东尼回到埃及。BC36 年，艳后又为安东尼生下第二个儿子。\n\nBC34 年赢得对亚美尼亚的战争后，安东尼和艳后在大胜后的举动被屋大维大肆利用，煽动罗马对安东尼的不满，包括艳后以神的名义宣称自己和凯撒的儿子是万王之王，自己则是万王之女王，和安东尼的儿女则分别册封国王等。安东尼更公然向罗马宣称将包括打下亚美尼亚等一部分罗马行省赠予克利奥帕特拉七世。最冒犯屋大维的，是安东尼宣称艳后和凯撒的儿子托勒密·凯撒才应该是凯撒的继承人。\n\n屋大维借机行事向埃及女王宣战，在亚克兴角海战中打败安东尼。安东尼输掉海战的原因可能是因为海军在战事胶着时出现叛逃，安东尼和艳后逃回了埃及，陆军见势也投降屋大维了。\n\n屋大维乘胜追击到埃及，退无可退的安东尼误认为艳后已自杀，用剑刺自己，可能是被带到艳后藏身的坟墓才真正死去。艳后随后也被捕了。\n\n关于克利奥帕特拉七世的死法，无人知道。流传最广的版本是她让毒蛇咬自己而毒发身亡，也有观点认为他是被屋大维下令处死。\n\n她和凯撒的儿子托勒密·凯撒被屋大维处死，从此埃及成为了罗马帝国的行省，托勒密王朝终结，埃及的法老时代也终结了。\n\n<img alt=\"丹达拉的哈索尔神庙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3c/Dendera_7_977.PNG/621px-Dendera_7_977.PNG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/3/3c/Dendera_7_977.PNG\" />\n\n\n\n<img alt=\"哈索尔神庙墙上的克利奥帕特拉七世和她的儿子托勒密·凯撒 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/4/49/Denderah3_Cleopatra_Cesarion.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/4/49/Denderah3_Cleopatra_Cesarion.jpg\" />\n\n## 罗马统治时期 -> 阿拉伯人入侵\n\n作为罗马帝国行省的埃及，发生的事情属于罗马的历史了，这里不详述。只是 CE264 年的时候，反抗罗马的帕尔米拉女王季诺碧亚征服了埃及使其脱离罗马，并自称埃及女王，说她的家族可追溯到克利奥帕特拉七世。后来罗马也没有战胜她，只能是围城断粮逼其投降。\n\n埃及有一段时间曾被萨珊王朝所占领（CE621 - CE629），拜占庭（东罗马帝国）虽然重新夺回，但十年后阿拉伯帝国入侵的时候，已经无力抵抗，自此埃及伊斯兰化，埃及文明也不复存在。\n\n## 古埃及神明\n\n古埃及是一个宗教特色很浓的国家，了解其神明系统有助于深入理解古埃及，不过没有兴趣也可不看。\n\n见 [古埃及神明][古埃及神明] 一文。\n\n[古埃及神明]: /learn-ancient-egyptian-gods-in-5-minutes\n\n## 一些小知识\n\n法老的头冠分两部分，代表上埃及的白色王冠，代表下埃及的红色王冠，一般法老会戴着两个，诏示其为整个埃及的统治者。\n\n古埃及神话中的神明都是兄妹 / 姐弟结合，这可能造成了古埃及王室基本都是近亲结合。如果侧室的儿子登基法老，一般也要娶正室的女儿。统治者可能借此保持所谓的血统纯正。\n\n建造金字塔和神庙的大石头、花岗岩等，很多是从阿斯旺开凿的。\n\n## 部分参考资料\n\n[开放世界埃及篇](https://www.bilibili.com/medialist/play/ml454556918)\n[古埃及 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/古埃及)\n[古埃及历史 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/古埃及历史)\n[阿姨学、古埃及 | 阿姨学词典 Wikia | FANDOM powered by Wikia](https://auntology.fandom.com/wiki/阿姨学、古埃及)\n[History of ancient Egypt - Wikipedia](https://en.wikipedia.org/wiki/History_of_ancient_Egypt)\n[Prehistoric Egypt - Wikipedia](https://en.wikipedia.org/wiki/Prehistoric_Egypt)\n[Early Dynastic Period (Egypt) - Wikipedia](https://en.wikipedia.org/wiki/Early_Dynastic_Period_%28Egypt%29)\n[Old Kingdom of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Old_Kingdom_of_Egypt)\n[First Intermediate Period of Egypt - Wikipedia](https://en.wikipedia.org/wiki/First_Intermediate_Period_of_Egypt)\n[Middle Kingdom of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Middle_Kingdom_of_Egypt)\n[Second Intermediate Period of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Second_Intermediate_Period_of_Egypt)\n[New Kingdom of Egypt - Wikipedia](https://en.wikipedia.org/wiki/New_Kingdom_of_Egypt)\n[Third Intermediate Period of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Third_Intermediate_Period_of_Egypt)\n[Late Period of ancient Egypt - Wikipedia](https://en.wikipedia.org/wiki/Late_Period_of_ancient_Egypt)\n[Ptolemaic Kingdom - Wikipedia](https://en.wikipedia.org/wiki/Ptolemaic_Kingdom)\n[Sasanian Egypt - Wikipedia](https://en.wikipedia.org/wiki/Sasanian_Egypt)\n[First Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/First_Dynasty_of_Egypt)\n[Second Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Second_Dynasty_of_Egypt)\n[Third Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Third_Dynasty_of_Egypt)\n[Fourth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Fourth_Dynasty_of_Egypt)\n[Fifth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Fifth_Dynasty_of_Egypt)\n[Sixth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Sixth_Dynasty_of_Egypt)\n[Seventh Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Seventh_Dynasty_of_Egypt)\n[Eighth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Eighth_Dynasty_of_Egypt)\n[Ninth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Ninth_Dynasty_of_Egypt)\n[Tenth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Tenth_Dynasty_of_Egypt)\n[Eleventh Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Eleventh_Dynasty_of_Egypt)\n[Eleventh Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Eleventh_Dynasty_of_Egypt)\n[Twelfth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twelfth_Dynasty_of_Egypt)\n[Thirteenth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Thirteenth_Dynasty_of_Egypt)\n[Fourteenth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Fourteenth_Dynasty_of_Egypt)\n[Fifteenth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Fifteenth_Dynasty_of_Egypt)\n[Sixteenth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Sixteenth_Dynasty_of_Egypt)\n[Abydos Dynasty - Wikipedia](https://en.wikipedia.org/wiki/Abydos_Dynasty)\n[Seventeenth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Seventeenth_Dynasty_of_Egypt)\n[Eighteenth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Eighteenth_Dynasty_of_Egypt)\n[Nineteenth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Nineteenth_Dynasty_of_Egypt)\n[Twentieth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twentieth_Dynasty_of_Egypt)\n[Twenty-first Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twenty-first_Dynasty_of_Egypt)\n[Twenty-second Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twenty-second_Dynasty_of_Egypt)\n[Twenty-third Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twenty-third_Dynasty_of_Egypt)\n[Twenty-fourth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twenty-fourth_Dynasty_of_Egypt)\n[Twenty-fifth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twenty-fifth_Dynasty_of_Egypt)\n[Twenty-sixth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twenty-sixth_Dynasty_of_Egypt)\n[Twenty-eighth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twenty-eighth_Dynasty_of_Egypt)\n[Twenty-ninth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Twenty-ninth_Dynasty_of_Egypt)\n[Thirtieth Dynasty of Egypt - Wikipedia](https://en.wikipedia.org/wiki/Thirtieth_Dynasty_of_Egypt)\n[Argead dynasty - Wikipedia](https://en.wikipedia.org/wiki/Argead_dynasty)\n[Ptolemaic Kingdom - Wikipedia](https://en.wikipedia.org/wiki/Ptolemaic_Kingdom)\n[Valley of the Kings - Wikipedia](https://en.wikipedia.org/wiki/Valley_of_the_Kings)\n[Giza pyramid complex - Wikipedia](https://en.wikipedia.org/wiki/Giza_pyramid_complex)\n[Histories (Herodotus) - Wikipedia](https://en.wikipedia.org/wiki/Histories_%28Herodotus%29)\n[Assyria - Wikipedia](https://en.wikipedia.org/wiki/Assyria)\n[Kingdom of Kush - Wikipedia](https://en.wikipedia.org/wiki/Kingdom_of_Kush)\n[Hyksos - Wikipedia](https://en.wikipedia.org/wiki/Hyksos)\n[Ramesseum - Wikipedia](https://en.wikipedia.org/wiki/Ramesseum)\n[Ancient Near East - Wikipedia](https://en.wikipedia.org/wiki/Ancient_Near_East)\n[Abu Simbel temples - Wikipedia](https://en.wikipedia.org/wiki/Abu_Simbel_temples)\n[Egyptian–Hittite peace treaty - Wikipedia](https://en.wikipedia.org/wiki/Egyptian%E2%80%93Hittite_peace_treaty)\n[Battle of Kadesh - Wikipedia](https://en.wikipedia.org/wiki/Battle_of_Kadesh)\n[Abydos King List - Wikipedia](https://en.wikipedia.org/wiki/Abydos_King_List)\n[Abydos, Egypt - Wikipedia](https://en.wikipedia.org/wiki/Abydos,_Egypt)\n[Canaan - Wikipedia](https://en.wikipedia.org/wiki/Canaan)\n[Karnak - Wikipedia](https://en.wikipedia.org/wiki/Karnak)\n[早王朝时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/早王朝时期)\n[古王国时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/古王国时期)\n[第一中间时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/第一中间时期)\n[中王国时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/中王国时期)\n[第二中间时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/第二中间时期)\n[新王国时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/新王国时期)\n[第三中间时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/第三中间时期)\n[古埃及晚期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/古埃及晚期)\n[阿契美尼德王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/阿契美尼德王朝)\n[托勒密时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/托勒密时王朝)\n[罗马及拜占庭时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及_%28羅馬帝國行省%29)\n[萨珊时期 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/萨珊王朝)\n[埃及第一王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第一王朝)\n[埃及第二王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二王朝)\n[埃及第三王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第三王朝)\n[埃及第四王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第四王朝)\n[埃及第五王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第五王朝)\n[埃及第六王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第六王朝)\n[埃及第七王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第七王朝)\n[埃及第十一王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十一王朝)\n[埃及第十二王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十二王朝)\n[埃及第十三王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十三王朝)\n[埃及第十四王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十四王朝)\n[埃及第十五王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十五王朝)\n[埃及第十六王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十六王朝)\n[埃及第十七王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十七王朝)\n[埃及第十八王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十八王朝)\n[埃及第十九王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第十九王朝)\n[埃及第二十王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十王朝)\n[埃及第二十一王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十一王朝)\n[埃及第二十二王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十二王朝)\n[埃及第二十三王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十三王朝)\n[埃及第二十四王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十四王朝)\n[埃及第二十五王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十五王朝)\n[埃及第二十六王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十六王朝)\n[埃及第二十七王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十七王朝)\n[埃及第二十八王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十八王朝)\n[埃及第二十九王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第二十九王朝)\n[埃及第三十王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第三十王朝)\n[埃及第三十一王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及第三十一王朝)\n[古希腊 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/古希腊)\n[馬其頓王國 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/馬其頓王國)\n[托勒密王朝 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/托勒密王朝)\n[波斯 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/波斯)\n[帝王谷 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/帝王谷)\n[吉萨金字塔群 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/吉萨金字塔群)\n[历史 (希罗多德) - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/吉萨金字塔群/历史_%28希罗多德%29)\n[亚述 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/亚述)\n[库施 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/库施)\n[喜克索斯人 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/喜克索斯人)\n[拉美西姆 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/拉美西姆)\n[古代近东 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/古代近东)\n[阿布辛贝勒神庙 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/阿布辛贝勒神庙)\n[埃及赫梯和约 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/埃及赫梯和约)\n[卡迭石战役 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/卡迭石战役)\n[阿拜多斯王表 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/阿拜多斯王表)\n[阿拜多斯 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/阿拜多斯)\n[迦南 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/迦南)\n[卡纳克神庙 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/卡纳克神庙)\n\n## 修订记录\n\n### 2019.05.15\n\n* 搜集材料\n* 完成文章结构\n\n### 2019.05.20\n\n* 完成初稿\n\n### 2019.05.21\n\n* 新增缩略图\n* 整体润色\n\n### 2019.05.22\n\n* 整理参考资料\n* 增补早期王朝的内容\n\n### 2019.05.23\n\n* 新增「古埃及神明」一节\n","slug":"learn-ancient-egyptian-history-in-30-minutes","published":1,"date":"2019-05-15T12:46:26.449Z","updated":"2019-05-24T04:51:26.132Z","_id":"cjw0oyv5100edn7t40830ez1c","comments":1,"layout":"post","photos":[],"link":"","content":"<p>前几天在 bilibili 上看了一个 up 主的埃及旅游系列 <a href=\"https://www.bilibili.com/medialist/play/ml454556918\" target=\"_blank\" rel=\"noopener\">vlog</a>，了解了一些关于古埃及历史的知识，再通过维基什么学习，写下本文以做笔记。</p>\n<p>本文基本来源中英文维基，英文为主中文为辅，精简了大量不太重要的细节，比较适合快速了解和学习古埃及历史。如果对内容有什么疑问或者质疑，请务必留下评论或者联系我做讨论。</p>\n<h2 id=\"综述\"><a href=\"#综述\" class=\"headerlink\" title=\"综述\"></a>综述</h2><p>时间上只会覆盖到中世纪之前，个人认为古埃及在阿拉伯人入侵之后就算是玩完了，所以之后的时期不做记录。</p>\n<p>首先，整个古埃及基本就是沿着尼罗河建立的。尼罗河的走向是自南向北，古埃及也经常因为统治的原因，一段时期分成上埃及和下埃及，一段时期则是统一，正所谓分久必合，合久必分。上埃及是在南边即上游，而下埃及则是在北边即下游。</p>\n<p>埃及学者一般根据托勒密王朝早期古埃及祭祀曼涅托的《埃及史》将古埃及历史分成八到九个时期，三十一个王朝（一个王朝不一定只有一位法老），而古埃及人则似乎是不划分历史时期的。另外考古出来的历史也各国不一，这里以维基为准。</p>\n<p>这几个时期分别是前王朝时期、早王朝时期、古王国时期、第一中间期、中王国时期、第二中间期、新王国时期、第三中间期和古埃及后期。实际并不需要将所有的时期都记得一清二楚，只需要记得一些时期和王朝比较有名的事件和法老即可。</p>\n<p>另外古埃及到了第三中间期之后的后期，已经无力回天，被外族来回入侵，再之后又来了马其顿和罗马，最后被阿拉伯完全控制后到现在基本就已经是一个穆斯林国家了。</p>\n<p>古埃及年表在时间上的认定也不一，相差会有几十年，不过其开始一般都在 BC（before century，公元前）3100 左右。</p>\n<div class=\"note info\">\n            <p>点击图片查看清晰大图</p>\n          </div>\n<p><img alt=\"古埃及地图，显示主要城市和地图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Ancient_Egypt_map-en.svg/293px-Ancient_Egypt_map-en.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/1/17/Ancient_Egypt_map-en.svg\"></p>\n<h2 id=\"前王朝时期（BC3100-之前）\"><a href=\"#前王朝时期（BC3100-之前）\" class=\"headerlink\" title=\"前王朝时期（BC3100 之前）\"></a>前王朝时期（BC3100 之前）</h2><p>经历了旧石器时代和新石器时代，大概 BC3600 年开始，尼罗河沿岸出现几十个「诺姆」，相互各自斗争。</p>\n<blockquote>\n<p>诺姆：nome，源自希腊语 Νομός，意为 “行政区”；埃及语：Gau，中译「州」。</p>\n</blockquote>\n<h2 id=\"早王朝时期（Early-dynastic-period-BC3100-BC2686）\"><a href=\"#早王朝时期（Early-dynastic-period-BC3100-BC2686）\" class=\"headerlink\" title=\"早王朝时期（Early dynastic period, BC3100 - BC2686）\"></a>早王朝时期（Early dynastic period, BC3100 - BC2686）</h2><h3 id=\"第一王朝建立者，美尼斯\"><a href=\"#第一王朝建立者，美尼斯\" class=\"headerlink\" title=\"第一王朝建立者，美尼斯\"></a>第一王朝建立者，美尼斯</h3><p>传说中美尼斯（Menes）统一了上下埃及开创古埃及王朝。但从考古证据上则很难支持有这么一个人，反而认为是纳尔迈（Narmer）才是统一埃及第一人，或者说两者是同一个。</p>\n<p>包含一至二王朝，两个王朝，2 / 31。</p>\n<h2 id=\"古王国时期（Old-Kingdom-BC2686-BC2181）\"><a href=\"#古王国时期（Old-Kingdom-BC2686-BC2181）\" class=\"headerlink\" title=\"古王国时期（Old Kingdom, BC2686 - BC2181）\"></a>古王国时期（Old Kingdom, BC2686 - BC2181）</h2><h3 id=\"第一个建造金字塔，左塞王\"><a href=\"#第一个建造金字塔，左塞王\" class=\"headerlink\" title=\"第一个建造金字塔，左塞王\"></a>第一个建造金字塔，左塞王</h3><p>现在看到的著名金字塔基本就在这个时期被建造。</p>\n<p>此时期第一个法老（pharaoh）左塞王（King Djoser）开始建造阶梯金字塔（最常见最有名那种），位置在萨卡拉（开罗以南约 30 公里）。</p>\n<p>阶梯金字塔据说是是伊姆霍特普（Imhotep）设计的。</p>\n<blockquote class=\"blockquote-center\"><p>伊姆霍特普，出身平民，但因智慧过人，学识渊博，受到法老的破格重用。他在整个法老时代受到崇拜，死后被尊为神，名号被刻在法老左塞雕像的基座上。…… 古埃及医学的奠基人…… 被誉为历史上第一位留下姓名的建筑师与医师，被奉为医学之神<br><em>维基百科</em></p>\n</blockquote>\n<p>甚至有伊姆霍特普博物馆，见 <a href=\"https://en.wikipedia.org/wiki/Imhotep_Museum\" target=\"_blank\" rel=\"noopener\">维基</a>，<a href=\"https://egyptsites.wordpress.com/2009/02/21/imhotep-museum/\" target=\"_blank\" rel=\"noopener\">egyptsites 博客</a>。</p>\n<p><img alt=\"左塞尔金字塔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/60/Saqqara_BW_5.jpg/640px-Saqqara_BW_5.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/6/60/Saqqara_BW_5.jpg\"></p>\n<h3 id=\"最大的金字塔，胡夫金字塔\"><a href=\"#最大的金字塔，胡夫金字塔\" class=\"headerlink\" title=\"最大的金字塔，胡夫金字塔\"></a>最大的金字塔，胡夫金字塔</h3><p>胡夫是第四王朝的第二位法老，是首位在吉萨建造金字塔的法老。今天去埃及旅游看的三座大金字塔就在吉萨，其中最大的就是胡夫下令修建。</p>\n<p>胡夫金字塔塔高大概 146.5 米，现为大概 137 米，边长接近 230 米，由 230 万块巨石搭建而成，最重的可达 50 吨，最小的也有 1.5 吨。</p>\n<p>胡夫金字塔是古代世界七大奇迹中最为古老和唯一尚存的建筑物。</p>\n<p>有一个入口，但是现在被封禁，只使用某位哈里发在 CE820 开凿的盗墓通道作为入口。</p>\n<blockquote>\n<p>尽管建造了最大的金字塔，但胡夫本人的雕像却是考古发掘中所有法老雕像中最小的。</p>\n</blockquote>\n<p><img alt=\"胡夫金字塔，又名吉萨大金字塔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Gizeh_Cheops_BW_1.jpg/640px-Gizeh_Cheops_BW_1.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/d/d1/Gizeh_Cheops_BW_1.jpg\"></p>\n<h3 id=\"第二大金字塔，卡夫拉金字塔\"><a href=\"#第二大金字塔，卡夫拉金字塔\" class=\"headerlink\" title=\"第二大金字塔，卡夫拉金字塔\"></a>第二大金字塔，卡夫拉金字塔</h3><p>卡夫拉是胡夫的孙子。尽管看起来卡夫拉金字塔比胡夫金字塔小一点，但是卡夫拉金字塔底座更高了 10 米，塔周边也更多附属设施。</p>\n<p>狮身人面像斯芬克斯就属于附近的建筑，但并不是问路人问题杀人那只。</p>\n<p><img alt=\"卡夫拉金字塔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Pyramid_of_Khufu.jpg/640px-Pyramid_of_Khufu.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/af/Pyramid_of_Khufu.jpg\"></p>\n<p><img alt=\"狮身人面像斯芬克斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a5/Cairo%2C_Gizeh%2C_Sphinx_and_Pyramid_of_Khufu%2C_Egypt%2C_Oct_2004.jpg/640px-Cairo%2C_Gizeh%2C_Sphinx_and_Pyramid_of_Khufu%2C_Egypt%2C_Oct_2004.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/a5/Cairo%2C_Gizeh%2C_Sphinx_and_Pyramid_of_Khufu%2C_Egypt%2C_Oct_2004.jpg\"></p>\n<h3 id=\"孟卡拉金字塔\"><a href=\"#孟卡拉金字塔\" class=\"headerlink\" title=\"孟卡拉金字塔\"></a>孟卡拉金字塔</h3><p>孟卡拉是第四王朝时期的第 16 位法老，孟卡拉金字塔远小于前两座金字塔，它的高度只有大约 65 米，总体积大约只有卡夫拉金字塔 1/10。</p>\n<p>萨拉丁的儿子奥斯曼曾试图拆除孟卡拉金字塔，最后太过困难而作罢，给金字塔北面留下很大的垂直裂缝。</p>\n<p><img alt=\"孟卡拉金字塔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/Menkaures_Pyramid_Giza_Egypt.jpg/640px-Menkaures_Pyramid_Giza_Egypt.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/ab/Menkaures_Pyramid_Giza_Egypt.jpg\"></p>\n<p><img alt=\"金字塔俯视图，从右上到左下分别是胡夫金字塔，卡夫拉金字塔，孟卡拉金字塔，狮身人面像在右边与卡夫拉金字塔有一条堤道相连。via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Giza_pyramid_complex_%28map%29.svg/614px-Giza_pyramid_complex_%28map%29.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/e7/Giza_pyramid_complex_%28map%29.svg\"></p>\n<p>包含三至六王朝，四个王朝，6 / 31。</p>\n<h2 id=\"第一中间期（First-Intermediate-Period-BC2181-BC2055）\"><a href=\"#第一中间期（First-Intermediate-Period-BC2181-BC2055）\" class=\"headerlink\" title=\"第一中间期（First Intermediate Period, BC2181 - BC2055）\"></a>第一中间期（First Intermediate Period, BC2181 - BC2055）</h2><p>古王国时期后期出现严重干旱，国力下降，封建制度也削弱了中央权利，出现第一个黑暗时期，极其混乱的一个时期。这个时期法老权力被极度削弱，地方官员权利变大，在自己领地几乎就成了法老。</p>\n<p>七八王朝极度混乱，史书记录不清。</p>\n<h3 id=\"曼图霍特普二世（Mentuhotep-II）重新统一\"><a href=\"#曼图霍特普二世（Mentuhotep-II）重新统一\" class=\"headerlink\" title=\"曼图霍特普二世（Mentuhotep II）重新统一\"></a>曼图霍特普二世（Mentuhotep II）重新统一</h3><p>古埃及也分成了上下埃及，下埃及经历九十两个王朝，上埃及则是十和十一王朝。最终上埃及由曼图霍特普二世（Mentuhotep II）向北进攻击败下埃及统治者再次统一古埃及，并继续主持十一王朝，进入中王国时期。</p>\n<p>经历大概第七王朝到第十王朝，四个王朝，10 / 31。</p>\n<h2 id=\"中王国时期（Middle-Kingdom-BC2030-BC1650）\"><a href=\"#中王国时期（Middle-Kingdom-BC2030-BC1650）\" class=\"headerlink\" title=\"中王国时期（Middle Kingdom, BC2030 - BC1650）\"></a>中王国时期（Middle Kingdom, BC2030 - BC1650）</h2><p>十一王朝再次统一之后，开始重新收复失地，包括南边曾经在古王国和中间时期失落给努比亚的土地。</p>\n<blockquote>\n<p>努比亚相当于今天埃及和苏丹交界位置。</p>\n</blockquote>\n<p>十二王朝迁都底比斯（今卢克索）。</p>\n<h3 id=\"塞索斯特利斯三世（Sesostris-III）扩张到努比亚\"><a href=\"#塞索斯特利斯三世（Sesostris-III）扩张到努比亚\" class=\"headerlink\" title=\"塞索斯特利斯三世（Sesostris III）扩张到努比亚\"></a>塞索斯特利斯三世（Sesostris III）扩张到努比亚</h3><p>塞索斯特利斯三世（Sesostris III）是十二王朝法老，善战，向努比亚扩张，然后还建造了很多堡垒，被认为是这个王朝最强大的法老。</p>\n<p>之后他的儿子阿蒙涅姆赫特三世（Amenemhat III）的统治时期被认为是中王国时期经济最好的时期。不过他从西亚邀请了希克索人（Hyksos）到尼罗河下游三角洲定居，也给后面十三十四王朝的结束埋下了隐患。其实十二王朝末期尼罗河洪水减少也为国家带来打击。</p>\n<h3 id=\"第一位可考的女法老，塞贝克涅弗鲁（Sobekneferu）\"><a href=\"#第一位可考的女法老，塞贝克涅弗鲁（Sobekneferu）\" class=\"headerlink\" title=\"第一位可考的女法老，塞贝克涅弗鲁（Sobekneferu）\"></a>第一位可考的女法老，塞贝克涅弗鲁（Sobekneferu）</h3><p>阿蒙涅姆赫特四世（Amenemhat IV）去世后，其子年幼，于是其姐妹塞贝克涅弗鲁（Sobekneferu）成为了历史考证上第一位女法老。她在位三年后去世，政权持续衰弱，是十二王朝最后的法老。</p>\n<p>奥西里斯在这个时期成为了最重要的神。</p>\n<p>经历十一王朝到十三王朝，三个王朝，13 / 31。</p>\n<h2 id=\"第二中间期（Second-Intermediate-Period-BC1650-BC1550）\"><a href=\"#第二中间期（Second-Intermediate-Period-BC1650-BC1550）\" class=\"headerlink\" title=\"第二中间期（Second Intermediate Period, BC1650 - BC1550）\"></a>第二中间期（Second Intermediate Period, BC1650 - BC1550）</h2><p>十三王朝的继续衰弱导致尼罗河三角洲（属于下埃及）的政权脱离并独立，是为十四王朝。统治者可能是迦南人（闪米特人）血统。</p>\n<p>注意十三王朝和十四王朝几乎是共存的，直到 BC1650 希克索人全面控制下埃及，攻占了古首都孟菲斯。</p>\n<h3 id=\"希克索人的外族统治\"><a href=\"#希克索人的外族统治\" class=\"headerlink\" title=\"希克索人的外族统治\"></a>希克索人的外族统治</h3><p>希克索人对下埃及的统治被视为十五王朝，而南边的底比斯统治者也趁十三王朝的真空宣布独立并宣布十六王朝。</p>\n<p>希克索人继续南下把十六王朝打败后，北退，上埃及建立十七王朝与希克索共存。</p>\n<p>十七王朝学习希克索人的战术和武器，在十七王朝最后两个法老统治期间反攻北面希克索人。</p>\n<p>阿赫摩斯一世（Ahmose I）是十七王朝最后一个法老的弟弟，继续父亲和兄长意志将希克索人赶出埃及，开创十八王朝，进入新王国时期。</p>\n<p>包含十四王朝到十七王朝，共四个王朝，17 / 31。</p>\n<h2 id=\"新王国时期（New-Kingdom-BC1570-－-BC1070）\"><a href=\"#新王国时期（New-Kingdom-BC1570-－-BC1070）\" class=\"headerlink\" title=\"新王国时期（New Kingdom, BC1570 － BC1070）\"></a>新王国时期（New Kingdom, BC1570 － BC1070）</h2><p>这个时期有很多有名的法老。宗教上也有不少的变动。</p>\n<p>在神明崇拜上，由于此时统一埃及十七王朝的统治者就是底比斯的家族，所以底比斯的地方神祇阿蒙（Amun）被推举到了主神的地位。由于古埃及一直以来一般都认为主神是太阳神拉（Ra），所以这段时期又经常将阿蒙和拉结合为同一个神，叫阿蒙-拉。</p>\n<p>古埃及历史上最强盛的十八王朝就在这个时期内。</p>\n<h3 id=\"阿赫摩斯一世（Ahmose-I）赶走外族，统一上下埃及\"><a href=\"#阿赫摩斯一世（Ahmose-I）赶走外族，统一上下埃及\" class=\"headerlink\" title=\"阿赫摩斯一世（Ahmose I）赶走外族，统一上下埃及\"></a>阿赫摩斯一世（Ahmose I）赶走外族，统一上下埃及</h3><p>十八王朝第一任法老阿赫摩斯一世（Ahmose I），他登基的时候可能只有十岁，并可能在二十岁左右完成了「驱逐胡虏」，恢复了埃及对努比亚的统治。</p>\n<p>之后是阿赫摩斯一世的儿子阿蒙霍特普一世（Amenhotep I）继位。</p>\n<p>接下来的法老图特摩斯一世（Thutmose I）的身世则有点模糊，有可能是阿蒙霍特普一世的儿子，或者是他的军队指挥官。他意图扩大埃及版图，并第一个在帝王谷建造坟墓。</p>\n<p><img alt=\"Valley of the Kings，帝王谷。via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/ValleeDesRois.JPG/800px-ValleeDesRois.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/2/2a/ValleeDesRois.JPG\"></p>\n<p>图特摩斯一世儿女中有一个儿子，图特摩斯二世（Thutmose II），是由妃子所生；其中有一个女儿，哈特谢普苏特（Hatshepsut），是由王后所生。</p>\n<p>王后没有儿子，于是图特摩斯二世娶了他的姐姐哈特谢普苏特并登上王位，但很快就死了，而哈特谢普苏特只生了一个女儿，所以又从图特摩斯二世的妃子中找了个儿子当图特摩斯三世（Thutmose III）。</p>\n<h3 id=\"古埃及的「武则天」，哈特谢普苏特\"><a href=\"#古埃及的「武则天」，哈特谢普苏特\" class=\"headerlink\" title=\"古埃及的「武则天」，哈特谢普苏特\"></a>古埃及的「武则天」，哈特谢普苏特</h3><p>或许是因为图特摩斯三世太幼小，又或者是因为哈特谢普苏特觉得自己是正统王室之后，因此虽然作为摄政王，但是肯定是想自己当甚至极有可能当上了法老。而且考古学者从资料和建筑中考据，亦基本承认了她法老的地位（同时图特摩斯三世仍然在位）。</p>\n<p>哈特谢普苏特在位期间的贡献主要为重新建立被希克索人入侵时破坏的贸易路线，以及大兴土木建造了很多建筑。她停止了土地扩张，使埃及在叙利亚及巴勒斯坦的统治权动摇（死后更丢失了统治权，但后来图特摩斯三世重新收复），但加强了和邻国的贸易，使埃及变得富庶。</p>\n<p>她在卡纳克神庙建造了两个方尖碑，其中之一是埃及现存方尖碑中最高的，约 29 米高。</p>\n<p>她在曼图霍特普二世神庙旁建造的哈特谢普苏特神庙，是古埃及建筑杰作以及热门景区。</p>\n<p><img alt=\"卡纳克神庙，埃及现存最大神庙，中王国时期开始建造，一直是法老们建造崇拜神明和歌颂自己的建筑的地方 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/Temple_Complex_at_Karnak.jpg/640px-Temple_Complex_at_Karnak.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/3/3b/Temple_Complex_at_Karnak.jpg\"></p>\n<p><img alt=\"哈特谢普苏特方尖碑 via www.obelisks.org\" src=\"http://www.obelisk.co3.jp/thumbnail/karnak_hatshepsut_south.jpg\" data-original=\"http://www.obelisk.co3.jp/karnak_hatshepsut_south.jpg\"></p>\n<p><img alt=\"左为曼图霍特普二世神庙，已倒塌，右为哈特谢普苏特神庙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/42/SFEC_AEH_-ThebesNecropolis-2010-Hatshepsut-023.jpg/640px-SFEC_AEH_-ThebesNecropolis-2010-Hatshepsut-023.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/4/42/SFEC_AEH_-ThebesNecropolis-2010-Hatshepsut-023.jpg\"></p>\n<p><img alt=\"哈特谢普苏特神庙正面照 via www.egypt.travel\" src=\"http://www.egypt.travel/media/1717/temple-of-hatshupsut_800x600.jpg\" data-original=\"http://www.egypt.travel/media/1717/temple-of-hatshupsut_800x600.jpg\"></p>\n<p>经历王女、王后、摄政王和法老，哈特谢普苏特让人联想起中国的「武则天」。</p>\n<h3 id=\"埃及的拿破仑，图特摩斯三世\"><a href=\"#埃及的拿破仑，图特摩斯三世\" class=\"headerlink\" title=\"埃及的拿破仑，图特摩斯三世\"></a>埃及的拿破仑，图特摩斯三世</h3><p>图特摩斯三世在哈特谢普苏特统治二十一到二十二年后重新归来，并积极扩充军队和埃及版图，征服了地中海沿岸的以色列和叙利亚地区，甚至让邻国给其纳贡。图特摩斯三世也被后人称为「埃及的拿破仑」。</p>\n<p><img alt=\"新王国时期古埃及在公元前15世纪的最大领土范围 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Egypt_1450_BC.svg/520px-Egypt_1450_BC.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/a8/Egypt_1450_BC.svg\"></p>\n<p>图特摩斯三世重获权力后，通过破坏纪念碑等方式极力抹除哈特谢普苏特的存在。后面的王朝在王表编纂上也似乎故意忽略了这个法老。</p>\n<blockquote>\n<p>哈特谢普苏特和图特摩斯三世之间的关系，一般认为图特摩斯三世怨恨哈特谢普苏特。但最近一些研究进展称此说法不准确，并声称图特摩斯三世一直担当哈特谢普苏特的军事统治领袖，哈特谢普苏特也没有取其性命；而且损毁行动在图特摩斯三世统治晚期集中进行，哈特谢普苏特的资料也不是唯一被损毁的资料；从而推测图特摩斯三世是为了巩固继承人地位而作出如此的行为，他本人和他的继母并没有过节。这部分说法维基暂时没有找到证据支持。</p>\n</blockquote>\n<p>\b埃及在图特摩斯三世以及几位法老的努力下，终于\b在阿蒙霍特普三世（Amenhotep III）治下达到艺术和国力顶峰。阿蒙霍特普三世一生建造了很多宏伟的建筑和雕像，其中有著名的门农巨像。门农巨像座落在是蒙霍特普三世神庙的门口守卫。而阿蒙霍特普三世神庙是埃及最大最华丽的建筑群，可是后来因为地震和被拆除的缘故，现在已经不存在了，剩下两尊残破的门农巨像。</p>\n<p><img alt=\"门农巨像正面照 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Colossi_of_Memnon_May_2015_2.JPG/640px-Colossi_of_Memnon_May_2015_2.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/ee/Colossi_of_Memnon_May_2015_2.JPG\"></p>\n<p><img alt=\"阿蒙霍特普三世神庙鸟瞰图，门农巨像在右边 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/ba/Amenhotep_III_mortuary_Temple.jpg/640px-Amenhotep_III_mortuary_Temple.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/b/ba/Amenhotep_III_mortuary_Temple.jpg\"></p>\n<p>帝国的强盛、对阿蒙神的崇拜和皇家经常修建神殿，令阿蒙神庙的祭司获得极大的财富和权力，祭司们不免出现腐败和干预朝政的行为。</p>\n<h3 id=\"被后继者视为异端的宗教改革者，阿蒙霍特普四世\"><a href=\"#被后继者视为异端的宗教改革者，阿蒙霍特普四世\" class=\"headerlink\" title=\"被后继者视为异端的宗教改革者，阿蒙霍特普四世\"></a>被后继者视为异端的宗教改革者，阿蒙霍特普四世</h3><p>于是阿蒙霍特普三世的儿子，阿蒙霍特普四世，相信是为了打击祭司和权贵，进行了宗教改革。他简化多神系统，要求全国改为崇拜唯一的太阳神阿顿（Aten），甚至把自己的名字改为阿肯那顿（Akhenaten），迁都埃赫塔顿（Akhetaten），摧毁阿蒙神庙。有学者认为这表明了他创造了世界上最早的一神教。但他沉迷新兴宗教事务，以至于对边疆情况置若罔闻，而此时地中海北面的赫梯人正值盛时。于是古埃及逐渐失去了西亚地区的影响力。</p>\n<p>他的大皇后，娜芙蒂蒂（Nefertiti），很有可能和他一同统治埃及。</p>\n<p><img alt=\"有名的半身像 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Nofretete_Neues_Museum.jpg/328px-Nofretete_Neues_Museum.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/1/1f/Nofretete_Neues_Museum.jpg\"></p>\n<p>阿肯那顿的后继者在他死后又把旧宗教恢复回来，并大力抹消新兴宗教的记录和影响。</p>\n<p><img alt=\"阿顿 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Aten.svg/640px-Aten.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/af/Aten.svg\"></p>\n<h3 id=\"生前不出名，死后却最出名的法老，图坦卡蒙\"><a href=\"#生前不出名，死后却最出名的法老，图坦卡蒙\" class=\"headerlink\" title=\"生前不出名，死后却最出名的法老，图坦卡蒙\"></a>生前不出名，死后却最出名的法老，图坦卡蒙</h3><p>阿肯那顿之后经过了一个或者两个短暂统治的法老（可能是他儿子或者王后摄政），王位传到了最著名的法老——图坦卡蒙（Tutankhamun）。</p>\n<p><img alt=\"图坦卡蒙的木乃伊面具 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/TUT-Ausstellung_FFM_2012_47_%287117819557%29.jpg/360px-TUT-Ausstellung_FFM_2012_47_%287117819557%29.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/e5/TUT-Ausstellung_FFM_2012_47_%287117819557%29.jpg\"></p>\n<p>图坦卡蒙曾用名图坦卡顿（Tutankhaten），从名字的更改可以看出信仰的更改。他将首都迁回底比斯，重开神庙，重新恢复阿蒙神的崇拜。</p>\n<p>图坦卡蒙的出名是因为所有法老的坟墓都几乎被盗空了，而唯有他在帝王谷的坟墓三千多年来从没被盗，以至于发掘出近五千件文物，令法老以及图坦卡蒙成为流行文化。</p>\n<p>关于有名的「法老的诅咒」，可以说没有任何证据表明诅咒存在，坟墓内也没有发现任何诅咒的存在。打开坟墓和棺材的在场 58 人，据研究只有 8 - 10 人在十几年内死亡，根本不足为诅咒的依据。</p>\n<div class=\"note info\">\n            <p>2019 年（本年） 1 月，图坦卡蒙坟墓向游客开放。</p>\n          </div>\n<h3 id=\"混乱的最后几任十八王朝法老\"><a href=\"#混乱的最后几任十八王朝法老\" class=\"headerlink\" title=\"混乱的最后几任十八王朝法老\"></a>混乱的最后几任十八王朝法老</h3><p>然而图坦卡蒙似乎一直疾病缠身，18 岁就死了，死因有各种猜测，包括疟疾、腿疾或者被谋杀。他与其异母姐姐安克姗海娜曼的两个女儿也早年夭折，因此图特摩斯家族就绝后了。安克姗海娜曼似乎曾经写信给赫梯国王苏庇路里乌玛一世要求他要一个王子嫁给她，但是王子还没到就被杀了。</p>\n<p>之后是阿肯那顿和图坦卡蒙大臣，甚至可能是其背后的操纵者，阿伊（Ay），极有可能娶了安克姗海娜曼，当上了法老，统治了一个很短暂的时期。之后就被图坦卡蒙的将军，霍朗赫布（又或者哈伦海布，Horemheb）夺取了法老位置。</p>\n<p>霍朗赫布以孟菲斯为首都，继续抹除阿顿以及其前任等人的痕迹，算是个解决宗教动荡和国家分裂等麻烦的人。</p>\n<p>霍朗赫布跟王室没有关系，也没有儿子，法老位置传给了当时的大臣门帕提拉（原名普拉美斯，Paramesse），即十九王朝的第一任法老拉美西斯一世（Ramesses I）。</p>\n<h3 id=\"被儿子盖住名声的塞提一世\"><a href=\"#被儿子盖住名声的塞提一世\" class=\"headerlink\" title=\"被儿子盖住名声的塞提一世\"></a>被儿子盖住名声的塞提一世</h3><p>拉美西斯一世的儿子塞提一世（Seti I）和她父亲重建了王国的秩序，并在叙利亚和迦南地区打击赫梯人的势力。从纪念碑上可以找到他的伟大功绩，虽然一般来说都是倾向于夸大。总的来说，塞提一世可以说是恢复新王国时期的荣光。</p>\n<p>塞提一世也兴建了很多建筑，包括位于底比斯的塞提一世祭庙、位于阿拜多斯的塞提一世纪念庙以及大柱式大厅，虽然大部分应该是在拉美西斯二世时期完成的。</p>\n<p><img alt=\"塞提一世神庙 via www.egypt.travel\" src=\"http://www.egypt.travel/media/1297/temple-of-seti-1.jpg\" data-original=\"http://www.egypt.travel/media/1297/temple-of-seti-1.jpg\"></p>\n<p>阿拜多斯的塞提一世纪念庙虽然外表其貌不扬，但是内部壁画精美，而且有不少壁画仍然有颜色。其中一面墙上按时间顺序记录了大多数王朝的法老的名字，从美尼斯到塞提一世共 76 个，被称为阿拜多斯王表，是后世研究历史的主要来源之一。</p>\n<p><img alt=\"塞提一世纪念庙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/3/33/AbydosFacade.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/3/33/AbydosFacade.jpg\"></p>\n<p><img alt=\"阿拜多斯王表，法老的名字是圈起来的 via pharaoh.se\" src=\"https://pharaoh.se/hiero/ABY1200.jpg\" data-original=\"https://pharaoh.se/hiero/ABY1200.jpg\"></p>\n<p><img alt=\"阿拜多斯王表，法老的名字是圈起来的 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f1/AbydosKinglistDrawing.png/640px-AbydosKinglistDrawing.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/f/f1/AbydosKinglistDrawing.png\"></p>\n<p><img alt=\"大柱式大厅、神龛大厅 via www.egypt.travel\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/Pillars_of_Great_Hypostyle_Hall_in_Karnak_Luxor_Egypt.JPG/800px-Pillars_of_Great_Hypostyle_Hall_in_Karnak_Luxor_Egypt.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/5/5c/Pillars_of_Great_Hypostyle_Hall_in_Karnak_Luxor_Egypt.JPG\"></p>\n<h3 id=\"鼎鼎大名的拉美西斯二世\"><a href=\"#鼎鼎大名的拉美西斯二世\" class=\"headerlink\" title=\"鼎鼎大名的拉美西斯二世\"></a>鼎鼎大名的拉美西斯二世</h3><p>塞提一世的儿子就是赫赫有名的拉美西斯二世（Ramesses II）了。他如此的有名以至于后来有九位法老使用了拉美西斯这名字。他在位长达 66 到 67 年，执政的时期是新王国最后的强盛年代。</p>\n<p>但凡古埃及强盛的时期，统治的法老无不是领土争端和宏伟建筑这两方面有所建树，拉美西斯二世也不例外。他打败从地中海入侵的海盗，向东北占领迦南地区和南叙利亚地区，和北面的强敌赫梯国王穆瓦塔利二世（Muwatalli II）来回地打拉锯战，最后分庭抗礼；稳定南边的努比亚。他在位时间比较长，也在埃及各地建造非常多的建筑，甚至在不是他建造的建筑上也留下标志。</p>\n<p>卡迭石战役是埃及和赫梯之间比较著名的战役。战役的情况很可能是这样：埃及想进军占领卡迭石，但被赫梯战车袭击并击溃；法老在营地受困的时候雇佣兵到了，反击了赫梯，导致赫梯军败退；埃及虽然赢了这场战斗但是也无法攻克卡迭石，战略上算是输了。之后双方一直僵持不下。卡迭石战役有非常详细的记录，但基本都是埃及方面一面之词，因此也存在夸大拉美西斯二世的可能性。</p>\n<p><img alt=\"两个帝国接壤的卡迭石（Qadesh） via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Hitt_Egypt_Perseus.png/310px-Hitt_Egypt_Perseus.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/e9/Hitt_Egypt_Perseus.png\"></p>\n<p>之后穆瓦塔利二世病逝，拉美西斯二世和继位的哈图西里三世（Hattusili III）缔结埃及赫梯和约，此时距离卡迭石战役已经十五六年了。</p>\n<p>埃及赫梯和平条约，或称卡迭石条约、永恒条约、银条约，是古代近东（即今西亚、中东地区）地区协议双方都有保存下来的最古老的条约。缔结和约结束了长期的冷战实际上对签署双方都有利益。埃及的目的，很可能是为了吹嘘法老功绩，并成立军事同盟以共同对抗西亚更东边的新贵力量亚述；而赫梯的目的，则可能是新王为了巩固地位以及利用法老的国际影响力提升自己的国际地位。</p>\n<p><img alt=\"赫梯人版本的和约 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Treaty_of_Kadesh.jpg/200px-Treaty_of_Kadesh.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/Treaty_of_Kadesh.jpg\"></p>\n<p><img alt=\"埃及人版本的和约 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/%C3%84gyptisch-Hethitischer_Friedensvertrag_Karnaktempel.jpg/200px-%C3%84gyptisch-Hethitischer_Friedensvertrag_Karnaktempel.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/9/93/%C3%84gyptisch-Hethitischer_Friedensvertrag_Karnaktempel.jpg\"></p>\n<p>拉美西斯二世的闻名也许也来自于他遍布埃及的大型建筑和到处刻画自己的荣光事迹。</p>\n<p>比较有名的建筑是拉美西姆神庙、哈布城神庙和阿布辛贝勒神庙。</p>\n<p>拉美西姆神庙现今已经是废墟，往日的样子只能靠门口和后面的建筑来想像了。</p>\n<p><img alt=\"拉美西姆神庙鸟瞰图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/SFEC_AEH_-ThebesNecropolis-2010-RamsesII-021.jpg/640px-SFEC_AEH_-ThebesNecropolis-2010-RamsesII-021.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/8/80/SFEC_AEH_-ThebesNecropolis-2010-RamsesII-021.jpg\"></p>\n<p><img alt=\"门口的四个奥西里斯雕像 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/SFEC-RAMASSEUM-2009-11-14-0034.JPG/640px-SFEC-RAMASSEUM-2009-11-14-0034.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/1/1c/SFEC-RAMASSEUM-2009-11-14-0034.JPG\"></p>\n<p>比较值得注意的是庙内有一副拉美西姆国王名单（Ramesseum king list），列出了新王朝的大部分法老。</p>\n<p><img alt=\"拉美西姆国王名单手绘图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Ramesseum_King_list.png/800px-Ramesseum_King_list.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Ramesseum_King_list.png/1920px-Ramesseum_King_list.png\"></p>\n<p>哈布城神庙（Medinet Habu）离哈特谢普苏特神庙不远，很多法老都在这修建过建筑，刻过壁画。然而拉美西斯二世应该是其中最张扬的了，似乎很害怕被人遗忘。</p>\n<p><img alt=\"哈布城神庙鸟瞰图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/SFEC_AEH_-ThebesNecropolis-2010-RamsesIII036.jpg/640px-SFEC_AEH_-ThebesNecropolis-2010-RamsesIII036.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/4/4e/SFEC_AEH_-ThebesNecropolis-2010-RamsesIII036.jpg\"></p>\n<p>拉美西斯二世本身就喜欢乱改别人的壁画，因此他也害怕别人抹掉他的壁画，于是他的壁画都刻得非常深。</p>\n<p><img alt=\"哈布城壁画 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/Habu_Temple_court_in_sesson.JPG/640px-Habu_Temple_court_in_sesson.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/9/93/Habu_Temple_court_in_sesson.JPG\"></p>\n<p>阿布辛贝勒神庙（Abu Simbel temples）应该是很多人从电视媒体等看到过的神庙之一，整个神庙在岩石上开凿而成，门口四个雕像也是其标志之一。</p>\n<p><img alt=\"阿布辛贝勒神庙正面 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/28/Abu_Simbel%2C_Ramesses_Temple%2C_front%2C_Egypt%2C_Oct_2004.jpg/640px-Abu_Simbel%2C_Ramesses_Temple%2C_front%2C_Egypt%2C_Oct_2004.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/2/28/Abu_Simbel%2C_Ramesses_Temple%2C_front%2C_Egypt%2C_Oct_2004.jpg\"></p>\n<p>神庙东北面是法老为哈索尔（Hathor，古埃及女神）和妮菲塔莉（Nefertari，拉美西斯二世的大王后）所建的小庙（the Small Temple）。妮菲塔莉的雕像跟拉美西斯二世一样高，表明地位跟他几乎平起平坐，也是几乎唯一一位在世就被神格化的埃及王后。其他同样有名的王后是克利奥帕特拉七世（埃及艳后）、娜芙蒂蒂（阿肯那顿的大王后）和哈特谢普苏特（埃及「武则天」）。</p>\n<p><img alt=\"左为阿布辛贝勒神庙，右为小庙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/63/Panorama_Abu_Simbel_crop.jpg/640px-Panorama_Abu_Simbel_crop.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/6/63/Panorama_Abu_Simbel_crop.jpg\"></p>\n<p>近代由于在阿斯旺兴建水坝，联合国筹钱将阿布辛贝勒神庙和小庙搬离到比原地高 200 米处。</p>\n<p><img alt=\"搬迁前后位置对比 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/06/Abu_Simbel_relocation_by_Zureks.jpg/640px-Abu_Simbel_relocation_by_Zureks.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/06/Abu_Simbel_relocation_by_Zureks.jpg\"></p>\n<p>频繁的战争、大兴土木，造就了巨大的国库开销，加大了国力下降。在拉美西斯二世死后，埃及就立刻开始走下坡路。</p>\n<h3 id=\"第二十王朝的祭司当权\"><a href=\"#第二十王朝的祭司当权\" class=\"headerlink\" title=\"第二十王朝的祭司当权\"></a>第二十王朝的祭司当权</h3><p>过了几任法老后，到了第二十王朝第二任法老拉美西斯三世的统治。他抵抗了几次地中海和利比亚的入侵，治下还出现了人类历史上第一次有记录的劳工罢工。他的一个妃子还曾试图毒杀他，\b最后是失败了。</p>\n<p>拉美西斯五世，土地和财政基本就已经被阿蒙神庙的祭司所控制了。</p>\n<p>拉美西斯六世在建造坟墓时无意间将图坦卡蒙坟墓埋在了地下，避免了其日后被盗掘。</p>\n<p>第二十王朝，古埃及陷入内忧外患，尼罗河水位下降、内政动乱、法老坟墓被盗、官员腐败，又丢了叙利亚和巴勒斯坦，最后法老基本就没有统一埃及的权力了。</p>\n<p>包含十八王朝到二十王朝，共三个王朝，20 / 31。</p>\n<h2 id=\"第三中间期（3rd-Intermediate-Period-BC1069-BC664）\"><a href=\"#第三中间期（3rd-Intermediate-Period-BC1069-BC664）\" class=\"headerlink\" title=\"第三中间期（3rd Intermediate Period, BC1069 - BC664）\"></a>第三中间期（3rd Intermediate Period, BC1069 - BC664）</h2><p>拉美西斯十一世死后，结束二十王朝，斯门代斯一世（Smendes I）开创二十一王朝，然而此时法老权力已经极弱，基本被赶到下埃及去了，上埃及和中埃及地区则是由底比斯阿蒙神庙的大祭司们所控制。</p>\n<h3 id=\"利比亚人的二十二、二十三、二十四王朝\"><a href=\"#利比亚人的二十二、二十三、二十四王朝\" class=\"headerlink\" title=\"利比亚人的二十二、二十三、二十四王朝\"></a>利比亚人的二十二、二十三、二十四王朝</h3><p>之前二十王朝已经在尼罗河三角洲定居的利比亚人，在舍顺克一世（Shoshenq I）统领下统一埃及，创立二十二王朝，这里的法老已经不是本土埃及人了。然后二十三王朝二十四王朝，王室和内政仍然比较动荡，南方起源于库施（kush）的努比亚王国趁乱北上把整个埃及打了下来，赶走了利比亚人，建立二十五王朝。</p>\n<h3 id=\"努比亚人的二十五王朝\"><a href=\"#努比亚人的二十五王朝\" class=\"headerlink\" title=\"努比亚人的二十五王朝\"></a>努比亚人的二十五王朝</h3><p>努比亚人重新恢复了古埃及的的宗教传统，修复和建造了不少寺庙和纪念碑，还在家乡（位于现在的苏丹）重新建造起金字塔来。</p>\n<p><img alt=\"二十五王朝的库施帝国 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Egypt_kush.svg/523px-Egypt_kush.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/1/1a/Egypt_kush.svg\"></p>\n<p>包含二十一王朝到二十五王朝，共五个王朝，25 / 31。</p>\n<h2 id=\"古埃及晚期-波斯帝国时期（Late-Period-BC664-BC332）\"><a href=\"#古埃及晚期-波斯帝国时期（Late-Period-BC664-BC332）\" class=\"headerlink\" title=\"古埃及晚期 / 波斯帝国时期（Late Period, BC664 - BC332）\"></a>古埃及晚期 / 波斯帝国时期（Late Period, BC664 - BC332）</h2><p>之后西亚的亚述人开始入侵古埃及，努比亚人不敌，向南退回努比亚。亚述人可能对占着古埃及没有兴趣，在洗劫一番后退了回去，扶植了普萨美提克一世（Psammetichus I）作为法老。</p>\n<h3 id=\"古埃及本土最后的荣光，二十六王朝\"><a href=\"#古埃及本土最后的荣光，二十六王朝\" class=\"headerlink\" title=\"古埃及本土最后的荣光，二十六王朝\b\"></a>古埃及本土最后的荣光，二十六王朝\b</h3><p>之后，普萨美提克一世趁亚述帝国忙于战乱，联合古希腊的雇佣军，又重新统一了古埃及，建立二十六王朝，恢复了繁荣稳定。之后亚述被内部独立的新巴比伦帝国推翻，普萨美提克一世也曾想恢复西亚的霸权，但被尼布甲尼撒二世（Nebuchadnezzar II）统治的新巴比伦帝国打了回来。</p>\n<p>那个古埃及法老用婴儿做实验，实验听不到别人说话怎么学语言的故事，就是普萨美提克一世的故事，记录在希罗多德写的书「历史」第二卷中。</p>\n<p><img alt=\"亚述帝国最大版图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/e/eb/Assy3.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/eb/Assy3.JPG\"></p>\n<p>然而二十六王朝已经是最后一个埃及本土王朝了。更东边的波斯阿契美尼德帝国（波斯第一帝国）灭了新巴比伦帝国，接着吞并了古埃及，波斯国王冈比西斯二世（Cambyses II）成了法老，称为二十七王朝。</p>\n<p>之后二十六王朝后裔推翻波斯的统治，先后建立短暂的二十八、二十九、三十王朝。</p>\n<p>然后波斯人再次征服古埃及，是为三十一王朝。</p>\n<p>包含二十六王朝到三十一王朝，共六个王朝，31 / 31。</p>\n<h2 id=\"马其顿的亚历山大解放埃及-gt-托勒密王朝（Macedonian-and-Ptolemaic-Egypt-BC332-BC30）\"><a href=\"#马其顿的亚历山大解放埃及-gt-托勒密王朝（Macedonian-and-Ptolemaic-Egypt-BC332-BC30）\" class=\"headerlink\" title=\"马其顿的亚历山大解放埃及 -&gt; 托勒密王朝（Macedonian and Ptolemaic Egypt, BC332 - BC30）\"></a>马其顿的亚历山大解放埃及 -&gt; 托勒密王朝（Macedonian and Ptolemaic Egypt, BC332 - BC30）</h2><h3 id=\"埃及解放者，亚历山大\"><a href=\"#埃及解放者，亚历山大\" class=\"headerlink\" title=\"埃及解放者，亚历山大\"></a>埃及解放者，亚历山大</h3><p>当无人不知的亚历山大击溃波斯大军并来到埃及的时候，根本没有遇到什么抵抗，埃及当地的波斯管理者就直接将埃及献给他了，埃及人民还视其为埃及的解放者。</p>\n<p>亚历山大尊重当地信仰，去绿洲朝圣得到神谕。神谕宣称他是阿蒙的儿子。实际上就是得到了祭司等有权势的人的承认。他成立了一个新的希腊城市名为亚历山大（他到哪就在哪建亚历山大城），并任命希腊人——而不是埃及人——作为高官。</p>\n<p>亚历山大没有在埃及待很久，就去征服其他地方了，从此再没有回来过。他的部下托勒密留在埃及统治，并从亚历山大死后分崩离析的亚历山大帝国中独立出来，创立托勒密王朝统治了近三百年。</p>\n<h3 id=\"希腊法老，托勒密王朝\"><a href=\"#希腊法老，托勒密王朝\" class=\"headerlink\" title=\"希腊法老，托勒密王朝\"></a>希腊法老，托勒密王朝</h3><p>托勒密王朝中，男性都叫托勒密（Ptolemy），女性一般叫克利奥帕特拉（Cleopatra）、贝勒尼基（Berenice）和阿尔西诺伊（Arsinoe），因此所有统治者都是这四个名字的加几世这样的称呼。最为人知的就是末代法老，埃及艳后，克利奥帕特拉七世。</p>\n<p>托勒密王朝没有使用希腊文明取代埃及文明，反而扶持其延续，修建埃及风格的神庙，维护传统宗教仪式。当然也带来了希腊文明的影响，这个时期很多文艺作品都有两个文明融合的风格。</p>\n<h3 id=\"罗塞塔石碑，托勒密五世诏书\"><a href=\"#罗塞塔石碑，托勒密五世诏书\" class=\"headerlink\" title=\"罗塞塔石碑，托勒密五世诏书\"></a>罗塞塔石碑，托勒密五世诏书</h3><p>罗塞塔石碑本来并不是什么比较特别的石碑，只是托勒密五世加冕一周内纪念所制，但碑上同时使用了三种语言，分别是圣书体（埃及象形文字）、埃及草书（世俗体）和古希腊文，令后世学者可以做参考比对，通过古希腊文来解读圣书体，从而使这块石碑无比珍贵，也因此罗塞塔石碑在现代也被引申为「暗喻」、「翻译」和「关键线索」等的含义。</p>\n<p><img alt=\"罗塞塔石碑 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Rosetta_Stone.JPG/410px-Rosetta_Stone.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/2/23/Rosetta_Stone.JPG\"></p>\n<h3 id=\"艳后与凯撒\"><a href=\"#艳后与凯撒\" class=\"headerlink\" title=\"艳后与凯撒\"></a>艳后与凯撒</h3><p>克利奥帕特拉七世是托勒密王朝中第一个学会埃及语并接受埃及信仰和埃及神明的人，这是其他王室成员所拒绝的事（想想罗塞塔石碑还需要古希腊文书写）。她早年在就政治上活跃，应该算是被迫和托勒密十三世（同父异母弟弟）结婚以一同统治埃及。但之后两人发生冲突，艳后被迫流亡叙利亚，招兵买马打算反攻托勒密十三世。</p>\n<p>此时罗马内部也正在争斗，凯撒打败了庞培，后者被迫跑到埃及。而托勒密十三世可能希望寻求凯撒支持而擅自将凯撒老对手庞培暗杀了，在凯撒追到埃及时献上庞培的头颅。这可能令凯撒十分不满，因为庞培是他的劲敌、女婿，也是罗马执政官，不应该被异国人杀死。</p>\n<p>克利奥帕特拉七世可能看准了这个机会潜回埃及，并将自己献给凯撒，做他的情人，取得凯撒的支持。之后凯撒对埃及统治者的仲裁，是克利奥帕特拉七世上位。</p>\n<blockquote class=\"blockquote-center\"><p>传说当时克利奥帕特拉把自己伸直，用毯子卷起来包覆其中，命人抬着进入王宫，这时克利奥帕特拉年仅21岁，凯撒52岁。<br><em>维基百科</em></p>\n</blockquote>\n<p>托勒密十三世当然十分不满，率军围攻亚历山大城内罗马军。凯撒等到增援到来，脱围之后在尼罗河战役打败托勒密十三世，随后另立了托勒密十四世（仍旧是艳后的弟弟）和艳后结婚统治埃及。艳后虽然名义上嫁给托勒密十四世，但是实际上却和凯撒相好，还生了一个孩子托勒密·凯撒。</p>\n<p>BC46，艳后来到罗马，遭到罗马人民的厌恶，因为凯撒已婚，而她和凯撒关系暧昧。但凯撒不愧为独裁者，完全罔顾旁人，甚至为艳后制作黄金雕像，和罗马人先祖维纳斯神像一起摆放。在凯撒被刺后，艳后还留在罗马，可能是希望自己儿子继承凯撒。但是凯撒大概没有承认这个儿子，而是在遗嘱另立他的养子屋大维作为继承人。于是她回到埃及，毒死了托勒密十四世，与其儿子共同统治埃及。</p>\n<h3 id=\"艳后与安东尼\"><a href=\"#艳后与安东尼\" class=\"headerlink\" title=\"艳后与安东尼\"></a>艳后与安东尼</h3><p>安东尼是凯撒生前最重要的军队指挥官。凯撒被刺后，他和屋大维解决了反凯撒势力。之后在埃及传唤艳后的时候也应该是被迷住了，和她在 BC41 到 BC40 年度过了一段时光。接着安东尼离开了埃及，艳后不久后生下一男一女双胞胎，相信就是安东尼的儿女。</p>\n<p>安东尼和屋大维从 BC41 年开始就不和，因为安东尼妻子发起了和屋大维对抗的战争。虽然后来妻子突然身亡，安东尼也娶了屋大维的姐姐小屋大薇以维持稳定，但是两人仍然是竞争关系。安东尼把大量土地给予了艳后，屋大维利用这一点宣称其为外国女王而牺牲共和国权利。两人关系持续恶化，安东尼也冷落小屋大薇。之后对安息帝国的战争失利，安东尼回到埃及。BC36 年，艳后又为安东尼生下第二个儿子。</p>\n<p>BC34 年赢得对亚美尼亚的战争后，安东尼和艳后在大胜后的举动被屋大维大肆利用，煽动罗马对安东尼的不满，包括艳后以神的名义宣称自己和凯撒的儿子是万王之王，自己则是万王之女王，和安东尼的儿女则分别册封国王等。安东尼更公然向罗马宣称将包括打下亚美尼亚等一部分罗马行省赠予克利奥帕特拉七世。最冒犯屋大维的，是安东尼宣称艳后和凯撒的儿子托勒密·凯撒才应该是凯撒的继承人。</p>\n<p>屋大维借机行事向埃及女王宣战，在亚克兴角海战中打败安东尼。安东尼输掉海战的原因可能是因为海军在战事胶着时出现叛逃，安东尼和艳后逃回了埃及，陆军见势也投降屋大维了。</p>\n<p>屋大维乘胜追击到埃及，退无可退的安东尼误认为艳后已自杀，用剑刺自己，可能是被带到艳后藏身的坟墓才真正死去。艳后随后也被捕了。</p>\n<p>关于克利奥帕特拉七世的死法，无人知道。流传最广的版本是她让毒蛇咬自己而毒发身亡，也有观点认为他是被屋大维下令处死。</p>\n<p>她和凯撒的儿子托勒密·凯撒被屋大维处死，从此埃及成为了罗马帝国的行省，托勒密王朝终结，埃及的法老时代也终结了。</p>\n<p><img alt=\"丹达拉的哈索尔神庙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3c/Dendera_7_977.PNG/621px-Dendera_7_977.PNG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/3/3c/Dendera_7_977.PNG\"></p>\n<p><img alt=\"哈索尔神庙墙上的克利奥帕特拉七世和她的儿子托勒密·凯撒 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/4/49/Denderah3_Cleopatra_Cesarion.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/4/49/Denderah3_Cleopatra_Cesarion.jpg\"></p>\n<h2 id=\"罗马统治时期-gt-阿拉伯人入侵\"><a href=\"#罗马统治时期-gt-阿拉伯人入侵\" class=\"headerlink\" title=\"罗马统治时期 -&gt; 阿拉伯人入侵\"></a>罗马统治时期 -&gt; 阿拉伯人入侵</h2><p>作为罗马帝国行省的埃及，发生的事情属于罗马的历史了，这里不详述。只是 CE264 年的时候，反抗罗马的帕尔米拉女王季诺碧亚征服了埃及使其脱离罗马，并自称埃及女王，说她的家族可追溯到克利奥帕特拉七世。后来罗马也没有战胜她，只能是围城断粮逼其投降。</p>\n<p>埃及有一段时间曾被萨珊王朝所占领（CE621 - CE629），拜占庭（东罗马帝国）虽然重新夺回，但十年后阿拉伯帝国入侵的时候，已经无力抵抗，自此埃及伊斯兰化，埃及文明也不复存在。</p>\n<h2 id=\"古埃及神明\"><a href=\"#古埃及神明\" class=\"headerlink\" title=\"古埃及神明\"></a>古埃及神明</h2><p>古埃及是一个宗教特色很浓的国家，了解其神明系统有助于深入理解古埃及，不过没有兴趣也可不看。</p>\n<p>见 <a href=\"/learn-ancient-egyptian-gods-in-5-minutes\">古埃及神明</a> 一文。</p>\n<h2 id=\"一些小知识\"><a href=\"#一些小知识\" class=\"headerlink\" title=\"一些小知识\"></a>一些小知识</h2><p>法老的头冠分两部分，代表上埃及的白色王冠，代表下埃及的红色王冠，一般法老会戴着两个，诏示其为整个埃及的统治者。</p>\n<p>古埃及神话中的神明都是兄妹 / 姐弟结合，这可能造成了古埃及王室基本都是近亲结合。如果侧室的儿子登基法老，一般也要娶正室的女儿。统治者可能借此保持所谓的血统纯正。</p>\n<p>建造金字塔和神庙的大石头、花岗岩等，很多是从阿斯旺开凿的。</p>\n<h2 id=\"部分参考资料\"><a href=\"#部分参考资料\" class=\"headerlink\" title=\"部分参考资料\"></a>部分参考资料</h2><p><a href=\"https://www.bilibili.com/medialist/play/ml454556918\" target=\"_blank\" rel=\"noopener\">开放世界埃及篇</a><br><a href=\"https://zh.wikipedia.org/wiki/古埃及\" target=\"_blank\" rel=\"noopener\">古埃及 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/古埃及历史\" target=\"_blank\" rel=\"noopener\">古埃及历史 - 维基百科，自由的百科全书</a><br><a href=\"https://auntology.fandom.com/wiki/阿姨学、古埃及\" target=\"_blank\" rel=\"noopener\">阿姨学、古埃及 | 阿姨学词典 Wikia | FANDOM powered by Wikia</a><br><a href=\"https://en.wikipedia.org/wiki/History_of_ancient_Egypt\" target=\"_blank\" rel=\"noopener\">History of ancient Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Prehistoric_Egypt\" target=\"_blank\" rel=\"noopener\">Prehistoric Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Early_Dynastic_Period_%28Egypt%29\" target=\"_blank\" rel=\"noopener\">Early Dynastic Period (Egypt) - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Old_Kingdom_of_Egypt\" target=\"_blank\" rel=\"noopener\">Old Kingdom of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/First_Intermediate_Period_of_Egypt\" target=\"_blank\" rel=\"noopener\">First Intermediate Period of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Middle_Kingdom_of_Egypt\" target=\"_blank\" rel=\"noopener\">Middle Kingdom of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Second_Intermediate_Period_of_Egypt\" target=\"_blank\" rel=\"noopener\">Second Intermediate Period of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/New_Kingdom_of_Egypt\" target=\"_blank\" rel=\"noopener\">New Kingdom of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Third_Intermediate_Period_of_Egypt\" target=\"_blank\" rel=\"noopener\">Third Intermediate Period of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Late_Period_of_ancient_Egypt\" target=\"_blank\" rel=\"noopener\">Late Period of ancient Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Ptolemaic_Kingdom\" target=\"_blank\" rel=\"noopener\">Ptolemaic Kingdom - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Sasanian_Egypt\" target=\"_blank\" rel=\"noopener\">Sasanian Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/First_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">First Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Second_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Second Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Third_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Third Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Fourth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Fourth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Fifth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Fifth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Sixth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Sixth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Seventh_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Seventh Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Eighth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Eighth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Ninth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Ninth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Tenth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Tenth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Eleventh_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Eleventh Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Eleventh_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Eleventh Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twelfth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twelfth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Thirteenth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Thirteenth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Fourteenth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Fourteenth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Fifteenth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Fifteenth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Sixteenth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Sixteenth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Abydos_Dynasty\" target=\"_blank\" rel=\"noopener\">Abydos Dynasty - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Seventeenth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Seventeenth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Eighteenth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Eighteenth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Nineteenth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Nineteenth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twentieth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twentieth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twenty-first_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twenty-first Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twenty-second_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twenty-second Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twenty-third_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twenty-third Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twenty-fourth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twenty-fourth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twenty-fifth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twenty-fifth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twenty-sixth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twenty-sixth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twenty-eighth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twenty-eighth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twenty-ninth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twenty-ninth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Thirtieth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Thirtieth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Argead_dynasty\" target=\"_blank\" rel=\"noopener\">Argead dynasty - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Ptolemaic_Kingdom\" target=\"_blank\" rel=\"noopener\">Ptolemaic Kingdom - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Valley_of_the_Kings\" target=\"_blank\" rel=\"noopener\">Valley of the Kings - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Giza_pyramid_complex\" target=\"_blank\" rel=\"noopener\">Giza pyramid complex - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Histories_%28Herodotus%29\" target=\"_blank\" rel=\"noopener\">Histories (Herodotus) - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Assyria\" target=\"_blank\" rel=\"noopener\">Assyria - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Kingdom_of_Kush\" target=\"_blank\" rel=\"noopener\">Kingdom of Kush - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Hyksos\" target=\"_blank\" rel=\"noopener\">Hyksos - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Ramesseum\" target=\"_blank\" rel=\"noopener\">Ramesseum - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Ancient_Near_East\" target=\"_blank\" rel=\"noopener\">Ancient Near East - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Abu_Simbel_temples\" target=\"_blank\" rel=\"noopener\">Abu Simbel temples - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Egyptian%E2%80%93Hittite_peace_treaty\" target=\"_blank\" rel=\"noopener\">Egyptian–Hittite peace treaty - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Battle_of_Kadesh\" target=\"_blank\" rel=\"noopener\">Battle of Kadesh - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Abydos_King_List\" target=\"_blank\" rel=\"noopener\">Abydos King List - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Abydos,_Egypt\" target=\"_blank\" rel=\"noopener\">Abydos, Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Canaan\" target=\"_blank\" rel=\"noopener\">Canaan - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Karnak\" target=\"_blank\" rel=\"noopener\">Karnak - Wikipedia</a><br><a href=\"https://zh.wikipedia.org/wiki/早王朝时期\" target=\"_blank\" rel=\"noopener\">早王朝时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/古王国时期\" target=\"_blank\" rel=\"noopener\">古王国时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/第一中间时期\" target=\"_blank\" rel=\"noopener\">第一中间时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/中王国时期\" target=\"_blank\" rel=\"noopener\">中王国时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/第二中间时期\" target=\"_blank\" rel=\"noopener\">第二中间时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/新王国时期\" target=\"_blank\" rel=\"noopener\">新王国时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/第三中间时期\" target=\"_blank\" rel=\"noopener\">第三中间时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/古埃及晚期\" target=\"_blank\" rel=\"noopener\">古埃及晚期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/阿契美尼德王朝\" target=\"_blank\" rel=\"noopener\">阿契美尼德王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/托勒密时王朝\" target=\"_blank\" rel=\"noopener\">托勒密时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及_%28羅馬帝國行省%29\" target=\"_blank\" rel=\"noopener\">罗马及拜占庭时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/萨珊王朝\" target=\"_blank\" rel=\"noopener\">萨珊时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第一王朝\" target=\"_blank\" rel=\"noopener\">埃及第一王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二王朝\" target=\"_blank\" rel=\"noopener\">埃及第二王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第三王朝\" target=\"_blank\" rel=\"noopener\">埃及第三王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第四王朝\" target=\"_blank\" rel=\"noopener\">埃及第四王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第五王朝\" target=\"_blank\" rel=\"noopener\">埃及第五王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第六王朝\" target=\"_blank\" rel=\"noopener\">埃及第六王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第七王朝\" target=\"_blank\" rel=\"noopener\">埃及第七王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十一王朝\" target=\"_blank\" rel=\"noopener\">埃及第十一王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十二王朝\" target=\"_blank\" rel=\"noopener\">埃及第十二王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十三王朝\" target=\"_blank\" rel=\"noopener\">埃及第十三王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十四王朝\" target=\"_blank\" rel=\"noopener\">埃及第十四王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十五王朝\" target=\"_blank\" rel=\"noopener\">埃及第十五王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十六王朝\" target=\"_blank\" rel=\"noopener\">埃及第十六王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十七王朝\" target=\"_blank\" rel=\"noopener\">埃及第十七王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十八王朝\" target=\"_blank\" rel=\"noopener\">埃及第十八王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十九王朝\" target=\"_blank\" rel=\"noopener\">埃及第十九王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十一王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十一王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十二王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十二王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十三王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十三王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十四王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十四王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十五王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十五王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十六王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十六王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十七王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十七王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十八王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十八王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十九王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十九王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第三十王朝\" target=\"_blank\" rel=\"noopener\">埃及第三十王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第三十一王朝\" target=\"_blank\" rel=\"noopener\">埃及第三十一王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/古希腊\" target=\"_blank\" rel=\"noopener\">古希腊 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/馬其頓王國\" target=\"_blank\" rel=\"noopener\">馬其頓王國 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/托勒密王朝\" target=\"_blank\" rel=\"noopener\">托勒密王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/波斯\" target=\"_blank\" rel=\"noopener\">波斯 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/帝王谷\" target=\"_blank\" rel=\"noopener\">帝王谷 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/吉萨金字塔群\" target=\"_blank\" rel=\"noopener\">吉萨金字塔群 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/吉萨金字塔群/历史_%28希罗多德%29\" target=\"_blank\" rel=\"noopener\">历史 (希罗多德) - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/亚述\" target=\"_blank\" rel=\"noopener\">亚述 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/库施\" target=\"_blank\" rel=\"noopener\">库施 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/喜克索斯人\" target=\"_blank\" rel=\"noopener\">喜克索斯人 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/拉美西姆\" target=\"_blank\" rel=\"noopener\">拉美西姆 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/古代近东\" target=\"_blank\" rel=\"noopener\">古代近东 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/阿布辛贝勒神庙\" target=\"_blank\" rel=\"noopener\">阿布辛贝勒神庙 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及赫梯和约\" target=\"_blank\" rel=\"noopener\">埃及赫梯和约 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/卡迭石战役\" target=\"_blank\" rel=\"noopener\">卡迭石战役 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/阿拜多斯王表\" target=\"_blank\" rel=\"noopener\">阿拜多斯王表 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/阿拜多斯\" target=\"_blank\" rel=\"noopener\">阿拜多斯 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/迦南\" target=\"_blank\" rel=\"noopener\">迦南 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/卡纳克神庙\" target=\"_blank\" rel=\"noopener\">卡纳克神庙 - 维基百科，自由的百科全书</a></p>\n<h2 id=\"修订记录\"><a href=\"#修订记录\" class=\"headerlink\" title=\"修订记录\"></a>修订记录</h2><h3 id=\"2019-05-15\"><a href=\"#2019-05-15\" class=\"headerlink\" title=\"2019.05.15\"></a>2019.05.15</h3><ul>\n<li>搜集材料</li>\n<li>完成文章结构</li>\n</ul>\n<h3 id=\"2019-05-20\"><a href=\"#2019-05-20\" class=\"headerlink\" title=\"2019.05.20\"></a>2019.05.20</h3><ul>\n<li>完成初稿</li>\n</ul>\n<h3 id=\"2019-05-21\"><a href=\"#2019-05-21\" class=\"headerlink\" title=\"2019.05.21\"></a>2019.05.21</h3><ul>\n<li>新增缩略图</li>\n<li>整体润色</li>\n</ul>\n<h3 id=\"2019-05-22\"><a href=\"#2019-05-22\" class=\"headerlink\" title=\"2019.05.22\"></a>2019.05.22</h3><ul>\n<li>整理参考资料</li>\n<li>增补早期王朝的内容</li>\n</ul>\n<h3 id=\"2019-05-23\"><a href=\"#2019-05-23\" class=\"headerlink\" title=\"2019.05.23\"></a>2019.05.23</h3><ul>\n<li>新增「古埃及神明」一节</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>前几天在 bilibili 上看了一个 up 主的埃及旅游系列 <a href=\"https://www.bilibili.com/medialist/play/ml454556918\" target=\"_blank\" rel=\"noopener\">vlog</a>，了解了一些关于古埃及历史的知识，再通过维基什么学习，写下本文以做笔记。</p>\n<p>本文基本来源中英文维基，英文为主中文为辅，精简了大量不太重要的细节，比较适合快速了解和学习古埃及历史。如果对内容有什么疑问或者质疑，请务必留下评论或者联系我做讨论。</p>\n<h2 id=\"综述\"><a href=\"#综述\" class=\"headerlink\" title=\"综述\"></a>综述</h2><p>时间上只会覆盖到中世纪之前，个人认为古埃及在阿拉伯人入侵之后就算是玩完了，所以之后的时期不做记录。</p>\n<p>首先，整个古埃及基本就是沿着尼罗河建立的。尼罗河的走向是自南向北，古埃及也经常因为统治的原因，一段时期分成上埃及和下埃及，一段时期则是统一，正所谓分久必合，合久必分。上埃及是在南边即上游，而下埃及则是在北边即下游。</p>\n<p>埃及学者一般根据托勒密王朝早期古埃及祭祀曼涅托的《埃及史》将古埃及历史分成八到九个时期，三十一个王朝（一个王朝不一定只有一位法老），而古埃及人则似乎是不划分历史时期的。另外考古出来的历史也各国不一，这里以维基为准。</p>\n<p>这几个时期分别是前王朝时期、早王朝时期、古王国时期、第一中间期、中王国时期、第二中间期、新王国时期、第三中间期和古埃及后期。实际并不需要将所有的时期都记得一清二楚，只需要记得一些时期和王朝比较有名的事件和法老即可。</p>\n<p>另外古埃及到了第三中间期之后的后期，已经无力回天，被外族来回入侵，再之后又来了马其顿和罗马，最后被阿拉伯完全控制后到现在基本就已经是一个穆斯林国家了。</p>\n<p>古埃及年表在时间上的认定也不一，相差会有几十年，不过其开始一般都在 BC（before century，公元前）3100 左右。</p>\n<div class=\"note info\">\n            <p>点击图片查看清晰大图</p>\n          </div>\n<p><img alt=\"古埃及地图，显示主要城市和地图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Ancient_Egypt_map-en.svg/293px-Ancient_Egypt_map-en.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/1/17/Ancient_Egypt_map-en.svg\"></p>\n<h2 id=\"前王朝时期（BC3100-之前）\"><a href=\"#前王朝时期（BC3100-之前）\" class=\"headerlink\" title=\"前王朝时期（BC3100 之前）\"></a>前王朝时期（BC3100 之前）</h2><p>经历了旧石器时代和新石器时代，大概 BC3600 年开始，尼罗河沿岸出现几十个「诺姆」，相互各自斗争。</p>\n<blockquote>\n<p>诺姆：nome，源自希腊语 Νομός，意为 “行政区”；埃及语：Gau，中译「州」。</p>\n</blockquote>\n<h2 id=\"早王朝时期（Early-dynastic-period-BC3100-BC2686）\"><a href=\"#早王朝时期（Early-dynastic-period-BC3100-BC2686）\" class=\"headerlink\" title=\"早王朝时期（Early dynastic period, BC3100 - BC2686）\"></a>早王朝时期（Early dynastic period, BC3100 - BC2686）</h2><h3 id=\"第一王朝建立者，美尼斯\"><a href=\"#第一王朝建立者，美尼斯\" class=\"headerlink\" title=\"第一王朝建立者，美尼斯\"></a>第一王朝建立者，美尼斯</h3><p>传说中美尼斯（Menes）统一了上下埃及开创古埃及王朝。但从考古证据上则很难支持有这么一个人，反而认为是纳尔迈（Narmer）才是统一埃及第一人，或者说两者是同一个。</p>\n<p>包含一至二王朝，两个王朝，2 / 31。</p>\n<h2 id=\"古王国时期（Old-Kingdom-BC2686-BC2181）\"><a href=\"#古王国时期（Old-Kingdom-BC2686-BC2181）\" class=\"headerlink\" title=\"古王国时期（Old Kingdom, BC2686 - BC2181）\"></a>古王国时期（Old Kingdom, BC2686 - BC2181）</h2><h3 id=\"第一个建造金字塔，左塞王\"><a href=\"#第一个建造金字塔，左塞王\" class=\"headerlink\" title=\"第一个建造金字塔，左塞王\"></a>第一个建造金字塔，左塞王</h3><p>现在看到的著名金字塔基本就在这个时期被建造。</p>\n<p>此时期第一个法老（pharaoh）左塞王（King Djoser）开始建造阶梯金字塔（最常见最有名那种），位置在萨卡拉（开罗以南约 30 公里）。</p>\n<p>阶梯金字塔据说是是伊姆霍特普（Imhotep）设计的。</p>\n<blockquote class=\"blockquote-center\"><p>伊姆霍特普，出身平民，但因智慧过人，学识渊博，受到法老的破格重用。他在整个法老时代受到崇拜，死后被尊为神，名号被刻在法老左塞雕像的基座上。…… 古埃及医学的奠基人…… 被誉为历史上第一位留下姓名的建筑师与医师，被奉为医学之神<br><em>维基百科</em></p>\n</blockquote>\n<p>甚至有伊姆霍特普博物馆，见 <a href=\"https://en.wikipedia.org/wiki/Imhotep_Museum\" target=\"_blank\" rel=\"noopener\">维基</a>，<a href=\"https://egyptsites.wordpress.com/2009/02/21/imhotep-museum/\" target=\"_blank\" rel=\"noopener\">egyptsites 博客</a>。</p>\n<p><img alt=\"左塞尔金字塔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/60/Saqqara_BW_5.jpg/640px-Saqqara_BW_5.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/6/60/Saqqara_BW_5.jpg\"></p>\n<h3 id=\"最大的金字塔，胡夫金字塔\"><a href=\"#最大的金字塔，胡夫金字塔\" class=\"headerlink\" title=\"最大的金字塔，胡夫金字塔\"></a>最大的金字塔，胡夫金字塔</h3><p>胡夫是第四王朝的第二位法老，是首位在吉萨建造金字塔的法老。今天去埃及旅游看的三座大金字塔就在吉萨，其中最大的就是胡夫下令修建。</p>\n<p>胡夫金字塔塔高大概 146.5 米，现为大概 137 米，边长接近 230 米，由 230 万块巨石搭建而成，最重的可达 50 吨，最小的也有 1.5 吨。</p>\n<p>胡夫金字塔是古代世界七大奇迹中最为古老和唯一尚存的建筑物。</p>\n<p>有一个入口，但是现在被封禁，只使用某位哈里发在 CE820 开凿的盗墓通道作为入口。</p>\n<blockquote>\n<p>尽管建造了最大的金字塔，但胡夫本人的雕像却是考古发掘中所有法老雕像中最小的。</p>\n</blockquote>\n<p><img alt=\"胡夫金字塔，又名吉萨大金字塔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/Gizeh_Cheops_BW_1.jpg/640px-Gizeh_Cheops_BW_1.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/d/d1/Gizeh_Cheops_BW_1.jpg\"></p>\n<h3 id=\"第二大金字塔，卡夫拉金字塔\"><a href=\"#第二大金字塔，卡夫拉金字塔\" class=\"headerlink\" title=\"第二大金字塔，卡夫拉金字塔\"></a>第二大金字塔，卡夫拉金字塔</h3><p>卡夫拉是胡夫的孙子。尽管看起来卡夫拉金字塔比胡夫金字塔小一点，但是卡夫拉金字塔底座更高了 10 米，塔周边也更多附属设施。</p>\n<p>狮身人面像斯芬克斯就属于附近的建筑，但并不是问路人问题杀人那只。</p>\n<p><img alt=\"卡夫拉金字塔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Pyramid_of_Khufu.jpg/640px-Pyramid_of_Khufu.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/af/Pyramid_of_Khufu.jpg\"></p>\n<p><img alt=\"狮身人面像斯芬克斯 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a5/Cairo%2C_Gizeh%2C_Sphinx_and_Pyramid_of_Khufu%2C_Egypt%2C_Oct_2004.jpg/640px-Cairo%2C_Gizeh%2C_Sphinx_and_Pyramid_of_Khufu%2C_Egypt%2C_Oct_2004.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/a5/Cairo%2C_Gizeh%2C_Sphinx_and_Pyramid_of_Khufu%2C_Egypt%2C_Oct_2004.jpg\"></p>\n<h3 id=\"孟卡拉金字塔\"><a href=\"#孟卡拉金字塔\" class=\"headerlink\" title=\"孟卡拉金字塔\"></a>孟卡拉金字塔</h3><p>孟卡拉是第四王朝时期的第 16 位法老，孟卡拉金字塔远小于前两座金字塔，它的高度只有大约 65 米，总体积大约只有卡夫拉金字塔 1/10。</p>\n<p>萨拉丁的儿子奥斯曼曾试图拆除孟卡拉金字塔，最后太过困难而作罢，给金字塔北面留下很大的垂直裂缝。</p>\n<p><img alt=\"孟卡拉金字塔 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ab/Menkaures_Pyramid_Giza_Egypt.jpg/640px-Menkaures_Pyramid_Giza_Egypt.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/ab/Menkaures_Pyramid_Giza_Egypt.jpg\"></p>\n<p><img alt=\"金字塔俯视图，从右上到左下分别是胡夫金字塔，卡夫拉金字塔，孟卡拉金字塔，狮身人面像在右边与卡夫拉金字塔有一条堤道相连。via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Giza_pyramid_complex_%28map%29.svg/614px-Giza_pyramid_complex_%28map%29.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/e7/Giza_pyramid_complex_%28map%29.svg\"></p>\n<p>包含三至六王朝，四个王朝，6 / 31。</p>\n<h2 id=\"第一中间期（First-Intermediate-Period-BC2181-BC2055）\"><a href=\"#第一中间期（First-Intermediate-Period-BC2181-BC2055）\" class=\"headerlink\" title=\"第一中间期（First Intermediate Period, BC2181 - BC2055）\"></a>第一中间期（First Intermediate Period, BC2181 - BC2055）</h2><p>古王国时期后期出现严重干旱，国力下降，封建制度也削弱了中央权利，出现第一个黑暗时期，极其混乱的一个时期。这个时期法老权力被极度削弱，地方官员权利变大，在自己领地几乎就成了法老。</p>\n<p>七八王朝极度混乱，史书记录不清。</p>\n<h3 id=\"曼图霍特普二世（Mentuhotep-II）重新统一\"><a href=\"#曼图霍特普二世（Mentuhotep-II）重新统一\" class=\"headerlink\" title=\"曼图霍特普二世（Mentuhotep II）重新统一\"></a>曼图霍特普二世（Mentuhotep II）重新统一</h3><p>古埃及也分成了上下埃及，下埃及经历九十两个王朝，上埃及则是十和十一王朝。最终上埃及由曼图霍特普二世（Mentuhotep II）向北进攻击败下埃及统治者再次统一古埃及，并继续主持十一王朝，进入中王国时期。</p>\n<p>经历大概第七王朝到第十王朝，四个王朝，10 / 31。</p>\n<h2 id=\"中王国时期（Middle-Kingdom-BC2030-BC1650）\"><a href=\"#中王国时期（Middle-Kingdom-BC2030-BC1650）\" class=\"headerlink\" title=\"中王国时期（Middle Kingdom, BC2030 - BC1650）\"></a>中王国时期（Middle Kingdom, BC2030 - BC1650）</h2><p>十一王朝再次统一之后，开始重新收复失地，包括南边曾经在古王国和中间时期失落给努比亚的土地。</p>\n<blockquote>\n<p>努比亚相当于今天埃及和苏丹交界位置。</p>\n</blockquote>\n<p>十二王朝迁都底比斯（今卢克索）。</p>\n<h3 id=\"塞索斯特利斯三世（Sesostris-III）扩张到努比亚\"><a href=\"#塞索斯特利斯三世（Sesostris-III）扩张到努比亚\" class=\"headerlink\" title=\"塞索斯特利斯三世（Sesostris III）扩张到努比亚\"></a>塞索斯特利斯三世（Sesostris III）扩张到努比亚</h3><p>塞索斯特利斯三世（Sesostris III）是十二王朝法老，善战，向努比亚扩张，然后还建造了很多堡垒，被认为是这个王朝最强大的法老。</p>\n<p>之后他的儿子阿蒙涅姆赫特三世（Amenemhat III）的统治时期被认为是中王国时期经济最好的时期。不过他从西亚邀请了希克索人（Hyksos）到尼罗河下游三角洲定居，也给后面十三十四王朝的结束埋下了隐患。其实十二王朝末期尼罗河洪水减少也为国家带来打击。</p>\n<h3 id=\"第一位可考的女法老，塞贝克涅弗鲁（Sobekneferu）\"><a href=\"#第一位可考的女法老，塞贝克涅弗鲁（Sobekneferu）\" class=\"headerlink\" title=\"第一位可考的女法老，塞贝克涅弗鲁（Sobekneferu）\"></a>第一位可考的女法老，塞贝克涅弗鲁（Sobekneferu）</h3><p>阿蒙涅姆赫特四世（Amenemhat IV）去世后，其子年幼，于是其姐妹塞贝克涅弗鲁（Sobekneferu）成为了历史考证上第一位女法老。她在位三年后去世，政权持续衰弱，是十二王朝最后的法老。</p>\n<p>奥西里斯在这个时期成为了最重要的神。</p>\n<p>经历十一王朝到十三王朝，三个王朝，13 / 31。</p>\n<h2 id=\"第二中间期（Second-Intermediate-Period-BC1650-BC1550）\"><a href=\"#第二中间期（Second-Intermediate-Period-BC1650-BC1550）\" class=\"headerlink\" title=\"第二中间期（Second Intermediate Period, BC1650 - BC1550）\"></a>第二中间期（Second Intermediate Period, BC1650 - BC1550）</h2><p>十三王朝的继续衰弱导致尼罗河三角洲（属于下埃及）的政权脱离并独立，是为十四王朝。统治者可能是迦南人（闪米特人）血统。</p>\n<p>注意十三王朝和十四王朝几乎是共存的，直到 BC1650 希克索人全面控制下埃及，攻占了古首都孟菲斯。</p>\n<h3 id=\"希克索人的外族统治\"><a href=\"#希克索人的外族统治\" class=\"headerlink\" title=\"希克索人的外族统治\"></a>希克索人的外族统治</h3><p>希克索人对下埃及的统治被视为十五王朝，而南边的底比斯统治者也趁十三王朝的真空宣布独立并宣布十六王朝。</p>\n<p>希克索人继续南下把十六王朝打败后，北退，上埃及建立十七王朝与希克索共存。</p>\n<p>十七王朝学习希克索人的战术和武器，在十七王朝最后两个法老统治期间反攻北面希克索人。</p>\n<p>阿赫摩斯一世（Ahmose I）是十七王朝最后一个法老的弟弟，继续父亲和兄长意志将希克索人赶出埃及，开创十八王朝，进入新王国时期。</p>\n<p>包含十四王朝到十七王朝，共四个王朝，17 / 31。</p>\n<h2 id=\"新王国时期（New-Kingdom-BC1570-－-BC1070）\"><a href=\"#新王国时期（New-Kingdom-BC1570-－-BC1070）\" class=\"headerlink\" title=\"新王国时期（New Kingdom, BC1570 － BC1070）\"></a>新王国时期（New Kingdom, BC1570 － BC1070）</h2><p>这个时期有很多有名的法老。宗教上也有不少的变动。</p>\n<p>在神明崇拜上，由于此时统一埃及十七王朝的统治者就是底比斯的家族，所以底比斯的地方神祇阿蒙（Amun）被推举到了主神的地位。由于古埃及一直以来一般都认为主神是太阳神拉（Ra），所以这段时期又经常将阿蒙和拉结合为同一个神，叫阿蒙-拉。</p>\n<p>古埃及历史上最强盛的十八王朝就在这个时期内。</p>\n<h3 id=\"阿赫摩斯一世（Ahmose-I）赶走外族，统一上下埃及\"><a href=\"#阿赫摩斯一世（Ahmose-I）赶走外族，统一上下埃及\" class=\"headerlink\" title=\"阿赫摩斯一世（Ahmose I）赶走外族，统一上下埃及\"></a>阿赫摩斯一世（Ahmose I）赶走外族，统一上下埃及</h3><p>十八王朝第一任法老阿赫摩斯一世（Ahmose I），他登基的时候可能只有十岁，并可能在二十岁左右完成了「驱逐胡虏」，恢复了埃及对努比亚的统治。</p>\n<p>之后是阿赫摩斯一世的儿子阿蒙霍特普一世（Amenhotep I）继位。</p>\n<p>接下来的法老图特摩斯一世（Thutmose I）的身世则有点模糊，有可能是阿蒙霍特普一世的儿子，或者是他的军队指挥官。他意图扩大埃及版图，并第一个在帝王谷建造坟墓。</p>\n<p><img alt=\"Valley of the Kings，帝王谷。via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/ValleeDesRois.JPG/800px-ValleeDesRois.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/2/2a/ValleeDesRois.JPG\"></p>\n<p>图特摩斯一世儿女中有一个儿子，图特摩斯二世（Thutmose II），是由妃子所生；其中有一个女儿，哈特谢普苏特（Hatshepsut），是由王后所生。</p>\n<p>王后没有儿子，于是图特摩斯二世娶了他的姐姐哈特谢普苏特并登上王位，但很快就死了，而哈特谢普苏特只生了一个女儿，所以又从图特摩斯二世的妃子中找了个儿子当图特摩斯三世（Thutmose III）。</p>\n<h3 id=\"古埃及的「武则天」，哈特谢普苏特\"><a href=\"#古埃及的「武则天」，哈特谢普苏特\" class=\"headerlink\" title=\"古埃及的「武则天」，哈特谢普苏特\"></a>古埃及的「武则天」，哈特谢普苏特</h3><p>或许是因为图特摩斯三世太幼小，又或者是因为哈特谢普苏特觉得自己是正统王室之后，因此虽然作为摄政王，但是肯定是想自己当甚至极有可能当上了法老。而且考古学者从资料和建筑中考据，亦基本承认了她法老的地位（同时图特摩斯三世仍然在位）。</p>\n<p>哈特谢普苏特在位期间的贡献主要为重新建立被希克索人入侵时破坏的贸易路线，以及大兴土木建造了很多建筑。她停止了土地扩张，使埃及在叙利亚及巴勒斯坦的统治权动摇（死后更丢失了统治权，但后来图特摩斯三世重新收复），但加强了和邻国的贸易，使埃及变得富庶。</p>\n<p>她在卡纳克神庙建造了两个方尖碑，其中之一是埃及现存方尖碑中最高的，约 29 米高。</p>\n<p>她在曼图霍特普二世神庙旁建造的哈特谢普苏特神庙，是古埃及建筑杰作以及热门景区。</p>\n<p><img alt=\"卡纳克神庙，埃及现存最大神庙，中王国时期开始建造，一直是法老们建造崇拜神明和歌颂自己的建筑的地方 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3b/Temple_Complex_at_Karnak.jpg/640px-Temple_Complex_at_Karnak.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/3/3b/Temple_Complex_at_Karnak.jpg\"></p>\n<p><img alt=\"哈特谢普苏特方尖碑 via www.obelisks.org\" src=\"http://www.obelisk.co3.jp/thumbnail/karnak_hatshepsut_south.jpg\" data-original=\"http://www.obelisk.co3.jp/karnak_hatshepsut_south.jpg\"></p>\n<p><img alt=\"左为曼图霍特普二世神庙，已倒塌，右为哈特谢普苏特神庙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/42/SFEC_AEH_-ThebesNecropolis-2010-Hatshepsut-023.jpg/640px-SFEC_AEH_-ThebesNecropolis-2010-Hatshepsut-023.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/4/42/SFEC_AEH_-ThebesNecropolis-2010-Hatshepsut-023.jpg\"></p>\n<p><img alt=\"哈特谢普苏特神庙正面照 via www.egypt.travel\" src=\"http://www.egypt.travel/media/1717/temple-of-hatshupsut_800x600.jpg\" data-original=\"http://www.egypt.travel/media/1717/temple-of-hatshupsut_800x600.jpg\"></p>\n<p>经历王女、王后、摄政王和法老，哈特谢普苏特让人联想起中国的「武则天」。</p>\n<h3 id=\"埃及的拿破仑，图特摩斯三世\"><a href=\"#埃及的拿破仑，图特摩斯三世\" class=\"headerlink\" title=\"埃及的拿破仑，图特摩斯三世\"></a>埃及的拿破仑，图特摩斯三世</h3><p>图特摩斯三世在哈特谢普苏特统治二十一到二十二年后重新归来，并积极扩充军队和埃及版图，征服了地中海沿岸的以色列和叙利亚地区，甚至让邻国给其纳贡。图特摩斯三世也被后人称为「埃及的拿破仑」。</p>\n<p><img alt=\"新王国时期古埃及在公元前15世纪的最大领土范围 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a8/Egypt_1450_BC.svg/520px-Egypt_1450_BC.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/a8/Egypt_1450_BC.svg\"></p>\n<p>图特摩斯三世重获权力后，通过破坏纪念碑等方式极力抹除哈特谢普苏特的存在。后面的王朝在王表编纂上也似乎故意忽略了这个法老。</p>\n<blockquote>\n<p>哈特谢普苏特和图特摩斯三世之间的关系，一般认为图特摩斯三世怨恨哈特谢普苏特。但最近一些研究进展称此说法不准确，并声称图特摩斯三世一直担当哈特谢普苏特的军事统治领袖，哈特谢普苏特也没有取其性命；而且损毁行动在图特摩斯三世统治晚期集中进行，哈特谢普苏特的资料也不是唯一被损毁的资料；从而推测图特摩斯三世是为了巩固继承人地位而作出如此的行为，他本人和他的继母并没有过节。这部分说法维基暂时没有找到证据支持。</p>\n</blockquote>\n<p>\b埃及在图特摩斯三世以及几位法老的努力下，终于\b在阿蒙霍特普三世（Amenhotep III）治下达到艺术和国力顶峰。阿蒙霍特普三世一生建造了很多宏伟的建筑和雕像，其中有著名的门农巨像。门农巨像座落在是蒙霍特普三世神庙的门口守卫。而阿蒙霍特普三世神庙是埃及最大最华丽的建筑群，可是后来因为地震和被拆除的缘故，现在已经不存在了，剩下两尊残破的门农巨像。</p>\n<p><img alt=\"门农巨像正面照 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Colossi_of_Memnon_May_2015_2.JPG/640px-Colossi_of_Memnon_May_2015_2.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/ee/Colossi_of_Memnon_May_2015_2.JPG\"></p>\n<p><img alt=\"阿蒙霍特普三世神庙鸟瞰图，门农巨像在右边 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/b/ba/Amenhotep_III_mortuary_Temple.jpg/640px-Amenhotep_III_mortuary_Temple.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/b/ba/Amenhotep_III_mortuary_Temple.jpg\"></p>\n<p>帝国的强盛、对阿蒙神的崇拜和皇家经常修建神殿，令阿蒙神庙的祭司获得极大的财富和权力，祭司们不免出现腐败和干预朝政的行为。</p>\n<h3 id=\"被后继者视为异端的宗教改革者，阿蒙霍特普四世\"><a href=\"#被后继者视为异端的宗教改革者，阿蒙霍特普四世\" class=\"headerlink\" title=\"被后继者视为异端的宗教改革者，阿蒙霍特普四世\"></a>被后继者视为异端的宗教改革者，阿蒙霍特普四世</h3><p>于是阿蒙霍特普三世的儿子，阿蒙霍特普四世，相信是为了打击祭司和权贵，进行了宗教改革。他简化多神系统，要求全国改为崇拜唯一的太阳神阿顿（Aten），甚至把自己的名字改为阿肯那顿（Akhenaten），迁都埃赫塔顿（Akhetaten），摧毁阿蒙神庙。有学者认为这表明了他创造了世界上最早的一神教。但他沉迷新兴宗教事务，以至于对边疆情况置若罔闻，而此时地中海北面的赫梯人正值盛时。于是古埃及逐渐失去了西亚地区的影响力。</p>\n<p>他的大皇后，娜芙蒂蒂（Nefertiti），很有可能和他一同统治埃及。</p>\n<p><img alt=\"有名的半身像 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Nofretete_Neues_Museum.jpg/328px-Nofretete_Neues_Museum.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/1/1f/Nofretete_Neues_Museum.jpg\"></p>\n<p>阿肯那顿的后继者在他死后又把旧宗教恢复回来，并大力抹消新兴宗教的记录和影响。</p>\n<p><img alt=\"阿顿 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Aten.svg/640px-Aten.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/a/af/Aten.svg\"></p>\n<h3 id=\"生前不出名，死后却最出名的法老，图坦卡蒙\"><a href=\"#生前不出名，死后却最出名的法老，图坦卡蒙\" class=\"headerlink\" title=\"生前不出名，死后却最出名的法老，图坦卡蒙\"></a>生前不出名，死后却最出名的法老，图坦卡蒙</h3><p>阿肯那顿之后经过了一个或者两个短暂统治的法老（可能是他儿子或者王后摄政），王位传到了最著名的法老——图坦卡蒙（Tutankhamun）。</p>\n<p><img alt=\"图坦卡蒙的木乃伊面具 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e5/TUT-Ausstellung_FFM_2012_47_%287117819557%29.jpg/360px-TUT-Ausstellung_FFM_2012_47_%287117819557%29.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/e5/TUT-Ausstellung_FFM_2012_47_%287117819557%29.jpg\"></p>\n<p>图坦卡蒙曾用名图坦卡顿（Tutankhaten），从名字的更改可以看出信仰的更改。他将首都迁回底比斯，重开神庙，重新恢复阿蒙神的崇拜。</p>\n<p>图坦卡蒙的出名是因为所有法老的坟墓都几乎被盗空了，而唯有他在帝王谷的坟墓三千多年来从没被盗，以至于发掘出近五千件文物，令法老以及图坦卡蒙成为流行文化。</p>\n<p>关于有名的「法老的诅咒」，可以说没有任何证据表明诅咒存在，坟墓内也没有发现任何诅咒的存在。打开坟墓和棺材的在场 58 人，据研究只有 8 - 10 人在十几年内死亡，根本不足为诅咒的依据。</p>\n<div class=\"note info\">\n            <p>2019 年（本年） 1 月，图坦卡蒙坟墓向游客开放。</p>\n          </div>\n<h3 id=\"混乱的最后几任十八王朝法老\"><a href=\"#混乱的最后几任十八王朝法老\" class=\"headerlink\" title=\"混乱的最后几任十八王朝法老\"></a>混乱的最后几任十八王朝法老</h3><p>然而图坦卡蒙似乎一直疾病缠身，18 岁就死了，死因有各种猜测，包括疟疾、腿疾或者被谋杀。他与其异母姐姐安克姗海娜曼的两个女儿也早年夭折，因此图特摩斯家族就绝后了。安克姗海娜曼似乎曾经写信给赫梯国王苏庇路里乌玛一世要求他要一个王子嫁给她，但是王子还没到就被杀了。</p>\n<p>之后是阿肯那顿和图坦卡蒙大臣，甚至可能是其背后的操纵者，阿伊（Ay），极有可能娶了安克姗海娜曼，当上了法老，统治了一个很短暂的时期。之后就被图坦卡蒙的将军，霍朗赫布（又或者哈伦海布，Horemheb）夺取了法老位置。</p>\n<p>霍朗赫布以孟菲斯为首都，继续抹除阿顿以及其前任等人的痕迹，算是个解决宗教动荡和国家分裂等麻烦的人。</p>\n<p>霍朗赫布跟王室没有关系，也没有儿子，法老位置传给了当时的大臣门帕提拉（原名普拉美斯，Paramesse），即十九王朝的第一任法老拉美西斯一世（Ramesses I）。</p>\n<h3 id=\"被儿子盖住名声的塞提一世\"><a href=\"#被儿子盖住名声的塞提一世\" class=\"headerlink\" title=\"被儿子盖住名声的塞提一世\"></a>被儿子盖住名声的塞提一世</h3><p>拉美西斯一世的儿子塞提一世（Seti I）和她父亲重建了王国的秩序，并在叙利亚和迦南地区打击赫梯人的势力。从纪念碑上可以找到他的伟大功绩，虽然一般来说都是倾向于夸大。总的来说，塞提一世可以说是恢复新王国时期的荣光。</p>\n<p>塞提一世也兴建了很多建筑，包括位于底比斯的塞提一世祭庙、位于阿拜多斯的塞提一世纪念庙以及大柱式大厅，虽然大部分应该是在拉美西斯二世时期完成的。</p>\n<p><img alt=\"塞提一世神庙 via www.egypt.travel\" src=\"http://www.egypt.travel/media/1297/temple-of-seti-1.jpg\" data-original=\"http://www.egypt.travel/media/1297/temple-of-seti-1.jpg\"></p>\n<p>阿拜多斯的塞提一世纪念庙虽然外表其貌不扬，但是内部壁画精美，而且有不少壁画仍然有颜色。其中一面墙上按时间顺序记录了大多数王朝的法老的名字，从美尼斯到塞提一世共 76 个，被称为阿拜多斯王表，是后世研究历史的主要来源之一。</p>\n<p><img alt=\"塞提一世纪念庙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/3/33/AbydosFacade.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/3/33/AbydosFacade.jpg\"></p>\n<p><img alt=\"阿拜多斯王表，法老的名字是圈起来的 via pharaoh.se\" src=\"https://pharaoh.se/hiero/ABY1200.jpg\" data-original=\"https://pharaoh.se/hiero/ABY1200.jpg\"></p>\n<p><img alt=\"阿拜多斯王表，法老的名字是圈起来的 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/f/f1/AbydosKinglistDrawing.png/640px-AbydosKinglistDrawing.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/f/f1/AbydosKinglistDrawing.png\"></p>\n<p><img alt=\"大柱式大厅、神龛大厅 via www.egypt.travel\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/5c/Pillars_of_Great_Hypostyle_Hall_in_Karnak_Luxor_Egypt.JPG/800px-Pillars_of_Great_Hypostyle_Hall_in_Karnak_Luxor_Egypt.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/5/5c/Pillars_of_Great_Hypostyle_Hall_in_Karnak_Luxor_Egypt.JPG\"></p>\n<h3 id=\"鼎鼎大名的拉美西斯二世\"><a href=\"#鼎鼎大名的拉美西斯二世\" class=\"headerlink\" title=\"鼎鼎大名的拉美西斯二世\"></a>鼎鼎大名的拉美西斯二世</h3><p>塞提一世的儿子就是赫赫有名的拉美西斯二世（Ramesses II）了。他如此的有名以至于后来有九位法老使用了拉美西斯这名字。他在位长达 66 到 67 年，执政的时期是新王国最后的强盛年代。</p>\n<p>但凡古埃及强盛的时期，统治的法老无不是领土争端和宏伟建筑这两方面有所建树，拉美西斯二世也不例外。他打败从地中海入侵的海盗，向东北占领迦南地区和南叙利亚地区，和北面的强敌赫梯国王穆瓦塔利二世（Muwatalli II）来回地打拉锯战，最后分庭抗礼；稳定南边的努比亚。他在位时间比较长，也在埃及各地建造非常多的建筑，甚至在不是他建造的建筑上也留下标志。</p>\n<p>卡迭石战役是埃及和赫梯之间比较著名的战役。战役的情况很可能是这样：埃及想进军占领卡迭石，但被赫梯战车袭击并击溃；法老在营地受困的时候雇佣兵到了，反击了赫梯，导致赫梯军败退；埃及虽然赢了这场战斗但是也无法攻克卡迭石，战略上算是输了。之后双方一直僵持不下。卡迭石战役有非常详细的记录，但基本都是埃及方面一面之词，因此也存在夸大拉美西斯二世的可能性。</p>\n<p><img alt=\"两个帝国接壤的卡迭石（Qadesh） via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Hitt_Egypt_Perseus.png/310px-Hitt_Egypt_Perseus.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/e9/Hitt_Egypt_Perseus.png\"></p>\n<p>之后穆瓦塔利二世病逝，拉美西斯二世和继位的哈图西里三世（Hattusili III）缔结埃及赫梯和约，此时距离卡迭石战役已经十五六年了。</p>\n<p>埃及赫梯和平条约，或称卡迭石条约、永恒条约、银条约，是古代近东（即今西亚、中东地区）地区协议双方都有保存下来的最古老的条约。缔结和约结束了长期的冷战实际上对签署双方都有利益。埃及的目的，很可能是为了吹嘘法老功绩，并成立军事同盟以共同对抗西亚更东边的新贵力量亚述；而赫梯的目的，则可能是新王为了巩固地位以及利用法老的国际影响力提升自己的国际地位。</p>\n<p><img alt=\"赫梯人版本的和约 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Treaty_of_Kadesh.jpg/200px-Treaty_of_Kadesh.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/0d/Treaty_of_Kadesh.jpg\"></p>\n<p><img alt=\"埃及人版本的和约 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/%C3%84gyptisch-Hethitischer_Friedensvertrag_Karnaktempel.jpg/200px-%C3%84gyptisch-Hethitischer_Friedensvertrag_Karnaktempel.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/9/93/%C3%84gyptisch-Hethitischer_Friedensvertrag_Karnaktempel.jpg\"></p>\n<p>拉美西斯二世的闻名也许也来自于他遍布埃及的大型建筑和到处刻画自己的荣光事迹。</p>\n<p>比较有名的建筑是拉美西姆神庙、哈布城神庙和阿布辛贝勒神庙。</p>\n<p>拉美西姆神庙现今已经是废墟，往日的样子只能靠门口和后面的建筑来想像了。</p>\n<p><img alt=\"拉美西姆神庙鸟瞰图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/8/80/SFEC_AEH_-ThebesNecropolis-2010-RamsesII-021.jpg/640px-SFEC_AEH_-ThebesNecropolis-2010-RamsesII-021.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/8/80/SFEC_AEH_-ThebesNecropolis-2010-RamsesII-021.jpg\"></p>\n<p><img alt=\"门口的四个奥西里斯雕像 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/SFEC-RAMASSEUM-2009-11-14-0034.JPG/640px-SFEC-RAMASSEUM-2009-11-14-0034.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/1/1c/SFEC-RAMASSEUM-2009-11-14-0034.JPG\"></p>\n<p>比较值得注意的是庙内有一副拉美西姆国王名单（Ramesseum king list），列出了新王朝的大部分法老。</p>\n<p><img alt=\"拉美西姆国王名单手绘图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Ramesseum_King_list.png/800px-Ramesseum_King_list.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Ramesseum_King_list.png/1920px-Ramesseum_King_list.png\"></p>\n<p>哈布城神庙（Medinet Habu）离哈特谢普苏特神庙不远，很多法老都在这修建过建筑，刻过壁画。然而拉美西斯二世应该是其中最张扬的了，似乎很害怕被人遗忘。</p>\n<p><img alt=\"哈布城神庙鸟瞰图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/SFEC_AEH_-ThebesNecropolis-2010-RamsesIII036.jpg/640px-SFEC_AEH_-ThebesNecropolis-2010-RamsesIII036.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/4/4e/SFEC_AEH_-ThebesNecropolis-2010-RamsesIII036.jpg\"></p>\n<p>拉美西斯二世本身就喜欢乱改别人的壁画，因此他也害怕别人抹掉他的壁画，于是他的壁画都刻得非常深。</p>\n<p><img alt=\"哈布城壁画 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/Habu_Temple_court_in_sesson.JPG/640px-Habu_Temple_court_in_sesson.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/9/93/Habu_Temple_court_in_sesson.JPG\"></p>\n<p>阿布辛贝勒神庙（Abu Simbel temples）应该是很多人从电视媒体等看到过的神庙之一，整个神庙在岩石上开凿而成，门口四个雕像也是其标志之一。</p>\n<p><img alt=\"阿布辛贝勒神庙正面 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/28/Abu_Simbel%2C_Ramesses_Temple%2C_front%2C_Egypt%2C_Oct_2004.jpg/640px-Abu_Simbel%2C_Ramesses_Temple%2C_front%2C_Egypt%2C_Oct_2004.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/2/28/Abu_Simbel%2C_Ramesses_Temple%2C_front%2C_Egypt%2C_Oct_2004.jpg\"></p>\n<p>神庙东北面是法老为哈索尔（Hathor，古埃及女神）和妮菲塔莉（Nefertari，拉美西斯二世的大王后）所建的小庙（the Small Temple）。妮菲塔莉的雕像跟拉美西斯二世一样高，表明地位跟他几乎平起平坐，也是几乎唯一一位在世就被神格化的埃及王后。其他同样有名的王后是克利奥帕特拉七世（埃及艳后）、娜芙蒂蒂（阿肯那顿的大王后）和哈特谢普苏特（埃及「武则天」）。</p>\n<p><img alt=\"左为阿布辛贝勒神庙，右为小庙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/6/63/Panorama_Abu_Simbel_crop.jpg/640px-Panorama_Abu_Simbel_crop.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/6/63/Panorama_Abu_Simbel_crop.jpg\"></p>\n<p>近代由于在阿斯旺兴建水坝，联合国筹钱将阿布辛贝勒神庙和小庙搬离到比原地高 200 米处。</p>\n<p><img alt=\"搬迁前后位置对比 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/06/Abu_Simbel_relocation_by_Zureks.jpg/640px-Abu_Simbel_relocation_by_Zureks.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/0/06/Abu_Simbel_relocation_by_Zureks.jpg\"></p>\n<p>频繁的战争、大兴土木，造就了巨大的国库开销，加大了国力下降。在拉美西斯二世死后，埃及就立刻开始走下坡路。</p>\n<h3 id=\"第二十王朝的祭司当权\"><a href=\"#第二十王朝的祭司当权\" class=\"headerlink\" title=\"第二十王朝的祭司当权\"></a>第二十王朝的祭司当权</h3><p>过了几任法老后，到了第二十王朝第二任法老拉美西斯三世的统治。他抵抗了几次地中海和利比亚的入侵，治下还出现了人类历史上第一次有记录的劳工罢工。他的一个妃子还曾试图毒杀他，\b最后是失败了。</p>\n<p>拉美西斯五世，土地和财政基本就已经被阿蒙神庙的祭司所控制了。</p>\n<p>拉美西斯六世在建造坟墓时无意间将图坦卡蒙坟墓埋在了地下，避免了其日后被盗掘。</p>\n<p>第二十王朝，古埃及陷入内忧外患，尼罗河水位下降、内政动乱、法老坟墓被盗、官员腐败，又丢了叙利亚和巴勒斯坦，最后法老基本就没有统一埃及的权力了。</p>\n<p>包含十八王朝到二十王朝，共三个王朝，20 / 31。</p>\n<h2 id=\"第三中间期（3rd-Intermediate-Period-BC1069-BC664）\"><a href=\"#第三中间期（3rd-Intermediate-Period-BC1069-BC664）\" class=\"headerlink\" title=\"第三中间期（3rd Intermediate Period, BC1069 - BC664）\"></a>第三中间期（3rd Intermediate Period, BC1069 - BC664）</h2><p>拉美西斯十一世死后，结束二十王朝，斯门代斯一世（Smendes I）开创二十一王朝，然而此时法老权力已经极弱，基本被赶到下埃及去了，上埃及和中埃及地区则是由底比斯阿蒙神庙的大祭司们所控制。</p>\n<h3 id=\"利比亚人的二十二、二十三、二十四王朝\"><a href=\"#利比亚人的二十二、二十三、二十四王朝\" class=\"headerlink\" title=\"利比亚人的二十二、二十三、二十四王朝\"></a>利比亚人的二十二、二十三、二十四王朝</h3><p>之前二十王朝已经在尼罗河三角洲定居的利比亚人，在舍顺克一世（Shoshenq I）统领下统一埃及，创立二十二王朝，这里的法老已经不是本土埃及人了。然后二十三王朝二十四王朝，王室和内政仍然比较动荡，南方起源于库施（kush）的努比亚王国趁乱北上把整个埃及打了下来，赶走了利比亚人，建立二十五王朝。</p>\n<h3 id=\"努比亚人的二十五王朝\"><a href=\"#努比亚人的二十五王朝\" class=\"headerlink\" title=\"努比亚人的二十五王朝\"></a>努比亚人的二十五王朝</h3><p>努比亚人重新恢复了古埃及的的宗教传统，修复和建造了不少寺庙和纪念碑，还在家乡（位于现在的苏丹）重新建造起金字塔来。</p>\n<p><img alt=\"二十五王朝的库施帝国 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/1/1a/Egypt_kush.svg/523px-Egypt_kush.svg.png\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/1/1a/Egypt_kush.svg\"></p>\n<p>包含二十一王朝到二十五王朝，共五个王朝，25 / 31。</p>\n<h2 id=\"古埃及晚期-波斯帝国时期（Late-Period-BC664-BC332）\"><a href=\"#古埃及晚期-波斯帝国时期（Late-Period-BC664-BC332）\" class=\"headerlink\" title=\"古埃及晚期 / 波斯帝国时期（Late Period, BC664 - BC332）\"></a>古埃及晚期 / 波斯帝国时期（Late Period, BC664 - BC332）</h2><p>之后西亚的亚述人开始入侵古埃及，努比亚人不敌，向南退回努比亚。亚述人可能对占着古埃及没有兴趣，在洗劫一番后退了回去，扶植了普萨美提克一世（Psammetichus I）作为法老。</p>\n<h3 id=\"古埃及本土最后的荣光，二十六王朝\"><a href=\"#古埃及本土最后的荣光，二十六王朝\" class=\"headerlink\" title=\"古埃及本土最后的荣光，二十六王朝\b\"></a>古埃及本土最后的荣光，二十六王朝\b</h3><p>之后，普萨美提克一世趁亚述帝国忙于战乱，联合古希腊的雇佣军，又重新统一了古埃及，建立二十六王朝，恢复了繁荣稳定。之后亚述被内部独立的新巴比伦帝国推翻，普萨美提克一世也曾想恢复西亚的霸权，但被尼布甲尼撒二世（Nebuchadnezzar II）统治的新巴比伦帝国打了回来。</p>\n<p>那个古埃及法老用婴儿做实验，实验听不到别人说话怎么学语言的故事，就是普萨美提克一世的故事，记录在希罗多德写的书「历史」第二卷中。</p>\n<p><img alt=\"亚述帝国最大版图 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/e/eb/Assy3.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/e/eb/Assy3.JPG\"></p>\n<p>然而二十六王朝已经是最后一个埃及本土王朝了。更东边的波斯阿契美尼德帝国（波斯第一帝国）灭了新巴比伦帝国，接着吞并了古埃及，波斯国王冈比西斯二世（Cambyses II）成了法老，称为二十七王朝。</p>\n<p>之后二十六王朝后裔推翻波斯的统治，先后建立短暂的二十八、二十九、三十王朝。</p>\n<p>然后波斯人再次征服古埃及，是为三十一王朝。</p>\n<p>包含二十六王朝到三十一王朝，共六个王朝，31 / 31。</p>\n<h2 id=\"马其顿的亚历山大解放埃及-gt-托勒密王朝（Macedonian-and-Ptolemaic-Egypt-BC332-BC30）\"><a href=\"#马其顿的亚历山大解放埃及-gt-托勒密王朝（Macedonian-and-Ptolemaic-Egypt-BC332-BC30）\" class=\"headerlink\" title=\"马其顿的亚历山大解放埃及 -&gt; 托勒密王朝（Macedonian and Ptolemaic Egypt, BC332 - BC30）\"></a>马其顿的亚历山大解放埃及 -&gt; 托勒密王朝（Macedonian and Ptolemaic Egypt, BC332 - BC30）</h2><h3 id=\"埃及解放者，亚历山大\"><a href=\"#埃及解放者，亚历山大\" class=\"headerlink\" title=\"埃及解放者，亚历山大\"></a>埃及解放者，亚历山大</h3><p>当无人不知的亚历山大击溃波斯大军并来到埃及的时候，根本没有遇到什么抵抗，埃及当地的波斯管理者就直接将埃及献给他了，埃及人民还视其为埃及的解放者。</p>\n<p>亚历山大尊重当地信仰，去绿洲朝圣得到神谕。神谕宣称他是阿蒙的儿子。实际上就是得到了祭司等有权势的人的承认。他成立了一个新的希腊城市名为亚历山大（他到哪就在哪建亚历山大城），并任命希腊人——而不是埃及人——作为高官。</p>\n<p>亚历山大没有在埃及待很久，就去征服其他地方了，从此再没有回来过。他的部下托勒密留在埃及统治，并从亚历山大死后分崩离析的亚历山大帝国中独立出来，创立托勒密王朝统治了近三百年。</p>\n<h3 id=\"希腊法老，托勒密王朝\"><a href=\"#希腊法老，托勒密王朝\" class=\"headerlink\" title=\"希腊法老，托勒密王朝\"></a>希腊法老，托勒密王朝</h3><p>托勒密王朝中，男性都叫托勒密（Ptolemy），女性一般叫克利奥帕特拉（Cleopatra）、贝勒尼基（Berenice）和阿尔西诺伊（Arsinoe），因此所有统治者都是这四个名字的加几世这样的称呼。最为人知的就是末代法老，埃及艳后，克利奥帕特拉七世。</p>\n<p>托勒密王朝没有使用希腊文明取代埃及文明，反而扶持其延续，修建埃及风格的神庙，维护传统宗教仪式。当然也带来了希腊文明的影响，这个时期很多文艺作品都有两个文明融合的风格。</p>\n<h3 id=\"罗塞塔石碑，托勒密五世诏书\"><a href=\"#罗塞塔石碑，托勒密五世诏书\" class=\"headerlink\" title=\"罗塞塔石碑，托勒密五世诏书\"></a>罗塞塔石碑，托勒密五世诏书</h3><p>罗塞塔石碑本来并不是什么比较特别的石碑，只是托勒密五世加冕一周内纪念所制，但碑上同时使用了三种语言，分别是圣书体（埃及象形文字）、埃及草书（世俗体）和古希腊文，令后世学者可以做参考比对，通过古希腊文来解读圣书体，从而使这块石碑无比珍贵，也因此罗塞塔石碑在现代也被引申为「暗喻」、「翻译」和「关键线索」等的含义。</p>\n<p><img alt=\"罗塞塔石碑 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/2/23/Rosetta_Stone.JPG/410px-Rosetta_Stone.JPG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/2/23/Rosetta_Stone.JPG\"></p>\n<h3 id=\"艳后与凯撒\"><a href=\"#艳后与凯撒\" class=\"headerlink\" title=\"艳后与凯撒\"></a>艳后与凯撒</h3><p>克利奥帕特拉七世是托勒密王朝中第一个学会埃及语并接受埃及信仰和埃及神明的人，这是其他王室成员所拒绝的事（想想罗塞塔石碑还需要古希腊文书写）。她早年在就政治上活跃，应该算是被迫和托勒密十三世（同父异母弟弟）结婚以一同统治埃及。但之后两人发生冲突，艳后被迫流亡叙利亚，招兵买马打算反攻托勒密十三世。</p>\n<p>此时罗马内部也正在争斗，凯撒打败了庞培，后者被迫跑到埃及。而托勒密十三世可能希望寻求凯撒支持而擅自将凯撒老对手庞培暗杀了，在凯撒追到埃及时献上庞培的头颅。这可能令凯撒十分不满，因为庞培是他的劲敌、女婿，也是罗马执政官，不应该被异国人杀死。</p>\n<p>克利奥帕特拉七世可能看准了这个机会潜回埃及，并将自己献给凯撒，做他的情人，取得凯撒的支持。之后凯撒对埃及统治者的仲裁，是克利奥帕特拉七世上位。</p>\n<blockquote class=\"blockquote-center\"><p>传说当时克利奥帕特拉把自己伸直，用毯子卷起来包覆其中，命人抬着进入王宫，这时克利奥帕特拉年仅21岁，凯撒52岁。<br><em>维基百科</em></p>\n</blockquote>\n<p>托勒密十三世当然十分不满，率军围攻亚历山大城内罗马军。凯撒等到增援到来，脱围之后在尼罗河战役打败托勒密十三世，随后另立了托勒密十四世（仍旧是艳后的弟弟）和艳后结婚统治埃及。艳后虽然名义上嫁给托勒密十四世，但是实际上却和凯撒相好，还生了一个孩子托勒密·凯撒。</p>\n<p>BC46，艳后来到罗马，遭到罗马人民的厌恶，因为凯撒已婚，而她和凯撒关系暧昧。但凯撒不愧为独裁者，完全罔顾旁人，甚至为艳后制作黄金雕像，和罗马人先祖维纳斯神像一起摆放。在凯撒被刺后，艳后还留在罗马，可能是希望自己儿子继承凯撒。但是凯撒大概没有承认这个儿子，而是在遗嘱另立他的养子屋大维作为继承人。于是她回到埃及，毒死了托勒密十四世，与其儿子共同统治埃及。</p>\n<h3 id=\"艳后与安东尼\"><a href=\"#艳后与安东尼\" class=\"headerlink\" title=\"艳后与安东尼\"></a>艳后与安东尼</h3><p>安东尼是凯撒生前最重要的军队指挥官。凯撒被刺后，他和屋大维解决了反凯撒势力。之后在埃及传唤艳后的时候也应该是被迷住了，和她在 BC41 到 BC40 年度过了一段时光。接着安东尼离开了埃及，艳后不久后生下一男一女双胞胎，相信就是安东尼的儿女。</p>\n<p>安东尼和屋大维从 BC41 年开始就不和，因为安东尼妻子发起了和屋大维对抗的战争。虽然后来妻子突然身亡，安东尼也娶了屋大维的姐姐小屋大薇以维持稳定，但是两人仍然是竞争关系。安东尼把大量土地给予了艳后，屋大维利用这一点宣称其为外国女王而牺牲共和国权利。两人关系持续恶化，安东尼也冷落小屋大薇。之后对安息帝国的战争失利，安东尼回到埃及。BC36 年，艳后又为安东尼生下第二个儿子。</p>\n<p>BC34 年赢得对亚美尼亚的战争后，安东尼和艳后在大胜后的举动被屋大维大肆利用，煽动罗马对安东尼的不满，包括艳后以神的名义宣称自己和凯撒的儿子是万王之王，自己则是万王之女王，和安东尼的儿女则分别册封国王等。安东尼更公然向罗马宣称将包括打下亚美尼亚等一部分罗马行省赠予克利奥帕特拉七世。最冒犯屋大维的，是安东尼宣称艳后和凯撒的儿子托勒密·凯撒才应该是凯撒的继承人。</p>\n<p>屋大维借机行事向埃及女王宣战，在亚克兴角海战中打败安东尼。安东尼输掉海战的原因可能是因为海军在战事胶着时出现叛逃，安东尼和艳后逃回了埃及，陆军见势也投降屋大维了。</p>\n<p>屋大维乘胜追击到埃及，退无可退的安东尼误认为艳后已自杀，用剑刺自己，可能是被带到艳后藏身的坟墓才真正死去。艳后随后也被捕了。</p>\n<p>关于克利奥帕特拉七世的死法，无人知道。流传最广的版本是她让毒蛇咬自己而毒发身亡，也有观点认为他是被屋大维下令处死。</p>\n<p>她和凯撒的儿子托勒密·凯撒被屋大维处死，从此埃及成为了罗马帝国的行省，托勒密王朝终结，埃及的法老时代也终结了。</p>\n<p><img alt=\"丹达拉的哈索尔神庙 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/3/3c/Dendera_7_977.PNG/621px-Dendera_7_977.PNG\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/3/3c/Dendera_7_977.PNG\"></p>\n<p><img alt=\"哈索尔神庙墙上的克利奥帕特拉七世和她的儿子托勒密·凯撒 via 维基百科\" src=\"https://upload.wikimedia.org/wikipedia/commons/4/49/Denderah3_Cleopatra_Cesarion.jpg\" data-original=\"https://upload.wikimedia.org/wikipedia/commons/4/49/Denderah3_Cleopatra_Cesarion.jpg\"></p>\n<h2 id=\"罗马统治时期-gt-阿拉伯人入侵\"><a href=\"#罗马统治时期-gt-阿拉伯人入侵\" class=\"headerlink\" title=\"罗马统治时期 -&gt; 阿拉伯人入侵\"></a>罗马统治时期 -&gt; 阿拉伯人入侵</h2><p>作为罗马帝国行省的埃及，发生的事情属于罗马的历史了，这里不详述。只是 CE264 年的时候，反抗罗马的帕尔米拉女王季诺碧亚征服了埃及使其脱离罗马，并自称埃及女王，说她的家族可追溯到克利奥帕特拉七世。后来罗马也没有战胜她，只能是围城断粮逼其投降。</p>\n<p>埃及有一段时间曾被萨珊王朝所占领（CE621 - CE629），拜占庭（东罗马帝国）虽然重新夺回，但十年后阿拉伯帝国入侵的时候，已经无力抵抗，自此埃及伊斯兰化，埃及文明也不复存在。</p>\n<h2 id=\"古埃及神明\"><a href=\"#古埃及神明\" class=\"headerlink\" title=\"古埃及神明\"></a>古埃及神明</h2><p>古埃及是一个宗教特色很浓的国家，了解其神明系统有助于深入理解古埃及，不过没有兴趣也可不看。</p>\n<p>见 <a href=\"/learn-ancient-egyptian-gods-in-5-minutes\">古埃及神明</a> 一文。</p>\n<h2 id=\"一些小知识\"><a href=\"#一些小知识\" class=\"headerlink\" title=\"一些小知识\"></a>一些小知识</h2><p>法老的头冠分两部分，代表上埃及的白色王冠，代表下埃及的红色王冠，一般法老会戴着两个，诏示其为整个埃及的统治者。</p>\n<p>古埃及神话中的神明都是兄妹 / 姐弟结合，这可能造成了古埃及王室基本都是近亲结合。如果侧室的儿子登基法老，一般也要娶正室的女儿。统治者可能借此保持所谓的血统纯正。</p>\n<p>建造金字塔和神庙的大石头、花岗岩等，很多是从阿斯旺开凿的。</p>\n<h2 id=\"部分参考资料\"><a href=\"#部分参考资料\" class=\"headerlink\" title=\"部分参考资料\"></a>部分参考资料</h2><p><a href=\"https://www.bilibili.com/medialist/play/ml454556918\" target=\"_blank\" rel=\"noopener\">开放世界埃及篇</a><br><a href=\"https://zh.wikipedia.org/wiki/古埃及\" target=\"_blank\" rel=\"noopener\">古埃及 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/古埃及历史\" target=\"_blank\" rel=\"noopener\">古埃及历史 - 维基百科，自由的百科全书</a><br><a href=\"https://auntology.fandom.com/wiki/阿姨学、古埃及\" target=\"_blank\" rel=\"noopener\">阿姨学、古埃及 | 阿姨学词典 Wikia | FANDOM powered by Wikia</a><br><a href=\"https://en.wikipedia.org/wiki/History_of_ancient_Egypt\" target=\"_blank\" rel=\"noopener\">History of ancient Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Prehistoric_Egypt\" target=\"_blank\" rel=\"noopener\">Prehistoric Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Early_Dynastic_Period_%28Egypt%29\" target=\"_blank\" rel=\"noopener\">Early Dynastic Period (Egypt) - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Old_Kingdom_of_Egypt\" target=\"_blank\" rel=\"noopener\">Old Kingdom of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/First_Intermediate_Period_of_Egypt\" target=\"_blank\" rel=\"noopener\">First Intermediate Period of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Middle_Kingdom_of_Egypt\" target=\"_blank\" rel=\"noopener\">Middle Kingdom of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Second_Intermediate_Period_of_Egypt\" target=\"_blank\" rel=\"noopener\">Second Intermediate Period of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/New_Kingdom_of_Egypt\" target=\"_blank\" rel=\"noopener\">New Kingdom of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Third_Intermediate_Period_of_Egypt\" target=\"_blank\" rel=\"noopener\">Third Intermediate Period of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Late_Period_of_ancient_Egypt\" target=\"_blank\" rel=\"noopener\">Late Period of ancient Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Ptolemaic_Kingdom\" target=\"_blank\" rel=\"noopener\">Ptolemaic Kingdom - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Sasanian_Egypt\" target=\"_blank\" rel=\"noopener\">Sasanian Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/First_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">First Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Second_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Second Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Third_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Third Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Fourth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Fourth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Fifth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Fifth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Sixth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Sixth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Seventh_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Seventh Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Eighth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Eighth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Ninth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Ninth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Tenth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Tenth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Eleventh_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Eleventh Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Eleventh_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Eleventh Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twelfth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twelfth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Thirteenth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Thirteenth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Fourteenth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Fourteenth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Fifteenth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Fifteenth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Sixteenth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Sixteenth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Abydos_Dynasty\" target=\"_blank\" rel=\"noopener\">Abydos Dynasty - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Seventeenth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Seventeenth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Eighteenth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Eighteenth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Nineteenth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Nineteenth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twentieth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twentieth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twenty-first_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twenty-first Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twenty-second_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twenty-second Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twenty-third_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twenty-third Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twenty-fourth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twenty-fourth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twenty-fifth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twenty-fifth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twenty-sixth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twenty-sixth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twenty-eighth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twenty-eighth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Twenty-ninth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Twenty-ninth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Thirtieth_Dynasty_of_Egypt\" target=\"_blank\" rel=\"noopener\">Thirtieth Dynasty of Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Argead_dynasty\" target=\"_blank\" rel=\"noopener\">Argead dynasty - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Ptolemaic_Kingdom\" target=\"_blank\" rel=\"noopener\">Ptolemaic Kingdom - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Valley_of_the_Kings\" target=\"_blank\" rel=\"noopener\">Valley of the Kings - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Giza_pyramid_complex\" target=\"_blank\" rel=\"noopener\">Giza pyramid complex - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Histories_%28Herodotus%29\" target=\"_blank\" rel=\"noopener\">Histories (Herodotus) - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Assyria\" target=\"_blank\" rel=\"noopener\">Assyria - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Kingdom_of_Kush\" target=\"_blank\" rel=\"noopener\">Kingdom of Kush - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Hyksos\" target=\"_blank\" rel=\"noopener\">Hyksos - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Ramesseum\" target=\"_blank\" rel=\"noopener\">Ramesseum - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Ancient_Near_East\" target=\"_blank\" rel=\"noopener\">Ancient Near East - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Abu_Simbel_temples\" target=\"_blank\" rel=\"noopener\">Abu Simbel temples - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Egyptian%E2%80%93Hittite_peace_treaty\" target=\"_blank\" rel=\"noopener\">Egyptian–Hittite peace treaty - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Battle_of_Kadesh\" target=\"_blank\" rel=\"noopener\">Battle of Kadesh - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Abydos_King_List\" target=\"_blank\" rel=\"noopener\">Abydos King List - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Abydos,_Egypt\" target=\"_blank\" rel=\"noopener\">Abydos, Egypt - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Canaan\" target=\"_blank\" rel=\"noopener\">Canaan - Wikipedia</a><br><a href=\"https://en.wikipedia.org/wiki/Karnak\" target=\"_blank\" rel=\"noopener\">Karnak - Wikipedia</a><br><a href=\"https://zh.wikipedia.org/wiki/早王朝时期\" target=\"_blank\" rel=\"noopener\">早王朝时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/古王国时期\" target=\"_blank\" rel=\"noopener\">古王国时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/第一中间时期\" target=\"_blank\" rel=\"noopener\">第一中间时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/中王国时期\" target=\"_blank\" rel=\"noopener\">中王国时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/第二中间时期\" target=\"_blank\" rel=\"noopener\">第二中间时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/新王国时期\" target=\"_blank\" rel=\"noopener\">新王国时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/第三中间时期\" target=\"_blank\" rel=\"noopener\">第三中间时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/古埃及晚期\" target=\"_blank\" rel=\"noopener\">古埃及晚期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/阿契美尼德王朝\" target=\"_blank\" rel=\"noopener\">阿契美尼德王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/托勒密时王朝\" target=\"_blank\" rel=\"noopener\">托勒密时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及_%28羅馬帝國行省%29\" target=\"_blank\" rel=\"noopener\">罗马及拜占庭时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/萨珊王朝\" target=\"_blank\" rel=\"noopener\">萨珊时期 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第一王朝\" target=\"_blank\" rel=\"noopener\">埃及第一王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二王朝\" target=\"_blank\" rel=\"noopener\">埃及第二王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第三王朝\" target=\"_blank\" rel=\"noopener\">埃及第三王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第四王朝\" target=\"_blank\" rel=\"noopener\">埃及第四王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第五王朝\" target=\"_blank\" rel=\"noopener\">埃及第五王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第六王朝\" target=\"_blank\" rel=\"noopener\">埃及第六王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第七王朝\" target=\"_blank\" rel=\"noopener\">埃及第七王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十一王朝\" target=\"_blank\" rel=\"noopener\">埃及第十一王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十二王朝\" target=\"_blank\" rel=\"noopener\">埃及第十二王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十三王朝\" target=\"_blank\" rel=\"noopener\">埃及第十三王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十四王朝\" target=\"_blank\" rel=\"noopener\">埃及第十四王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十五王朝\" target=\"_blank\" rel=\"noopener\">埃及第十五王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十六王朝\" target=\"_blank\" rel=\"noopener\">埃及第十六王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十七王朝\" target=\"_blank\" rel=\"noopener\">埃及第十七王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十八王朝\" target=\"_blank\" rel=\"noopener\">埃及第十八王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第十九王朝\" target=\"_blank\" rel=\"noopener\">埃及第十九王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十一王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十一王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十二王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十二王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十三王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十三王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十四王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十四王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十五王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十五王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十六王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十六王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十七王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十七王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十八王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十八王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第二十九王朝\" target=\"_blank\" rel=\"noopener\">埃及第二十九王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第三十王朝\" target=\"_blank\" rel=\"noopener\">埃及第三十王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及第三十一王朝\" target=\"_blank\" rel=\"noopener\">埃及第三十一王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/古希腊\" target=\"_blank\" rel=\"noopener\">古希腊 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/馬其頓王國\" target=\"_blank\" rel=\"noopener\">馬其頓王國 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/托勒密王朝\" target=\"_blank\" rel=\"noopener\">托勒密王朝 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/波斯\" target=\"_blank\" rel=\"noopener\">波斯 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/帝王谷\" target=\"_blank\" rel=\"noopener\">帝王谷 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/吉萨金字塔群\" target=\"_blank\" rel=\"noopener\">吉萨金字塔群 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/吉萨金字塔群/历史_%28希罗多德%29\" target=\"_blank\" rel=\"noopener\">历史 (希罗多德) - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/亚述\" target=\"_blank\" rel=\"noopener\">亚述 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/库施\" target=\"_blank\" rel=\"noopener\">库施 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/喜克索斯人\" target=\"_blank\" rel=\"noopener\">喜克索斯人 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/拉美西姆\" target=\"_blank\" rel=\"noopener\">拉美西姆 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/古代近东\" target=\"_blank\" rel=\"noopener\">古代近东 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/阿布辛贝勒神庙\" target=\"_blank\" rel=\"noopener\">阿布辛贝勒神庙 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/埃及赫梯和约\" target=\"_blank\" rel=\"noopener\">埃及赫梯和约 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/卡迭石战役\" target=\"_blank\" rel=\"noopener\">卡迭石战役 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/阿拜多斯王表\" target=\"_blank\" rel=\"noopener\">阿拜多斯王表 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/阿拜多斯\" target=\"_blank\" rel=\"noopener\">阿拜多斯 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/迦南\" target=\"_blank\" rel=\"noopener\">迦南 - 维基百科，自由的百科全书</a><br><a href=\"https://zh.wikipedia.org/wiki/卡纳克神庙\" target=\"_blank\" rel=\"noopener\">卡纳克神庙 - 维基百科，自由的百科全书</a></p>\n<h2 id=\"修订记录\"><a href=\"#修订记录\" class=\"headerlink\" title=\"修订记录\"></a>修订记录</h2><h3 id=\"2019-05-15\"><a href=\"#2019-05-15\" class=\"headerlink\" title=\"2019.05.15\"></a>2019.05.15</h3><ul>\n<li>搜集材料</li>\n<li>完成文章结构</li>\n</ul>\n<h3 id=\"2019-05-20\"><a href=\"#2019-05-20\" class=\"headerlink\" title=\"2019.05.20\"></a>2019.05.20</h3><ul>\n<li>完成初稿</li>\n</ul>\n<h3 id=\"2019-05-21\"><a href=\"#2019-05-21\" class=\"headerlink\" title=\"2019.05.21\"></a>2019.05.21</h3><ul>\n<li>新增缩略图</li>\n<li>整体润色</li>\n</ul>\n<h3 id=\"2019-05-22\"><a href=\"#2019-05-22\" class=\"headerlink\" title=\"2019.05.22\"></a>2019.05.22</h3><ul>\n<li>整理参考资料</li>\n<li>增补早期王朝的内容</li>\n</ul>\n<h3 id=\"2019-05-23\"><a href=\"#2019-05-23\" class=\"headerlink\" title=\"2019.05.23\"></a>2019.05.23</h3><ul>\n<li>新增「古埃及神明」一节</li>\n</ul>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"https://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Ancient_Egypt_map-en.svg/293px-Ancient_Egypt_map-en.svg.png","popularPost_tmp_gaData":{"updated":"Fri May 24 2019 12:51:26 GMT+0800 (China Standard Time)","title":"30 分钟速成古埃及历史","path":"learn-ancient-egyptian-history-in-30-minutes/","eyeCatchImage":"https://upload.wikimedia.org/wikipedia/commons/thumb/1/17/Ancient_Egypt_map-en.svg/293px-Ancient_Egypt_map-en.svg.png","excerpt":null,"date":"2019-05-15T12:46:26.449Z","pv":0,"totalPV":0,"categories":"知识 > 古埃及","tags":["ancient-egypt","history"],"internalLinks":["learn-ancient-egyptian-gods-in-5-minutes"],"keywords":[],"keywordsLength":0},"length":14780},{"title":"[译]使用 AngularJS 编写 2048 游戏","id":"18","updated":"2014-06-11T06:13:25.000Z","date":"2014-05-29T04:58:14.000Z","_content":"\n> 原文[http://www.ng-newsletter.com/posts/building-2048-in-angularjs.html](http://www.ng-newsletter.com/posts/building-2048-in-angularjs.html)，所有版权属于原文。考虑到排版和图片，内容稍有修改，对文章表达的意思并无太大影响。第一次渣翻长文，求翻译大大们拍砖和调教。\n\n我们最近经常被问到的其中一个问题是作为一个框架，Angular 在什么情况下使用并不太适合。我们的标准答案通常是编写游戏的时候，因为 Angular 有它自己的事件处理循环（$digest 循环）而游戏通常要求非常多的底层 DOM 操作。其实这个答案并不准确因为 Angular 其实是能支持多数游戏的编写的。即使要求大量的 DOM 操作的游戏，Angular 也能胜任其静态部分，例如高分记录和游戏菜单。\n\n如果你是像我那样的人（同时是个技术人），你有可能会喜欢玩那个流行的 [2048](http://gabrielecirulli.github.io/2048) 游戏。游戏的目标是通过合并相同数值的方块来得到数值是 2048 的方块。\n\n![Injection](http://www.ng-newsletter.com/images/2048/game.gif)\n\n[在 HackerNews 上讨论](https://news.ycombinator.com/item?id=7554348)\n\n在今天的博文中，我们准备使用 AngularJS 来仿制这个游戏，而且是从头到尾完整地解释整个 app 的编写流程。这个 app 是一个相当复杂的应用，我们也希望利用这篇博文来展示如何编写复杂的 AngularJS 应用。\n\n此 Angular 版应用的[demo](http://d.pr/SnWD)。\n\n来让我们开始吧！\n\n> TL;DR: 本应用的完整源代码都能在文章底部的 github 链接里面找到。\n\n## 目录\n\n1. [计划](#planning)\n1. [模块结构](#modular)\n1. [GameController](#game-controller)\n1. [测试，测试，测试](#tdd)\n1. [建造游戏网格](#build-grid)\n1. [SCSS 来救援](#scss)\n1. [Tile 指令](#the-tile-directive)\n1. [游戏棋盘](#starting-the-game)\n1. [网格理论](#grid-theory)\n1. [玩法（键盘）](#keyboard)\n1. [按下开始按钮之时](#start-button)\n1. [游戏循环](#game-loop)\n1. [计算得分](#keeping-score)\n1. [游戏结束和获胜界面](#game-over)\n1. [动画](#running-the-animation)\n1. [自定义](#customizing-size)\n1. [演示](#demo)\n\n<a name=\"planning\"></a>\n## 第一步：计划\n\n![Minification](http://www.ng-newsletter.com/images/2048/3d-board.png)\n\n我们首先想做的是对将要编写的应用进行高层次设计。如果是仿制一个应用或是从零开始，我们都会这样做，不论应用有多大。\n\n审视一下，我们可以看到游戏是有一块游戏棋盘，上面有一些方块。每一个方块的位置就是数值方块的位置。我们可以利用这一个事实，使用 CSS3 而不是 javascript 来摆放方块，后者需要知道方块摆放的位置。当摆放方块的时候，我们只需要保证方块覆盖在合适的位置上就可以了。\n\nCSS3 的使用让我们不但能够免于在 CSS 上搞动画的工作，而且能使用标准的 AngularJS 行为（译者注：AngularJS behavior）来跟踪游戏棋盘、方块和游戏逻辑的状态。\n\n因为我们只有一个页面，所以只需要一个 controller 来管理页面。\n\n既然在应用的运行期间只有一个游戏棋盘，我们就另外创建单一一个 `GridService` 的 service 实例来保存所有的网格逻辑。service 都是单例对象，适合用来存储网格。我们会使用 `GridService` 来放置和移动方块、寻找可供移动的位置和管理网格。\n\n我们将游戏的逻辑和运行存储在另外一个叫 `GameManager` 的 service 中。`GameManager` 负责管理游戏状态、处理移动和维护得分（包括当前得分和最高得分）。\n\n最后，还需要一个组件来控制键盘。我们将使用一个名为 `KeyboardService` 的 service（只需要一个键盘动作的处理）。我们会在这篇文章中实现桌面版的处理，然而我们也可以重用同一个 service 来处理触屏动作使其能在移动设备上使用。\n\n### 开始编写应用\n\n要开始编写，我们先创建一个基本的应用（我们使用[yeoman](http://yeoman.io) angular generator 来生成应用的结构，但这是非必要的。我们只是将其作为一个起始点，但很快就会做出分支）。我们新建一个包含整个应用的目录，然后再在 `app/` 目录旁边建一个 `test/` 目录。\n\n![Minification](http://www.ng-newsletter.com/images/2048/directory_structure.png)\n\n> 以下使用 yeamon tool 来构建项目的指南。如果你更喜欢自己动手，可以跳过依赖安装直接进入下一章节。\n\n我们要先保证安装了 `yeamon` 才能在项目中使用。Yeamon 依赖 NodeJS 和 npm。NodeJS 的安装并不在本文叙述的范围内但是在 [NodeJS.org](http://nodejs.org) 上有一个很好的指南。\n\n在 `npm` 安装完后，我们就能安装 yeamon tool，`yo`，和 angular generator（`yo` 会使用这个生成器来生成我们的 Angular 应用）：\n\n```bash\n$ npm install -g yo\n$ npm install -g generator-angular\n```\n\n安装完之后，就可以使用 yeamon tool 来创建应用了，按照下面的来：\n\n```bash\n$ cd ~/Development && mkdir 2048\n$ yo angular twentyfourtyeight\n```\n\n工具会问你一些问题，一律答 yes，除了只选 `angular-cookies` 作为依赖，因为我们不需要除了缺省以外的依赖。\n\n> 注意使用 Angular generator 会要求你安装 ruby 环境、gem 和 compass。文章下面给出的完整代码中会介绍如何避免使用 ruby 和 compass。\n\n#### 我们的 angular 模块\n\n新建 `scripts/app.js` 文件来控制我们的应用。来，开始编写吧：\n\n```javascript\nangular.module('twentyfourtyeightApp', [])\n```\n\n<a name=\"modular\"></a>\n## 模块结构\n\n现在比较推荐的 Angular 应用结构是根据功能来构建而不是类型。也就是说，不是以 controllers（译者注：控制器）、services、directives 等来分离我们的组件而是以功能来定义模块结构。例如在我们的应用中，定义了一个 `Game` 模块和 `Keyboard` 模块。\n\n![Minification](http://www.ng-newsletter.com/images/2048/scripts_dir.png)\n\n这样的模块结构让我们能够清晰分离出跟文件结构相匹配的职责。这样做既能帮助我们构建大型的复杂的 angular 应用，也能让功能在不同的应用间共享。\n\n之后我们将会建立起匹配文件和目录结构的测试环境。\n\n#### 视图\n\n在我们的项目中，从视图开始编写是最容易的。审视一下，要做的视图 / 模板只有一个。我们不需要多个视图，所以只需要一个 `<div>` 元素来包含应用中的所有内容。\n\n在我们的的 `app/index.html` 文件中，我们需要包含所有的依赖（包括 `angular.js` 自身和自己编写的 javascript 文件——现在就只有 `scripts/app.js`），就像下面的：\n\n```markup\n<!-- index.html -->\n<doctype html>\n<html>\n  <head>\n    <title>2048</title>\n    <link rel=\"stylesheet\" href=\"styles/main.css\">\n  </head>\n  <body ng-app=\"twentyfourtyeightApp\"\n    <!-- header -->\n    <div class=\"container\" ng-include=\"'views/main.html'\"></div>\n    <!-- script tags -->\n    <script src=\"bower_components/angular/angular.js\"></script>\n    <script src=\"scripts/app.js\"></script>\n  </body>\n</html>\n```\n\n> 你完全可以编写更复杂的多视图游戏——如果你这样打算的话请在下面留言，我们非常期待你的表现。\n\n现在 `app/index.html` 文件做好了，我们只需要在 `app/views/main.html` 中继续细节化应用层面的视图就可以了。当我们需要在应用中引入新资源的时候就只需要修改 `index.html` 了。\n\n赶快打开 `app/views/main.html`，所有的游戏相关的视图都放在此。通过使用 `controllerAs` 语法，控制器就可以显式暴露在任何需要在 `$scope` 中找数据和查询控制器对应组件的地方。\n\n```markup\n<!-- app/views/main.html -->\n<div id=\"content\" ng-controller='GameController as ctrl'>\n  <!-- Now the variable: ctrl refers to the GameController -->\n</div>\n```\n\n> `controllerAs` 语法是 1.2 版本提供的比较新的语法。当要在页面处理多个控制器的时候非常有用，因为这样就能指定包含我们需要的功能和数据的控制器。\n\n在视图中，我们想至少要显示如下几个东西：\n\n1. 游戏的静态标题\n2. 当前的游戏得分和本地用户最高的得分\n3. 游戏棋盘\n\n游戏的静态标题可以像下面那么简单：\n\n```markup\n<!-- heading inside app/views/main.html -->\n<div id=\"content\" ng-controller='GameController as ctrl'>\n  <div id=\"heading\" class=\"row\">\n    <h1 class=\"title\">ng-2048</h1>\n    <div class=\"scores-container\">\n      <div class=\"score-container\">{{ ctrl.game.currentScore }}</div>\n      <div class=\"best-container\">{{ ctrl.game.highScore }}</div>\n    </div>\n  </div>\n  <!-- ... -->\n</div>\n```\n\n注意在引用 `currentScore` 和 `highScore` 的时候我们也在视图中引用了 `GameController`。`controllerAs` 语法让我们能显式地引用自己感兴趣的控制器。\n\n<a name=\"game-controller\"></a>\n## 控制器 GameController\n\n现在既然已经有了一个合理的项目结构，我们赶快来创建一个 `GmaeController` 来控制会在视图上显示的数据。在 `app/scripts/app.js` 中，我们可以在主要模块 `twentyfourtyeightApp` 里创建这个控制器。\n\n```javascript\nangular\n.module('twentyfourtyeightApp', [])\n.controller('GameController', function() {\n});\n```\n\n在视图中，我们已经引用了一个 `game` 对象，此对象会在 `GameController` 中进行设置。`game` 对象引用的是主 * 游戏对象 *。我们会在另外一个新的模块中创建这个主游戏对象，新的模块也会保存游戏中的所有引用。\n\n现在还没有创建这个模块，应用不会在浏览器中载入。而在控制器里面，我们可以加上对 `GameManager` 的依赖：\n\n```javascript\n.controller('GameController', function(GameManager) {\n  this.game = GameManager;\n});\n```\n\n记住，我们正在做的是为应用中不同的部分创建模块级别的依赖，所以为了能在我们的应用中加载这些模块，需要在我们 Angular 模块中作为依赖来列出。将 `Game` 作为 `twentyfourtyeightApp` 的依赖，要在我们定义模块的地方的数组中列出。\n\n完整的 `app/scripts/app.js` 文件看起来应该像下面那样：\n\n```javascript\nangular\n.module('twentyfourtyeightApp', ['Game'])\n.controller('GameController', function(GameManager) {\n  this.game = GameManager;\n});\n```\n\n### The Game\n\n现在已经将部分数据绑定到视图上（译者注：原文 Now that we have the view partially hooked up to the view，或有误），我们可以开始编写游戏的逻辑了。在 `app/scripts/` 目录下新建 `app/scripts/game/game.js` 中创建游戏模块：\n\n```javascript\nangular.module('Game', []);\n```\n\n> 当创建模块的时候，我们通常将其放在以模块命名的目录内，而以模块命名的文件来完成初始化工作。比如，我们正在写一个游戏 (译者注：game) 模块，于是我们在 `app/scripts/game` 目录下的 `game.js` 中编写。这个方法在生产环境下被认为是可扩展的和合理的。\n\n`Game` 模块会提供唯一的核心组件：`GameManager`。\n\n我们编写的 `GameManager` 模块要做到：维持游戏的状态和玩家能做出的移动，维护得分、判断游戏结束和搞清楚是玩家赢了还是输了。\n\n当在编写应用的时候，我们通常将已知需要的方法写成桩方法，为这些方法写测试然后再填内容。\n\n> 为了文章起见，我们在这个模块里会走一遍这个流程。当继续写剩下的模块的时候，我们则只会涉及到应该测试的核心组件。\n\n我们知道到现在为止 `GameManager` 中会提供的几个 * 已知的 * 功能：\n\n1. 创建一个新的游戏\n2. 处理游戏循环 / 移动操作\n3. 更新得分\n4. 跟踪游戏的进行情况\n\n记住这几个功能，我们就能勾勒出 `GameManager` 服务的基本轮廓以供测试：\n\n```javascript\nangular.module('Game', [])\n.service('GameManager', function() {\n  // Create a new game\n  this.newGame = function() {};\n  // Handle the move action\n  this.move = function() {};\n  // Update the score\n  this.updateScore = function(newScore) {};\n  // Are there moves left?\n  this.movesAvailable = function() {};\n});\n```\n\n完成了基本的功能性函数之后，先挪一下，去写测试来决定在 `GameManager` 中 * 已知的 * 需要支持的函数中空白部分的内容。\n\n<a name=\"tdd\"></a>\n## 测试驱动开发（TDD）\n\n在开始实施测试前，我们需要配置好 karma 来驱动我们的测试。如果你对 karma 并不熟悉，就只需要了解到它是一个测试运行器，能让我们舒服而高效地在控制台和代码中自动化操作前端测试。\n\n![Running karma](http://www.ng-newsletter.com/images/2048/running_karma.png)\n\nKarma 作为一个 npm 包，依赖于 NodeJS。运行命令行来安装：\n\n```bash\n$ npm install -g karma\n```\n\n> 参数 `-g` 告诉 npm 这个包作为全局模块来安装。没有这个参数，包将只会安装到本地的工作目录上。\n\n如果你是通过 yeoman angular 生成器来构建应用的话可以跳过以下的部分。\n\n要使用 karma，需要一个配置文件。虽然我们这里不会深入叙述如何配置 Karma（在 [ng-book](https://www.ng-book.com) 中查看详细的 karma 配置选项），但是过程中决定性的部分就是让 Karma 载入所有我们想要测试的文件。\n\n我们可以使用 `karma init` 命令来生成一个基本的配置文件：\n\n```bash\n$ karma init karma.conf.js\n```\n\n命令会问几个问题然后生成 `karma.conf.js`。这里我们修改一下其中两个选项：`files` 数组和打开 `autoWatch`：\n\n```javascript\n  // ...\n  files: [\n    'app/bower_components/angular/angular.js',\n    'app/bower_components/angular-mocks/angular-mocks.js',\n    'app/bower_components/angular-cookies/angular-cookies.js',\n    'app/scripts/**/*.js',\n    'test/unit/**/*.js'\n  ],\n  autoWatch: true,\n  // ...\n```\n\n一旦写好了配置文件，任何时候我们保存文件都可以运行测试了（测试文件在 `test/unit/` 目录内）。\n\n我们像如下那样执行命令 `karma start` 来运行测试：\n\n```bash\n$ karma start karma.conf.js\n```\n\n### 编写第一个测试\n\nkarma 已经配置好了，可以写对 `GameManager` 的基本测试了。然而我们还并不清楚应用的整个功能，所以暂时只能写有限的测试。\n\n> 在编写应用的时候我们经常发现 API 需要修改，所以与其在变化前投入大量时间，不如建立好对基本功能的测试然后在深入测试中找到最终的 API。\n\n用是否有可能的移动来作为第一个写的测试是个好选择。简单地编写几个我们已知需要的返回真 / 假的调用，来测试我们应用的逻辑行为。\n\n创建 `test/unit/game/game_spec.js` 文件然后开始填入内容：\n\n```javascript\ndescribe('Game module', function() {\n  describe('GameManager', function() {\n    // Inject the Game module into this test\n    beforeEach(module('Game'));\n\n    // Our tests will go below here\n  });\n});\n```\n\n> 在这个测试中我们使用 [Jasmine](http://jasmine.github.io/2.0/introduction.html) 语法。\n\n跟其他单元测试一样，我们需要创建一个 `GameManager` 对象的实例。我们可以使用普通的语法（测试服务的时候）将它注入到测试中。\n\n```javascript\n  // ...\n  // Inject the Game module into this test\n  beforeEach(module('Game'));\n\n  var gameManager; // instance of the GameManager\n  beforeEach(inject(function(GameManager) {\n    gameManager = GameManager;\n  });\n\n  // ...\n```\n\n有了这个 `gameManager` 实例，就可以建立对函数 `movesAvailable()` 的期望值。\n\n我们定义的 `movesAvailable()` 函数是用来检测是否有空格剩余和是否有方块可以合并。另外这个结果跟游戏是否结束是有关联的，我们会将这个方法放进 `GameManager` 中，但是在之后创建的 `GridService` 中才实现大多数的复杂细节。\n\n棋盘上要有剩余可走的地方，必须满足以下两个条件：\n\n1. 棋盘上有空余空格\n2. 方块可以合并\n\n弄清楚了这两个条件，我们就可以写出测试来看看是否符合。\n\n基本的思路就是我们写出的单元测试对于设定的条件要能作可观察到的反应。然后因为要依赖 `GridService` 来反映游戏的状态，所以需要模拟出这个条件来保证在 `GameManager` 中的逻辑是正确的。\n\n#### 模拟 `GridService`\n\n要模拟 `GridService`，我们只需要简单地 * 重写 * 缺省的 Angular 行为，替换 * 真正的 * 服务为我们模拟出来的服务，然后就可以在模拟的服务中建立可控制条件。\n\n详细一点说就是，我们简单地创建一个拥有模拟方法的假对象然后通过在 `$provide` 中换上来骗 Angular 说这个假对象是 * 真 * 对象。\n\n```javascript\n  // ...\n  var _gridService;\n  beforeEach(module(function($provide) {\n    _gridService = {\n      anyCellsAvailable: angular.noop,\n      tileMatchesAvailable: angular.noop\n    };\n\n    // Switch out the real GridService for our\n    // fake version\n    $provide.value('GridService', _gridService);\n  }));\n  // ...\n```\n\n现在我们就可以用 `_gridService` 这个假对象实例来建立条件了。\n\n我们希望当有单元格剩余的时候函数 `movesAvailable()` 返回 true。在 `GridService` 中模拟一个 `anyCellsAvailable()` 函数（其实还没写）。我们期望这个在 `GridService` 的函数能告诉我们还有剩余的单元格。\n\n```javascript\n// ...\ndescribe('.movesAvailable', function() {\n  it('should report true if there are cells available', function() {\n    spyOn(_gridService, 'anyCellsAvailable').andReturn(true);\n    expect(gameManager.movesAvailable()).toBeTruthy();\n  });\n  // ...\n```\n\n现在基础工作已经做好了，我们可以接着建立第二个条件了。如果方块可以合并，那么我们希望 `movesAvailable()` 保证会返回 true。相反的情况也是返回 true 因为既没有单元格空余也没有可合并的方块才是没有步数可走。\n\n另外两个保证这个结果的测试是：\n\n```javascript\n// ...\nit('should report true if there are matches available', function() {\n  spyOn(_gridService, 'anyCellsAvailable').andReturn(false);\n  spyOn(_gridService, 'tileMatchesAvailable').andReturn(true);\n  expect(gameManager.movesAvailable()).toBeTruthy();\n});\nit('should report false if there are no cells nor matches available', function() {\n  spyOn(_gridService, 'anyCellsAvailable').andReturn(false);\n  spyOn(_gridService, 'tileMatchesAvailable').andReturn(false);\n  expect(gameManager.movesAvailable()).toBeFalsy();\n});\n// ...\n```\n\n将基础工作搞好，我们也好在实现真正函数前写好测试。\n\n> 虽然考虑到整个文章的整体性我们不会再在文章中使用 TDD，但是我们建议你应该始终使用 TDD。可以在下面的完整代码中查看更多的测试代码。\n\n## 回到 GameManager\n\n现在我们的任务就是实现函数 `movesAvailable()`。然而我们已经确认了代码可行性__和__要求的条件，实现起来实在简单。\n\n```javascript\n  // ...\n  this.movesAvailable = function() {\n    return GridService.anyCellsAvailable() ||\n            GridService.tileMatchesAvailable();\n  };\n  // ...\n```\n\n<a name=\"build-grid\"></a>\n## 建造游戏网格\n\n到现在为止我们已经让 `GameManager` 运行起来了，然后就是要创建 `GridService` 来处理在棋盘中的所有状况。\n\n回忆一下我们的想法：在 `GridService` 中使用两个本地数组变量，基本数组 `grid` 和基本数组 `tiles`。在 `app/scripts/grid/grid.js` 文件中写服务：\n\n```javascript\nangular.module('Grid', [])\n.service('GridService', function() {\n  this.grid   = [];\n  this.tiles  = [];\n  // Size of the board\n  this.size   = 4;\n  // ...\n});\n```\n\n当开始一个新的游戏的时候，我们需要清空这些数组。而因为 `grid` 数组只是用来放方块的 DOM 元素组成的。\n\n然而数组 `tiles` 则是动态的，它会跟踪游戏过程中的当前的方块。使用游戏中不同的状态之前，先在页面上建造好网格先吧，这样我们也好看看大概样子是怎么样。\n\n回到 `app/views/main.html`，我们开始设计网格。因为网格是动态而又带有我们给它写的逻辑，所以只有就其放在其指令（译者注：directive）中才合乎逻辑。使用指令可以让主要的模板保持简洁，同样也能将功能封装在指令中而让主要的控制器保持简洁。\n\n在 `app/index.html` 中我们将网格指令添加上然后在控制器中传递给 `GameManager` 实例。\n\n```markup\n  <!-- instructions -->\n  <div id=\"game-container\">\n    <div grid ng-model='ctrl.game' class=\"row\"></div>\n    <!-- ... -->\n```\n\n我们是在 `Grid` 模块里写这个指令的，所以在 `app/scripts/grid/` 目录下，新建一个 `grid_directive.js` 文件来安放我们的 `grid` 指令。\n\n在 `grid` 指令里面，我们只需要少量变量因为它需要封装视图，能做的事情不多。\n\n指令会需要持有 `GameManager` 的实例（或者至少是一个有 `grid` 和 `tiles` 数组的模型），所以将其设置为指令的依赖。另外，不希望指令由于页面上的其它内容或者 GameManager 自身的原因瘫痪，所以我们创建了隔离作用域。\n\n> 查看我们写的 [自定义指令](http://www.ng-newsletter.com/posts/directives.html) 来更加深入指令的编写，或者查看 [ng-book](https://www.ng-book.com) 中有关指令的细节。\n\n```javascript\nangular.module('Grid')\n.directive('grid', function() {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    scope: {\n      ngModel: '='\n    },\n    templateUrl: 'scripts/grid/grid.html'\n  };\n});\n```\n\n这个指令的主要功能是构建网格视图，所以我们不需要写任何自定义逻辑。\n\n### grid.html\n\n在指令的模板里面，我们会运行两个 `ngRepeat` 来显示网格和方块数组，还会（暂时）在循环中使用 `$index` 来跟踪。\n\n```markup\n<div id=\"game\">\n  <div class=\"grid-container\">\n    <div class=\"grid-cell\"\n      ng-repeat=\"cell in ngModel.grid track by $index\">\n      </div>\n  </div>\n  <div class=\"tile-container\">\n    <div tile\n      ng-model='tile'\n      ng-repeat='tile in ngModel.tiles track by $index'>\n    </div>\n</div>\n</div>\n```\n\n第一个 `ng-repeat` 简单易懂，就是遍历了 grid 数组然后生成了 class 属性是 `grid-cell` 的单个空 div 元素。\n\n在第二个 `ng-repeat` 中，我们会为每一个显示的元素生成一个名为 `tile` 的指令。这个 `tile` 指令会负责生成每一个方格元素的样子。我们很快就会去编写 `tile` 指令……\n\n精明的读者可能会发现我们只适用一维数组来显示二维网格。当我们渲染视图的时候，我们只会得到一列“方格”，而不是一个网格。\n\n要将它弄成网格，我们来深入 CSS 的编写。\n\n<a name=\"scss\"></a>\n## 开始 SCSS\n\n在这个项目中，我们会使用 SASS 的一个变种：scss。scss 除了是一个更强大的 CSS 外，还能动态地生成 CSS。\n\n应用所有显示的元素的主要部分会使用 CSS 来完成，包括动画、布局和可视元素（方格的颜色等）。\n\n要创建二维的棋盘，我们会用到 CSS3 关键字：`transform` 来处理每一个特定的方格的位置。\n\n### CSS3 transform 属性\n\nCSS3 transform 属性是一个可以让我们对元素进行 2D 或者 3D 上的移动、扭曲、旋转、缩放等操作（支持动画）的属性。用上了此属性，就可以直接将方块放在棋盘上然后剩下就只是应用合适的 `transform` 属性的事了。\n\n例如，在下面的演示中，我们有一个宽 40px 高 40px 的盒子。\n\n<div style=\"margin:40px;padding:40px 0;border-bottom:1px solid #333;\">\n  <div style=\"width:40px;height:40px;background-color:blue;\"></div>\n</div>\n\n```css\n.box {\n  width:40px;\n  height:40px;\n  background-color: blue;\n}\n```\n\n如果我们应用一个 `translateX(300px)` 的 `transform` 属性，就可以将盒子向右移动了 300px，就像下面所展示的：\n\n<div style=\"margin:40px;padding:40px 0;border-bottom:1px solid #333;\">\n  <div style=\"width:40px;height:40px;background-color:blue;-webkit-transform:translateX(300px);transform:translateX(300px);\"></div>\n</div>\n\n```css\n.box.transformed {\n  -webkit-transform: translateX(300px);\n  transform: translateX(300px);\n}\n```\n\n使用 translate 属性，我们只需应用 CSS 类就可以在棋盘上随便移动方块了。现在，精妙之处在于页面是多变的，我们如何能将类写得足够动态可以对应到网格上的正确位置。\n\n这里就是 SCSS 大显身手的地方了。我们会创建几个变量（例如一行有多少个方格）然后在 SCSS 中结合数学来帮助我们计算。\n\n来看一下计算棋盘上正确位置需要的变量：\n\n```css\n$width: 400px;          // The width of the whole board\n$tile-count: 4;         // The number of tiles per row/column\n$tile-padding: 15px;    // The padding between tiles\n```\n\n让 SCSS 用这些变量帮我们动态计算位置。首先算出每一个方格的大小。在 SCSS 中非常简单：\n\n```css\n$tile-size: ($width - $tile-padding * ($tile-count + 1)) / $tile-count;\n```\n\n现在我们就可以使用适当的宽和高来建立那个 `#game` 容器了。同时 `#game` 容器也会被设置成位置参照，它的子元素将会使用绝对定位。我们将 `.grid-container` 和 `tile-container` 放在 `#game` 容器内。\n\n我们这里只展示跟 scss 有关的部分。剩下的代码可以在文章末尾的 github 地址上找到。\n\n```css\n#game {\n  position: relative;\n  width: $width;\n  height: $width; // The gameboard is a square\n\n  .grid-container {\n    position: absolute;   // the grid is absolutely positioned\n    z-index: 1;           // IMPORTANT to set the z-index for layering\n    margin: 0 auto;       // center\n\n    .grid-cell {\n      width: $tile-size;              // set the cell width\n      height: $tile-size;             // set the cell height\n      margin-bottom: $tile-padding;   // the padding between lower cells\n      margin-right: $tile-padding;    // the padding between the right cell\n      // ...\n    }\n  }\n  .tile-container {\n    position: absolute;\n    z-index: 2;\n\n    .tile {\n      width: $tile-size;        // tile width\n      height: $tile-size;       // tile height\n      // ...\n    }\n  }\n}\n```\n\n注意为了让 `.tile-container` 放在 `.grid-container` 前面，我们__必须__要为 `.tile-container` 更高的 `z-index` 值。如果没有设置 `z-index` 值，浏览器会将两个元素放在同等高度，就不好看了。\n\n做好这一步之后，现在我们来动态生成方块的位置。我们需要是一个 `.position-{x}-{y}` 类，用来应用到方块上，这样浏览器就会知道方块的位置然后将它放置好。既然我们是计算相对于网格容器的的 transformation 属性值，那就使用 `0,0` 作为第一个方块的初始位置。\n\n我们对队列进行迭代，结合基于计算出来的期望偏移，动态生成每一个类。\n\n```css\n.tile {\n  // ...\n  // Dynamically create .position-#{x}-#{y} classes to mark\n  // where each tile will be placed\n  @for $x from 1 through $tile-count {\n    @for $y from 1 through $tile-count {\n      $zeroOffsetX: $x - 1;\n      $zeroOFfsetY: $y - 1;\n      $newX: ($tile-size) * ($zeroOffsetX) + ($tile-padding * $zeroOffsetX);\n      $newY: ($tile-size) * ($zeroOffsetY) + ($tile-padding * $zeroOffsetY);\n\n      &.position-#{$zeroOffsetX}-#{$zeroOffsetY} {\n        -webkit-transform: translate($newX, $newY);\n        transform: translate($newX, $newY);\n      }\n    }\n  }\n  // ...\n}\n```\n\n> 注意我们不得不使用从 1 开始的偏移量来计算位置，而不是传统的从 0 开始。这是受 SASS 自身的限制所迫。不过我们可以使用将索引减 1 来解决。\n\n现在我们写好了动态的 `.position-#{x}-#{y}`CSS 类，方块能够显示在页面上了。\n\n![2-d grid\n](http://www.ng-newsletter.com/images/2048/screen.png)\n\n### 为不同的方块上色\n\n注意到当有不同的方块出现的时候，各自都是不同颜色的。不同的颜色标识着不同方块所代表的值。如此一来玩家能看得出方格所处的状态。使用和我们迭代方格数目的时候同样的技巧来创建方格颜色方案。\n\n要创建出颜色方案，我们首先要创建一个 SCSS 数组，包含有每一种需要用到的背景颜色。每一种颜色：\n\n```css\n$colors:  #EEE4DA, // 2\n          #EAE0C8, // 4\n          #F59563, // 8\n          #3399ff, // 16\n          #ffa333, // 32\n          #cef030, // 64\n          #E8D8CE, // 128\n          #990303, // 256\n          #6BA5DE, // 512\n          #DCAD60, // 1024\n          #B60022; // 2048\n```\n\n使用了 `$colors` 数组，我们只要迭代每一个颜色就能基于方块的值来动态创建一个类。也就是说，当一个方块的值是 2，我们会给它加上指定背景颜色是 `#EEE4DA` 的 `.tile-2` 类。与其给每个方块用硬编码，我们不如用 SCSS 的魔法来完成：\n\n```css\n@for $i from 1 through length($colors) {\n  &.tile-#{power(2, $i)} .tile-inner {\n    background: nth($colors, $i)\n  }\n}\n```\n\n当然，我们需要自己定义 `power()` 混合（译者注：mixin）。定义如下：\n\n```css\n@function power ($x, $n) {\n  $ret: 1;\n\n  @if $n >= 0 {\n    @for $i from 1 through $n {\n      $ret: $ret * $x;\n    }\n  } @else {\n    @for $i from $n to 0 {\n      $ret: $ret / $x;\n    }\n  }\n\n  @return $ret;\n}\n```\n\n<a name=\"the-tile-directive\"></a>\n## Tile 指令\n\nSCSS 的繁琐工作完成了，我们可以回到 tile 指令的编写中了。通过动态的位置布局，让 CSS 按我们所设计的那样将方块摆放到位。\n\n然而 `tile` 指令是一个自定义视图的容器，并不需要做很多事。我们需要的是它负责显示的单元格的访问权。除此以外，并不需要在指令内放任何功能。代码简单到足以自我描述：\n\n```javascript\nangular.module('Grid')\n.directive('tile', function() {\n  return {\n    restrict: 'A',\n    scope: {\n      ngModel: '='\n    },\n    templateUrl: 'scripts/grid/tile.html'\n  };\n});\n```\n\n现在，`tile` 指令中有趣的地方就是我们如何动态的为网格布局。而模板会需要用到在隔离作用域（译者注：isolate scope）中的 `ngModel` 变量来处理好一切。\n\n```markup\n<div ng-if='ngModel' class=\"tile position-{{ ngModel.x }}-{{ ngModel.y }} tile-{{ ngModel.value }}\">\n  <div class=\"tile-inner\">\n    {{ ngModel.value }}\n  </div>\n</div>\n```\n\n我们几乎已经可以将这个基础的指令直接显示了。对于每一个有 `x` 和 `y` 坐标的方块而言，它们都会 * 自动 * 被赋予一个 `.position-#{x}-#{y}` 的类。浏览器会 * 自动 * 地将它们放到我们期待的位置。\n\n这意味着我们的方块对象会需要一个 `x` 和 `y` 以及 `value` 让指令来使用。为此，对于每一个显示的方块，我们都需要创建一个新的对象。\n\n### TileModel\n\n与其创建一个 * 哑 * 对象，我们还不如创建一个比较智能的对象，既存储数据也能提供功能。\n\n我们希望能使用 Angular 的依赖注入，因此创建一个服务来安置数据模型。我们在 `Grid` 模块中创建一个 `TileModel` 服务，因为跟游戏棋盘有关的操作时，它只需要使用底层的 `TileModel`。\n\n使用 `.factory` 方法，我们能够简单地创建一个工厂函数。跟使用 `service()` 函数时传递的用以定义服务的函数会被默认为服务的构造函数不同的是，使用 `factory()` 函数会认为传递函数返回的对象才是服务。所以，只用 `factory()` 函数，我们可以将服务赋给任何对象以便在我们 Angular 应用中随时 * 注入 *。\n\n在 `app/scripts/grid/grid.js` 文件中，我们可以创建 `TileModel` 工厂：\n\n```javascript\nangular.module('Grid')\n.factory('TileModel', function() {\n  var Tile = function(pos, val) {\n    this.x = pos.x;\n    this.y = pos.y;\n    this.value = val || 2;\n  };\n\n  return Tile;\n})\n// ...\n```\n\n现在在我们 Angular 应用中的任何地方，我们都可以 * 注入 * 这个 `TileModel` 并想全局对象一样使用。非常方便不是吗？\n\n> 不要忘了要为我们在 `TileModel` 中实现的任何功能写测试。\n\n### 我们第一个网格\n\n现在我们已经写好了 `TileModel` 了，我们可以开始在 `tiles` 数组中放入 `TileModel` 的实例了，然后发现它们 * 神奇地 * 出现在网格中正确的位置上。\n\n让我们来试试在 `GridService` 中的 `tiles` 数组中加入一些方块：\n\n```javascript\nangular.module('Grid', [])\n.factory('TileModel', function() {\n  // ...\n})\n.service('GridService', function(TileModel) {\n  this.tiles  = [];\n  this.tiles.push(new TileModel({x: 1, y: 1}, 2));\n  this.tiles.push(new TileModel({x: 1, y: 2}, 2));\n  // ...\n});\n```\n\n<a name=\"starting-the-game\"></a>\n## 棋盘已经准备好了\n\n现在我们具备显示方块的能力了，还需要在 `GridService` 中实现准备棋盘的功能。当第一次载入页面的时候我们想创建一个空的棋盘。而同样的动作也应该发生在当用户在进行游戏的时候点击了 `New Game` 或者 `Try again` 的时候。\n\n要清理棋盘，我们会在 `GridService` 中创建一个叫 `buildEmptyGameBoard()` 的函数。这个方法会负责将 `GridService` 中的 `grid` 数组和 `tiles` 数组填充 null。\n\n在开始编写代码之前，我们先写出测试以保证 `buildEmptyGameBoard()` 函数的行为没问题。然而这个写的过程在上面已经讲过一遍了，所以不再讨论直接给出结果。写出来的测试大概就像下面那样：\n\n```javascript\n// In test/unit/grid/grid_spec.js\n// ...\ndescribe('.buildEmptyGameBoard', function() {\n  var nullArr;\n\n  beforeEach(function() {\n    nullArr = [];\n    for (var x = 0; x < 16; x++) {\n      nullArr.push(null);\n    }\n  })\n  it('should clear out the grid array with nulls', function() {\n    var grid = [];\n    for (var x = 0; x < 16; x++) {\n      grid.push(x);\n    }\n    gridService.grid = grid;\n    gridService.buildEmptyGameBoard();\n    expect(gridService.grid).toEqual(nullArr);\n  });\n  it('should clear out the tiles array with nulls', function() {\n    var tiles = [];\n    for (var x = 0; x < 16; x++) {\n      tiles.push(x);\n    }\n    gridService.tiles = tiles;\n    gridService.buildEmptyGameBoard();\n    expect(gridService.tiles).toEqual(nullArr);\n  });\n});\n```\n\n既然测试写好了，就可以实现 `buildEmptyGameBoard()` 函数的函数体了。\n\n函数并不大，代码也足以自我说明。在 `app/scripts/grid/grid.js` 中\n\n```javascript\n.service('GridService', function(TileModel) {\n  // ...\n  this.buildEmptyGameBoard = function() {\n    var self = this;\n    // Initialize our grid\n    for (var x = 0; x < service.size * service.size; x++) {\n      this.grid[x] = null;\n    }\n\n    // Initialize our tile array\n    // with a bunch of null objects\n    this.forEach(function(x,y) {\n      self.setCellAt({x:x,y:y}, null);\n    });\n  };\n  // ...\n```\n\n上面的代码使用了一些足以自我描述出会做什么的辅助方法。部分我们会在整个项目中用到辅助函数如下列出，都是自我描述的：\n\n```javascript\n// Run a method for each element in the tiles array\nthis.forEach = function(cb) {\n  var totalSize = this.size * this.size;\n  for (var i = 0; i < totalSize; i++) {\n    var pos = this._positionToCoordinates(i);\n    cb(pos.x, pos.y, this.tiles[i]);\n  }\n};\n\n// Set a cell at position\nthis.setCellAt = function(pos, tile) {\n  if (this.withinGrid(pos)) {\n    var xPos = this._coordinatesToPosition(pos);\n    this.tiles[xPos] = tile;\n  }\n};\n\n// Fetch a cell at a given position\nthis.getCellAt = function(pos) {\n  if (this.withinGrid(pos)) {\n    var x = this._coordinatesToPosition(pos);\n    return this.tiles[x];\n  } else {\n    return null;\n  }\n};\n\n// A small helper function to determine if a position is\n// within the boundaries of our grid\nthis.withinGrid = function(cell) {\n  return cell.x >= 0 && cell.x < this.size &&\n          cell.y >= 0 && cell.y < this.size;\n};\n```\n\n##### 究竟是什么？！？？\n\n`this._positionToCoordinates()` 和 `this._coordinatesToPosition()` 这两个函数是什么？\n\n回忆起之前我们已经讨论过了我们会使用一个一维数组来存储网格。在考虑到性能和复杂动画的处理，这是较为可取的。关于动画我们会稍后研究。我们暂且只能从使用单维数组表示多维数组的复杂性得到一点好处。\n\n<a name=\"grid-theory\"></a>\n## 一维数组中的多维数组\n\n如何使用单维数组表示多维数组？先来看看在棋盘上用每一个单元格的值来标出网格位置，不需要有颜色。在代码中，这个多维数组被分解成数组的数组。\n\n![2-d grid](http://www.ng-newsletter.com/images/2048/grid-1.png) ![2-d grid](http://www.ng-newsletter.com/images/2048/grid-2.png)\n\n看看每个单元格的位置，如果单维数组来看，可以看出一个关系来：\n\n![2-d grid](http://www.ng-newsletter.com/images/2048/grid-3.png)\n\n我们可以看到，在第一个单元格，`(0,0)` 单元格对应的数组下标是 `0`。第二个数组元素下标是 1 而单元格是 `(1.0)`。移动到下一行，单元格是 `(0,1)` 对应第四个数组元素而下标是 5 的数组元素是单元格 `(1,1)`。\n\n据此可以推断出两个位置之间的等式关系。\n\n####i = <span style=\"color:red\">x</span> + <span style=\"color:blue\">n</span>y\n\n`i` 代表数组元素的下标，`x` 和 `y` 是多维数组中的位置坐标，`n` 是一行 / 列的单元格数。\n\n我们在上面定义的两个辅助函数就是将数组下标转换为 x-y 坐标的过程和相反的转换过程。从理论上来说，使用 x-y 坐标处理单元格会比较简单，但是从功能上考虑我们却会在单维数组里存放方块。\n\n```javascript\n// Helper to convert x to x,y\nthis._positionToCoordinates = function(i) {\n  var x = i % service.size,\n      y = (i - x) / service.size;\n  return {\n    x: x,\n    y: y\n  };\n};\n\n// Helper to convert coordinates to position\nthis._coordinatesToPosition = function(pos) {\n  return (pos.y * service.size) + pos.x;\n};\n```\n\n### 初始化玩家位置\n\n在游戏的一开始，我们想预先放几块。我们会为玩家随机在棋盘上挑选放方块的地方。\n\n```javascript\n.service('GridService', function(TileModel) {\n  this.startingTileNumber = 2;\n  // ...\n  this.buildStartingPosition = function() {\n    for (var x = 0; x < this.startingTileNumber; x++) {\n      this.randomlyInsertNewTile();\n    }\n  };\n  // ...\n```\n\n构建一开始的位置非常简单因为它只根据我们想放多少块方块来调用 `randomlyInsertNewTile()` 函数。`randomlyInsertNewTile()` 函数需要我们知道所有可以随机放置方块的位置。这个功能非常容易实现因为需要做的只是遍历单维数组的同时记录下还没有方块放置的位置。\n\n```javascript\n.service('GridService', function(TileModel) {\n  // ...\n  // Get all the available tiles\n  this.availableCells = function() {\n    var cells = [],\n        self = this;\n\n    this.forEach(function(x,y) {\n      var foundTile = self.getCellAt({x:x, y:y});\n      if (!foundTile) {\n        cells.push({x:x,y:y});\n      }\n    });\n\n    return cells;\n  };\n  // ...\n```\n\n有了一个棋盘上所有可用的坐标的列表，我们就可以简单地在数组中取随机位置。`randomAvailableCell()` 函数为我们处理。要实现函数的方法非常多。以下是我们在 2048 中实现的方法：\n\n```javascript\n.service('GridService', function(TileModel) {\n  // ...\n  this.randomAvailableCell = function() {\n    var cells = this.availableCells();\n    if (cells.length > 0) {\n      return cells[Math.floor(Math.random() * cells.length)];\n    }\n  };\n  // ...\n```\n\n从这里开始，我们可以简单地创建一个新的 TileModel 实例然后插入到我们的 `this.tiles` 数组中了。\n\n```javascript\n.service('GridService', function(TileModel) {\n  // ...\n  this.randomlyInsertNewTile = function() {\n    var cell = this.randomAvailableCell(),\n        tile = new TileModel(cell, 2);\n    this.insertTile(tile);\n  };\n\n  // Add a tile to the tiles array\n  this.insertTile = function(tile) {\n    var pos = this._coordinatesToPosition(tile);\n    this.tiles[pos] = tile;\n  };\n\n  // Remove a tile from the tiles array\n  this.removeTile = function(pos) {\n    var pos = this._coordinatesToPosition(tile);\n    delete this.tiles[pos];\n  }\n  // ...\n});\n```\n\n现在，得益于我们使用的 Angular，视图中的棋盘上，网格块会神奇地显示出方块来。\n\n记住，明智的做法是接下来写测试来测试我们对于功能的假设实现。我们已经在为项目写测试的过程中发现了不少 bug，同样的事情你也会遇到的。\n\n<a name=\"keyboard\"></a>\n## 键盘交互\n\n很好，现在我们已经将方块放到棋盘上了。但一个不能玩的游戏有啥意思呢？是时候将注意力转移到加入交互上面去了。\n\n> 为文章起见，我们只准备着眼在键盘的交互而没有考虑触控的交互。然而，加上触控支持并不应该太难，特别是我们只关注滑动动作，这个在 `ngTouch` 里有提供。我们将其留给你自己实现。\n\n游戏本身使用方向键（或者 a,w,s,d 键）来玩。在游戏中，我们希望让玩家在页面上跟游戏简单地交互。而不是要求玩家将焦点移到在游戏棋盘元素上（或者同样问题下的其他元素）。玩家只需要让页面获得焦点就可以进行游戏了。\n\n要做到这种交互，就要将事件监听绑定在 document 上。在 Angular 中，我们会 ` 绑定 ` 自己的事件监听在 Angular 提供的 `$ducoment` 服务上。要处理用户交互的创建，我们会将键盘事件绑定包裹在一个服务中。记住在页面中我们只需要一个键盘处理器，所以只要一个服务就可以了。\n\n此外，我们也希望为用户的任何输入动作作出自定义的反应。使用了服务能自然地注入到应用中然后根据用户的输入来决定应用的反应。\n\n首先，在 `app/scripts/Keyboard/keyboard.js` 文件中创建一个新的模块（因为我们正在做基于模块的开发的）`KeyBoard`（文件不存在就要先创建）。\n\n```javascript\n// app/scripts/keyboard/keyboard.js\nangular.module('Keyboard', []);\n```\n\n正如创建任何新的 JavaScript 一样，我们需要在 `index.html` 中引用。现在 `<script>` 标签列表看起来是这样的：\n\n```markup\n  <!-- body -->\n  <script src=\"scripts/app.js\"></script>\n  <script src=\"scripts/grid/grid.js\"></script>\n  <script src=\"scripts/grid/grid_directive.js\"></script>\n  <script src=\"scripts/grid/tile_directive.js\"></script>\n  <script src=\"scripts/keyboard/keyboard.js\"></script>\n  <script src=\"scripts/game/game.js\"></script>\n</body>\n</html>\n```\n\n然后，因为新建一个模块，我们同样需要告诉自己的 Angular 模块在应用在需要依赖这个新模块：\n\n```javascript\n.module('twentyfourtyeightApp', ['Game', 'Grid', 'Keyboard'])\n```\n\n`Keyboard` 服务的实现思路，就是在 `$document` 上 ` 绑定 ` 了 `Keydown` 事件来捕获用户的键盘操作。而另一端，在我们的 angular 对象中，我们会注册一有用户操作就触发的处理函数。\n\n来写代码。\n\n```javascript\n// app/scripts/keyboard/keyboard.js\nangular.module('Keyboard', [])\n.service('KeyboardService', function($document) {\n\n  // Initialize the keyboard event binding\n  this.init = function() {\n  };\n\n  // Bind event handlers to get called\n  // when an event is fired\n  this.keyEventHandlers = [];\n  this.on = function(cb) {\n  };\n});\n```\n\n`init()` 函数会作为 `KeyboardService` 的开始，然后开始监听键盘事件。我们会过滤掉不感兴趣的键盘事件。\n\n对于感兴趣的事件，我们会阻止它的默认行为然后将它交给我们的 `KeyEventHandlers`。\n\n![2-d grid](http://www.ng-newsletter.com/images/2048/keyboard.png)\n\n如何知道那些是我们感兴趣的呢？既然 * 感兴趣的 * 键盘操作是固定的，那么我们就去检查事件是否有其中一种键盘事件所激发。\n\n一旦方向键被按下，document 会接收到一个包含被按下的按键的键码的事件。\n\n我们可以为这些事件建立一个映射，然后查询捕获到的键盘动作是否在这个 * 感兴趣的 * 映射中。\n\n```javascript\n// app/scripts/keyboard/keyboard.js\nangular.module('Keyboard', [])\n.service('KeyboardService', function($document) {\n\n  var UP    = 'up',\n      RIGHT = 'right',\n      DOWN  = 'down',\n      LEFT  = 'left';\n\n  var keyboardMap = {\n    37: LEFT,\n    38: UP,\n    39: RIGHT,\n    40: DOWN\n  };\n\n  // Initialize the keyboard event binding\n  this.init = function() {\n    var self = this;\n    this.keyEventHandlers = [];\n    $document.bind('keydown', function(evt) {\n      var key = keyboardMap[evt.which];\n\n      if (key) {\n        // An interesting key was pressed\n        evt.preventDefault();\n        self._handleKeyEvent(key, evt);\n      }\n    });\n  };\n  // ...\n});\n```\n\n每当一个存在于我们映射中的按键触发了 `keydown` 事件，`KeyboardService` 就会执行 `this._handleKeyEvent` 函数。\n\n这个函数的整个职责就是调用每一个为按键注册了的处理函数。它就是简单地对处理函数数组进行迭代，使用按键和原事件组为参数来调用处理函数。\n\n```javascript\n// ...\nthis._handleKeyEvent = function(key, evt) {\n  var callbacks = this.keyEventHandlers;\n  if (!callbacks) {\n    return;\n  }\n\n  evt.preventDefault();\n  if (callbacks) {\n    for (var x = 0; x < callbacks.length; x++) {\n      var cb = callbacks[x];\n      cb(key, evt);\n    }\n  }\n};\n// ...\n```\n\n另一方面，我们只需要将处理函数压入处理函数数组就可以了。\n\n```javascript\n// ...\nthis.on = function(cb) {\n  this.keyEventHandlers.push(cb);\n};\n// ...\n```\n\n### 使用 Keyboard Service\n\n现在我们已经有能力来监控用户的键盘事件，我们需要在应用开始运行的时候就监控。因为我们将它做成了一个服务，所以可以很简单地在主要的控制器中做这件事。\n\n![2-d grid](http://www.ng-newsletter.com/images/2048/keyboard-sequence.png)\n\n首先，我们需要调用 `init()` 函数来开始监听键盘。接着，我们会注册函数来告诉 `GameManager` 来调用 `move()` 函数。\n\n回到 `GameController`，我们添加上 `newGame()` 函数和 `startGame()` 函数。`newGame()` 函数会告诉游戏服务创建一个新的游戏然后开始键盘事件处理。\n\n来开始编码吧！我们需要将 `Keyboard` 模块作为一个新的模块依赖 * 注入 * 到应用中：\n\n```javascript\nangular.module('twentyfourtyeightApp', ['Game', 'Keyboard'])\n// ...\n```\n\n然后就可以将 `KeyboardService` 注入到 `GameController` 中来开始跟用户交互了。首先，`newGame()` 方法：\n\n```javascript\n// ... (from above)\n.controller('GameController', function(GameManager, KeyboardService) {\n  this.game = GameManager;\n\n  // Create a new game\n  this.newGame = function() {\n    KeyboardService.init();\n    this.game.newGame();\n    this.startGame();\n  };\n\n  // ...\n```\n\n我们还没有在 `GameManager` 中定义 `newGame()` 方法，但很快就会去填好内容。\n\n一旦我们开始了新游戏，我们会调用 `startGame()`。`startGame()` 函数会准备好键盘服务的事件处理函数。\n\n```javascript\n.controller('GameController', function(GameManager, KeyboardService) {\n  // ...\n  this.startGame = function() {\n    var self = this;\n    KeyboardService.on(function(key) {\n      self.game.move(key);\n    });\n  };\n\n  // Create a new game on boot\n  this.newGame();\n});\n```\n\n<a name=\"start-button\"></a>\n## 按下那开始按钮\n\n我们做了许多工作来达到开始游戏这么个目的。最后要实现的方法就是 `GameManager` 中的 `newGame()` 了，函数会：\n\n1. 创建一个空的棋盘\n1. 准备好开始的位置\n1. 初始化游戏\n\n其实我们已经在 `GridService` 中实现了这些逻辑，所以现在就差把它们连起来了！\n\n在我们的 `app/scripts/game/game.js` 文件中，加入 `newGame()` 函数吧。此函数会重置游戏状态成应有的初始条件：\n\n```javascript\nangular.module('Game', [])\n.service('GameManager', function(GridService) {\n  // Create a new game\n  this.newGame = function() {\n    GridService.buildEmptyGameBoard();\n    GridService.buildStartingPosition();\n    this.reinit();\n  };\n\n  // Reset game state\n  this.reinit = function() {\n    this.gameOver = false;\n    this.win = false;\n    this.currentScore = 0;\n    this.highScore = 0; // we'll come back to this\n  };\n});\n```\n\n在浏览器中载入页面，包含功能的网格就出来了…… 然而这个阶段还是非常无聊因为我们还没有定义任何移动的功能。\n\n<a name=\"game-loop\"></a>\n## 动起来（游戏循环）\n\n现在我们来深入游戏功能的实现。当用户按下任何一个方向键，我们会调用 `GridService` 中的 `move()` 函数（在 `GameController` 中写的）。\n\n![non-playable version](http://www.ng-newsletter.com/images/2048/game-1.png)\n\n要编写 `move()` 函数，我们需要定义游戏的约束。那就是说，我们需要定义游戏对于每一个给出的移动的操作。\n\n对于每一步移动，我们要：\n\n1. 确定用户按下的方向键指示的方向\n1. 为棋盘上每一个方块找到所有最远的可能移动的位置。同时抓取下一个方块看是否能 * 合并 * 起来。\n1. 对于每一个方块，我们想确定下一个位置是否存在一个等值的方块。\n  - 如果下一个方块不存在，那么只将方块移动到可能的最远位置即可。（意味着这个最远位置就是棋盘的边缘。）\n  - 如果下一个方块存在：\n    + 且方块值不同的话，那么将方块放在最远位置（下一个方块就是当前方块的移动边界）。\n    + 且方块值和当前方块相同的话，我们就找到一个可能的合并了。\n      * 如果该方块已经是合并的结果了，则跳过并认定为已使用。\n      * 如果方块还没合并过，那么则认为需要合并。\n\n既然定义了功能，就可以制定出写 `move()` 函数的策略了。\n\n```javascript\nangular.module('Game', [])\n.service('GameManager', function(GridService) {\n  // ...\n  this.move = function(key) {\n    var self = this; // Hold a reference to the GameManager, for later\n    // define move here\n    if (self.win) { return false; }\n  };\n  // ...\n});\n```\n\n移动是有限制条件的：如果游戏已经结束或者游戏循环因为某种原因而终止了，那么就只需要返回并继续。\n\n接下来我们需要在网格上走一下来找出所有可供移动的地方。而因为掌握空方格的位置其实是网格的职责，因此我们会在 `GridService` 中写一个新的函数来帮助我们找出这些可能会经过的方格。\n\n![non-playable version](http://www.ng-newsletter.com/images/2048/grid-vectors.gif)\n\n我们通过提取玩家按键指示的 * 向量 * 来决定方向。例如，如果玩家按下了右键头键，那么就是想移动到 `x` 值 * 更大的 * 方格上。\n\n如果玩家按了上箭头，那么玩家就是想将方块移动到 `y` 值 * 更小的 * 方格上。我们可以使用一个 JavaScript 对象将向量和玩家按键映射起来（从 `KeyboardService` 中得到的按键），就像这样：\n\n```javascript\n// In our `GridService` app/scripts/grid/grid.js\nvar vectors = {\n  'left': { x: -1, y: 0 },\n  'right': { x: 1, y: 0 },\n  'up': { x: 0, y: -1 },\n  'down': { x: 0, y: 1 }\n};\n```\n\n现在我们就可以简单地迭代每一个可能的位置，并使用向量来控制迭代的方向：\n\n```javascript\n.service('GridService', function(TileModel) {\n  // ...\n  this.traversalDirections = function(key) {\n    var vector = vectors[key];\n    var positions = {x: [], y: []};\n    for (var x = 0; x < this.size; x++) {\n      positions.x.push(x);\n      positions.y.push(x);\n    }\n    // Reorder if we're going right\n    if (vector.x > 0) {\n      positions.x = positions.x.reverse();\n    }\n    // Reorder the y positions if we're going down\n    if (vector.y > 0) {\n      positions.y = positions.y.reverse();\n    }\n    return positions;\n  };\n  // ...\n```\n\n现在新的函数 `traversalDirections()` 定义好了，在 `move()` 函数中就可以在可能的移动上进行迭代了。回到 `GameMabager`，我们会根据这些可能的位置在网格上走动。\n\n```javascript\n// ...\nthis.move = function(key) {\n  var self = this;\n  // define move here\n  if (self.win) { return false; }\n  var positions = GridService.traversalDirections(key);\n\n  positions.x.forEach(function(x) {\n    positions.y.forEach(function(y) {\n      // For every position\n    });\n  });\n};\n// ...\n```\n\n在位置的循环中，我们会对可供移动的位置进行迭代同时查找存在的方块。从这里开始，我们将编写函数的第二部分，找出从该方块出发能到达的所有方格。\n\n```javascript\n// ...\n// For every position\n// save the tile's original position\nvar originalPosition = {x:x,y:y};\nvar tile = GridService.getCellAt(originalPosition);\n\nif (tile) {\n  // if we have a tile here\n  var cell = GridService.calculateNextPosition(tile, key);\n  // ...\n}\n```\n\n![non-playable version](http://www.ng-newsletter.com/images/2048/next-process.gif)\n\n如果我们确实在该方格内找到了方块，就会开始查看该方格最远能到哪里。先在网格上找到下一个位置，检查这个方格是否在棋盘内和方格是否为空。\n\n如果该方格是空的 ** 而且 ** 在棋盘内，那么继续取得下一个方格然后执行一样的检查。\n\n如果两个条件中任意一个不满足，那么要不我们到达了棋盘的边界，要不我们找到了下一个方块。我们会保存前一个位置（译者注：原文为 the next position，翻译为下一个位置。但根据描述和下文的代码此处应该为前一个位置。）同时抓取下一个方格（不管是否存在下一个方格）。\n\n而这个过程是对网格进行操作，于是就这个函数放在 `GridService`：\n\n```javascript\n// in GridService\n// ...\nthis.calculateNextPosition = function(cell, key) {\n  var vector = vectors[key];\n  var previous;\n\n  do {\n    previous = cell;\n    cell = {\n      x: previous.x + vector.x,\n      y: previous.y + vector.y\n    };\n  } while (this.withinGrid(cell) && this.cellAvailable(cell));\n\n  return {\n    newPosition: previous,\n    next: this.getCellAt(cell)\n  };\n};\n```\n\n现在我们可以计算下一个有可能放得下我们的方块的地方，接着就是检查是否有合并的可能。\n\n一个 * 合并 * 的定义是两个相同值的方块碰撞在一起。我们会检查 `next` 的位置上是否有相同值的方块并且还之前没有被 * 合并 * 过。\n\n```javascript\n// ...\n// For every position\n// save the tile's original position\nvar originalPosition = {x:x,y:y};\nvar tile = GridService.getCellAt(originalPosition);\n\nif (tile) {\n  // if we have a tile here\n  var cell = GridService.calculateNextPosition(tile, key),\n      next = cell.next;\n\n  if (next &&\n      next.value === tile.value &&\n      !next.merged) {\n    // Handle merged\n  } else {\n    // Handle moving tile\n  }\n  // ...\n}\n```\n\n如果这个所谓的下一个位置并 * 不 * 符合上面的条件，那么我们就会将方块从当前的位置移动到这个下一个位置（else 语句）。\n\n这是更相比之下更容易处理的条件，所需要做的就是将方块移动到 newPosition 位置。\n\n```javascript\n// ...\nif (next &&\n    next.value === tile.value &&\n    !next.merged) {\n  // Handle merged\n} else {\n  GridService.moveTile(tile, cell.newPosition);\n}\n```\n\n### 移动方块\n\n就像你大概猜测那样，`moveTile()` 函数最好就是定义在 `GridService` 中。\n\n移动一个方块就是简单地更新一下方块在数组中的位置和更新 `TileModel` 而已。\n\n就像我们定义的那样，函数里面有两个目的不同的操作。当我们：\n\n##### 在数组中移动方块的时候\n\n数组 `GridService.tiles`（译者注：原文为 GridService）为后端映射了方块的位置。数组中方块的位置 * 没有 * 和网格中方块的位置绑定。\n\n##### 更新 TileModel 中的位置的时候\n\n我们要为前端的 CSS 更新坐标来放置方块。\n\n简而言之：为了在后端能跟踪方块们，我们需要更新 `GridService` 中的 `this.tiles` 数组 * 同时 * 更新方块对象的位置。\n\n于是 `moveTile()` 就变成了一个简单的两步操作：\n\n```javascript\n// GridService\n// ...\nthis.moveTile = function(tile, newPosition) {\n  var oldPos = {\n    x: tile.x,\n    y: tile.y\n  };\n\n  // Update array location\n  this.setCellAt(oldPos, null);\n  this.setCellAt(newPosition, tile);\n  // Update tile model\n  tile.updatePosition(newPosition);\n};\n```\n\n现在我们需要定义我们的 `tile.updatePosition()` 方法。这个方法所做的就像它字面上的那样，就是简单地更新模型自己的 `x` 和 `y` 坐标。\n\n```javascript\n.factory('TileModel', function() {\n  // ...\n\n  Tile.prototype.updatePosition = function(newPos) {\n    this.x = newPos.x;\n    this.y = newPos.y;\n  };\n  // ...\n});\n```\n\n回到 `GridService` 中，我们已经可以只是调用 `moveTile()` 来同时更新 `GridService.tiles` 数组和方块自己的位置了。\n\n### 合并一个方块\n\n既然我们已经处理了 * 比较简单 * 的情况了，那么合并一个方块就是我们下一个需要攻克的问题。合并定义如下：\n\n* 当一个方块在下一个可移动的方格上遇到相同值的方块的时候就需要合并。*\n\n当一个方块被合并出来，棋盘就算需要改变，同样当前得分和最高得分也需要更新（如果需要的话）。\n\n合并需要几个步骤：\n\n1. 在最后的位置上添加一个新的带合并值的方块\n1. 移除旧方块\n1. 更新游戏得分\n1. 检查游戏是否结束\n\n拆解后，合并操作很简单。\n\n```javascript\n// ...\nvar hasWon = false;\n// ...\nif (next &&\n    next.value === tile.value &&\n    !next.merged) {\n  // Handle merged\n  var newValue = tile.value * 2;\n  // Create a new tile\n  var mergedTile = GridService.newTile(tile, newValue);\n  mergedTile.merged = [tile, cell.next];\n\n  // Insert the new tile\n  GridService.insertTile(mergedTile);\n  // Remove the old tile\n  GridService.removeTile(tile);\n  // Move the location of the mergedTile into the next position\n  GridService.moveTile(merged, next);\n  // Update the score of the game\n  self.updateScore(self.currentScore + newValue);\n  // Check for the winning value\n  if (merged.value >= self.winningValue) {\n    hasWon = true;\n  }\n} else {\n// ...\n```\n\n我们只想支持一行只有一个方块移动的效果（就是说如果一行里面有两个可以合并的情况，则只会合并一个），因此不得不跟踪 ` 合并了的 ` 方块。通过将 `.merged` 标志设置成随便什么东西而不是 `undefined` 就可以做到。\n\n在结束这个函数的编写之前，还需要解释一下这里用到的我们还没有定义的函数。\n\n`GridService.newTile()` 函数就是简单地创建 `TileModel` 对象。合并操作就放在包含创建新方块函数的｀GridService｀中：\n\n```javscript\n// GridService\nthis.newTile = function(pos, value) {\n  return new TileModel(pos, value);\n};\n// ...\n```\n\n我们一会再回来叙述 `self.updateScore()`。现在暂时只需要知道它更新游戏得分就可以了（就像函数名所表明的那样）。\n\n### 移动了方块之后\n\n我们只希望在一次有效的方块移动之后才增加新的方块，因此需要检查一下是否真的有任何一个方块移动了。\n\n```javascript\nvar hasMoved = false;\n// ...\n  hasMoved = true; // we moved with a merge\n} else {\n  GridService.moveTile(tile, cell.newPosition);\n}\n\nif (!GridService.samePositions(originalPos, cell.newPosition)) {\n  hasMoved = true;\n}\n// ...\n```\n\n当所有的方块都已经移动过了（或尝试移动过），我们就继续检查玩家是否赢了。如果是，那么实际上我们就要设置 `self.win` 这个标志了。\n\n> 当有方块碰撞的时候我们会移动方块，所以在合并的条件下，我们只简单地设置 `hasMoved` 为 true。\n\n最后，我们要检查一下棋盘上是否有任何的方块移动。如果有，则：\n\n1. 给棋盘添加一个新的方块\n1. 检查一下有没有必要展示游戏结束界面\n\n```javascript\nif (!GridService.samePositions(originalPos, cell.newPosition)) {\n  hasMoved = true;\n}\n\nif (hasMoved) {\n  GridService.randomlyInsertNewTile();\n\n  if (self.win || !self.movesAvailable()) {\n    self.gameOver = true;\n  }\n}\n// ...\n```\n\n### 重置方块\n\n在运行任何主游戏程序前，我们要重置每一个方块以便不再跟踪其合并的状态。详细来说，就是每一次移动之后，都要清理所有记录以便让所有方块能再次被移动。因此在执行移动的循环体开头，我们会调用：\n\n```javascript\nGridService.prepareTiles();\n```\n\n`GridService` 中的 `prepareTiles()` 函数只是简单地迭代每一个方块然后重置其状态而已：\n\n```javascript\nthis.prepareTiles = function() {\n  this.forEach(function(x,y,tile) {\n    if (tile) {\n      tile.reset();\n    }\n  });\n};\n```\n\n<a name=\"keeping-score\"></a>\n## 计算得分\n\n回头来看看 `updateScore()` 方法，游戏本身需要记录两个得分：\n\n1. 当前游戏的得分\n1. 玩家的最高得分\n\n`currentScore` 只是一个在每一次游戏的时候保存在内存中的变量，因此无需特殊对待。\n\n然而 `highScore` 则是一个贯穿每一次的游戏的变量。我们有几个方法来保存，比如 localstorage，cookies，或者两者结合。\n\n因为 cookies 是两个方法中最简单而且跨浏览器安全，我们就继续使用 cookies 来存储这个 highScore。\n\nAngular 中使用 `angular-cookies` 模块是管理 cookies 的最简单的方法了。\n\n要使用这个模块，可以到 [angularjs.org](http://angularjs.org) 上下载或者使用包管理器例如 bower 来安装。\n\n```bash\n$ bower install --save angular-cookies\n```\n\n照旧，我们要在 `index.html` 中引用这个脚本然后在应用中将 `ngCookies` 设置成模块级别的依赖。\n\n像这样更新一下 `app/index.html`：\n\n```markup\n<script src=\"bower_components/angular-cookies/angular-cookies.js\"></script>\n```\n\n然后添加 `ngCookies` 作为模块依赖（在 `Game` 模块中，我们引用 cookies 的地方）：\n\n```javascript\nangular.module('Game', ['Grid', 'ngCookies'])\n// ...\n```\n\n有了 `ngCookies` 作为依赖，我们就可以将 `$cookieStore` 服务 * 注入 * 到 `GameManagere` 服务中。现在可以在浏览器中对 cookies 进行读写了。\n\n例如，要读取玩家的最高得分，我们会写一个函数从用户的 cookie 中取来：\n\n```javascript\nthis.getHighScore = function() {\n  return parseInt($cookieStore.get('highScore')) || 0;\n}\n```\n\n回到 `GameManager` 类中的 `updateScore()` 函数，我们开始编写更新当前得分的代码。如果得分比之前记录的最高得分高，那么就更新 cookie 中的最高得分。\n\n```javascript\nthis.updateScore = function(newScore) {\n  this.currentScore = newScore;\n  if (this.currentScore > this.getHighScore()) {\n    this.highScore = newScore;\n    // Set on the cookie\n    $cookieStore.put('highScore', newScopre);\n  }\n};\n```\n\n### track by 之怒\n\n既然我们已经将方块显示出来了，一个 bug 也同样出现了，那就是一些有奇怪行为的方块复制品冒出来。进一步来说，就是方块可能会在不应该出现的地方出现。\n\n原因是 Angular 通过基于一个唯一的标识来获知 `titles` 数组里面的有什么方块。而我们把这个唯一的标识在视图中设定为方块在数组中的 `$index`（也就是数组中的位置）。然而我们在数组中将方块移来移去，`$index` 不再起到唯一标识的作用。我们需要另外的监测方法。\n\n```markup\n<div id=\"game\">\n  <!-- grid-container -->\n  <div class=\"tile-container\">\n    <div tile\n      ng-model='tile'\n      ng-repeat='tile in ngModel.tiles track by $index'></div>\n  </div>\n</div>\n```\n\n与其依靠数组来标识方块的位置，我们不如使用方块自己唯一的 uuid 来跟踪。自己创建唯一标识能保证 angular 将方块数组中的每一个方块看成是唯一的对象。只要唯一的 uuid 没有变，那么 angular 就会根据这个标识来将方块识别为独立的对象。\n\n创建新实例的时候使用 `TileModel`，我们能非常轻松地为方块实现出唯一标识。我们还能以自己的方式来创建唯一标识。\n\n> 只要对于每一个创建的 `TileModel` 实例是唯一的，那么怎么创建这个唯一 id 的方法并无影响。\n\n要生成这个唯一的 id，我们跳到 [StackOverflow](http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript) 上找一个 [遵循 rfc4122](http://www.ietf.org/rfc/rfc4122.txt) 的全球唯一标识生成器，然后将其打包成一个工厂，提供一个函数：`next()`：\n\n```javascript\n.factory('GenerateUniqueId', function() {\n  var generateUid = function() {\n    // http://www.ietf.org/rfc/rfc4122.txt\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = (d + Math.random()*16)%16 | 0;\n      d = Math.floor(d/16);\n      return (c === 'x' ? r : (r&0x7|0x8)).toString(16);\n    });\n    return uuid;\n  };\n  return {\n    next: function() { return generateUid(); }\n  };\n})\n```\n\n要 * 使用 * 工厂 `GenerateUniqueId`，就要将它注入然后调用 `GenerateUniqueId.next()` 来产生一个新的 uuid。回到 `TileModel` 中，我们已经可以为实例生成一个唯一的 id 了（在构造函数中）。\n\n```javascript\n// In app/scripts/grid/grid.js\n// ...\n.factory('TileModel', function(GenerateUniqueId) {\n  var Tile = function(pos, val) {\n    this.x      = pos.x;\n    this.y      = pos.y;\n    this.value  = val || 2;\n    // Generate a unique id for this tile\n    this.id = GenerateUniqueId.next();\n    this.merged = null;\n  };\n  // ...\n});\n```\n\n现在每一个方块都已经有了唯一的标识了，于是就可以告诉 Angular 使用 id 而不是 `$index` 来追踪方块了。\n\n```markup\n<!-- ... -->\n<div tile\n      ng-model='tile'\n      ng-repeat='tile in ngModel.tiles track by $id(tile.id)'></div>\n<!-- ... -->\n```\n\n这样做会出现一个问题。我们使用 nulls 来初始化数组（显式地）和 nulls 来重置数组（而不是对数组排序或者调整长度），angular 会不顾一切地试图将 nulls 看作对象。但是 null 值并不包含有唯一标识，于是就会引起浏览器抛异常，并且不知道怎么处理复制出来的对象。\n\n所以，我们要使用内置的 angular 工具来追踪唯一标识或者数组中的 `$index` 位置（因为 null 对象在方格内只有一个所以可以通过数组的位置来追踪）。我们可以向如下那样修改一下 grid_directive 中的视图来解决 null 对象：\n\n```javascript\n<!-- ... -->\n<div tile\n      ng-model='tile'\n      ng-repeat='tile in ngModel.tiles track by $id(tile.id || $index)'></div>\n<!-- ... -->\n```\n\n> 这个问题也能通过实现不同的底层数据结构来解决，例如使用迭代器来查看每一个 `TileModel` 的位置而不是依靠数组下标或者每次改变数组后重新调整（或在 `$digest()` 中调整）。为了保持简单和清晰，我们使用数组来实现因为这种实现方法只需要处理上文的副作用就可以了。\n\n<a name=\"game-over\"></a>\n## 我们赢了?!?? 游戏结束\n\n当我们在原来 2048 游戏中输了的时候，一个 * 游戏结束 * 界面会滑入，让我们重新开始游戏或者在 twitter 上 follow 游戏作者。这不仅是游戏中一个酷酷的效果，也是一个中断游戏的好方法。\n\n使用基本的 angular 技术也能做到这个。我们已经在 `GameManager` 使用了变量 `gameOver` 来确定游戏什么时候结束。可以直接就用一个 `<div>` 元素来装着游戏结束界面，然后使用绝对定位覆盖在棋盘上。这种技术（和 Angular）的神奇在于实现起来没有任何的花招：\n\n就是简单地创建一个包含游戏结束或者玩家获胜的信息的 `<div>` 元素，根据游戏的状态来选择显示。比如，游戏结束界面看起来可以像这样：\n\n```markup\n<!-- ... -->\n<div id=\"game-container\">\n  <div grid ng-model='ctrl.game' class=\"row\"></div>\n    <div id=\"game-over\"\n        ng-if=\"ctrl.game.gameOver\"\n        class=\"row game-overlay\">\n      Game over\n      <div class=\"lower\">\n        <a class=\"retry-button\" ng-click='ctrl.newGame()'>Try again</a>\n      </div>\n    </div>\n  <!-- ... -->\n```\n\n困难的部分是处理样式 / CSS。为效率起见，我们只是将元素设置成绝对定位在网格之上，让浏览器来决定真正的位置。这里附上 * 相关的 * 一部分 css（提醒一下，完整 CSS 在下面的 gtihub 地址中有）：\n\n```css\n.game-overlay {\n  width: $width;\n  height: $width;\n  background-color: rgba(255, 255, 255, 0.47);\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 10;\n  text-align: center;\n  padding-top: 35%;\n  overflow: hidden;\n  box-sizing: border-box;\n\n  .lower {\n    display: block;\n    margin-top: 29px;\n    font-size: 16px;\n  }\n}\n```\n\n> 我们可以使用完全相同的技术来做获胜界面，同样创建一个代表获胜的 `.game-overlay` 元素即可。\n\n<a name=\"running-the-animation\"></a>\n## 动画\n\n原 2048 游戏中其中一个令人印象深刻的地方是方块似乎会魔术般地从一个网格滑到下一个网格，另外游戏结束 / 获胜界面的显示显得很自然。因为使用 Angular，我们能做到 * 几乎一样的效果 *（感谢 CSS）。\n\n实际上，我们做出来的游戏能够容易地实现诸如滑动，出现，显现等的动画效果。我们几乎不会碰到 JavaScript（只需一点点）就可以实现这些效果。\n\n### CSS 位置动画（也就是添加滑动的方块）\n\n因为我们通过 CSS 设置类 `position-[x]-[y]` 来定位方块，当为方块设置新位置的时候，DOM 元素会加上类 `position-[newX]-[newY]` 并移除类 `position-[oldX]-[oldY]`。在这种情况下，我们在 `.tile` 类上定义一个 CSS 变换来实现 CSS 类上自带滑动效果。\n\n相关的 SCSS：\n\n```css\n.tile {\n  @include border-radius($tile-radius);\n  @include transition($transition-time ease-in-out);\n  -webkit-transition-property: -webkit-transform;\n  -moz-transition-property: -moz-transform;\n  transition-property: transform;\n  z-index: 2;\n}\n```\n\nCSS 变换定义好后，现在方块就会在网格之间滑动了（对，就是 * 那么简单 *）。\n\n### 游戏结束界面动画\n\n如果想在动画上取得更多的效果，可以使用 `ngAnimate` 模块来做。此模块本身配合 angular 一起就是开箱即用了。\n\n在使用前，同样需要安装 `ngAnimate` 模块。在 [angularjs.org](http://angularjs.org) 上下载或者使用包管理器（例如 bower）来安装。\n\n```bash\n$ bower install --save angular-animate\n```\n\n同样，我们接着就需要在 HTML 中引用以便浏览器加载。修改 `index.html` 来引用 `angular-animate.js` 文件。\n\n```markup\n<script src=\"bower_components/angular-animate/angular-animate.js\"></script>\n```\n\n最后，就像其他 angular 模块一样，我们要告诉 angular 我们的应用依赖什么模块来运行。在应用的依赖数组中加入：\n\n```javascript\nangular\n.module('twentyfourtyeightApp', ['Game', 'Grid', 'Keyboard', 'ngAnimate', 'ngCookies'])\n// ...\n```\n\n### ngAnimate\n\n虽然对 ngAnimate 的深度探讨超出本文范围（看 [ng-book](https://www.ng-book.com) 来深入了解其机制），但是我们还是粗浅了解一下其工作机制以便在应用里实现动画。\n\n引入了 `ngAnimate` 作为模块级别依赖之后，任何时候 angular 为相关的（对于我们的应用而言）指令添加一个新对象的时候，它也会增添上一个 CSS 类（免费）。我们可以利用这些类来给游戏中的不同组件赋予 CSS 动画：\n\n<table>\n  <tr>\n    <th>Directive</th>\n    <th>Added class</th>\n    <th>Leaving class</th>\n  </tr>\n  <tr>\n    <td>ng-repeat</td>\n    <td>ng-enter</td>\n    <td>ng-leave</td>\n  </tr>\n  <tr>\n    <td>ng-if</td>\n    <td>ng-enter</td>\n    <td>ng-leave</td>\n  </tr>\n  <tr>\n    <td>ng-class</td>\n    <td>[className]-add</td>\n    <td>[className]-remove</td>\n  </tr>\n</table>\n\n当一个元素被添加进 `ng-repeat` 的作用域，新的 DOM 元素会被自动添加上 CSS 类 `ng-enter`。然后，当它真正地添加到视图上后，就会被添加上 CSS 类 `ng-enter-active`。这个机制很重要因为它让我们能够在 CSS 类 `ng-enter` 里设定动画的样子和在 CSS 类 `ng-enter-active` 里设定动画的样式。当元素在 `ng-repeat` 迭代器中被移除的时候类 `ng-leave` 也是如此的工作机制。\n\n当 DOM 元素上一个新的 CSS 类被添加（或被移除），相应的 `[classname]-add` 和 `[classname]-add-active` 也会添加到 DOM 元素上。同理，也可以在相应的类里设定 CSS 动画。\n\n### 游戏结束界面动画\n\n我们能使用类 `ng-enter` 来让游戏结束界面和获胜界面动起来了。记住，类 `.game-overlay` 是使用 `ng-if` 指令来实现隐藏和显示的。当 `ng-if` 的条件变化了，`ngAnimate` 会在等式值为真的时候添加上 `.ng-enter` 和 `.ng-enter-active`（或者移除元素时添加 `.ng-leave` 和 `.ng-leave-active`）。\n\n我们会在类 `.ng-enter` 中设定好动画，然后在类 `.ng-enter-active` 中激活。相关的 SCSS：\n\n```css\n.game-overlay {\n  // ...\n  &.ng-enter {\n    @include transition(all 1000ms ease-in);\n    @include transform(translate(0, 100%));\n    opacity: 0;\n  }\n  &.ng-enter-active {\n    @include transform(translate(0, 0));\n    opacity: 1;\n  }\n  // ...\n}\n```\n\n所有的 SCSS 在文章底部的 github 连接中可以看到。\n\n<a name=\"customizing-size\"></a>\n## 定制位置\n\n假设我们想使用不同的棋盘大小。例如，原 2048 是 4x4 的。如果我们想要 3x3 或者 6x6 呢？不用变动太多的代码我们就能轻松实现。\n\n棋盘本身是通过 SCSS 来创建和定位的，而网格又是通过 `GridService` 来管理的。所以我们在这两个地方修改一下以便能自定义棋盘。\n\n### 动态 CSS\n\n好吧实际上我们并不是打算弄动态 CSS，但是我们可以创建更加多实际会用得上的 CSS。与其使用单个 `#game` 标签，我们可以实时创建可以动态设置网格的 DOM 元素标签。也就是说，我们将 3x3 的棋盘版本嵌套在 ID 是 `#game-3` 的 DOM 元素下，将 6x6 的棋盘版本嵌套在 id 标签是 `#game-6` 的元素下。\n\n可以在原本已经是动态的 SCSS 中编写出一个[混合](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins)。就是很简单地找到 css ID 标签 `#game` 然后将其包裹进一个混合。例如：\n\n```css\n@mixin game-board($tile-count: 4) {\n  $tile-size: ($width - $tile-padding * ($tile-count + 1)) / $tile-count;\n  #game-#{$tile-count} {\n    position: relative;\n    padding: $tile-padding;\n    cursor: default;\n    background: #bbaaa0;\n    // ...\n}\n```\n\n现在我们可以引用 `game-board` 混合来动态创建一个包含有不同棋盘版本的样式表了，棋盘的版本都各自独立在其 `#game-[n]` 标签下。\n\n要做出这样不同的版本，我们只需要遍历所有的棋盘大小然后调用上面的混合就可以了。\n\n```css\n$min-tile-count: 3;       // lowest tile count\n$max-tile-count: 6;       // highest tile count\n@for $i from $min-tile-count through $max-tile-count {\n  @include game-board($i);\n}\n```\n\n### 动态的 GridService\n\n现在已经编写好了应付不同大小棋盘的 CSS 了，我们还需要修改 `GridService` 好让启动应用的时候能设置网格的大小。\n\nAngular 让这变得十分简单。首先，我们需要将 `GridService` 变成 `provider`，而不是一个直接的 `service`。如果你不清楚服务（译者注：service）和提供者（译者注：provider）之间的不同，看 [ng-book](https://www.ng-book.com) 作深入了解。简单来说，一个提供者能够让我们在运行之前对其进行配置。\n\n此外，我们也需要将提供者中的构造函数修改为 `$get` 方法：\n\n```javascript\n.provider('GridService', function() {\n  this.size = 4; // Default size\n  this.setSize = function(sz) {\n    this.size = sz ? sz : 0;\n  };\n\n  var service = this;\n\n  this.$get = function(TileModel) {\n    // ...\n```\n\n提供者中任何不在 `$get` 方法中的方法都能在应用的 `.config()` 函数中访问得到。`$get()` 中的所有东西不能被 `.config()` 方法访问，而能在运行的时候被应用访问。\n\n实现动态棋盘大小的工作就这么多。现在我们试着做一个 6x6 的棋盘而不是 4x4 的棋盘。在 app 模块的 `.config()` 函数中，我们叫来 `GridServiceProvider` 来设置大小：\n\n```javascript\nangular\n.module('twentyfourtyeightApp', ['Game', 'Grid', 'Keyboard', 'ngAnimate', 'ngCookies'])\n.config(function(GridServiceProvider) {\n  GridServiceProvider.setSize(4);\n})\n```\n\n> Angular 在创建一个提供者的时候，会自动生成一个仅供配置时使用的模块，我们使用名字：[serviceName]Provider 来实现注入。\n\n<a name=\"demo\"></a>\n## 演示 demo\n\n完整的 demo 在这里：[http://ng2048.github.io/](http://ng2048.github.io/)。\n\n## 总结\n\n唷！我们希望你已经在愉快地使用 Angular 来编写这个 2048 游戏了。博文中应该已经覆盖了大部分的过程了。如果你觉得不错，可以在下面留下评论。如果你对继续学习 Angular 有兴趣，务必去看看我们的书[Complete Book on AngularJS](https://www.ng-book.com/)。这是唯一一本会不断更新 AngularJS 知识的书，并且包括了在 AngularJS 中所有你需要了解的东西。\n\n[在 HackerNews 上讨论](https://news.ycombinator.com/item?id=7554348)\n\n## Thanks\n\n非常感谢 [Gabriele Cirulli](http://gabrielecirulli.com/) 编写出了妙极的（和让人上瘾的）2048，同样感谢他对此文的启发。文中的很多主意都是从原游戏中搜集、提炼，用以阐明如何使用 Angular 来编写。\n\n## 完整代码\n\n游戏的完整代码在 Github 上，地址是 http://d.pr/pNtX。要在本地编译游戏，只需要复制代码然后运行：\n\n```bash\n$ npm install\n$ bower install\n$ grunt serve\n```\n\n## 问题与解决方法\n\n如果你使用不了 npm install，保证你安装了最新的 node.js 和 npm。\n\n这个版本库在 node v0.10.26 和 npm 1.4.3 上测试。\n\n以下是一个安装最新版本的 node 和 node 版本管理器 `n` 的方法：\n\n```bash\n$ sudo npm cache clean -f\n$ sudo npm install -g n\n$ sudo n stable\n```\n","source":"_posts/translation/译-使用AngularJS编写2048游戏.md","raw":"---\ntitle: '[译]使用 AngularJS 编写 2048 游戏'\ncategories:\n  - [翻译, 技术]\ntags: [translation, angularjs]\npermalink: translation-building-the-2048-game-in-angularjs\nid: 18\nupdated: '2014-06-11 14:13:25'\ndate: 2014-05-29 12:58:14\n---\n\n> 原文[http://www.ng-newsletter.com/posts/building-2048-in-angularjs.html](http://www.ng-newsletter.com/posts/building-2048-in-angularjs.html)，所有版权属于原文。考虑到排版和图片，内容稍有修改，对文章表达的意思并无太大影响。第一次渣翻长文，求翻译大大们拍砖和调教。\n\n我们最近经常被问到的其中一个问题是作为一个框架，Angular 在什么情况下使用并不太适合。我们的标准答案通常是编写游戏的时候，因为 Angular 有它自己的事件处理循环（$digest 循环）而游戏通常要求非常多的底层 DOM 操作。其实这个答案并不准确因为 Angular 其实是能支持多数游戏的编写的。即使要求大量的 DOM 操作的游戏，Angular 也能胜任其静态部分，例如高分记录和游戏菜单。\n\n如果你是像我那样的人（同时是个技术人），你有可能会喜欢玩那个流行的 [2048](http://gabrielecirulli.github.io/2048) 游戏。游戏的目标是通过合并相同数值的方块来得到数值是 2048 的方块。\n\n![Injection](http://www.ng-newsletter.com/images/2048/game.gif)\n\n[在 HackerNews 上讨论](https://news.ycombinator.com/item?id=7554348)\n\n在今天的博文中，我们准备使用 AngularJS 来仿制这个游戏，而且是从头到尾完整地解释整个 app 的编写流程。这个 app 是一个相当复杂的应用，我们也希望利用这篇博文来展示如何编写复杂的 AngularJS 应用。\n\n此 Angular 版应用的[demo](http://d.pr/SnWD)。\n\n来让我们开始吧！\n\n> TL;DR: 本应用的完整源代码都能在文章底部的 github 链接里面找到。\n\n## 目录\n\n1. [计划](#planning)\n1. [模块结构](#modular)\n1. [GameController](#game-controller)\n1. [测试，测试，测试](#tdd)\n1. [建造游戏网格](#build-grid)\n1. [SCSS 来救援](#scss)\n1. [Tile 指令](#the-tile-directive)\n1. [游戏棋盘](#starting-the-game)\n1. [网格理论](#grid-theory)\n1. [玩法（键盘）](#keyboard)\n1. [按下开始按钮之时](#start-button)\n1. [游戏循环](#game-loop)\n1. [计算得分](#keeping-score)\n1. [游戏结束和获胜界面](#game-over)\n1. [动画](#running-the-animation)\n1. [自定义](#customizing-size)\n1. [演示](#demo)\n\n<a name=\"planning\"></a>\n## 第一步：计划\n\n![Minification](http://www.ng-newsletter.com/images/2048/3d-board.png)\n\n我们首先想做的是对将要编写的应用进行高层次设计。如果是仿制一个应用或是从零开始，我们都会这样做，不论应用有多大。\n\n审视一下，我们可以看到游戏是有一块游戏棋盘，上面有一些方块。每一个方块的位置就是数值方块的位置。我们可以利用这一个事实，使用 CSS3 而不是 javascript 来摆放方块，后者需要知道方块摆放的位置。当摆放方块的时候，我们只需要保证方块覆盖在合适的位置上就可以了。\n\nCSS3 的使用让我们不但能够免于在 CSS 上搞动画的工作，而且能使用标准的 AngularJS 行为（译者注：AngularJS behavior）来跟踪游戏棋盘、方块和游戏逻辑的状态。\n\n因为我们只有一个页面，所以只需要一个 controller 来管理页面。\n\n既然在应用的运行期间只有一个游戏棋盘，我们就另外创建单一一个 `GridService` 的 service 实例来保存所有的网格逻辑。service 都是单例对象，适合用来存储网格。我们会使用 `GridService` 来放置和移动方块、寻找可供移动的位置和管理网格。\n\n我们将游戏的逻辑和运行存储在另外一个叫 `GameManager` 的 service 中。`GameManager` 负责管理游戏状态、处理移动和维护得分（包括当前得分和最高得分）。\n\n最后，还需要一个组件来控制键盘。我们将使用一个名为 `KeyboardService` 的 service（只需要一个键盘动作的处理）。我们会在这篇文章中实现桌面版的处理，然而我们也可以重用同一个 service 来处理触屏动作使其能在移动设备上使用。\n\n### 开始编写应用\n\n要开始编写，我们先创建一个基本的应用（我们使用[yeoman](http://yeoman.io) angular generator 来生成应用的结构，但这是非必要的。我们只是将其作为一个起始点，但很快就会做出分支）。我们新建一个包含整个应用的目录，然后再在 `app/` 目录旁边建一个 `test/` 目录。\n\n![Minification](http://www.ng-newsletter.com/images/2048/directory_structure.png)\n\n> 以下使用 yeamon tool 来构建项目的指南。如果你更喜欢自己动手，可以跳过依赖安装直接进入下一章节。\n\n我们要先保证安装了 `yeamon` 才能在项目中使用。Yeamon 依赖 NodeJS 和 npm。NodeJS 的安装并不在本文叙述的范围内但是在 [NodeJS.org](http://nodejs.org) 上有一个很好的指南。\n\n在 `npm` 安装完后，我们就能安装 yeamon tool，`yo`，和 angular generator（`yo` 会使用这个生成器来生成我们的 Angular 应用）：\n\n```bash\n$ npm install -g yo\n$ npm install -g generator-angular\n```\n\n安装完之后，就可以使用 yeamon tool 来创建应用了，按照下面的来：\n\n```bash\n$ cd ~/Development && mkdir 2048\n$ yo angular twentyfourtyeight\n```\n\n工具会问你一些问题，一律答 yes，除了只选 `angular-cookies` 作为依赖，因为我们不需要除了缺省以外的依赖。\n\n> 注意使用 Angular generator 会要求你安装 ruby 环境、gem 和 compass。文章下面给出的完整代码中会介绍如何避免使用 ruby 和 compass。\n\n#### 我们的 angular 模块\n\n新建 `scripts/app.js` 文件来控制我们的应用。来，开始编写吧：\n\n```javascript\nangular.module('twentyfourtyeightApp', [])\n```\n\n<a name=\"modular\"></a>\n## 模块结构\n\n现在比较推荐的 Angular 应用结构是根据功能来构建而不是类型。也就是说，不是以 controllers（译者注：控制器）、services、directives 等来分离我们的组件而是以功能来定义模块结构。例如在我们的应用中，定义了一个 `Game` 模块和 `Keyboard` 模块。\n\n![Minification](http://www.ng-newsletter.com/images/2048/scripts_dir.png)\n\n这样的模块结构让我们能够清晰分离出跟文件结构相匹配的职责。这样做既能帮助我们构建大型的复杂的 angular 应用，也能让功能在不同的应用间共享。\n\n之后我们将会建立起匹配文件和目录结构的测试环境。\n\n#### 视图\n\n在我们的项目中，从视图开始编写是最容易的。审视一下，要做的视图 / 模板只有一个。我们不需要多个视图，所以只需要一个 `<div>` 元素来包含应用中的所有内容。\n\n在我们的的 `app/index.html` 文件中，我们需要包含所有的依赖（包括 `angular.js` 自身和自己编写的 javascript 文件——现在就只有 `scripts/app.js`），就像下面的：\n\n```markup\n<!-- index.html -->\n<doctype html>\n<html>\n  <head>\n    <title>2048</title>\n    <link rel=\"stylesheet\" href=\"styles/main.css\">\n  </head>\n  <body ng-app=\"twentyfourtyeightApp\"\n    <!-- header -->\n    <div class=\"container\" ng-include=\"'views/main.html'\"></div>\n    <!-- script tags -->\n    <script src=\"bower_components/angular/angular.js\"></script>\n    <script src=\"scripts/app.js\"></script>\n  </body>\n</html>\n```\n\n> 你完全可以编写更复杂的多视图游戏——如果你这样打算的话请在下面留言，我们非常期待你的表现。\n\n现在 `app/index.html` 文件做好了，我们只需要在 `app/views/main.html` 中继续细节化应用层面的视图就可以了。当我们需要在应用中引入新资源的时候就只需要修改 `index.html` 了。\n\n赶快打开 `app/views/main.html`，所有的游戏相关的视图都放在此。通过使用 `controllerAs` 语法，控制器就可以显式暴露在任何需要在 `$scope` 中找数据和查询控制器对应组件的地方。\n\n```markup\n<!-- app/views/main.html -->\n<div id=\"content\" ng-controller='GameController as ctrl'>\n  <!-- Now the variable: ctrl refers to the GameController -->\n</div>\n```\n\n> `controllerAs` 语法是 1.2 版本提供的比较新的语法。当要在页面处理多个控制器的时候非常有用，因为这样就能指定包含我们需要的功能和数据的控制器。\n\n在视图中，我们想至少要显示如下几个东西：\n\n1. 游戏的静态标题\n2. 当前的游戏得分和本地用户最高的得分\n3. 游戏棋盘\n\n游戏的静态标题可以像下面那么简单：\n\n```markup\n<!-- heading inside app/views/main.html -->\n<div id=\"content\" ng-controller='GameController as ctrl'>\n  <div id=\"heading\" class=\"row\">\n    <h1 class=\"title\">ng-2048</h1>\n    <div class=\"scores-container\">\n      <div class=\"score-container\">{{ ctrl.game.currentScore }}</div>\n      <div class=\"best-container\">{{ ctrl.game.highScore }}</div>\n    </div>\n  </div>\n  <!-- ... -->\n</div>\n```\n\n注意在引用 `currentScore` 和 `highScore` 的时候我们也在视图中引用了 `GameController`。`controllerAs` 语法让我们能显式地引用自己感兴趣的控制器。\n\n<a name=\"game-controller\"></a>\n## 控制器 GameController\n\n现在既然已经有了一个合理的项目结构，我们赶快来创建一个 `GmaeController` 来控制会在视图上显示的数据。在 `app/scripts/app.js` 中，我们可以在主要模块 `twentyfourtyeightApp` 里创建这个控制器。\n\n```javascript\nangular\n.module('twentyfourtyeightApp', [])\n.controller('GameController', function() {\n});\n```\n\n在视图中，我们已经引用了一个 `game` 对象，此对象会在 `GameController` 中进行设置。`game` 对象引用的是主 * 游戏对象 *。我们会在另外一个新的模块中创建这个主游戏对象，新的模块也会保存游戏中的所有引用。\n\n现在还没有创建这个模块，应用不会在浏览器中载入。而在控制器里面，我们可以加上对 `GameManager` 的依赖：\n\n```javascript\n.controller('GameController', function(GameManager) {\n  this.game = GameManager;\n});\n```\n\n记住，我们正在做的是为应用中不同的部分创建模块级别的依赖，所以为了能在我们的应用中加载这些模块，需要在我们 Angular 模块中作为依赖来列出。将 `Game` 作为 `twentyfourtyeightApp` 的依赖，要在我们定义模块的地方的数组中列出。\n\n完整的 `app/scripts/app.js` 文件看起来应该像下面那样：\n\n```javascript\nangular\n.module('twentyfourtyeightApp', ['Game'])\n.controller('GameController', function(GameManager) {\n  this.game = GameManager;\n});\n```\n\n### The Game\n\n现在已经将部分数据绑定到视图上（译者注：原文 Now that we have the view partially hooked up to the view，或有误），我们可以开始编写游戏的逻辑了。在 `app/scripts/` 目录下新建 `app/scripts/game/game.js` 中创建游戏模块：\n\n```javascript\nangular.module('Game', []);\n```\n\n> 当创建模块的时候，我们通常将其放在以模块命名的目录内，而以模块命名的文件来完成初始化工作。比如，我们正在写一个游戏 (译者注：game) 模块，于是我们在 `app/scripts/game` 目录下的 `game.js` 中编写。这个方法在生产环境下被认为是可扩展的和合理的。\n\n`Game` 模块会提供唯一的核心组件：`GameManager`。\n\n我们编写的 `GameManager` 模块要做到：维持游戏的状态和玩家能做出的移动，维护得分、判断游戏结束和搞清楚是玩家赢了还是输了。\n\n当在编写应用的时候，我们通常将已知需要的方法写成桩方法，为这些方法写测试然后再填内容。\n\n> 为了文章起见，我们在这个模块里会走一遍这个流程。当继续写剩下的模块的时候，我们则只会涉及到应该测试的核心组件。\n\n我们知道到现在为止 `GameManager` 中会提供的几个 * 已知的 * 功能：\n\n1. 创建一个新的游戏\n2. 处理游戏循环 / 移动操作\n3. 更新得分\n4. 跟踪游戏的进行情况\n\n记住这几个功能，我们就能勾勒出 `GameManager` 服务的基本轮廓以供测试：\n\n```javascript\nangular.module('Game', [])\n.service('GameManager', function() {\n  // Create a new game\n  this.newGame = function() {};\n  // Handle the move action\n  this.move = function() {};\n  // Update the score\n  this.updateScore = function(newScore) {};\n  // Are there moves left?\n  this.movesAvailable = function() {};\n});\n```\n\n完成了基本的功能性函数之后，先挪一下，去写测试来决定在 `GameManager` 中 * 已知的 * 需要支持的函数中空白部分的内容。\n\n<a name=\"tdd\"></a>\n## 测试驱动开发（TDD）\n\n在开始实施测试前，我们需要配置好 karma 来驱动我们的测试。如果你对 karma 并不熟悉，就只需要了解到它是一个测试运行器，能让我们舒服而高效地在控制台和代码中自动化操作前端测试。\n\n![Running karma](http://www.ng-newsletter.com/images/2048/running_karma.png)\n\nKarma 作为一个 npm 包，依赖于 NodeJS。运行命令行来安装：\n\n```bash\n$ npm install -g karma\n```\n\n> 参数 `-g` 告诉 npm 这个包作为全局模块来安装。没有这个参数，包将只会安装到本地的工作目录上。\n\n如果你是通过 yeoman angular 生成器来构建应用的话可以跳过以下的部分。\n\n要使用 karma，需要一个配置文件。虽然我们这里不会深入叙述如何配置 Karma（在 [ng-book](https://www.ng-book.com) 中查看详细的 karma 配置选项），但是过程中决定性的部分就是让 Karma 载入所有我们想要测试的文件。\n\n我们可以使用 `karma init` 命令来生成一个基本的配置文件：\n\n```bash\n$ karma init karma.conf.js\n```\n\n命令会问几个问题然后生成 `karma.conf.js`。这里我们修改一下其中两个选项：`files` 数组和打开 `autoWatch`：\n\n```javascript\n  // ...\n  files: [\n    'app/bower_components/angular/angular.js',\n    'app/bower_components/angular-mocks/angular-mocks.js',\n    'app/bower_components/angular-cookies/angular-cookies.js',\n    'app/scripts/**/*.js',\n    'test/unit/**/*.js'\n  ],\n  autoWatch: true,\n  // ...\n```\n\n一旦写好了配置文件，任何时候我们保存文件都可以运行测试了（测试文件在 `test/unit/` 目录内）。\n\n我们像如下那样执行命令 `karma start` 来运行测试：\n\n```bash\n$ karma start karma.conf.js\n```\n\n### 编写第一个测试\n\nkarma 已经配置好了，可以写对 `GameManager` 的基本测试了。然而我们还并不清楚应用的整个功能，所以暂时只能写有限的测试。\n\n> 在编写应用的时候我们经常发现 API 需要修改，所以与其在变化前投入大量时间，不如建立好对基本功能的测试然后在深入测试中找到最终的 API。\n\n用是否有可能的移动来作为第一个写的测试是个好选择。简单地编写几个我们已知需要的返回真 / 假的调用，来测试我们应用的逻辑行为。\n\n创建 `test/unit/game/game_spec.js` 文件然后开始填入内容：\n\n```javascript\ndescribe('Game module', function() {\n  describe('GameManager', function() {\n    // Inject the Game module into this test\n    beforeEach(module('Game'));\n\n    // Our tests will go below here\n  });\n});\n```\n\n> 在这个测试中我们使用 [Jasmine](http://jasmine.github.io/2.0/introduction.html) 语法。\n\n跟其他单元测试一样，我们需要创建一个 `GameManager` 对象的实例。我们可以使用普通的语法（测试服务的时候）将它注入到测试中。\n\n```javascript\n  // ...\n  // Inject the Game module into this test\n  beforeEach(module('Game'));\n\n  var gameManager; // instance of the GameManager\n  beforeEach(inject(function(GameManager) {\n    gameManager = GameManager;\n  });\n\n  // ...\n```\n\n有了这个 `gameManager` 实例，就可以建立对函数 `movesAvailable()` 的期望值。\n\n我们定义的 `movesAvailable()` 函数是用来检测是否有空格剩余和是否有方块可以合并。另外这个结果跟游戏是否结束是有关联的，我们会将这个方法放进 `GameManager` 中，但是在之后创建的 `GridService` 中才实现大多数的复杂细节。\n\n棋盘上要有剩余可走的地方，必须满足以下两个条件：\n\n1. 棋盘上有空余空格\n2. 方块可以合并\n\n弄清楚了这两个条件，我们就可以写出测试来看看是否符合。\n\n基本的思路就是我们写出的单元测试对于设定的条件要能作可观察到的反应。然后因为要依赖 `GridService` 来反映游戏的状态，所以需要模拟出这个条件来保证在 `GameManager` 中的逻辑是正确的。\n\n#### 模拟 `GridService`\n\n要模拟 `GridService`，我们只需要简单地 * 重写 * 缺省的 Angular 行为，替换 * 真正的 * 服务为我们模拟出来的服务，然后就可以在模拟的服务中建立可控制条件。\n\n详细一点说就是，我们简单地创建一个拥有模拟方法的假对象然后通过在 `$provide` 中换上来骗 Angular 说这个假对象是 * 真 * 对象。\n\n```javascript\n  // ...\n  var _gridService;\n  beforeEach(module(function($provide) {\n    _gridService = {\n      anyCellsAvailable: angular.noop,\n      tileMatchesAvailable: angular.noop\n    };\n\n    // Switch out the real GridService for our\n    // fake version\n    $provide.value('GridService', _gridService);\n  }));\n  // ...\n```\n\n现在我们就可以用 `_gridService` 这个假对象实例来建立条件了。\n\n我们希望当有单元格剩余的时候函数 `movesAvailable()` 返回 true。在 `GridService` 中模拟一个 `anyCellsAvailable()` 函数（其实还没写）。我们期望这个在 `GridService` 的函数能告诉我们还有剩余的单元格。\n\n```javascript\n// ...\ndescribe('.movesAvailable', function() {\n  it('should report true if there are cells available', function() {\n    spyOn(_gridService, 'anyCellsAvailable').andReturn(true);\n    expect(gameManager.movesAvailable()).toBeTruthy();\n  });\n  // ...\n```\n\n现在基础工作已经做好了，我们可以接着建立第二个条件了。如果方块可以合并，那么我们希望 `movesAvailable()` 保证会返回 true。相反的情况也是返回 true 因为既没有单元格空余也没有可合并的方块才是没有步数可走。\n\n另外两个保证这个结果的测试是：\n\n```javascript\n// ...\nit('should report true if there are matches available', function() {\n  spyOn(_gridService, 'anyCellsAvailable').andReturn(false);\n  spyOn(_gridService, 'tileMatchesAvailable').andReturn(true);\n  expect(gameManager.movesAvailable()).toBeTruthy();\n});\nit('should report false if there are no cells nor matches available', function() {\n  spyOn(_gridService, 'anyCellsAvailable').andReturn(false);\n  spyOn(_gridService, 'tileMatchesAvailable').andReturn(false);\n  expect(gameManager.movesAvailable()).toBeFalsy();\n});\n// ...\n```\n\n将基础工作搞好，我们也好在实现真正函数前写好测试。\n\n> 虽然考虑到整个文章的整体性我们不会再在文章中使用 TDD，但是我们建议你应该始终使用 TDD。可以在下面的完整代码中查看更多的测试代码。\n\n## 回到 GameManager\n\n现在我们的任务就是实现函数 `movesAvailable()`。然而我们已经确认了代码可行性__和__要求的条件，实现起来实在简单。\n\n```javascript\n  // ...\n  this.movesAvailable = function() {\n    return GridService.anyCellsAvailable() ||\n            GridService.tileMatchesAvailable();\n  };\n  // ...\n```\n\n<a name=\"build-grid\"></a>\n## 建造游戏网格\n\n到现在为止我们已经让 `GameManager` 运行起来了，然后就是要创建 `GridService` 来处理在棋盘中的所有状况。\n\n回忆一下我们的想法：在 `GridService` 中使用两个本地数组变量，基本数组 `grid` 和基本数组 `tiles`。在 `app/scripts/grid/grid.js` 文件中写服务：\n\n```javascript\nangular.module('Grid', [])\n.service('GridService', function() {\n  this.grid   = [];\n  this.tiles  = [];\n  // Size of the board\n  this.size   = 4;\n  // ...\n});\n```\n\n当开始一个新的游戏的时候，我们需要清空这些数组。而因为 `grid` 数组只是用来放方块的 DOM 元素组成的。\n\n然而数组 `tiles` 则是动态的，它会跟踪游戏过程中的当前的方块。使用游戏中不同的状态之前，先在页面上建造好网格先吧，这样我们也好看看大概样子是怎么样。\n\n回到 `app/views/main.html`，我们开始设计网格。因为网格是动态而又带有我们给它写的逻辑，所以只有就其放在其指令（译者注：directive）中才合乎逻辑。使用指令可以让主要的模板保持简洁，同样也能将功能封装在指令中而让主要的控制器保持简洁。\n\n在 `app/index.html` 中我们将网格指令添加上然后在控制器中传递给 `GameManager` 实例。\n\n```markup\n  <!-- instructions -->\n  <div id=\"game-container\">\n    <div grid ng-model='ctrl.game' class=\"row\"></div>\n    <!-- ... -->\n```\n\n我们是在 `Grid` 模块里写这个指令的，所以在 `app/scripts/grid/` 目录下，新建一个 `grid_directive.js` 文件来安放我们的 `grid` 指令。\n\n在 `grid` 指令里面，我们只需要少量变量因为它需要封装视图，能做的事情不多。\n\n指令会需要持有 `GameManager` 的实例（或者至少是一个有 `grid` 和 `tiles` 数组的模型），所以将其设置为指令的依赖。另外，不希望指令由于页面上的其它内容或者 GameManager 自身的原因瘫痪，所以我们创建了隔离作用域。\n\n> 查看我们写的 [自定义指令](http://www.ng-newsletter.com/posts/directives.html) 来更加深入指令的编写，或者查看 [ng-book](https://www.ng-book.com) 中有关指令的细节。\n\n```javascript\nangular.module('Grid')\n.directive('grid', function() {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    scope: {\n      ngModel: '='\n    },\n    templateUrl: 'scripts/grid/grid.html'\n  };\n});\n```\n\n这个指令的主要功能是构建网格视图，所以我们不需要写任何自定义逻辑。\n\n### grid.html\n\n在指令的模板里面，我们会运行两个 `ngRepeat` 来显示网格和方块数组，还会（暂时）在循环中使用 `$index` 来跟踪。\n\n```markup\n<div id=\"game\">\n  <div class=\"grid-container\">\n    <div class=\"grid-cell\"\n      ng-repeat=\"cell in ngModel.grid track by $index\">\n      </div>\n  </div>\n  <div class=\"tile-container\">\n    <div tile\n      ng-model='tile'\n      ng-repeat='tile in ngModel.tiles track by $index'>\n    </div>\n</div>\n</div>\n```\n\n第一个 `ng-repeat` 简单易懂，就是遍历了 grid 数组然后生成了 class 属性是 `grid-cell` 的单个空 div 元素。\n\n在第二个 `ng-repeat` 中，我们会为每一个显示的元素生成一个名为 `tile` 的指令。这个 `tile` 指令会负责生成每一个方格元素的样子。我们很快就会去编写 `tile` 指令……\n\n精明的读者可能会发现我们只适用一维数组来显示二维网格。当我们渲染视图的时候，我们只会得到一列“方格”，而不是一个网格。\n\n要将它弄成网格，我们来深入 CSS 的编写。\n\n<a name=\"scss\"></a>\n## 开始 SCSS\n\n在这个项目中，我们会使用 SASS 的一个变种：scss。scss 除了是一个更强大的 CSS 外，还能动态地生成 CSS。\n\n应用所有显示的元素的主要部分会使用 CSS 来完成，包括动画、布局和可视元素（方格的颜色等）。\n\n要创建二维的棋盘，我们会用到 CSS3 关键字：`transform` 来处理每一个特定的方格的位置。\n\n### CSS3 transform 属性\n\nCSS3 transform 属性是一个可以让我们对元素进行 2D 或者 3D 上的移动、扭曲、旋转、缩放等操作（支持动画）的属性。用上了此属性，就可以直接将方块放在棋盘上然后剩下就只是应用合适的 `transform` 属性的事了。\n\n例如，在下面的演示中，我们有一个宽 40px 高 40px 的盒子。\n\n<div style=\"margin:40px;padding:40px 0;border-bottom:1px solid #333;\">\n  <div style=\"width:40px;height:40px;background-color:blue;\"></div>\n</div>\n\n```css\n.box {\n  width:40px;\n  height:40px;\n  background-color: blue;\n}\n```\n\n如果我们应用一个 `translateX(300px)` 的 `transform` 属性，就可以将盒子向右移动了 300px，就像下面所展示的：\n\n<div style=\"margin:40px;padding:40px 0;border-bottom:1px solid #333;\">\n  <div style=\"width:40px;height:40px;background-color:blue;-webkit-transform:translateX(300px);transform:translateX(300px);\"></div>\n</div>\n\n```css\n.box.transformed {\n  -webkit-transform: translateX(300px);\n  transform: translateX(300px);\n}\n```\n\n使用 translate 属性，我们只需应用 CSS 类就可以在棋盘上随便移动方块了。现在，精妙之处在于页面是多变的，我们如何能将类写得足够动态可以对应到网格上的正确位置。\n\n这里就是 SCSS 大显身手的地方了。我们会创建几个变量（例如一行有多少个方格）然后在 SCSS 中结合数学来帮助我们计算。\n\n来看一下计算棋盘上正确位置需要的变量：\n\n```css\n$width: 400px;          // The width of the whole board\n$tile-count: 4;         // The number of tiles per row/column\n$tile-padding: 15px;    // The padding between tiles\n```\n\n让 SCSS 用这些变量帮我们动态计算位置。首先算出每一个方格的大小。在 SCSS 中非常简单：\n\n```css\n$tile-size: ($width - $tile-padding * ($tile-count + 1)) / $tile-count;\n```\n\n现在我们就可以使用适当的宽和高来建立那个 `#game` 容器了。同时 `#game` 容器也会被设置成位置参照，它的子元素将会使用绝对定位。我们将 `.grid-container` 和 `tile-container` 放在 `#game` 容器内。\n\n我们这里只展示跟 scss 有关的部分。剩下的代码可以在文章末尾的 github 地址上找到。\n\n```css\n#game {\n  position: relative;\n  width: $width;\n  height: $width; // The gameboard is a square\n\n  .grid-container {\n    position: absolute;   // the grid is absolutely positioned\n    z-index: 1;           // IMPORTANT to set the z-index for layering\n    margin: 0 auto;       // center\n\n    .grid-cell {\n      width: $tile-size;              // set the cell width\n      height: $tile-size;             // set the cell height\n      margin-bottom: $tile-padding;   // the padding between lower cells\n      margin-right: $tile-padding;    // the padding between the right cell\n      // ...\n    }\n  }\n  .tile-container {\n    position: absolute;\n    z-index: 2;\n\n    .tile {\n      width: $tile-size;        // tile width\n      height: $tile-size;       // tile height\n      // ...\n    }\n  }\n}\n```\n\n注意为了让 `.tile-container` 放在 `.grid-container` 前面，我们__必须__要为 `.tile-container` 更高的 `z-index` 值。如果没有设置 `z-index` 值，浏览器会将两个元素放在同等高度，就不好看了。\n\n做好这一步之后，现在我们来动态生成方块的位置。我们需要是一个 `.position-{x}-{y}` 类，用来应用到方块上，这样浏览器就会知道方块的位置然后将它放置好。既然我们是计算相对于网格容器的的 transformation 属性值，那就使用 `0,0` 作为第一个方块的初始位置。\n\n我们对队列进行迭代，结合基于计算出来的期望偏移，动态生成每一个类。\n\n```css\n.tile {\n  // ...\n  // Dynamically create .position-#{x}-#{y} classes to mark\n  // where each tile will be placed\n  @for $x from 1 through $tile-count {\n    @for $y from 1 through $tile-count {\n      $zeroOffsetX: $x - 1;\n      $zeroOFfsetY: $y - 1;\n      $newX: ($tile-size) * ($zeroOffsetX) + ($tile-padding * $zeroOffsetX);\n      $newY: ($tile-size) * ($zeroOffsetY) + ($tile-padding * $zeroOffsetY);\n\n      &.position-#{$zeroOffsetX}-#{$zeroOffsetY} {\n        -webkit-transform: translate($newX, $newY);\n        transform: translate($newX, $newY);\n      }\n    }\n  }\n  // ...\n}\n```\n\n> 注意我们不得不使用从 1 开始的偏移量来计算位置，而不是传统的从 0 开始。这是受 SASS 自身的限制所迫。不过我们可以使用将索引减 1 来解决。\n\n现在我们写好了动态的 `.position-#{x}-#{y}`CSS 类，方块能够显示在页面上了。\n\n![2-d grid\n](http://www.ng-newsletter.com/images/2048/screen.png)\n\n### 为不同的方块上色\n\n注意到当有不同的方块出现的时候，各自都是不同颜色的。不同的颜色标识着不同方块所代表的值。如此一来玩家能看得出方格所处的状态。使用和我们迭代方格数目的时候同样的技巧来创建方格颜色方案。\n\n要创建出颜色方案，我们首先要创建一个 SCSS 数组，包含有每一种需要用到的背景颜色。每一种颜色：\n\n```css\n$colors:  #EEE4DA, // 2\n          #EAE0C8, // 4\n          #F59563, // 8\n          #3399ff, // 16\n          #ffa333, // 32\n          #cef030, // 64\n          #E8D8CE, // 128\n          #990303, // 256\n          #6BA5DE, // 512\n          #DCAD60, // 1024\n          #B60022; // 2048\n```\n\n使用了 `$colors` 数组，我们只要迭代每一个颜色就能基于方块的值来动态创建一个类。也就是说，当一个方块的值是 2，我们会给它加上指定背景颜色是 `#EEE4DA` 的 `.tile-2` 类。与其给每个方块用硬编码，我们不如用 SCSS 的魔法来完成：\n\n```css\n@for $i from 1 through length($colors) {\n  &.tile-#{power(2, $i)} .tile-inner {\n    background: nth($colors, $i)\n  }\n}\n```\n\n当然，我们需要自己定义 `power()` 混合（译者注：mixin）。定义如下：\n\n```css\n@function power ($x, $n) {\n  $ret: 1;\n\n  @if $n >= 0 {\n    @for $i from 1 through $n {\n      $ret: $ret * $x;\n    }\n  } @else {\n    @for $i from $n to 0 {\n      $ret: $ret / $x;\n    }\n  }\n\n  @return $ret;\n}\n```\n\n<a name=\"the-tile-directive\"></a>\n## Tile 指令\n\nSCSS 的繁琐工作完成了，我们可以回到 tile 指令的编写中了。通过动态的位置布局，让 CSS 按我们所设计的那样将方块摆放到位。\n\n然而 `tile` 指令是一个自定义视图的容器，并不需要做很多事。我们需要的是它负责显示的单元格的访问权。除此以外，并不需要在指令内放任何功能。代码简单到足以自我描述：\n\n```javascript\nangular.module('Grid')\n.directive('tile', function() {\n  return {\n    restrict: 'A',\n    scope: {\n      ngModel: '='\n    },\n    templateUrl: 'scripts/grid/tile.html'\n  };\n});\n```\n\n现在，`tile` 指令中有趣的地方就是我们如何动态的为网格布局。而模板会需要用到在隔离作用域（译者注：isolate scope）中的 `ngModel` 变量来处理好一切。\n\n```markup\n<div ng-if='ngModel' class=\"tile position-{{ ngModel.x }}-{{ ngModel.y }} tile-{{ ngModel.value }}\">\n  <div class=\"tile-inner\">\n    {{ ngModel.value }}\n  </div>\n</div>\n```\n\n我们几乎已经可以将这个基础的指令直接显示了。对于每一个有 `x` 和 `y` 坐标的方块而言，它们都会 * 自动 * 被赋予一个 `.position-#{x}-#{y}` 的类。浏览器会 * 自动 * 地将它们放到我们期待的位置。\n\n这意味着我们的方块对象会需要一个 `x` 和 `y` 以及 `value` 让指令来使用。为此，对于每一个显示的方块，我们都需要创建一个新的对象。\n\n### TileModel\n\n与其创建一个 * 哑 * 对象，我们还不如创建一个比较智能的对象，既存储数据也能提供功能。\n\n我们希望能使用 Angular 的依赖注入，因此创建一个服务来安置数据模型。我们在 `Grid` 模块中创建一个 `TileModel` 服务，因为跟游戏棋盘有关的操作时，它只需要使用底层的 `TileModel`。\n\n使用 `.factory` 方法，我们能够简单地创建一个工厂函数。跟使用 `service()` 函数时传递的用以定义服务的函数会被默认为服务的构造函数不同的是，使用 `factory()` 函数会认为传递函数返回的对象才是服务。所以，只用 `factory()` 函数，我们可以将服务赋给任何对象以便在我们 Angular 应用中随时 * 注入 *。\n\n在 `app/scripts/grid/grid.js` 文件中，我们可以创建 `TileModel` 工厂：\n\n```javascript\nangular.module('Grid')\n.factory('TileModel', function() {\n  var Tile = function(pos, val) {\n    this.x = pos.x;\n    this.y = pos.y;\n    this.value = val || 2;\n  };\n\n  return Tile;\n})\n// ...\n```\n\n现在在我们 Angular 应用中的任何地方，我们都可以 * 注入 * 这个 `TileModel` 并想全局对象一样使用。非常方便不是吗？\n\n> 不要忘了要为我们在 `TileModel` 中实现的任何功能写测试。\n\n### 我们第一个网格\n\n现在我们已经写好了 `TileModel` 了，我们可以开始在 `tiles` 数组中放入 `TileModel` 的实例了，然后发现它们 * 神奇地 * 出现在网格中正确的位置上。\n\n让我们来试试在 `GridService` 中的 `tiles` 数组中加入一些方块：\n\n```javascript\nangular.module('Grid', [])\n.factory('TileModel', function() {\n  // ...\n})\n.service('GridService', function(TileModel) {\n  this.tiles  = [];\n  this.tiles.push(new TileModel({x: 1, y: 1}, 2));\n  this.tiles.push(new TileModel({x: 1, y: 2}, 2));\n  // ...\n});\n```\n\n<a name=\"starting-the-game\"></a>\n## 棋盘已经准备好了\n\n现在我们具备显示方块的能力了，还需要在 `GridService` 中实现准备棋盘的功能。当第一次载入页面的时候我们想创建一个空的棋盘。而同样的动作也应该发生在当用户在进行游戏的时候点击了 `New Game` 或者 `Try again` 的时候。\n\n要清理棋盘，我们会在 `GridService` 中创建一个叫 `buildEmptyGameBoard()` 的函数。这个方法会负责将 `GridService` 中的 `grid` 数组和 `tiles` 数组填充 null。\n\n在开始编写代码之前，我们先写出测试以保证 `buildEmptyGameBoard()` 函数的行为没问题。然而这个写的过程在上面已经讲过一遍了，所以不再讨论直接给出结果。写出来的测试大概就像下面那样：\n\n```javascript\n// In test/unit/grid/grid_spec.js\n// ...\ndescribe('.buildEmptyGameBoard', function() {\n  var nullArr;\n\n  beforeEach(function() {\n    nullArr = [];\n    for (var x = 0; x < 16; x++) {\n      nullArr.push(null);\n    }\n  })\n  it('should clear out the grid array with nulls', function() {\n    var grid = [];\n    for (var x = 0; x < 16; x++) {\n      grid.push(x);\n    }\n    gridService.grid = grid;\n    gridService.buildEmptyGameBoard();\n    expect(gridService.grid).toEqual(nullArr);\n  });\n  it('should clear out the tiles array with nulls', function() {\n    var tiles = [];\n    for (var x = 0; x < 16; x++) {\n      tiles.push(x);\n    }\n    gridService.tiles = tiles;\n    gridService.buildEmptyGameBoard();\n    expect(gridService.tiles).toEqual(nullArr);\n  });\n});\n```\n\n既然测试写好了，就可以实现 `buildEmptyGameBoard()` 函数的函数体了。\n\n函数并不大，代码也足以自我说明。在 `app/scripts/grid/grid.js` 中\n\n```javascript\n.service('GridService', function(TileModel) {\n  // ...\n  this.buildEmptyGameBoard = function() {\n    var self = this;\n    // Initialize our grid\n    for (var x = 0; x < service.size * service.size; x++) {\n      this.grid[x] = null;\n    }\n\n    // Initialize our tile array\n    // with a bunch of null objects\n    this.forEach(function(x,y) {\n      self.setCellAt({x:x,y:y}, null);\n    });\n  };\n  // ...\n```\n\n上面的代码使用了一些足以自我描述出会做什么的辅助方法。部分我们会在整个项目中用到辅助函数如下列出，都是自我描述的：\n\n```javascript\n// Run a method for each element in the tiles array\nthis.forEach = function(cb) {\n  var totalSize = this.size * this.size;\n  for (var i = 0; i < totalSize; i++) {\n    var pos = this._positionToCoordinates(i);\n    cb(pos.x, pos.y, this.tiles[i]);\n  }\n};\n\n// Set a cell at position\nthis.setCellAt = function(pos, tile) {\n  if (this.withinGrid(pos)) {\n    var xPos = this._coordinatesToPosition(pos);\n    this.tiles[xPos] = tile;\n  }\n};\n\n// Fetch a cell at a given position\nthis.getCellAt = function(pos) {\n  if (this.withinGrid(pos)) {\n    var x = this._coordinatesToPosition(pos);\n    return this.tiles[x];\n  } else {\n    return null;\n  }\n};\n\n// A small helper function to determine if a position is\n// within the boundaries of our grid\nthis.withinGrid = function(cell) {\n  return cell.x >= 0 && cell.x < this.size &&\n          cell.y >= 0 && cell.y < this.size;\n};\n```\n\n##### 究竟是什么？！？？\n\n`this._positionToCoordinates()` 和 `this._coordinatesToPosition()` 这两个函数是什么？\n\n回忆起之前我们已经讨论过了我们会使用一个一维数组来存储网格。在考虑到性能和复杂动画的处理，这是较为可取的。关于动画我们会稍后研究。我们暂且只能从使用单维数组表示多维数组的复杂性得到一点好处。\n\n<a name=\"grid-theory\"></a>\n## 一维数组中的多维数组\n\n如何使用单维数组表示多维数组？先来看看在棋盘上用每一个单元格的值来标出网格位置，不需要有颜色。在代码中，这个多维数组被分解成数组的数组。\n\n![2-d grid](http://www.ng-newsletter.com/images/2048/grid-1.png) ![2-d grid](http://www.ng-newsletter.com/images/2048/grid-2.png)\n\n看看每个单元格的位置，如果单维数组来看，可以看出一个关系来：\n\n![2-d grid](http://www.ng-newsletter.com/images/2048/grid-3.png)\n\n我们可以看到，在第一个单元格，`(0,0)` 单元格对应的数组下标是 `0`。第二个数组元素下标是 1 而单元格是 `(1.0)`。移动到下一行，单元格是 `(0,1)` 对应第四个数组元素而下标是 5 的数组元素是单元格 `(1,1)`。\n\n据此可以推断出两个位置之间的等式关系。\n\n####i = <span style=\"color:red\">x</span> + <span style=\"color:blue\">n</span>y\n\n`i` 代表数组元素的下标，`x` 和 `y` 是多维数组中的位置坐标，`n` 是一行 / 列的单元格数。\n\n我们在上面定义的两个辅助函数就是将数组下标转换为 x-y 坐标的过程和相反的转换过程。从理论上来说，使用 x-y 坐标处理单元格会比较简单，但是从功能上考虑我们却会在单维数组里存放方块。\n\n```javascript\n// Helper to convert x to x,y\nthis._positionToCoordinates = function(i) {\n  var x = i % service.size,\n      y = (i - x) / service.size;\n  return {\n    x: x,\n    y: y\n  };\n};\n\n// Helper to convert coordinates to position\nthis._coordinatesToPosition = function(pos) {\n  return (pos.y * service.size) + pos.x;\n};\n```\n\n### 初始化玩家位置\n\n在游戏的一开始，我们想预先放几块。我们会为玩家随机在棋盘上挑选放方块的地方。\n\n```javascript\n.service('GridService', function(TileModel) {\n  this.startingTileNumber = 2;\n  // ...\n  this.buildStartingPosition = function() {\n    for (var x = 0; x < this.startingTileNumber; x++) {\n      this.randomlyInsertNewTile();\n    }\n  };\n  // ...\n```\n\n构建一开始的位置非常简单因为它只根据我们想放多少块方块来调用 `randomlyInsertNewTile()` 函数。`randomlyInsertNewTile()` 函数需要我们知道所有可以随机放置方块的位置。这个功能非常容易实现因为需要做的只是遍历单维数组的同时记录下还没有方块放置的位置。\n\n```javascript\n.service('GridService', function(TileModel) {\n  // ...\n  // Get all the available tiles\n  this.availableCells = function() {\n    var cells = [],\n        self = this;\n\n    this.forEach(function(x,y) {\n      var foundTile = self.getCellAt({x:x, y:y});\n      if (!foundTile) {\n        cells.push({x:x,y:y});\n      }\n    });\n\n    return cells;\n  };\n  // ...\n```\n\n有了一个棋盘上所有可用的坐标的列表，我们就可以简单地在数组中取随机位置。`randomAvailableCell()` 函数为我们处理。要实现函数的方法非常多。以下是我们在 2048 中实现的方法：\n\n```javascript\n.service('GridService', function(TileModel) {\n  // ...\n  this.randomAvailableCell = function() {\n    var cells = this.availableCells();\n    if (cells.length > 0) {\n      return cells[Math.floor(Math.random() * cells.length)];\n    }\n  };\n  // ...\n```\n\n从这里开始，我们可以简单地创建一个新的 TileModel 实例然后插入到我们的 `this.tiles` 数组中了。\n\n```javascript\n.service('GridService', function(TileModel) {\n  // ...\n  this.randomlyInsertNewTile = function() {\n    var cell = this.randomAvailableCell(),\n        tile = new TileModel(cell, 2);\n    this.insertTile(tile);\n  };\n\n  // Add a tile to the tiles array\n  this.insertTile = function(tile) {\n    var pos = this._coordinatesToPosition(tile);\n    this.tiles[pos] = tile;\n  };\n\n  // Remove a tile from the tiles array\n  this.removeTile = function(pos) {\n    var pos = this._coordinatesToPosition(tile);\n    delete this.tiles[pos];\n  }\n  // ...\n});\n```\n\n现在，得益于我们使用的 Angular，视图中的棋盘上，网格块会神奇地显示出方块来。\n\n记住，明智的做法是接下来写测试来测试我们对于功能的假设实现。我们已经在为项目写测试的过程中发现了不少 bug，同样的事情你也会遇到的。\n\n<a name=\"keyboard\"></a>\n## 键盘交互\n\n很好，现在我们已经将方块放到棋盘上了。但一个不能玩的游戏有啥意思呢？是时候将注意力转移到加入交互上面去了。\n\n> 为文章起见，我们只准备着眼在键盘的交互而没有考虑触控的交互。然而，加上触控支持并不应该太难，特别是我们只关注滑动动作，这个在 `ngTouch` 里有提供。我们将其留给你自己实现。\n\n游戏本身使用方向键（或者 a,w,s,d 键）来玩。在游戏中，我们希望让玩家在页面上跟游戏简单地交互。而不是要求玩家将焦点移到在游戏棋盘元素上（或者同样问题下的其他元素）。玩家只需要让页面获得焦点就可以进行游戏了。\n\n要做到这种交互，就要将事件监听绑定在 document 上。在 Angular 中，我们会 ` 绑定 ` 自己的事件监听在 Angular 提供的 `$ducoment` 服务上。要处理用户交互的创建，我们会将键盘事件绑定包裹在一个服务中。记住在页面中我们只需要一个键盘处理器，所以只要一个服务就可以了。\n\n此外，我们也希望为用户的任何输入动作作出自定义的反应。使用了服务能自然地注入到应用中然后根据用户的输入来决定应用的反应。\n\n首先，在 `app/scripts/Keyboard/keyboard.js` 文件中创建一个新的模块（因为我们正在做基于模块的开发的）`KeyBoard`（文件不存在就要先创建）。\n\n```javascript\n// app/scripts/keyboard/keyboard.js\nangular.module('Keyboard', []);\n```\n\n正如创建任何新的 JavaScript 一样，我们需要在 `index.html` 中引用。现在 `<script>` 标签列表看起来是这样的：\n\n```markup\n  <!-- body -->\n  <script src=\"scripts/app.js\"></script>\n  <script src=\"scripts/grid/grid.js\"></script>\n  <script src=\"scripts/grid/grid_directive.js\"></script>\n  <script src=\"scripts/grid/tile_directive.js\"></script>\n  <script src=\"scripts/keyboard/keyboard.js\"></script>\n  <script src=\"scripts/game/game.js\"></script>\n</body>\n</html>\n```\n\n然后，因为新建一个模块，我们同样需要告诉自己的 Angular 模块在应用在需要依赖这个新模块：\n\n```javascript\n.module('twentyfourtyeightApp', ['Game', 'Grid', 'Keyboard'])\n```\n\n`Keyboard` 服务的实现思路，就是在 `$document` 上 ` 绑定 ` 了 `Keydown` 事件来捕获用户的键盘操作。而另一端，在我们的 angular 对象中，我们会注册一有用户操作就触发的处理函数。\n\n来写代码。\n\n```javascript\n// app/scripts/keyboard/keyboard.js\nangular.module('Keyboard', [])\n.service('KeyboardService', function($document) {\n\n  // Initialize the keyboard event binding\n  this.init = function() {\n  };\n\n  // Bind event handlers to get called\n  // when an event is fired\n  this.keyEventHandlers = [];\n  this.on = function(cb) {\n  };\n});\n```\n\n`init()` 函数会作为 `KeyboardService` 的开始，然后开始监听键盘事件。我们会过滤掉不感兴趣的键盘事件。\n\n对于感兴趣的事件，我们会阻止它的默认行为然后将它交给我们的 `KeyEventHandlers`。\n\n![2-d grid](http://www.ng-newsletter.com/images/2048/keyboard.png)\n\n如何知道那些是我们感兴趣的呢？既然 * 感兴趣的 * 键盘操作是固定的，那么我们就去检查事件是否有其中一种键盘事件所激发。\n\n一旦方向键被按下，document 会接收到一个包含被按下的按键的键码的事件。\n\n我们可以为这些事件建立一个映射，然后查询捕获到的键盘动作是否在这个 * 感兴趣的 * 映射中。\n\n```javascript\n// app/scripts/keyboard/keyboard.js\nangular.module('Keyboard', [])\n.service('KeyboardService', function($document) {\n\n  var UP    = 'up',\n      RIGHT = 'right',\n      DOWN  = 'down',\n      LEFT  = 'left';\n\n  var keyboardMap = {\n    37: LEFT,\n    38: UP,\n    39: RIGHT,\n    40: DOWN\n  };\n\n  // Initialize the keyboard event binding\n  this.init = function() {\n    var self = this;\n    this.keyEventHandlers = [];\n    $document.bind('keydown', function(evt) {\n      var key = keyboardMap[evt.which];\n\n      if (key) {\n        // An interesting key was pressed\n        evt.preventDefault();\n        self._handleKeyEvent(key, evt);\n      }\n    });\n  };\n  // ...\n});\n```\n\n每当一个存在于我们映射中的按键触发了 `keydown` 事件，`KeyboardService` 就会执行 `this._handleKeyEvent` 函数。\n\n这个函数的整个职责就是调用每一个为按键注册了的处理函数。它就是简单地对处理函数数组进行迭代，使用按键和原事件组为参数来调用处理函数。\n\n```javascript\n// ...\nthis._handleKeyEvent = function(key, evt) {\n  var callbacks = this.keyEventHandlers;\n  if (!callbacks) {\n    return;\n  }\n\n  evt.preventDefault();\n  if (callbacks) {\n    for (var x = 0; x < callbacks.length; x++) {\n      var cb = callbacks[x];\n      cb(key, evt);\n    }\n  }\n};\n// ...\n```\n\n另一方面，我们只需要将处理函数压入处理函数数组就可以了。\n\n```javascript\n// ...\nthis.on = function(cb) {\n  this.keyEventHandlers.push(cb);\n};\n// ...\n```\n\n### 使用 Keyboard Service\n\n现在我们已经有能力来监控用户的键盘事件，我们需要在应用开始运行的时候就监控。因为我们将它做成了一个服务，所以可以很简单地在主要的控制器中做这件事。\n\n![2-d grid](http://www.ng-newsletter.com/images/2048/keyboard-sequence.png)\n\n首先，我们需要调用 `init()` 函数来开始监听键盘。接着，我们会注册函数来告诉 `GameManager` 来调用 `move()` 函数。\n\n回到 `GameController`，我们添加上 `newGame()` 函数和 `startGame()` 函数。`newGame()` 函数会告诉游戏服务创建一个新的游戏然后开始键盘事件处理。\n\n来开始编码吧！我们需要将 `Keyboard` 模块作为一个新的模块依赖 * 注入 * 到应用中：\n\n```javascript\nangular.module('twentyfourtyeightApp', ['Game', 'Keyboard'])\n// ...\n```\n\n然后就可以将 `KeyboardService` 注入到 `GameController` 中来开始跟用户交互了。首先，`newGame()` 方法：\n\n```javascript\n// ... (from above)\n.controller('GameController', function(GameManager, KeyboardService) {\n  this.game = GameManager;\n\n  // Create a new game\n  this.newGame = function() {\n    KeyboardService.init();\n    this.game.newGame();\n    this.startGame();\n  };\n\n  // ...\n```\n\n我们还没有在 `GameManager` 中定义 `newGame()` 方法，但很快就会去填好内容。\n\n一旦我们开始了新游戏，我们会调用 `startGame()`。`startGame()` 函数会准备好键盘服务的事件处理函数。\n\n```javascript\n.controller('GameController', function(GameManager, KeyboardService) {\n  // ...\n  this.startGame = function() {\n    var self = this;\n    KeyboardService.on(function(key) {\n      self.game.move(key);\n    });\n  };\n\n  // Create a new game on boot\n  this.newGame();\n});\n```\n\n<a name=\"start-button\"></a>\n## 按下那开始按钮\n\n我们做了许多工作来达到开始游戏这么个目的。最后要实现的方法就是 `GameManager` 中的 `newGame()` 了，函数会：\n\n1. 创建一个空的棋盘\n1. 准备好开始的位置\n1. 初始化游戏\n\n其实我们已经在 `GridService` 中实现了这些逻辑，所以现在就差把它们连起来了！\n\n在我们的 `app/scripts/game/game.js` 文件中，加入 `newGame()` 函数吧。此函数会重置游戏状态成应有的初始条件：\n\n```javascript\nangular.module('Game', [])\n.service('GameManager', function(GridService) {\n  // Create a new game\n  this.newGame = function() {\n    GridService.buildEmptyGameBoard();\n    GridService.buildStartingPosition();\n    this.reinit();\n  };\n\n  // Reset game state\n  this.reinit = function() {\n    this.gameOver = false;\n    this.win = false;\n    this.currentScore = 0;\n    this.highScore = 0; // we'll come back to this\n  };\n});\n```\n\n在浏览器中载入页面，包含功能的网格就出来了…… 然而这个阶段还是非常无聊因为我们还没有定义任何移动的功能。\n\n<a name=\"game-loop\"></a>\n## 动起来（游戏循环）\n\n现在我们来深入游戏功能的实现。当用户按下任何一个方向键，我们会调用 `GridService` 中的 `move()` 函数（在 `GameController` 中写的）。\n\n![non-playable version](http://www.ng-newsletter.com/images/2048/game-1.png)\n\n要编写 `move()` 函数，我们需要定义游戏的约束。那就是说，我们需要定义游戏对于每一个给出的移动的操作。\n\n对于每一步移动，我们要：\n\n1. 确定用户按下的方向键指示的方向\n1. 为棋盘上每一个方块找到所有最远的可能移动的位置。同时抓取下一个方块看是否能 * 合并 * 起来。\n1. 对于每一个方块，我们想确定下一个位置是否存在一个等值的方块。\n  - 如果下一个方块不存在，那么只将方块移动到可能的最远位置即可。（意味着这个最远位置就是棋盘的边缘。）\n  - 如果下一个方块存在：\n    + 且方块值不同的话，那么将方块放在最远位置（下一个方块就是当前方块的移动边界）。\n    + 且方块值和当前方块相同的话，我们就找到一个可能的合并了。\n      * 如果该方块已经是合并的结果了，则跳过并认定为已使用。\n      * 如果方块还没合并过，那么则认为需要合并。\n\n既然定义了功能，就可以制定出写 `move()` 函数的策略了。\n\n```javascript\nangular.module('Game', [])\n.service('GameManager', function(GridService) {\n  // ...\n  this.move = function(key) {\n    var self = this; // Hold a reference to the GameManager, for later\n    // define move here\n    if (self.win) { return false; }\n  };\n  // ...\n});\n```\n\n移动是有限制条件的：如果游戏已经结束或者游戏循环因为某种原因而终止了，那么就只需要返回并继续。\n\n接下来我们需要在网格上走一下来找出所有可供移动的地方。而因为掌握空方格的位置其实是网格的职责，因此我们会在 `GridService` 中写一个新的函数来帮助我们找出这些可能会经过的方格。\n\n![non-playable version](http://www.ng-newsletter.com/images/2048/grid-vectors.gif)\n\n我们通过提取玩家按键指示的 * 向量 * 来决定方向。例如，如果玩家按下了右键头键，那么就是想移动到 `x` 值 * 更大的 * 方格上。\n\n如果玩家按了上箭头，那么玩家就是想将方块移动到 `y` 值 * 更小的 * 方格上。我们可以使用一个 JavaScript 对象将向量和玩家按键映射起来（从 `KeyboardService` 中得到的按键），就像这样：\n\n```javascript\n// In our `GridService` app/scripts/grid/grid.js\nvar vectors = {\n  'left': { x: -1, y: 0 },\n  'right': { x: 1, y: 0 },\n  'up': { x: 0, y: -1 },\n  'down': { x: 0, y: 1 }\n};\n```\n\n现在我们就可以简单地迭代每一个可能的位置，并使用向量来控制迭代的方向：\n\n```javascript\n.service('GridService', function(TileModel) {\n  // ...\n  this.traversalDirections = function(key) {\n    var vector = vectors[key];\n    var positions = {x: [], y: []};\n    for (var x = 0; x < this.size; x++) {\n      positions.x.push(x);\n      positions.y.push(x);\n    }\n    // Reorder if we're going right\n    if (vector.x > 0) {\n      positions.x = positions.x.reverse();\n    }\n    // Reorder the y positions if we're going down\n    if (vector.y > 0) {\n      positions.y = positions.y.reverse();\n    }\n    return positions;\n  };\n  // ...\n```\n\n现在新的函数 `traversalDirections()` 定义好了，在 `move()` 函数中就可以在可能的移动上进行迭代了。回到 `GameMabager`，我们会根据这些可能的位置在网格上走动。\n\n```javascript\n// ...\nthis.move = function(key) {\n  var self = this;\n  // define move here\n  if (self.win) { return false; }\n  var positions = GridService.traversalDirections(key);\n\n  positions.x.forEach(function(x) {\n    positions.y.forEach(function(y) {\n      // For every position\n    });\n  });\n};\n// ...\n```\n\n在位置的循环中，我们会对可供移动的位置进行迭代同时查找存在的方块。从这里开始，我们将编写函数的第二部分，找出从该方块出发能到达的所有方格。\n\n```javascript\n// ...\n// For every position\n// save the tile's original position\nvar originalPosition = {x:x,y:y};\nvar tile = GridService.getCellAt(originalPosition);\n\nif (tile) {\n  // if we have a tile here\n  var cell = GridService.calculateNextPosition(tile, key);\n  // ...\n}\n```\n\n![non-playable version](http://www.ng-newsletter.com/images/2048/next-process.gif)\n\n如果我们确实在该方格内找到了方块，就会开始查看该方格最远能到哪里。先在网格上找到下一个位置，检查这个方格是否在棋盘内和方格是否为空。\n\n如果该方格是空的 ** 而且 ** 在棋盘内，那么继续取得下一个方格然后执行一样的检查。\n\n如果两个条件中任意一个不满足，那么要不我们到达了棋盘的边界，要不我们找到了下一个方块。我们会保存前一个位置（译者注：原文为 the next position，翻译为下一个位置。但根据描述和下文的代码此处应该为前一个位置。）同时抓取下一个方格（不管是否存在下一个方格）。\n\n而这个过程是对网格进行操作，于是就这个函数放在 `GridService`：\n\n```javascript\n// in GridService\n// ...\nthis.calculateNextPosition = function(cell, key) {\n  var vector = vectors[key];\n  var previous;\n\n  do {\n    previous = cell;\n    cell = {\n      x: previous.x + vector.x,\n      y: previous.y + vector.y\n    };\n  } while (this.withinGrid(cell) && this.cellAvailable(cell));\n\n  return {\n    newPosition: previous,\n    next: this.getCellAt(cell)\n  };\n};\n```\n\n现在我们可以计算下一个有可能放得下我们的方块的地方，接着就是检查是否有合并的可能。\n\n一个 * 合并 * 的定义是两个相同值的方块碰撞在一起。我们会检查 `next` 的位置上是否有相同值的方块并且还之前没有被 * 合并 * 过。\n\n```javascript\n// ...\n// For every position\n// save the tile's original position\nvar originalPosition = {x:x,y:y};\nvar tile = GridService.getCellAt(originalPosition);\n\nif (tile) {\n  // if we have a tile here\n  var cell = GridService.calculateNextPosition(tile, key),\n      next = cell.next;\n\n  if (next &&\n      next.value === tile.value &&\n      !next.merged) {\n    // Handle merged\n  } else {\n    // Handle moving tile\n  }\n  // ...\n}\n```\n\n如果这个所谓的下一个位置并 * 不 * 符合上面的条件，那么我们就会将方块从当前的位置移动到这个下一个位置（else 语句）。\n\n这是更相比之下更容易处理的条件，所需要做的就是将方块移动到 newPosition 位置。\n\n```javascript\n// ...\nif (next &&\n    next.value === tile.value &&\n    !next.merged) {\n  // Handle merged\n} else {\n  GridService.moveTile(tile, cell.newPosition);\n}\n```\n\n### 移动方块\n\n就像你大概猜测那样，`moveTile()` 函数最好就是定义在 `GridService` 中。\n\n移动一个方块就是简单地更新一下方块在数组中的位置和更新 `TileModel` 而已。\n\n就像我们定义的那样，函数里面有两个目的不同的操作。当我们：\n\n##### 在数组中移动方块的时候\n\n数组 `GridService.tiles`（译者注：原文为 GridService）为后端映射了方块的位置。数组中方块的位置 * 没有 * 和网格中方块的位置绑定。\n\n##### 更新 TileModel 中的位置的时候\n\n我们要为前端的 CSS 更新坐标来放置方块。\n\n简而言之：为了在后端能跟踪方块们，我们需要更新 `GridService` 中的 `this.tiles` 数组 * 同时 * 更新方块对象的位置。\n\n于是 `moveTile()` 就变成了一个简单的两步操作：\n\n```javascript\n// GridService\n// ...\nthis.moveTile = function(tile, newPosition) {\n  var oldPos = {\n    x: tile.x,\n    y: tile.y\n  };\n\n  // Update array location\n  this.setCellAt(oldPos, null);\n  this.setCellAt(newPosition, tile);\n  // Update tile model\n  tile.updatePosition(newPosition);\n};\n```\n\n现在我们需要定义我们的 `tile.updatePosition()` 方法。这个方法所做的就像它字面上的那样，就是简单地更新模型自己的 `x` 和 `y` 坐标。\n\n```javascript\n.factory('TileModel', function() {\n  // ...\n\n  Tile.prototype.updatePosition = function(newPos) {\n    this.x = newPos.x;\n    this.y = newPos.y;\n  };\n  // ...\n});\n```\n\n回到 `GridService` 中，我们已经可以只是调用 `moveTile()` 来同时更新 `GridService.tiles` 数组和方块自己的位置了。\n\n### 合并一个方块\n\n既然我们已经处理了 * 比较简单 * 的情况了，那么合并一个方块就是我们下一个需要攻克的问题。合并定义如下：\n\n* 当一个方块在下一个可移动的方格上遇到相同值的方块的时候就需要合并。*\n\n当一个方块被合并出来，棋盘就算需要改变，同样当前得分和最高得分也需要更新（如果需要的话）。\n\n合并需要几个步骤：\n\n1. 在最后的位置上添加一个新的带合并值的方块\n1. 移除旧方块\n1. 更新游戏得分\n1. 检查游戏是否结束\n\n拆解后，合并操作很简单。\n\n```javascript\n// ...\nvar hasWon = false;\n// ...\nif (next &&\n    next.value === tile.value &&\n    !next.merged) {\n  // Handle merged\n  var newValue = tile.value * 2;\n  // Create a new tile\n  var mergedTile = GridService.newTile(tile, newValue);\n  mergedTile.merged = [tile, cell.next];\n\n  // Insert the new tile\n  GridService.insertTile(mergedTile);\n  // Remove the old tile\n  GridService.removeTile(tile);\n  // Move the location of the mergedTile into the next position\n  GridService.moveTile(merged, next);\n  // Update the score of the game\n  self.updateScore(self.currentScore + newValue);\n  // Check for the winning value\n  if (merged.value >= self.winningValue) {\n    hasWon = true;\n  }\n} else {\n// ...\n```\n\n我们只想支持一行只有一个方块移动的效果（就是说如果一行里面有两个可以合并的情况，则只会合并一个），因此不得不跟踪 ` 合并了的 ` 方块。通过将 `.merged` 标志设置成随便什么东西而不是 `undefined` 就可以做到。\n\n在结束这个函数的编写之前，还需要解释一下这里用到的我们还没有定义的函数。\n\n`GridService.newTile()` 函数就是简单地创建 `TileModel` 对象。合并操作就放在包含创建新方块函数的｀GridService｀中：\n\n```javscript\n// GridService\nthis.newTile = function(pos, value) {\n  return new TileModel(pos, value);\n};\n// ...\n```\n\n我们一会再回来叙述 `self.updateScore()`。现在暂时只需要知道它更新游戏得分就可以了（就像函数名所表明的那样）。\n\n### 移动了方块之后\n\n我们只希望在一次有效的方块移动之后才增加新的方块，因此需要检查一下是否真的有任何一个方块移动了。\n\n```javascript\nvar hasMoved = false;\n// ...\n  hasMoved = true; // we moved with a merge\n} else {\n  GridService.moveTile(tile, cell.newPosition);\n}\n\nif (!GridService.samePositions(originalPos, cell.newPosition)) {\n  hasMoved = true;\n}\n// ...\n```\n\n当所有的方块都已经移动过了（或尝试移动过），我们就继续检查玩家是否赢了。如果是，那么实际上我们就要设置 `self.win` 这个标志了。\n\n> 当有方块碰撞的时候我们会移动方块，所以在合并的条件下，我们只简单地设置 `hasMoved` 为 true。\n\n最后，我们要检查一下棋盘上是否有任何的方块移动。如果有，则：\n\n1. 给棋盘添加一个新的方块\n1. 检查一下有没有必要展示游戏结束界面\n\n```javascript\nif (!GridService.samePositions(originalPos, cell.newPosition)) {\n  hasMoved = true;\n}\n\nif (hasMoved) {\n  GridService.randomlyInsertNewTile();\n\n  if (self.win || !self.movesAvailable()) {\n    self.gameOver = true;\n  }\n}\n// ...\n```\n\n### 重置方块\n\n在运行任何主游戏程序前，我们要重置每一个方块以便不再跟踪其合并的状态。详细来说，就是每一次移动之后，都要清理所有记录以便让所有方块能再次被移动。因此在执行移动的循环体开头，我们会调用：\n\n```javascript\nGridService.prepareTiles();\n```\n\n`GridService` 中的 `prepareTiles()` 函数只是简单地迭代每一个方块然后重置其状态而已：\n\n```javascript\nthis.prepareTiles = function() {\n  this.forEach(function(x,y,tile) {\n    if (tile) {\n      tile.reset();\n    }\n  });\n};\n```\n\n<a name=\"keeping-score\"></a>\n## 计算得分\n\n回头来看看 `updateScore()` 方法，游戏本身需要记录两个得分：\n\n1. 当前游戏的得分\n1. 玩家的最高得分\n\n`currentScore` 只是一个在每一次游戏的时候保存在内存中的变量，因此无需特殊对待。\n\n然而 `highScore` 则是一个贯穿每一次的游戏的变量。我们有几个方法来保存，比如 localstorage，cookies，或者两者结合。\n\n因为 cookies 是两个方法中最简单而且跨浏览器安全，我们就继续使用 cookies 来存储这个 highScore。\n\nAngular 中使用 `angular-cookies` 模块是管理 cookies 的最简单的方法了。\n\n要使用这个模块，可以到 [angularjs.org](http://angularjs.org) 上下载或者使用包管理器例如 bower 来安装。\n\n```bash\n$ bower install --save angular-cookies\n```\n\n照旧，我们要在 `index.html` 中引用这个脚本然后在应用中将 `ngCookies` 设置成模块级别的依赖。\n\n像这样更新一下 `app/index.html`：\n\n```markup\n<script src=\"bower_components/angular-cookies/angular-cookies.js\"></script>\n```\n\n然后添加 `ngCookies` 作为模块依赖（在 `Game` 模块中，我们引用 cookies 的地方）：\n\n```javascript\nangular.module('Game', ['Grid', 'ngCookies'])\n// ...\n```\n\n有了 `ngCookies` 作为依赖，我们就可以将 `$cookieStore` 服务 * 注入 * 到 `GameManagere` 服务中。现在可以在浏览器中对 cookies 进行读写了。\n\n例如，要读取玩家的最高得分，我们会写一个函数从用户的 cookie 中取来：\n\n```javascript\nthis.getHighScore = function() {\n  return parseInt($cookieStore.get('highScore')) || 0;\n}\n```\n\n回到 `GameManager` 类中的 `updateScore()` 函数，我们开始编写更新当前得分的代码。如果得分比之前记录的最高得分高，那么就更新 cookie 中的最高得分。\n\n```javascript\nthis.updateScore = function(newScore) {\n  this.currentScore = newScore;\n  if (this.currentScore > this.getHighScore()) {\n    this.highScore = newScore;\n    // Set on the cookie\n    $cookieStore.put('highScore', newScopre);\n  }\n};\n```\n\n### track by 之怒\n\n既然我们已经将方块显示出来了，一个 bug 也同样出现了，那就是一些有奇怪行为的方块复制品冒出来。进一步来说，就是方块可能会在不应该出现的地方出现。\n\n原因是 Angular 通过基于一个唯一的标识来获知 `titles` 数组里面的有什么方块。而我们把这个唯一的标识在视图中设定为方块在数组中的 `$index`（也就是数组中的位置）。然而我们在数组中将方块移来移去，`$index` 不再起到唯一标识的作用。我们需要另外的监测方法。\n\n```markup\n<div id=\"game\">\n  <!-- grid-container -->\n  <div class=\"tile-container\">\n    <div tile\n      ng-model='tile'\n      ng-repeat='tile in ngModel.tiles track by $index'></div>\n  </div>\n</div>\n```\n\n与其依靠数组来标识方块的位置，我们不如使用方块自己唯一的 uuid 来跟踪。自己创建唯一标识能保证 angular 将方块数组中的每一个方块看成是唯一的对象。只要唯一的 uuid 没有变，那么 angular 就会根据这个标识来将方块识别为独立的对象。\n\n创建新实例的时候使用 `TileModel`，我们能非常轻松地为方块实现出唯一标识。我们还能以自己的方式来创建唯一标识。\n\n> 只要对于每一个创建的 `TileModel` 实例是唯一的，那么怎么创建这个唯一 id 的方法并无影响。\n\n要生成这个唯一的 id，我们跳到 [StackOverflow](http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript) 上找一个 [遵循 rfc4122](http://www.ietf.org/rfc/rfc4122.txt) 的全球唯一标识生成器，然后将其打包成一个工厂，提供一个函数：`next()`：\n\n```javascript\n.factory('GenerateUniqueId', function() {\n  var generateUid = function() {\n    // http://www.ietf.org/rfc/rfc4122.txt\n    var d = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n      var r = (d + Math.random()*16)%16 | 0;\n      d = Math.floor(d/16);\n      return (c === 'x' ? r : (r&0x7|0x8)).toString(16);\n    });\n    return uuid;\n  };\n  return {\n    next: function() { return generateUid(); }\n  };\n})\n```\n\n要 * 使用 * 工厂 `GenerateUniqueId`，就要将它注入然后调用 `GenerateUniqueId.next()` 来产生一个新的 uuid。回到 `TileModel` 中，我们已经可以为实例生成一个唯一的 id 了（在构造函数中）。\n\n```javascript\n// In app/scripts/grid/grid.js\n// ...\n.factory('TileModel', function(GenerateUniqueId) {\n  var Tile = function(pos, val) {\n    this.x      = pos.x;\n    this.y      = pos.y;\n    this.value  = val || 2;\n    // Generate a unique id for this tile\n    this.id = GenerateUniqueId.next();\n    this.merged = null;\n  };\n  // ...\n});\n```\n\n现在每一个方块都已经有了唯一的标识了，于是就可以告诉 Angular 使用 id 而不是 `$index` 来追踪方块了。\n\n```markup\n<!-- ... -->\n<div tile\n      ng-model='tile'\n      ng-repeat='tile in ngModel.tiles track by $id(tile.id)'></div>\n<!-- ... -->\n```\n\n这样做会出现一个问题。我们使用 nulls 来初始化数组（显式地）和 nulls 来重置数组（而不是对数组排序或者调整长度），angular 会不顾一切地试图将 nulls 看作对象。但是 null 值并不包含有唯一标识，于是就会引起浏览器抛异常，并且不知道怎么处理复制出来的对象。\n\n所以，我们要使用内置的 angular 工具来追踪唯一标识或者数组中的 `$index` 位置（因为 null 对象在方格内只有一个所以可以通过数组的位置来追踪）。我们可以向如下那样修改一下 grid_directive 中的视图来解决 null 对象：\n\n```javascript\n<!-- ... -->\n<div tile\n      ng-model='tile'\n      ng-repeat='tile in ngModel.tiles track by $id(tile.id || $index)'></div>\n<!-- ... -->\n```\n\n> 这个问题也能通过实现不同的底层数据结构来解决，例如使用迭代器来查看每一个 `TileModel` 的位置而不是依靠数组下标或者每次改变数组后重新调整（或在 `$digest()` 中调整）。为了保持简单和清晰，我们使用数组来实现因为这种实现方法只需要处理上文的副作用就可以了。\n\n<a name=\"game-over\"></a>\n## 我们赢了?!?? 游戏结束\n\n当我们在原来 2048 游戏中输了的时候，一个 * 游戏结束 * 界面会滑入，让我们重新开始游戏或者在 twitter 上 follow 游戏作者。这不仅是游戏中一个酷酷的效果，也是一个中断游戏的好方法。\n\n使用基本的 angular 技术也能做到这个。我们已经在 `GameManager` 使用了变量 `gameOver` 来确定游戏什么时候结束。可以直接就用一个 `<div>` 元素来装着游戏结束界面，然后使用绝对定位覆盖在棋盘上。这种技术（和 Angular）的神奇在于实现起来没有任何的花招：\n\n就是简单地创建一个包含游戏结束或者玩家获胜的信息的 `<div>` 元素，根据游戏的状态来选择显示。比如，游戏结束界面看起来可以像这样：\n\n```markup\n<!-- ... -->\n<div id=\"game-container\">\n  <div grid ng-model='ctrl.game' class=\"row\"></div>\n    <div id=\"game-over\"\n        ng-if=\"ctrl.game.gameOver\"\n        class=\"row game-overlay\">\n      Game over\n      <div class=\"lower\">\n        <a class=\"retry-button\" ng-click='ctrl.newGame()'>Try again</a>\n      </div>\n    </div>\n  <!-- ... -->\n```\n\n困难的部分是处理样式 / CSS。为效率起见，我们只是将元素设置成绝对定位在网格之上，让浏览器来决定真正的位置。这里附上 * 相关的 * 一部分 css（提醒一下，完整 CSS 在下面的 gtihub 地址中有）：\n\n```css\n.game-overlay {\n  width: $width;\n  height: $width;\n  background-color: rgba(255, 255, 255, 0.47);\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 10;\n  text-align: center;\n  padding-top: 35%;\n  overflow: hidden;\n  box-sizing: border-box;\n\n  .lower {\n    display: block;\n    margin-top: 29px;\n    font-size: 16px;\n  }\n}\n```\n\n> 我们可以使用完全相同的技术来做获胜界面，同样创建一个代表获胜的 `.game-overlay` 元素即可。\n\n<a name=\"running-the-animation\"></a>\n## 动画\n\n原 2048 游戏中其中一个令人印象深刻的地方是方块似乎会魔术般地从一个网格滑到下一个网格，另外游戏结束 / 获胜界面的显示显得很自然。因为使用 Angular，我们能做到 * 几乎一样的效果 *（感谢 CSS）。\n\n实际上，我们做出来的游戏能够容易地实现诸如滑动，出现，显现等的动画效果。我们几乎不会碰到 JavaScript（只需一点点）就可以实现这些效果。\n\n### CSS 位置动画（也就是添加滑动的方块）\n\n因为我们通过 CSS 设置类 `position-[x]-[y]` 来定位方块，当为方块设置新位置的时候，DOM 元素会加上类 `position-[newX]-[newY]` 并移除类 `position-[oldX]-[oldY]`。在这种情况下，我们在 `.tile` 类上定义一个 CSS 变换来实现 CSS 类上自带滑动效果。\n\n相关的 SCSS：\n\n```css\n.tile {\n  @include border-radius($tile-radius);\n  @include transition($transition-time ease-in-out);\n  -webkit-transition-property: -webkit-transform;\n  -moz-transition-property: -moz-transform;\n  transition-property: transform;\n  z-index: 2;\n}\n```\n\nCSS 变换定义好后，现在方块就会在网格之间滑动了（对，就是 * 那么简单 *）。\n\n### 游戏结束界面动画\n\n如果想在动画上取得更多的效果，可以使用 `ngAnimate` 模块来做。此模块本身配合 angular 一起就是开箱即用了。\n\n在使用前，同样需要安装 `ngAnimate` 模块。在 [angularjs.org](http://angularjs.org) 上下载或者使用包管理器（例如 bower）来安装。\n\n```bash\n$ bower install --save angular-animate\n```\n\n同样，我们接着就需要在 HTML 中引用以便浏览器加载。修改 `index.html` 来引用 `angular-animate.js` 文件。\n\n```markup\n<script src=\"bower_components/angular-animate/angular-animate.js\"></script>\n```\n\n最后，就像其他 angular 模块一样，我们要告诉 angular 我们的应用依赖什么模块来运行。在应用的依赖数组中加入：\n\n```javascript\nangular\n.module('twentyfourtyeightApp', ['Game', 'Grid', 'Keyboard', 'ngAnimate', 'ngCookies'])\n// ...\n```\n\n### ngAnimate\n\n虽然对 ngAnimate 的深度探讨超出本文范围（看 [ng-book](https://www.ng-book.com) 来深入了解其机制），但是我们还是粗浅了解一下其工作机制以便在应用里实现动画。\n\n引入了 `ngAnimate` 作为模块级别依赖之后，任何时候 angular 为相关的（对于我们的应用而言）指令添加一个新对象的时候，它也会增添上一个 CSS 类（免费）。我们可以利用这些类来给游戏中的不同组件赋予 CSS 动画：\n\n<table>\n  <tr>\n    <th>Directive</th>\n    <th>Added class</th>\n    <th>Leaving class</th>\n  </tr>\n  <tr>\n    <td>ng-repeat</td>\n    <td>ng-enter</td>\n    <td>ng-leave</td>\n  </tr>\n  <tr>\n    <td>ng-if</td>\n    <td>ng-enter</td>\n    <td>ng-leave</td>\n  </tr>\n  <tr>\n    <td>ng-class</td>\n    <td>[className]-add</td>\n    <td>[className]-remove</td>\n  </tr>\n</table>\n\n当一个元素被添加进 `ng-repeat` 的作用域，新的 DOM 元素会被自动添加上 CSS 类 `ng-enter`。然后，当它真正地添加到视图上后，就会被添加上 CSS 类 `ng-enter-active`。这个机制很重要因为它让我们能够在 CSS 类 `ng-enter` 里设定动画的样子和在 CSS 类 `ng-enter-active` 里设定动画的样式。当元素在 `ng-repeat` 迭代器中被移除的时候类 `ng-leave` 也是如此的工作机制。\n\n当 DOM 元素上一个新的 CSS 类被添加（或被移除），相应的 `[classname]-add` 和 `[classname]-add-active` 也会添加到 DOM 元素上。同理，也可以在相应的类里设定 CSS 动画。\n\n### 游戏结束界面动画\n\n我们能使用类 `ng-enter` 来让游戏结束界面和获胜界面动起来了。记住，类 `.game-overlay` 是使用 `ng-if` 指令来实现隐藏和显示的。当 `ng-if` 的条件变化了，`ngAnimate` 会在等式值为真的时候添加上 `.ng-enter` 和 `.ng-enter-active`（或者移除元素时添加 `.ng-leave` 和 `.ng-leave-active`）。\n\n我们会在类 `.ng-enter` 中设定好动画，然后在类 `.ng-enter-active` 中激活。相关的 SCSS：\n\n```css\n.game-overlay {\n  // ...\n  &.ng-enter {\n    @include transition(all 1000ms ease-in);\n    @include transform(translate(0, 100%));\n    opacity: 0;\n  }\n  &.ng-enter-active {\n    @include transform(translate(0, 0));\n    opacity: 1;\n  }\n  // ...\n}\n```\n\n所有的 SCSS 在文章底部的 github 连接中可以看到。\n\n<a name=\"customizing-size\"></a>\n## 定制位置\n\n假设我们想使用不同的棋盘大小。例如，原 2048 是 4x4 的。如果我们想要 3x3 或者 6x6 呢？不用变动太多的代码我们就能轻松实现。\n\n棋盘本身是通过 SCSS 来创建和定位的，而网格又是通过 `GridService` 来管理的。所以我们在这两个地方修改一下以便能自定义棋盘。\n\n### 动态 CSS\n\n好吧实际上我们并不是打算弄动态 CSS，但是我们可以创建更加多实际会用得上的 CSS。与其使用单个 `#game` 标签，我们可以实时创建可以动态设置网格的 DOM 元素标签。也就是说，我们将 3x3 的棋盘版本嵌套在 ID 是 `#game-3` 的 DOM 元素下，将 6x6 的棋盘版本嵌套在 id 标签是 `#game-6` 的元素下。\n\n可以在原本已经是动态的 SCSS 中编写出一个[混合](http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins)。就是很简单地找到 css ID 标签 `#game` 然后将其包裹进一个混合。例如：\n\n```css\n@mixin game-board($tile-count: 4) {\n  $tile-size: ($width - $tile-padding * ($tile-count + 1)) / $tile-count;\n  #game-#{$tile-count} {\n    position: relative;\n    padding: $tile-padding;\n    cursor: default;\n    background: #bbaaa0;\n    // ...\n}\n```\n\n现在我们可以引用 `game-board` 混合来动态创建一个包含有不同棋盘版本的样式表了，棋盘的版本都各自独立在其 `#game-[n]` 标签下。\n\n要做出这样不同的版本，我们只需要遍历所有的棋盘大小然后调用上面的混合就可以了。\n\n```css\n$min-tile-count: 3;       // lowest tile count\n$max-tile-count: 6;       // highest tile count\n@for $i from $min-tile-count through $max-tile-count {\n  @include game-board($i);\n}\n```\n\n### 动态的 GridService\n\n现在已经编写好了应付不同大小棋盘的 CSS 了，我们还需要修改 `GridService` 好让启动应用的时候能设置网格的大小。\n\nAngular 让这变得十分简单。首先，我们需要将 `GridService` 变成 `provider`，而不是一个直接的 `service`。如果你不清楚服务（译者注：service）和提供者（译者注：provider）之间的不同，看 [ng-book](https://www.ng-book.com) 作深入了解。简单来说，一个提供者能够让我们在运行之前对其进行配置。\n\n此外，我们也需要将提供者中的构造函数修改为 `$get` 方法：\n\n```javascript\n.provider('GridService', function() {\n  this.size = 4; // Default size\n  this.setSize = function(sz) {\n    this.size = sz ? sz : 0;\n  };\n\n  var service = this;\n\n  this.$get = function(TileModel) {\n    // ...\n```\n\n提供者中任何不在 `$get` 方法中的方法都能在应用的 `.config()` 函数中访问得到。`$get()` 中的所有东西不能被 `.config()` 方法访问，而能在运行的时候被应用访问。\n\n实现动态棋盘大小的工作就这么多。现在我们试着做一个 6x6 的棋盘而不是 4x4 的棋盘。在 app 模块的 `.config()` 函数中，我们叫来 `GridServiceProvider` 来设置大小：\n\n```javascript\nangular\n.module('twentyfourtyeightApp', ['Game', 'Grid', 'Keyboard', 'ngAnimate', 'ngCookies'])\n.config(function(GridServiceProvider) {\n  GridServiceProvider.setSize(4);\n})\n```\n\n> Angular 在创建一个提供者的时候，会自动生成一个仅供配置时使用的模块，我们使用名字：[serviceName]Provider 来实现注入。\n\n<a name=\"demo\"></a>\n## 演示 demo\n\n完整的 demo 在这里：[http://ng2048.github.io/](http://ng2048.github.io/)。\n\n## 总结\n\n唷！我们希望你已经在愉快地使用 Angular 来编写这个 2048 游戏了。博文中应该已经覆盖了大部分的过程了。如果你觉得不错，可以在下面留下评论。如果你对继续学习 Angular 有兴趣，务必去看看我们的书[Complete Book on AngularJS](https://www.ng-book.com/)。这是唯一一本会不断更新 AngularJS 知识的书，并且包括了在 AngularJS 中所有你需要了解的东西。\n\n[在 HackerNews 上讨论](https://news.ycombinator.com/item?id=7554348)\n\n## Thanks\n\n非常感谢 [Gabriele Cirulli](http://gabrielecirulli.com/) 编写出了妙极的（和让人上瘾的）2048，同样感谢他对此文的启发。文中的很多主意都是从原游戏中搜集、提炼，用以阐明如何使用 Angular 来编写。\n\n## 完整代码\n\n游戏的完整代码在 Github 上，地址是 http://d.pr/pNtX。要在本地编译游戏，只需要复制代码然后运行：\n\n```bash\n$ npm install\n$ bower install\n$ grunt serve\n```\n\n## 问题与解决方法\n\n如果你使用不了 npm install，保证你安装了最新的 node.js 和 npm。\n\n这个版本库在 node v0.10.26 和 npm 1.4.3 上测试。\n\n以下是一个安装最新版本的 node 和 node 版本管理器 `n` 的方法：\n\n```bash\n$ sudo npm cache clean -f\n$ sudo npm install -g n\n$ sudo n stable\n```\n","slug":"translation-building-the-2048-game-in-angularjs","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cjw0oyv5x00ejn7t4el5cxbwv","content":"<blockquote>\n<p>原文<a href=\"http://www.ng-newsletter.com/posts/building-2048-in-angularjs.html\" target=\"_blank\" rel=\"noopener\">http://www.ng-newsletter.com/posts/building-2048-in-angularjs.html</a>，所有版权属于原文。考虑到排版和图片，内容稍有修改，对文章表达的意思并无太大影响。第一次渣翻长文，求翻译大大们拍砖和调教。</p>\n</blockquote>\n<p>我们最近经常被问到的其中一个问题是作为一个框架，Angular 在什么情况下使用并不太适合。我们的标准答案通常是编写游戏的时候，因为 Angular 有它自己的事件处理循环（$digest 循环）而游戏通常要求非常多的底层 DOM 操作。其实这个答案并不准确因为 Angular 其实是能支持多数游戏的编写的。即使要求大量的 DOM 操作的游戏，Angular 也能胜任其静态部分，例如高分记录和游戏菜单。</p>\n<p>如果你是像我那样的人（同时是个技术人），你有可能会喜欢玩那个流行的 <a href=\"http://gabrielecirulli.github.io/2048\" target=\"_blank\" rel=\"noopener\">2048</a> 游戏。游戏的目标是通过合并相同数值的方块来得到数值是 2048 的方块。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/game.gif\" alt=\"Injection\"></p>\n<p><a href=\"https://news.ycombinator.com/item?id=7554348\" target=\"_blank\" rel=\"noopener\">在 HackerNews 上讨论</a></p>\n<p>在今天的博文中，我们准备使用 AngularJS 来仿制这个游戏，而且是从头到尾完整地解释整个 app 的编写流程。这个 app 是一个相当复杂的应用，我们也希望利用这篇博文来展示如何编写复杂的 AngularJS 应用。</p>\n<p>此 Angular 版应用的<a href=\"http://d.pr/SnWD\" target=\"_blank\" rel=\"noopener\">demo</a>。</p>\n<p>来让我们开始吧！</p>\n<blockquote>\n<p>TL;DR: 本应用的完整源代码都能在文章底部的 github 链接里面找到。</p>\n</blockquote>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#planning\">计划</a></li>\n<li><a href=\"#modular\">模块结构</a></li>\n<li><a href=\"#game-controller\">GameController</a></li>\n<li><a href=\"#tdd\">测试，测试，测试</a></li>\n<li><a href=\"#build-grid\">建造游戏网格</a></li>\n<li><a href=\"#scss\">SCSS 来救援</a></li>\n<li><a href=\"#the-tile-directive\">Tile 指令</a></li>\n<li><a href=\"#starting-the-game\">游戏棋盘</a></li>\n<li><a href=\"#grid-theory\">网格理论</a></li>\n<li><a href=\"#keyboard\">玩法（键盘）</a></li>\n<li><a href=\"#start-button\">按下开始按钮之时</a></li>\n<li><a href=\"#game-loop\">游戏循环</a></li>\n<li><a href=\"#keeping-score\">计算得分</a></li>\n<li><a href=\"#game-over\">游戏结束和获胜界面</a></li>\n<li><a href=\"#running-the-animation\">动画</a></li>\n<li><a href=\"#customizing-size\">自定义</a></li>\n<li><a href=\"#demo\">演示</a></li>\n</ol>\n<p><a name=\"planning\"></a></p>\n<h2 id=\"第一步：计划\"><a href=\"#第一步：计划\" class=\"headerlink\" title=\"第一步：计划\"></a>第一步：计划</h2><p><img src=\"http://www.ng-newsletter.com/images/2048/3d-board.png\" alt=\"Minification\"></p>\n<p>我们首先想做的是对将要编写的应用进行高层次设计。如果是仿制一个应用或是从零开始，我们都会这样做，不论应用有多大。</p>\n<p>审视一下，我们可以看到游戏是有一块游戏棋盘，上面有一些方块。每一个方块的位置就是数值方块的位置。我们可以利用这一个事实，使用 CSS3 而不是 javascript 来摆放方块，后者需要知道方块摆放的位置。当摆放方块的时候，我们只需要保证方块覆盖在合适的位置上就可以了。</p>\n<p>CSS3 的使用让我们不但能够免于在 CSS 上搞动画的工作，而且能使用标准的 AngularJS 行为（译者注：AngularJS behavior）来跟踪游戏棋盘、方块和游戏逻辑的状态。</p>\n<p>因为我们只有一个页面，所以只需要一个 controller 来管理页面。</p>\n<p>既然在应用的运行期间只有一个游戏棋盘，我们就另外创建单一一个 <code>GridService</code> 的 service 实例来保存所有的网格逻辑。service 都是单例对象，适合用来存储网格。我们会使用 <code>GridService</code> 来放置和移动方块、寻找可供移动的位置和管理网格。</p>\n<p>我们将游戏的逻辑和运行存储在另外一个叫 <code>GameManager</code> 的 service 中。<code>GameManager</code> 负责管理游戏状态、处理移动和维护得分（包括当前得分和最高得分）。</p>\n<p>最后，还需要一个组件来控制键盘。我们将使用一个名为 <code>KeyboardService</code> 的 service（只需要一个键盘动作的处理）。我们会在这篇文章中实现桌面版的处理，然而我们也可以重用同一个 service 来处理触屏动作使其能在移动设备上使用。</p>\n<h3 id=\"开始编写应用\"><a href=\"#开始编写应用\" class=\"headerlink\" title=\"开始编写应用\"></a>开始编写应用</h3><p>要开始编写，我们先创建一个基本的应用（我们使用<a href=\"http://yeoman.io\" target=\"_blank\" rel=\"noopener\">yeoman</a> angular generator 来生成应用的结构，但这是非必要的。我们只是将其作为一个起始点，但很快就会做出分支）。我们新建一个包含整个应用的目录，然后再在 <code>app/</code> 目录旁边建一个 <code>test/</code> 目录。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/directory_structure.png\" alt=\"Minification\"></p>\n<blockquote>\n<p>以下使用 yeamon tool 来构建项目的指南。如果你更喜欢自己动手，可以跳过依赖安装直接进入下一章节。</p>\n</blockquote>\n<p>我们要先保证安装了 <code>yeamon</code> 才能在项目中使用。Yeamon 依赖 NodeJS 和 npm。NodeJS 的安装并不在本文叙述的范围内但是在 <a href=\"http://nodejs.org\" target=\"_blank\" rel=\"noopener\">NodeJS.org</a> 上有一个很好的指南。</p>\n<p>在 <code>npm</code> 安装完后，我们就能安装 yeamon tool，<code>yo</code>，和 angular generator（<code>yo</code> 会使用这个生成器来生成我们的 Angular 应用）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g yo</span><br><span class=\"line\">$ npm install -g generator-angular</span><br></pre></td></tr></table></figure>\n<p>安装完之后，就可以使用 yeamon tool 来创建应用了，按照下面的来：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/Development &amp;&amp; mkdir 2048</span><br><span class=\"line\">$ yo angular twentyfourtyeight</span><br></pre></td></tr></table></figure>\n<p>工具会问你一些问题，一律答 yes，除了只选 <code>angular-cookies</code> 作为依赖，因为我们不需要除了缺省以外的依赖。</p>\n<blockquote>\n<p>注意使用 Angular generator 会要求你安装 ruby 环境、gem 和 compass。文章下面给出的完整代码中会介绍如何避免使用 ruby 和 compass。</p>\n</blockquote>\n<h4 id=\"我们的-angular-模块\"><a href=\"#我们的-angular-模块\" class=\"headerlink\" title=\"我们的 angular 模块\"></a>我们的 angular 模块</h4><p>新建 <code>scripts/app.js</code> 文件来控制我们的应用。来，开始编写吧：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'twentyfourtyeightApp'</span>, [])</span><br></pre></td></tr></table></figure>\n<p><a name=\"modular\"></a></p>\n<h2 id=\"模块结构\"><a href=\"#模块结构\" class=\"headerlink\" title=\"模块结构\"></a>模块结构</h2><p>现在比较推荐的 Angular 应用结构是根据功能来构建而不是类型。也就是说，不是以 controllers（译者注：控制器）、services、directives 等来分离我们的组件而是以功能来定义模块结构。例如在我们的应用中，定义了一个 <code>Game</code> 模块和 <code>Keyboard</code> 模块。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/scripts_dir.png\" alt=\"Minification\"></p>\n<p>这样的模块结构让我们能够清晰分离出跟文件结构相匹配的职责。这样做既能帮助我们构建大型的复杂的 angular 应用，也能让功能在不同的应用间共享。</p>\n<p>之后我们将会建立起匹配文件和目录结构的测试环境。</p>\n<h4 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h4><p>在我们的项目中，从视图开始编写是最容易的。审视一下，要做的视图 / 模板只有一个。我们不需要多个视图，所以只需要一个 <code>&lt;div&gt;</code> 元素来包含应用中的所有内容。</p>\n<p>在我们的的 <code>app/index.html</code> 文件中，我们需要包含所有的依赖（包括 <code>angular.js</code> 自身和自己编写的 javascript 文件——现在就只有 <code>scripts/app.js</code>），就像下面的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- index.html --&gt;</span><br><span class=\"line\">&lt;doctype html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;2048&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;styles/main.css&quot;&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body ng-app=&quot;twentyfourtyeightApp&quot;</span><br><span class=\"line\">    &lt;!-- header --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot; ng-include=&quot;&apos;views/main.html&apos;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;!-- script tags --&gt;</span><br><span class=\"line\">    &lt;script src=&quot;bower_components/angular/angular.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;scripts/app.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>你完全可以编写更复杂的多视图游戏——如果你这样打算的话请在下面留言，我们非常期待你的表现。</p>\n</blockquote>\n<p>现在 <code>app/index.html</code> 文件做好了，我们只需要在 <code>app/views/main.html</code> 中继续细节化应用层面的视图就可以了。当我们需要在应用中引入新资源的时候就只需要修改 <code>index.html</code> 了。</p>\n<p>赶快打开 <code>app/views/main.html</code>，所有的游戏相关的视图都放在此。通过使用 <code>controllerAs</code> 语法，控制器就可以显式暴露在任何需要在 <code>$scope</code> 中找数据和查询控制器对应组件的地方。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- app/views/main.html --&gt;</span><br><span class=\"line\">&lt;div id=&quot;content&quot; ng-controller=&apos;GameController as ctrl&apos;&gt;</span><br><span class=\"line\">  &lt;!-- Now the variable: ctrl refers to the GameController --&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>controllerAs</code> 语法是 1.2 版本提供的比较新的语法。当要在页面处理多个控制器的时候非常有用，因为这样就能指定包含我们需要的功能和数据的控制器。</p>\n</blockquote>\n<p>在视图中，我们想至少要显示如下几个东西：</p>\n<ol>\n<li>游戏的静态标题</li>\n<li>当前的游戏得分和本地用户最高的得分</li>\n<li>游戏棋盘</li>\n</ol>\n<p>游戏的静态标题可以像下面那么简单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- heading inside app/views/main.html --&gt;</span><br><span class=\"line\">&lt;div id=&quot;content&quot; ng-controller=&apos;GameController as ctrl&apos;&gt;</span><br><span class=\"line\">  &lt;div id=&quot;heading&quot; class=&quot;row&quot;&gt;</span><br><span class=\"line\">    &lt;h1 class=&quot;title&quot;&gt;ng-2048&lt;/h1&gt;</span><br><span class=\"line\">    &lt;div class=&quot;scores-container&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;score-container&quot;&gt;&#123;&#123; ctrl.game.currentScore &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;best-container&quot;&gt;&#123;&#123; ctrl.game.highScore &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;!-- ... --&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>注意在引用 <code>currentScore</code> 和 <code>highScore</code> 的时候我们也在视图中引用了 <code>GameController</code>。<code>controllerAs</code> 语法让我们能显式地引用自己感兴趣的控制器。</p>\n<p><a name=\"game-controller\"></a></p>\n<h2 id=\"控制器-GameController\"><a href=\"#控制器-GameController\" class=\"headerlink\" title=\"控制器 GameController\"></a>控制器 GameController</h2><p>现在既然已经有了一个合理的项目结构，我们赶快来创建一个 <code>GmaeController</code> 来控制会在视图上显示的数据。在 <code>app/scripts/app.js</code> 中，我们可以在主要模块 <code>twentyfourtyeightApp</code> 里创建这个控制器。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular</span><br><span class=\"line\">.module(<span class=\"string\">'twentyfourtyeightApp'</span>, [])</span><br><span class=\"line\">.controller(<span class=\"string\">'GameController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在视图中，我们已经引用了一个 <code>game</code> 对象，此对象会在 <code>GameController</code> 中进行设置。<code>game</code> 对象引用的是主 <em> 游戏对象 </em>。我们会在另外一个新的模块中创建这个主游戏对象，新的模块也会保存游戏中的所有引用。</p>\n<p>现在还没有创建这个模块，应用不会在浏览器中载入。而在控制器里面，我们可以加上对 <code>GameManager</code> 的依赖：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.controller(<span class=\"string\">'GameController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GameManager</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.game = GameManager;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>记住，我们正在做的是为应用中不同的部分创建模块级别的依赖，所以为了能在我们的应用中加载这些模块，需要在我们 Angular 模块中作为依赖来列出。将 <code>Game</code> 作为 <code>twentyfourtyeightApp</code> 的依赖，要在我们定义模块的地方的数组中列出。</p>\n<p>完整的 <code>app/scripts/app.js</code> 文件看起来应该像下面那样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular</span><br><span class=\"line\">.module(<span class=\"string\">'twentyfourtyeightApp'</span>, [<span class=\"string\">'Game'</span>])</span><br><span class=\"line\">.controller(<span class=\"string\">'GameController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GameManager</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.game = GameManager;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"The-Game\"><a href=\"#The-Game\" class=\"headerlink\" title=\"The Game\"></a>The Game</h3><p>现在已经将部分数据绑定到视图上（译者注：原文 Now that we have the view partially hooked up to the view，或有误），我们可以开始编写游戏的逻辑了。在 <code>app/scripts/</code> 目录下新建 <code>app/scripts/game/game.js</code> 中创建游戏模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Game'</span>, []);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当创建模块的时候，我们通常将其放在以模块命名的目录内，而以模块命名的文件来完成初始化工作。比如，我们正在写一个游戏 (译者注：game) 模块，于是我们在 <code>app/scripts/game</code> 目录下的 <code>game.js</code> 中编写。这个方法在生产环境下被认为是可扩展的和合理的。</p>\n</blockquote>\n<p><code>Game</code> 模块会提供唯一的核心组件：<code>GameManager</code>。</p>\n<p>我们编写的 <code>GameManager</code> 模块要做到：维持游戏的状态和玩家能做出的移动，维护得分、判断游戏结束和搞清楚是玩家赢了还是输了。</p>\n<p>当在编写应用的时候，我们通常将已知需要的方法写成桩方法，为这些方法写测试然后再填内容。</p>\n<blockquote>\n<p>为了文章起见，我们在这个模块里会走一遍这个流程。当继续写剩下的模块的时候，我们则只会涉及到应该测试的核心组件。</p>\n</blockquote>\n<p>我们知道到现在为止 <code>GameManager</code> 中会提供的几个 <em> 已知的 </em> 功能：</p>\n<ol>\n<li>创建一个新的游戏</li>\n<li>处理游戏循环 / 移动操作</li>\n<li>更新得分</li>\n<li>跟踪游戏的进行情况</li>\n</ol>\n<p>记住这几个功能，我们就能勾勒出 <code>GameManager</code> 服务的基本轮廓以供测试：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Game'</span>, [])</span><br><span class=\"line\">.service(<span class=\"string\">'GameManager'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Create a new game</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.newGame = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// Handle the move action</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.move = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// Update the score</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.updateScore = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newScore</span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// Are there moves left?</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.movesAvailable = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>完成了基本的功能性函数之后，先挪一下，去写测试来决定在 <code>GameManager</code> 中 <em> 已知的 </em> 需要支持的函数中空白部分的内容。</p>\n<p><a name=\"tdd\"></a></p>\n<h2 id=\"测试驱动开发（TDD）\"><a href=\"#测试驱动开发（TDD）\" class=\"headerlink\" title=\"测试驱动开发（TDD）\"></a>测试驱动开发（TDD）</h2><p>在开始实施测试前，我们需要配置好 karma 来驱动我们的测试。如果你对 karma 并不熟悉，就只需要了解到它是一个测试运行器，能让我们舒服而高效地在控制台和代码中自动化操作前端测试。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/running_karma.png\" alt=\"Running karma\"></p>\n<p>Karma 作为一个 npm 包，依赖于 NodeJS。运行命令行来安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g karma</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数 <code>-g</code> 告诉 npm 这个包作为全局模块来安装。没有这个参数，包将只会安装到本地的工作目录上。</p>\n</blockquote>\n<p>如果你是通过 yeoman angular 生成器来构建应用的话可以跳过以下的部分。</p>\n<p>要使用 karma，需要一个配置文件。虽然我们这里不会深入叙述如何配置 Karma（在 <a href=\"https://www.ng-book.com\" target=\"_blank\" rel=\"noopener\">ng-book</a> 中查看详细的 karma 配置选项），但是过程中决定性的部分就是让 Karma 载入所有我们想要测试的文件。</p>\n<p>我们可以使用 <code>karma init</code> 命令来生成一个基本的配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ karma init karma.conf.js</span><br></pre></td></tr></table></figure>\n<p>命令会问几个问题然后生成 <code>karma.conf.js</code>。这里我们修改一下其中两个选项：<code>files</code> 数组和打开 <code>autoWatch</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">files: [</span><br><span class=\"line\">  <span class=\"string\">'app/bower_components/angular/angular.js'</span>,</span><br><span class=\"line\">  <span class=\"string\">'app/bower_components/angular-mocks/angular-mocks.js'</span>,</span><br><span class=\"line\">  <span class=\"string\">'app/bower_components/angular-cookies/angular-cookies.js'</span>,</span><br><span class=\"line\">  <span class=\"string\">'app/scripts/**/*.js'</span>,</span><br><span class=\"line\">  <span class=\"string\">'test/unit/**/*.js'</span></span><br><span class=\"line\">],</span><br><span class=\"line\">autoWatch: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>一旦写好了配置文件，任何时候我们保存文件都可以运行测试了（测试文件在 <code>test/unit/</code> 目录内）。</p>\n<p>我们像如下那样执行命令 <code>karma start</code> 来运行测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ karma start karma.conf.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"编写第一个测试\"><a href=\"#编写第一个测试\" class=\"headerlink\" title=\"编写第一个测试\"></a>编写第一个测试</h3><p>karma 已经配置好了，可以写对 <code>GameManager</code> 的基本测试了。然而我们还并不清楚应用的整个功能，所以暂时只能写有限的测试。</p>\n<blockquote>\n<p>在编写应用的时候我们经常发现 API 需要修改，所以与其在变化前投入大量时间，不如建立好对基本功能的测试然后在深入测试中找到最终的 API。</p>\n</blockquote>\n<p>用是否有可能的移动来作为第一个写的测试是个好选择。简单地编写几个我们已知需要的返回真 / 假的调用，来测试我们应用的逻辑行为。</p>\n<p>创建 <code>test/unit/game/game_spec.js</code> 文件然后开始填入内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'Game module'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  describe(<span class=\"string\">'GameManager'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Inject the Game module into this test</span></span><br><span class=\"line\">    beforeEach(<span class=\"built_in\">module</span>(<span class=\"string\">'Game'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Our tests will go below here</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在这个测试中我们使用 <a href=\"http://jasmine.github.io/2.0/introduction.html\" target=\"_blank\" rel=\"noopener\">Jasmine</a> 语法。</p>\n</blockquote>\n<p>跟其他单元测试一样，我们需要创建一个 <code>GameManager</code> 对象的实例。我们可以使用普通的语法（测试服务的时候）将它注入到测试中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// Inject the Game module into this test</span></span><br><span class=\"line\">beforeEach(<span class=\"built_in\">module</span>(<span class=\"string\">'Game'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gameManager; <span class=\"comment\">// instance of the GameManager</span></span><br><span class=\"line\">beforeEach(inject(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GameManager</span>) </span>&#123;</span><br><span class=\"line\">  gameManager = GameManager;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>有了这个 <code>gameManager</code> 实例，就可以建立对函数 <code>movesAvailable()</code> 的期望值。</p>\n<p>我们定义的 <code>movesAvailable()</code> 函数是用来检测是否有空格剩余和是否有方块可以合并。另外这个结果跟游戏是否结束是有关联的，我们会将这个方法放进 <code>GameManager</code> 中，但是在之后创建的 <code>GridService</code> 中才实现大多数的复杂细节。</p>\n<p>棋盘上要有剩余可走的地方，必须满足以下两个条件：</p>\n<ol>\n<li>棋盘上有空余空格</li>\n<li>方块可以合并</li>\n</ol>\n<p>弄清楚了这两个条件，我们就可以写出测试来看看是否符合。</p>\n<p>基本的思路就是我们写出的单元测试对于设定的条件要能作可观察到的反应。然后因为要依赖 <code>GridService</code> 来反映游戏的状态，所以需要模拟出这个条件来保证在 <code>GameManager</code> 中的逻辑是正确的。</p>\n<h4 id=\"模拟-GridService\"><a href=\"#模拟-GridService\" class=\"headerlink\" title=\"模拟 GridService\"></a>模拟 <code>GridService</code></h4><p>要模拟 <code>GridService</code>，我们只需要简单地 <em> 重写 </em> 缺省的 Angular 行为，替换 <em> 真正的 </em> 服务为我们模拟出来的服务，然后就可以在模拟的服务中建立可控制条件。</p>\n<p>详细一点说就是，我们简单地创建一个拥有模拟方法的假对象然后通过在 <code>$provide</code> 中换上来骗 Angular 说这个假对象是 <em> 真 </em> 对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> _gridService;</span><br><span class=\"line\">beforeEach(<span class=\"built_in\">module</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$provide</span>) </span>&#123;</span><br><span class=\"line\">  _gridService = &#123;</span><br><span class=\"line\">    anyCellsAvailable: angular.noop,</span><br><span class=\"line\">    tileMatchesAvailable: angular.noop</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Switch out the real GridService for our</span></span><br><span class=\"line\">  <span class=\"comment\">// fake version</span></span><br><span class=\"line\">  $provide.value(<span class=\"string\">'GridService'</span>, _gridService);</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>现在我们就可以用 <code>_gridService</code> 这个假对象实例来建立条件了。</p>\n<p>我们希望当有单元格剩余的时候函数 <code>movesAvailable()</code> 返回 true。在 <code>GridService</code> 中模拟一个 <code>anyCellsAvailable()</code> 函数（其实还没写）。我们期望这个在 <code>GridService</code> 的函数能告诉我们还有剩余的单元格。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">describe(<span class=\"string\">'.movesAvailable'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should report true if there are cells available'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    spyOn(_gridService, <span class=\"string\">'anyCellsAvailable'</span>).andReturn(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    expect(gameManager.movesAvailable()).toBeTruthy();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>现在基础工作已经做好了，我们可以接着建立第二个条件了。如果方块可以合并，那么我们希望 <code>movesAvailable()</code> 保证会返回 true。相反的情况也是返回 true 因为既没有单元格空余也没有可合并的方块才是没有步数可走。</p>\n<p>另外两个保证这个结果的测试是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">it(<span class=\"string\">'should report true if there are matches available'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  spyOn(_gridService, <span class=\"string\">'anyCellsAvailable'</span>).andReturn(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  spyOn(_gridService, <span class=\"string\">'tileMatchesAvailable'</span>).andReturn(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  expect(gameManager.movesAvailable()).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">it(<span class=\"string\">'should report false if there are no cells nor matches available'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  spyOn(_gridService, <span class=\"string\">'anyCellsAvailable'</span>).andReturn(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  spyOn(_gridService, <span class=\"string\">'tileMatchesAvailable'</span>).andReturn(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  expect(gameManager.movesAvailable()).toBeFalsy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>将基础工作搞好，我们也好在实现真正函数前写好测试。</p>\n<blockquote>\n<p>虽然考虑到整个文章的整体性我们不会再在文章中使用 TDD，但是我们建议你应该始终使用 TDD。可以在下面的完整代码中查看更多的测试代码。</p>\n</blockquote>\n<h2 id=\"回到-GameManager\"><a href=\"#回到-GameManager\" class=\"headerlink\" title=\"回到 GameManager\"></a>回到 GameManager</h2><p>现在我们的任务就是实现函数 <code>movesAvailable()</code>。然而我们已经确认了代码可行性<strong>和</strong>要求的条件，实现起来实在简单。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.movesAvailable = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> GridService.anyCellsAvailable() ||</span><br><span class=\"line\">          GridService.tileMatchesAvailable();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"build-grid\"></a></p>\n<h2 id=\"建造游戏网格\"><a href=\"#建造游戏网格\" class=\"headerlink\" title=\"建造游戏网格\"></a>建造游戏网格</h2><p>到现在为止我们已经让 <code>GameManager</code> 运行起来了，然后就是要创建 <code>GridService</code> 来处理在棋盘中的所有状况。</p>\n<p>回忆一下我们的想法：在 <code>GridService</code> 中使用两个本地数组变量，基本数组 <code>grid</code> 和基本数组 <code>tiles</code>。在 <code>app/scripts/grid/grid.js</code> 文件中写服务：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Grid'</span>, [])</span><br><span class=\"line\">.service(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid   = [];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.tiles  = [];</span><br><span class=\"line\">  <span class=\"comment\">// Size of the board</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size   = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当开始一个新的游戏的时候，我们需要清空这些数组。而因为 <code>grid</code> 数组只是用来放方块的 DOM 元素组成的。</p>\n<p>然而数组 <code>tiles</code> 则是动态的，它会跟踪游戏过程中的当前的方块。使用游戏中不同的状态之前，先在页面上建造好网格先吧，这样我们也好看看大概样子是怎么样。</p>\n<p>回到 <code>app/views/main.html</code>，我们开始设计网格。因为网格是动态而又带有我们给它写的逻辑，所以只有就其放在其指令（译者注：directive）中才合乎逻辑。使用指令可以让主要的模板保持简洁，同样也能将功能封装在指令中而让主要的控制器保持简洁。</p>\n<p>在 <code>app/index.html</code> 中我们将网格指令添加上然后在控制器中传递给 <code>GameManager</code> 实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- instructions --&gt;</span><br><span class=\"line\">&lt;div id=&quot;game-container&quot;&gt;</span><br><span class=\"line\">  &lt;div grid ng-model=&apos;ctrl.game&apos; class=&quot;row&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;!-- ... --&gt;</span><br></pre></td></tr></table></figure>\n<p>我们是在 <code>Grid</code> 模块里写这个指令的，所以在 <code>app/scripts/grid/</code> 目录下，新建一个 <code>grid_directive.js</code> 文件来安放我们的 <code>grid</code> 指令。</p>\n<p>在 <code>grid</code> 指令里面，我们只需要少量变量因为它需要封装视图，能做的事情不多。</p>\n<p>指令会需要持有 <code>GameManager</code> 的实例（或者至少是一个有 <code>grid</code> 和 <code>tiles</code> 数组的模型），所以将其设置为指令的依赖。另外，不希望指令由于页面上的其它内容或者 GameManager 自身的原因瘫痪，所以我们创建了隔离作用域。</p>\n<blockquote>\n<p>查看我们写的 <a href=\"http://www.ng-newsletter.com/posts/directives.html\" target=\"_blank\" rel=\"noopener\">自定义指令</a> 来更加深入指令的编写，或者查看 <a href=\"https://www.ng-book.com\" target=\"_blank\" rel=\"noopener\">ng-book</a> 中有关指令的细节。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Grid'</span>)</span><br><span class=\"line\">.directive(<span class=\"string\">'grid'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    restrict: <span class=\"string\">'A'</span>,</span><br><span class=\"line\">    <span class=\"built_in\">require</span>: <span class=\"string\">'ngModel'</span>,</span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      ngModel: <span class=\"string\">'='</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'scripts/grid/grid.html'</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个指令的主要功能是构建网格视图，所以我们不需要写任何自定义逻辑。</p>\n<h3 id=\"grid-html\"><a href=\"#grid-html\" class=\"headerlink\" title=\"grid.html\"></a>grid.html</h3><p>在指令的模板里面，我们会运行两个 <code>ngRepeat</code> 来显示网格和方块数组，还会（暂时）在循环中使用 <code>$index</code> 来跟踪。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;game&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;grid-container&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;grid-cell&quot;</span><br><span class=\"line\">      ng-repeat=&quot;cell in ngModel.grid track by $index&quot;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;tile-container&quot;&gt;</span><br><span class=\"line\">    &lt;div tile</span><br><span class=\"line\">      ng-model=&apos;tile&apos;</span><br><span class=\"line\">      ng-repeat=&apos;tile in ngModel.tiles track by $index&apos;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>第一个 <code>ng-repeat</code> 简单易懂，就是遍历了 grid 数组然后生成了 class 属性是 <code>grid-cell</code> 的单个空 div 元素。</p>\n<p>在第二个 <code>ng-repeat</code> 中，我们会为每一个显示的元素生成一个名为 <code>tile</code> 的指令。这个 <code>tile</code> 指令会负责生成每一个方格元素的样子。我们很快就会去编写 <code>tile</code> 指令……</p>\n<p>精明的读者可能会发现我们只适用一维数组来显示二维网格。当我们渲染视图的时候，我们只会得到一列“方格”，而不是一个网格。</p>\n<p>要将它弄成网格，我们来深入 CSS 的编写。</p>\n<p><a name=\"scss\"></a></p>\n<h2 id=\"开始-SCSS\"><a href=\"#开始-SCSS\" class=\"headerlink\" title=\"开始 SCSS\"></a>开始 SCSS</h2><p>在这个项目中，我们会使用 SASS 的一个变种：scss。scss 除了是一个更强大的 CSS 外，还能动态地生成 CSS。</p>\n<p>应用所有显示的元素的主要部分会使用 CSS 来完成，包括动画、布局和可视元素（方格的颜色等）。</p>\n<p>要创建二维的棋盘，我们会用到 CSS3 关键字：<code>transform</code> 来处理每一个特定的方格的位置。</p>\n<h3 id=\"CSS3-transform-属性\"><a href=\"#CSS3-transform-属性\" class=\"headerlink\" title=\"CSS3 transform 属性\"></a>CSS3 transform 属性</h3><p>CSS3 transform 属性是一个可以让我们对元素进行 2D 或者 3D 上的移动、扭曲、旋转、缩放等操作（支持动画）的属性。用上了此属性，就可以直接将方块放在棋盘上然后剩下就只是应用合适的 <code>transform</code> 属性的事了。</p>\n<p>例如，在下面的演示中，我们有一个宽 40px 高 40px 的盒子。</p>\n<div style=\"margin:40px;padding:40px 0;border-bottom:1px solid #333;\">\n  <div style=\"width:40px;height:40px;background-color:blue;\"></div>\n</div>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们应用一个 <code>translateX(300px)</code> 的 <code>transform</code> 属性，就可以将盒子向右移动了 300px，就像下面所展示的：</p>\n<div style=\"margin:40px;padding:40px 0;border-bottom:1px solid #333;\">\n  <div style=\"width:40px;height:40px;background-color:blue;-webkit-transform:translateX(300px);transform:translateX(300px);\"></div>\n</div>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span><span class=\"selector-class\">.transformed</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">translateX</span>(300px);</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(300px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 translate 属性，我们只需应用 CSS 类就可以在棋盘上随便移动方块了。现在，精妙之处在于页面是多变的，我们如何能将类写得足够动态可以对应到网格上的正确位置。</p>\n<p>这里就是 SCSS 大显身手的地方了。我们会创建几个变量（例如一行有多少个方格）然后在 SCSS 中结合数学来帮助我们计算。</p>\n<p>来看一下计算棋盘上正确位置需要的变量：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$width: 400px;          // The width of the whole board</span><br><span class=\"line\">$tile-count: 4;         // The number of tiles per row/column</span><br><span class=\"line\">$tile-padding: 15px;    // The padding between tiles</span><br></pre></td></tr></table></figure>\n<p>让 SCSS 用这些变量帮我们动态计算位置。首先算出每一个方格的大小。在 SCSS 中非常简单：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$tile-size: ($width - $tile-padding * ($tile-count + 1)) / $tile-count;</span><br></pre></td></tr></table></figure>\n<p>现在我们就可以使用适当的宽和高来建立那个 <code>#game</code> 容器了。同时 <code>#game</code> 容器也会被设置成位置参照，它的子元素将会使用绝对定位。我们将 <code>.grid-container</code> 和 <code>tile-container</code> 放在 <code>#game</code> 容器内。</p>\n<p>我们这里只展示跟 scss 有关的部分。剩下的代码可以在文章末尾的 github 地址上找到。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#game</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: $width;</span><br><span class=\"line\">  height: $width; // The gameboard is a square</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.grid-container</span> &#123;</span><br><span class=\"line\">    position: absolute;   // the grid is absolutely positioned</span><br><span class=\"line\">    z-index: 1;           // IMPORTANT to set the z-index for layering</span><br><span class=\"line\">    margin: 0 auto;       // center</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.grid-cell</span> &#123;</span><br><span class=\"line\">      width: $tile-size;              // set the cell width</span><br><span class=\"line\">      height: $tile-size;             // set the cell height</span><br><span class=\"line\">      margin-bottom: $tile-padding;   // the padding between lower cells</span><br><span class=\"line\">      margin-right: $tile-padding;    // the padding between the right cell</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.tile-container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    .tile &#123;</span><br><span class=\"line\">      width: $tile-size;        // tile width</span><br><span class=\"line\">      height: $tile-size;       // tile height</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意为了让 <code>.tile-container</code> 放在 <code>.grid-container</code> 前面，我们<strong>必须</strong>要为 <code>.tile-container</code> 更高的 <code>z-index</code> 值。如果没有设置 <code>z-index</code> 值，浏览器会将两个元素放在同等高度，就不好看了。</p>\n<p>做好这一步之后，现在我们来动态生成方块的位置。我们需要是一个 <code>.position-{x}-{y}</code> 类，用来应用到方块上，这样浏览器就会知道方块的位置然后将它放置好。既然我们是计算相对于网格容器的的 transformation 属性值，那就使用 <code>0,0</code> 作为第一个方块的初始位置。</p>\n<p>我们对队列进行迭代，结合基于计算出来的期望偏移，动态生成每一个类。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.tile</span> &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  // Dynamically create .position-#&#123;x&#125;-#&#123;y&#125; classes to mark</span><br><span class=\"line\">  // where each tile will be placed</span><br><span class=\"line\">  @<span class=\"keyword\">for</span> $x from <span class=\"number\">1</span> through $tile-count &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">for</span> $y from <span class=\"number\">1</span> through $tile-count &#123;</span><br><span class=\"line\">      $zeroOffsetX: $x - 1;</span><br><span class=\"line\">      $zeroOFfsetY: $y - 1;</span><br><span class=\"line\">      $newX: ($tile-size) * ($zeroOffsetX) + ($tile-padding * $zeroOffsetX);</span><br><span class=\"line\">      $newY: ($tile-size) * ($zeroOffsetY) + ($tile-padding * $zeroOffsetY);</span><br><span class=\"line\"></span><br><span class=\"line\">      &amp;.position-#&#123;$zeroOffsetX&#125;-#&#123;$zeroOffsetY&#125; &#123;</span><br><span class=\"line\">        -webkit-transform: translate($newX, $newY);</span><br><span class=\"line\">        transform: translate($newX, $newY);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意我们不得不使用从 1 开始的偏移量来计算位置，而不是传统的从 0 开始。这是受 SASS 自身的限制所迫。不过我们可以使用将索引减 1 来解决。</p>\n</blockquote>\n<p>现在我们写好了动态的 <code>.position-#{x}-#{y}</code>CSS 类，方块能够显示在页面上了。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/screen.png\" alt=\"2-d grid\n\"></p>\n<h3 id=\"为不同的方块上色\"><a href=\"#为不同的方块上色\" class=\"headerlink\" title=\"为不同的方块上色\"></a>为不同的方块上色</h3><p>注意到当有不同的方块出现的时候，各自都是不同颜色的。不同的颜色标识着不同方块所代表的值。如此一来玩家能看得出方格所处的状态。使用和我们迭代方格数目的时候同样的技巧来创建方格颜色方案。</p>\n<p>要创建出颜色方案，我们首先要创建一个 SCSS 数组，包含有每一种需要用到的背景颜色。每一种颜色：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$colors:  #EEE4DA, // 2</span><br><span class=\"line\">          #EAE0C8, // 4</span><br><span class=\"line\">          #F59563, // 8</span><br><span class=\"line\">          #3399ff, // 16</span><br><span class=\"line\">          #ffa333, // 32</span><br><span class=\"line\">          #cef030, // 64</span><br><span class=\"line\">          #E8D8CE, // 128</span><br><span class=\"line\">          #990303, // 256</span><br><span class=\"line\">          #6BA5DE, // 512</span><br><span class=\"line\">          #DCAD60, // 1024</span><br><span class=\"line\">          #B60022; // 2048</span><br></pre></td></tr></table></figure>\n<p>使用了 <code>$colors</code> 数组，我们只要迭代每一个颜色就能基于方块的值来动态创建一个类。也就是说，当一个方块的值是 2，我们会给它加上指定背景颜色是 <code>#EEE4DA</code> 的 <code>.tile-2</code> 类。与其给每个方块用硬编码，我们不如用 SCSS 的魔法来完成：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">for</span> $i from <span class=\"number\">1</span> through length($colors) &#123;</span><br><span class=\"line\">  &amp;.tile-#&#123;power(2, $i)&#125; .tile-inner &#123;</span><br><span class=\"line\">    background: nth($colors, $i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，我们需要自己定义 <code>power()</code> 混合（译者注：mixin）。定义如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">function</span> power ($x, $n) &#123;</span><br><span class=\"line\">  $ret: 1;</span><br><span class=\"line\"></span><br><span class=\"line\">  @<span class=\"keyword\">if</span> $n &gt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">for</span> $i from <span class=\"number\">1</span> through $n &#123;</span><br><span class=\"line\">      $ret: $ret * $x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; @<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">for</span> $i from $n to <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      $ret: $ret / $x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @<span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"the-tile-directive\"></a></p>\n<h2 id=\"Tile-指令\"><a href=\"#Tile-指令\" class=\"headerlink\" title=\"Tile 指令\"></a>Tile 指令</h2><p>SCSS 的繁琐工作完成了，我们可以回到 tile 指令的编写中了。通过动态的位置布局，让 CSS 按我们所设计的那样将方块摆放到位。</p>\n<p>然而 <code>tile</code> 指令是一个自定义视图的容器，并不需要做很多事。我们需要的是它负责显示的单元格的访问权。除此以外，并不需要在指令内放任何功能。代码简单到足以自我描述：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Grid'</span>)</span><br><span class=\"line\">.directive(<span class=\"string\">'tile'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    restrict: <span class=\"string\">'A'</span>,</span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      ngModel: <span class=\"string\">'='</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'scripts/grid/tile.html'</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>现在，<code>tile</code> 指令中有趣的地方就是我们如何动态的为网格布局。而模板会需要用到在隔离作用域（译者注：isolate scope）中的 <code>ngModel</code> 变量来处理好一切。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div ng-if=&apos;ngModel&apos; class=&quot;tile position-&#123;&#123; ngModel.x &#125;&#125;-&#123;&#123; ngModel.y &#125;&#125; tile-&#123;&#123; ngModel.value &#125;&#125;&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;tile-inner&quot;&gt;</span><br><span class=\"line\">    &#123;&#123; ngModel.value &#125;&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>我们几乎已经可以将这个基础的指令直接显示了。对于每一个有 <code>x</code> 和 <code>y</code> 坐标的方块而言，它们都会 <em> 自动 </em> 被赋予一个 <code>.position-#{x}-#{y}</code> 的类。浏览器会 <em> 自动 </em> 地将它们放到我们期待的位置。</p>\n<p>这意味着我们的方块对象会需要一个 <code>x</code> 和 <code>y</code> 以及 <code>value</code> 让指令来使用。为此，对于每一个显示的方块，我们都需要创建一个新的对象。</p>\n<h3 id=\"TileModel\"><a href=\"#TileModel\" class=\"headerlink\" title=\"TileModel\"></a>TileModel</h3><p>与其创建一个 <em> 哑 </em> 对象，我们还不如创建一个比较智能的对象，既存储数据也能提供功能。</p>\n<p>我们希望能使用 Angular 的依赖注入，因此创建一个服务来安置数据模型。我们在 <code>Grid</code> 模块中创建一个 <code>TileModel</code> 服务，因为跟游戏棋盘有关的操作时，它只需要使用底层的 <code>TileModel</code>。</p>\n<p>使用 <code>.factory</code> 方法，我们能够简单地创建一个工厂函数。跟使用 <code>service()</code> 函数时传递的用以定义服务的函数会被默认为服务的构造函数不同的是，使用 <code>factory()</code> 函数会认为传递函数返回的对象才是服务。所以，只用 <code>factory()</code> 函数，我们可以将服务赋给任何对象以便在我们 Angular 应用中随时 <em> 注入 </em>。</p>\n<p>在 <code>app/scripts/grid/grid.js</code> 文件中，我们可以创建 <code>TileModel</code> 工厂：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Grid'</span>)</span><br><span class=\"line\">.factory(<span class=\"string\">'TileModel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Tile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pos, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = pos.x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = pos.y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = val || <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> Tile;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>现在在我们 Angular 应用中的任何地方，我们都可以 <em> 注入 </em> 这个 <code>TileModel</code> 并想全局对象一样使用。非常方便不是吗？</p>\n<blockquote>\n<p>不要忘了要为我们在 <code>TileModel</code> 中实现的任何功能写测试。</p>\n</blockquote>\n<h3 id=\"我们第一个网格\"><a href=\"#我们第一个网格\" class=\"headerlink\" title=\"我们第一个网格\"></a>我们第一个网格</h3><p>现在我们已经写好了 <code>TileModel</code> 了，我们可以开始在 <code>tiles</code> 数组中放入 <code>TileModel</code> 的实例了，然后发现它们 <em> 神奇地 </em> 出现在网格中正确的位置上。</p>\n<p>让我们来试试在 <code>GridService</code> 中的 <code>tiles</code> 数组中加入一些方块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Grid'</span>, [])</span><br><span class=\"line\">.factory(<span class=\"string\">'TileModel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.service(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">TileModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.tiles  = [];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.tiles.push(<span class=\"keyword\">new</span> TileModel(&#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">1</span>&#125;, <span class=\"number\">2</span>));</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.tiles.push(<span class=\"keyword\">new</span> TileModel(&#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>&#125;, <span class=\"number\">2</span>));</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a name=\"starting-the-game\"></a></p>\n<h2 id=\"棋盘已经准备好了\"><a href=\"#棋盘已经准备好了\" class=\"headerlink\" title=\"棋盘已经准备好了\"></a>棋盘已经准备好了</h2><p>现在我们具备显示方块的能力了，还需要在 <code>GridService</code> 中实现准备棋盘的功能。当第一次载入页面的时候我们想创建一个空的棋盘。而同样的动作也应该发生在当用户在进行游戏的时候点击了 <code>New Game</code> 或者 <code>Try again</code> 的时候。</p>\n<p>要清理棋盘，我们会在 <code>GridService</code> 中创建一个叫 <code>buildEmptyGameBoard()</code> 的函数。这个方法会负责将 <code>GridService</code> 中的 <code>grid</code> 数组和 <code>tiles</code> 数组填充 null。</p>\n<p>在开始编写代码之前，我们先写出测试以保证 <code>buildEmptyGameBoard()</code> 函数的行为没问题。然而这个写的过程在上面已经讲过一遍了，所以不再讨论直接给出结果。写出来的测试大概就像下面那样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In test/unit/grid/grid_spec.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">describe(<span class=\"string\">'.buildEmptyGameBoard'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> nullArr;</span><br><span class=\"line\"></span><br><span class=\"line\">  beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    nullArr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"number\">16</span>; x++) &#123;</span><br><span class=\"line\">      nullArr.push(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  it(<span class=\"string\">'should clear out the grid array with nulls'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> grid = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"number\">16</span>; x++) &#123;</span><br><span class=\"line\">      grid.push(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    gridService.grid = grid;</span><br><span class=\"line\">    gridService.buildEmptyGameBoard();</span><br><span class=\"line\">    expect(gridService.grid).toEqual(nullArr);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  it(<span class=\"string\">'should clear out the tiles array with nulls'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tiles = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"number\">16</span>; x++) &#123;</span><br><span class=\"line\">      tiles.push(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    gridService.tiles = tiles;</span><br><span class=\"line\">    gridService.buildEmptyGameBoard();</span><br><span class=\"line\">    expect(gridService.tiles).toEqual(nullArr);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>既然测试写好了，就可以实现 <code>buildEmptyGameBoard()</code> 函数的函数体了。</p>\n<p>函数并不大，代码也足以自我说明。在 <code>app/scripts/grid/grid.js</code> 中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.service(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">TileModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.buildEmptyGameBoard = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Initialize our grid</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; service.size * service.size; x++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.grid[x] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Initialize our tile array</span></span><br><span class=\"line\">    <span class=\"comment\">// with a bunch of null objects</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>) </span>&#123;</span><br><span class=\"line\">      self.setCellAt(&#123;<span class=\"attr\">x</span>:x,<span class=\"attr\">y</span>:y&#125;, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码使用了一些足以自我描述出会做什么的辅助方法。部分我们会在整个项目中用到辅助函数如下列出，都是自我描述的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Run a method for each element in the tiles array</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.forEach = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> totalSize = <span class=\"keyword\">this</span>.size * <span class=\"keyword\">this</span>.size;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; totalSize; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pos = <span class=\"keyword\">this</span>._positionToCoordinates(i);</span><br><span class=\"line\">    cb(pos.x, pos.y, <span class=\"keyword\">this</span>.tiles[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set a cell at position</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setCellAt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pos, tile</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.withinGrid(pos)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xPos = <span class=\"keyword\">this</span>._coordinatesToPosition(pos);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tiles[xPos] = tile;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Fetch a cell at a given position</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.getCellAt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pos</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.withinGrid(pos)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"keyword\">this</span>._coordinatesToPosition(pos);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.tiles[x];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A small helper function to determine if a position is</span></span><br><span class=\"line\"><span class=\"comment\">// within the boundaries of our grid</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.withinGrid = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cell</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cell.x &gt;= <span class=\"number\">0</span> &amp;&amp; cell.x &lt; <span class=\"keyword\">this</span>.size &amp;&amp;</span><br><span class=\"line\">          cell.y &gt;= <span class=\"number\">0</span> &amp;&amp; cell.y &lt; <span class=\"keyword\">this</span>.size;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"究竟是什么？！？？\"><a href=\"#究竟是什么？！？？\" class=\"headerlink\" title=\"究竟是什么？！？？\"></a>究竟是什么？！？？</h5><p><code>this._positionToCoordinates()</code> 和 <code>this._coordinatesToPosition()</code> 这两个函数是什么？</p>\n<p>回忆起之前我们已经讨论过了我们会使用一个一维数组来存储网格。在考虑到性能和复杂动画的处理，这是较为可取的。关于动画我们会稍后研究。我们暂且只能从使用单维数组表示多维数组的复杂性得到一点好处。</p>\n<p><a name=\"grid-theory\"></a></p>\n<h2 id=\"一维数组中的多维数组\"><a href=\"#一维数组中的多维数组\" class=\"headerlink\" title=\"一维数组中的多维数组\"></a>一维数组中的多维数组</h2><p>如何使用单维数组表示多维数组？先来看看在棋盘上用每一个单元格的值来标出网格位置，不需要有颜色。在代码中，这个多维数组被分解成数组的数组。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/grid-1.png\" alt=\"2-d grid\"> <img src=\"http://www.ng-newsletter.com/images/2048/grid-2.png\" alt=\"2-d grid\"></p>\n<p>看看每个单元格的位置，如果单维数组来看，可以看出一个关系来：</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/grid-3.png\" alt=\"2-d grid\"></p>\n<p>我们可以看到，在第一个单元格，<code>(0,0)</code> 单元格对应的数组下标是 <code>0</code>。第二个数组元素下标是 1 而单元格是 <code>(1.0)</code>。移动到下一行，单元格是 <code>(0,1)</code> 对应第四个数组元素而下标是 5 的数组元素是单元格 <code>(1,1)</code>。</p>\n<p>据此可以推断出两个位置之间的等式关系。</p>\n<h4 id=\"i-x-ny\"><a href=\"#i-x-ny\" class=\"headerlink\" title=\"i = x + ny\"></a>i = <span style=\"color:red\">x</span> + <span style=\"color:blue\">n</span>y</h4><p><code>i</code> 代表数组元素的下标，<code>x</code> 和 <code>y</code> 是多维数组中的位置坐标，<code>n</code> 是一行 / 列的单元格数。</p>\n<p>我们在上面定义的两个辅助函数就是将数组下标转换为 x-y 坐标的过程和相反的转换过程。从理论上来说，使用 x-y 坐标处理单元格会比较简单，但是从功能上考虑我们却会在单维数组里存放方块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Helper to convert x to x,y</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>._positionToCoordinates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = i % service.size,</span><br><span class=\"line\">      y = (i - x) / service.size;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    x: x,</span><br><span class=\"line\">    y: y</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Helper to convert coordinates to position</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>._coordinatesToPosition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pos</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (pos.y * service.size) + pos.x;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化玩家位置\"><a href=\"#初始化玩家位置\" class=\"headerlink\" title=\"初始化玩家位置\"></a>初始化玩家位置</h3><p>在游戏的一开始，我们想预先放几块。我们会为玩家随机在棋盘上挑选放方块的地方。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.service(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">TileModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.startingTileNumber = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.buildStartingPosition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"keyword\">this</span>.startingTileNumber; x++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.randomlyInsertNewTile();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>构建一开始的位置非常简单因为它只根据我们想放多少块方块来调用 <code>randomlyInsertNewTile()</code> 函数。<code>randomlyInsertNewTile()</code> 函数需要我们知道所有可以随机放置方块的位置。这个功能非常容易实现因为需要做的只是遍历单维数组的同时记录下还没有方块放置的位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.service(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">TileModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// Get all the available tiles</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.availableCells = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cells = [],</span><br><span class=\"line\">        self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> foundTile = self.getCellAt(&#123;<span class=\"attr\">x</span>:x, <span class=\"attr\">y</span>:y&#125;);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!foundTile) &#123;</span><br><span class=\"line\">        cells.push(&#123;<span class=\"attr\">x</span>:x,<span class=\"attr\">y</span>:y&#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cells;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>有了一个棋盘上所有可用的坐标的列表，我们就可以简单地在数组中取随机位置。<code>randomAvailableCell()</code> 函数为我们处理。要实现函数的方法非常多。以下是我们在 2048 中实现的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.service(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">TileModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.randomAvailableCell = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cells = <span class=\"keyword\">this</span>.availableCells();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cells.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cells[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * cells.length)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>从这里开始，我们可以简单地创建一个新的 TileModel 实例然后插入到我们的 <code>this.tiles</code> 数组中了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.service(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">TileModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.randomlyInsertNewTile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cell = <span class=\"keyword\">this</span>.randomAvailableCell(),</span><br><span class=\"line\">        tile = <span class=\"keyword\">new</span> TileModel(cell, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.insertTile(tile);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Add a tile to the tiles array</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.insertTile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tile</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pos = <span class=\"keyword\">this</span>._coordinatesToPosition(tile);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tiles[pos] = tile;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Remove a tile from the tiles array</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.removeTile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pos</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pos = <span class=\"keyword\">this</span>._coordinatesToPosition(tile);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.tiles[pos];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>现在，得益于我们使用的 Angular，视图中的棋盘上，网格块会神奇地显示出方块来。</p>\n<p>记住，明智的做法是接下来写测试来测试我们对于功能的假设实现。我们已经在为项目写测试的过程中发现了不少 bug，同样的事情你也会遇到的。</p>\n<p><a name=\"keyboard\"></a></p>\n<h2 id=\"键盘交互\"><a href=\"#键盘交互\" class=\"headerlink\" title=\"键盘交互\"></a>键盘交互</h2><p>很好，现在我们已经将方块放到棋盘上了。但一个不能玩的游戏有啥意思呢？是时候将注意力转移到加入交互上面去了。</p>\n<blockquote>\n<p>为文章起见，我们只准备着眼在键盘的交互而没有考虑触控的交互。然而，加上触控支持并不应该太难，特别是我们只关注滑动动作，这个在 <code>ngTouch</code> 里有提供。我们将其留给你自己实现。</p>\n</blockquote>\n<p>游戏本身使用方向键（或者 a,w,s,d 键）来玩。在游戏中，我们希望让玩家在页面上跟游戏简单地交互。而不是要求玩家将焦点移到在游戏棋盘元素上（或者同样问题下的其他元素）。玩家只需要让页面获得焦点就可以进行游戏了。</p>\n<p>要做到这种交互，就要将事件监听绑定在 document 上。在 Angular 中，我们会 <code>绑定</code> 自己的事件监听在 Angular 提供的 <code>$ducoment</code> 服务上。要处理用户交互的创建，我们会将键盘事件绑定包裹在一个服务中。记住在页面中我们只需要一个键盘处理器，所以只要一个服务就可以了。</p>\n<p>此外，我们也希望为用户的任何输入动作作出自定义的反应。使用了服务能自然地注入到应用中然后根据用户的输入来决定应用的反应。</p>\n<p>首先，在 <code>app/scripts/Keyboard/keyboard.js</code> 文件中创建一个新的模块（因为我们正在做基于模块的开发的）<code>KeyBoard</code>（文件不存在就要先创建）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app/scripts/keyboard/keyboard.js</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'Keyboard'</span>, []);</span><br></pre></td></tr></table></figure>\n<p>正如创建任何新的 JavaScript 一样，我们需要在 <code>index.html</code> 中引用。现在 <code>&lt;script&gt;</code> 标签列表看起来是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;!-- body --&gt;</span><br><span class=\"line\">  &lt;script src=&quot;scripts/app.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;scripts/grid/grid.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;scripts/grid/grid_directive.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;scripts/grid/tile_directive.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;scripts/keyboard/keyboard.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;scripts/game/game.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>然后，因为新建一个模块，我们同样需要告诉自己的 Angular 模块在应用在需要依赖这个新模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.module(<span class=\"string\">'twentyfourtyeightApp'</span>, [<span class=\"string\">'Game'</span>, <span class=\"string\">'Grid'</span>, <span class=\"string\">'Keyboard'</span>])</span><br></pre></td></tr></table></figure>\n<p><code>Keyboard</code> 服务的实现思路，就是在 <code>$document</code> 上 <code>绑定</code> 了 <code>Keydown</code> 事件来捕获用户的键盘操作。而另一端，在我们的 angular 对象中，我们会注册一有用户操作就触发的处理函数。</p>\n<p>来写代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app/scripts/keyboard/keyboard.js</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'Keyboard'</span>, [])</span><br><span class=\"line\">.service(<span class=\"string\">'KeyboardService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$document</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize the keyboard event binding</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Bind event handlers to get called</span></span><br><span class=\"line\">  <span class=\"comment\">// when an event is fired</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.keyEventHandlers = [];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.on = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>init()</code> 函数会作为 <code>KeyboardService</code> 的开始，然后开始监听键盘事件。我们会过滤掉不感兴趣的键盘事件。</p>\n<p>对于感兴趣的事件，我们会阻止它的默认行为然后将它交给我们的 <code>KeyEventHandlers</code>。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/keyboard.png\" alt=\"2-d grid\"></p>\n<p>如何知道那些是我们感兴趣的呢？既然 <em> 感兴趣的 </em> 键盘操作是固定的，那么我们就去检查事件是否有其中一种键盘事件所激发。</p>\n<p>一旦方向键被按下，document 会接收到一个包含被按下的按键的键码的事件。</p>\n<p>我们可以为这些事件建立一个映射，然后查询捕获到的键盘动作是否在这个 <em> 感兴趣的 </em> 映射中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app/scripts/keyboard/keyboard.js</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'Keyboard'</span>, [])</span><br><span class=\"line\">.service(<span class=\"string\">'KeyboardService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$document</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> UP    = <span class=\"string\">'up'</span>,</span><br><span class=\"line\">      RIGHT = <span class=\"string\">'right'</span>,</span><br><span class=\"line\">      DOWN  = <span class=\"string\">'down'</span>,</span><br><span class=\"line\">      LEFT  = <span class=\"string\">'left'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> keyboardMap = &#123;</span><br><span class=\"line\">    <span class=\"number\">37</span>: LEFT,</span><br><span class=\"line\">    <span class=\"number\">38</span>: UP,</span><br><span class=\"line\">    <span class=\"number\">39</span>: RIGHT,</span><br><span class=\"line\">    <span class=\"number\">40</span>: DOWN</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize the keyboard event binding</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.keyEventHandlers = [];</span><br><span class=\"line\">    $<span class=\"built_in\">document</span>.bind(<span class=\"string\">'keydown'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> key = keyboardMap[evt.which];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// An interesting key was pressed</span></span><br><span class=\"line\">        evt.preventDefault();</span><br><span class=\"line\">        self._handleKeyEvent(key, evt);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>每当一个存在于我们映射中的按键触发了 <code>keydown</code> 事件，<code>KeyboardService</code> 就会执行 <code>this._handleKeyEvent</code> 函数。</p>\n<p>这个函数的整个职责就是调用每一个为按键注册了的处理函数。它就是简单地对处理函数数组进行迭代，使用按键和原事件组为参数来调用处理函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>._handleKeyEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, evt</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> callbacks = <span class=\"keyword\">this</span>.keyEventHandlers;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!callbacks) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  evt.preventDefault();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (callbacks) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; callbacks.length; x++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> cb = callbacks[x];</span><br><span class=\"line\">      cb(key, evt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>另一方面，我们只需要将处理函数压入处理函数数组就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.on = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.keyEventHandlers.push(cb);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-Keyboard-Service\"><a href=\"#使用-Keyboard-Service\" class=\"headerlink\" title=\"使用 Keyboard Service\"></a>使用 Keyboard Service</h3><p>现在我们已经有能力来监控用户的键盘事件，我们需要在应用开始运行的时候就监控。因为我们将它做成了一个服务，所以可以很简单地在主要的控制器中做这件事。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/keyboard-sequence.png\" alt=\"2-d grid\"></p>\n<p>首先，我们需要调用 <code>init()</code> 函数来开始监听键盘。接着，我们会注册函数来告诉 <code>GameManager</code> 来调用 <code>move()</code> 函数。</p>\n<p>回到 <code>GameController</code>，我们添加上 <code>newGame()</code> 函数和 <code>startGame()</code> 函数。<code>newGame()</code> 函数会告诉游戏服务创建一个新的游戏然后开始键盘事件处理。</p>\n<p>来开始编码吧！我们需要将 <code>Keyboard</code> 模块作为一个新的模块依赖 <em> 注入 </em> 到应用中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'twentyfourtyeightApp'</span>, [<span class=\"string\">'Game'</span>, <span class=\"string\">'Keyboard'</span>])</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>然后就可以将 <code>KeyboardService</code> 注入到 <code>GameController</code> 中来开始跟用户交互了。首先，<code>newGame()</code> 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ... (from above)</span></span><br><span class=\"line\">.controller(<span class=\"string\">'GameController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GameManager, KeyboardService</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.game = GameManager;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Create a new game</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.newGame = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    KeyboardService.init();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.game.newGame();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.startGame();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>我们还没有在 <code>GameManager</code> 中定义 <code>newGame()</code> 方法，但很快就会去填好内容。</p>\n<p>一旦我们开始了新游戏，我们会调用 <code>startGame()</code>。<code>startGame()</code> 函数会准备好键盘服务的事件处理函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.controller(<span class=\"string\">'GameController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GameManager, KeyboardService</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.startGame = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    KeyboardService.on(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">      self.game.move(key);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Create a new game on boot</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.newGame();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a name=\"start-button\"></a></p>\n<h2 id=\"按下那开始按钮\"><a href=\"#按下那开始按钮\" class=\"headerlink\" title=\"按下那开始按钮\"></a>按下那开始按钮</h2><p>我们做了许多工作来达到开始游戏这么个目的。最后要实现的方法就是 <code>GameManager</code> 中的 <code>newGame()</code> 了，函数会：</p>\n<ol>\n<li>创建一个空的棋盘</li>\n<li>准备好开始的位置</li>\n<li>初始化游戏</li>\n</ol>\n<p>其实我们已经在 <code>GridService</code> 中实现了这些逻辑，所以现在就差把它们连起来了！</p>\n<p>在我们的 <code>app/scripts/game/game.js</code> 文件中，加入 <code>newGame()</code> 函数吧。此函数会重置游戏状态成应有的初始条件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Game'</span>, [])</span><br><span class=\"line\">.service(<span class=\"string\">'GameManager'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GridService</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Create a new game</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.newGame = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    GridService.buildEmptyGameBoard();</span><br><span class=\"line\">    GridService.buildStartingPosition();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reinit();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Reset game state</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.reinit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.gameOver = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.win = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.currentScore = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.highScore = <span class=\"number\">0</span>; <span class=\"comment\">// we'll come back to this</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在浏览器中载入页面，包含功能的网格就出来了…… 然而这个阶段还是非常无聊因为我们还没有定义任何移动的功能。</p>\n<p><a name=\"game-loop\"></a></p>\n<h2 id=\"动起来（游戏循环）\"><a href=\"#动起来（游戏循环）\" class=\"headerlink\" title=\"动起来（游戏循环）\"></a>动起来（游戏循环）</h2><p>现在我们来深入游戏功能的实现。当用户按下任何一个方向键，我们会调用 <code>GridService</code> 中的 <code>move()</code> 函数（在 <code>GameController</code> 中写的）。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/game-1.png\" alt=\"non-playable version\"></p>\n<p>要编写 <code>move()</code> 函数，我们需要定义游戏的约束。那就是说，我们需要定义游戏对于每一个给出的移动的操作。</p>\n<p>对于每一步移动，我们要：</p>\n<ol>\n<li>确定用户按下的方向键指示的方向</li>\n<li>为棋盘上每一个方块找到所有最远的可能移动的位置。同时抓取下一个方块看是否能 <em> 合并 </em> 起来。</li>\n<li>对于每一个方块，我们想确定下一个位置是否存在一个等值的方块。<ul>\n<li>如果下一个方块不存在，那么只将方块移动到可能的最远位置即可。（意味着这个最远位置就是棋盘的边缘。）</li>\n<li>如果下一个方块存在：<ul>\n<li>且方块值不同的话，那么将方块放在最远位置（下一个方块就是当前方块的移动边界）。</li>\n<li>且方块值和当前方块相同的话，我们就找到一个可能的合并了。<ul>\n<li>如果该方块已经是合并的结果了，则跳过并认定为已使用。</li>\n<li>如果方块还没合并过，那么则认为需要合并。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>既然定义了功能，就可以制定出写 <code>move()</code> 函数的策略了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Game'</span>, [])</span><br><span class=\"line\">.service(<span class=\"string\">'GameManager'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GridService</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.move = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>; <span class=\"comment\">// Hold a reference to the GameManager, for later</span></span><br><span class=\"line\">    <span class=\"comment\">// define move here</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self.win) &#123; <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>移动是有限制条件的：如果游戏已经结束或者游戏循环因为某种原因而终止了，那么就只需要返回并继续。</p>\n<p>接下来我们需要在网格上走一下来找出所有可供移动的地方。而因为掌握空方格的位置其实是网格的职责，因此我们会在 <code>GridService</code> 中写一个新的函数来帮助我们找出这些可能会经过的方格。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/grid-vectors.gif\" alt=\"non-playable version\"></p>\n<p>我们通过提取玩家按键指示的 <em> 向量 </em> 来决定方向。例如，如果玩家按下了右键头键，那么就是想移动到 <code>x</code> 值 <em> 更大的 </em> 方格上。</p>\n<p>如果玩家按了上箭头，那么玩家就是想将方块移动到 <code>y</code> 值 <em> 更小的 </em> 方格上。我们可以使用一个 JavaScript 对象将向量和玩家按键映射起来（从 <code>KeyboardService</code> 中得到的按键），就像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In our `GridService` app/scripts/grid/grid.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vectors = &#123;</span><br><span class=\"line\">  <span class=\"string\">'left'</span>: &#123; <span class=\"attr\">x</span>: <span class=\"number\">-1</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  <span class=\"string\">'right'</span>: &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  <span class=\"string\">'up'</span>: &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">-1</span> &#125;,</span><br><span class=\"line\">  <span class=\"string\">'down'</span>: &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>现在我们就可以简单地迭代每一个可能的位置，并使用向量来控制迭代的方向：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.service(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">TileModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.traversalDirections = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> vector = vectors[key];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> positions = &#123;<span class=\"attr\">x</span>: [], <span class=\"attr\">y</span>: []&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"keyword\">this</span>.size; x++) &#123;</span><br><span class=\"line\">      positions.x.push(x);</span><br><span class=\"line\">      positions.y.push(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Reorder if we're going right</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vector.x &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      positions.x = positions.x.reverse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Reorder the y positions if we're going down</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vector.y &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      positions.y = positions.y.reverse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> positions;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>现在新的函数 <code>traversalDirections()</code> 定义好了，在 <code>move()</code> 函数中就可以在可能的移动上进行迭代了。回到 <code>GameMabager</code>，我们会根据这些可能的位置在网格上走动。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.move = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// define move here</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (self.win) &#123; <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> positions = GridService.traversalDirections(key);</span><br><span class=\"line\"></span><br><span class=\"line\">  positions.x.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    positions.y.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// For every position</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>在位置的循环中，我们会对可供移动的位置进行迭代同时查找存在的方块。从这里开始，我们将编写函数的第二部分，找出从该方块出发能到达的所有方格。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// For every position</span></span><br><span class=\"line\"><span class=\"comment\">// save the tile's original position</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> originalPosition = &#123;<span class=\"attr\">x</span>:x,<span class=\"attr\">y</span>:y&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> tile = GridService.getCellAt(originalPosition);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tile) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// if we have a tile here</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cell = GridService.calculateNextPosition(tile, key);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/next-process.gif\" alt=\"non-playable version\"></p>\n<p>如果我们确实在该方格内找到了方块，就会开始查看该方格最远能到哪里。先在网格上找到下一个位置，检查这个方格是否在棋盘内和方格是否为空。</p>\n<p>如果该方格是空的 <strong> 而且 </strong> 在棋盘内，那么继续取得下一个方格然后执行一样的检查。</p>\n<p>如果两个条件中任意一个不满足，那么要不我们到达了棋盘的边界，要不我们找到了下一个方块。我们会保存前一个位置（译者注：原文为 the next position，翻译为下一个位置。但根据描述和下文的代码此处应该为前一个位置。）同时抓取下一个方格（不管是否存在下一个方格）。</p>\n<p>而这个过程是对网格进行操作，于是就这个函数放在 <code>GridService</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// in GridService</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.calculateNextPosition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cell, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> vector = vectors[key];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> previous;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    previous = cell;</span><br><span class=\"line\">    cell = &#123;</span><br><span class=\"line\">      x: previous.x + vector.x,</span><br><span class=\"line\">      y: previous.y + vector.y</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (<span class=\"keyword\">this</span>.withinGrid(cell) &amp;&amp; <span class=\"keyword\">this</span>.cellAvailable(cell));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    newPosition: previous,</span><br><span class=\"line\">    next: <span class=\"keyword\">this</span>.getCellAt(cell)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>现在我们可以计算下一个有可能放得下我们的方块的地方，接着就是检查是否有合并的可能。</p>\n<p>一个 <em> 合并 </em> 的定义是两个相同值的方块碰撞在一起。我们会检查 <code>next</code> 的位置上是否有相同值的方块并且还之前没有被 <em> 合并 </em> 过。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// For every position</span></span><br><span class=\"line\"><span class=\"comment\">// save the tile's original position</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> originalPosition = &#123;<span class=\"attr\">x</span>:x,<span class=\"attr\">y</span>:y&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> tile = GridService.getCellAt(originalPosition);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tile) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// if we have a tile here</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cell = GridService.calculateNextPosition(tile, key),</span><br><span class=\"line\">      next = cell.next;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (next &amp;&amp;</span><br><span class=\"line\">      next.value === tile.value &amp;&amp;</span><br><span class=\"line\">      !next.merged) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Handle merged</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Handle moving tile</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果这个所谓的下一个位置并 <em> 不 </em> 符合上面的条件，那么我们就会将方块从当前的位置移动到这个下一个位置（else 语句）。</p>\n<p>这是更相比之下更容易处理的条件，所需要做的就是将方块移动到 newPosition 位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (next &amp;&amp;</span><br><span class=\"line\">    next.value === tile.value &amp;&amp;</span><br><span class=\"line\">    !next.merged) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Handle merged</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  GridService.moveTile(tile, cell.newPosition);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"移动方块\"><a href=\"#移动方块\" class=\"headerlink\" title=\"移动方块\"></a>移动方块</h3><p>就像你大概猜测那样，<code>moveTile()</code> 函数最好就是定义在 <code>GridService</code> 中。</p>\n<p>移动一个方块就是简单地更新一下方块在数组中的位置和更新 <code>TileModel</code> 而已。</p>\n<p>就像我们定义的那样，函数里面有两个目的不同的操作。当我们：</p>\n<h5 id=\"在数组中移动方块的时候\"><a href=\"#在数组中移动方块的时候\" class=\"headerlink\" title=\"在数组中移动方块的时候\"></a>在数组中移动方块的时候</h5><p>数组 <code>GridService.tiles</code>（译者注：原文为 GridService）为后端映射了方块的位置。数组中方块的位置 <em> 没有 </em> 和网格中方块的位置绑定。</p>\n<h5 id=\"更新-TileModel-中的位置的时候\"><a href=\"#更新-TileModel-中的位置的时候\" class=\"headerlink\" title=\"更新 TileModel 中的位置的时候\"></a>更新 TileModel 中的位置的时候</h5><p>我们要为前端的 CSS 更新坐标来放置方块。</p>\n<p>简而言之：为了在后端能跟踪方块们，我们需要更新 <code>GridService</code> 中的 <code>this.tiles</code> 数组 <em> 同时 </em> 更新方块对象的位置。</p>\n<p>于是 <code>moveTile()</code> 就变成了一个简单的两步操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GridService</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.moveTile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tile, newPosition</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> oldPos = &#123;</span><br><span class=\"line\">    x: tile.x,</span><br><span class=\"line\">    y: tile.y</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Update array location</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setCellAt(oldPos, <span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setCellAt(newPosition, tile);</span><br><span class=\"line\">  <span class=\"comment\">// Update tile model</span></span><br><span class=\"line\">  tile.updatePosition(newPosition);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>现在我们需要定义我们的 <code>tile.updatePosition()</code> 方法。这个方法所做的就像它字面上的那样，就是简单地更新模型自己的 <code>x</code> 和 <code>y</code> 坐标。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.factory(<span class=\"string\">'TileModel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Tile.prototype.updatePosition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newPos</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = newPos.x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = newPos.y;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>回到 <code>GridService</code> 中，我们已经可以只是调用 <code>moveTile()</code> 来同时更新 <code>GridService.tiles</code> 数组和方块自己的位置了。</p>\n<h3 id=\"合并一个方块\"><a href=\"#合并一个方块\" class=\"headerlink\" title=\"合并一个方块\"></a>合并一个方块</h3><p>既然我们已经处理了 <em> 比较简单 </em> 的情况了，那么合并一个方块就是我们下一个需要攻克的问题。合并定义如下：</p>\n<ul>\n<li>当一个方块在下一个可移动的方格上遇到相同值的方块的时候就需要合并。*</li>\n</ul>\n<p>当一个方块被合并出来，棋盘就算需要改变，同样当前得分和最高得分也需要更新（如果需要的话）。</p>\n<p>合并需要几个步骤：</p>\n<ol>\n<li>在最后的位置上添加一个新的带合并值的方块</li>\n<li>移除旧方块</li>\n<li>更新游戏得分</li>\n<li>检查游戏是否结束</li>\n</ol>\n<p>拆解后，合并操作很简单。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasWon = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (next &amp;&amp;</span><br><span class=\"line\">    next.value === tile.value &amp;&amp;</span><br><span class=\"line\">    !next.merged) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Handle merged</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> newValue = tile.value * <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"comment\">// Create a new tile</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> mergedTile = GridService.newTile(tile, newValue);</span><br><span class=\"line\">  mergedTile.merged = [tile, cell.next];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Insert the new tile</span></span><br><span class=\"line\">  GridService.insertTile(mergedTile);</span><br><span class=\"line\">  <span class=\"comment\">// Remove the old tile</span></span><br><span class=\"line\">  GridService.removeTile(tile);</span><br><span class=\"line\">  <span class=\"comment\">// Move the location of the mergedTile into the next position</span></span><br><span class=\"line\">  GridService.moveTile(merged, next);</span><br><span class=\"line\">  <span class=\"comment\">// Update the score of the game</span></span><br><span class=\"line\">  self.updateScore(self.currentScore + newValue);</span><br><span class=\"line\">  <span class=\"comment\">// Check for the winning value</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (merged.value &gt;= self.winningValue) &#123;</span><br><span class=\"line\">    hasWon = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>我们只想支持一行只有一个方块移动的效果（就是说如果一行里面有两个可以合并的情况，则只会合并一个），因此不得不跟踪 <code>合并了的</code> 方块。通过将 <code>.merged</code> 标志设置成随便什么东西而不是 <code>undefined</code> 就可以做到。</p>\n<p>在结束这个函数的编写之前，还需要解释一下这里用到的我们还没有定义的函数。</p>\n<p><code>GridService.newTile()</code> 函数就是简单地创建 <code>TileModel</code> 对象。合并操作就放在包含创建新方块函数的｀GridService｀中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// GridService</span><br><span class=\"line\">this.newTile = function(pos, value) &#123;</span><br><span class=\"line\">  return new TileModel(pos, value);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// ...</span><br></pre></td></tr></table></figure>\n<p>我们一会再回来叙述 <code>self.updateScore()</code>。现在暂时只需要知道它更新游戏得分就可以了（就像函数名所表明的那样）。</p>\n<h3 id=\"移动了方块之后\"><a href=\"#移动了方块之后\" class=\"headerlink\" title=\"移动了方块之后\"></a>移动了方块之后</h3><p>我们只希望在一次有效的方块移动之后才增加新的方块，因此需要检查一下是否真的有任何一个方块移动了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hasMoved = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">  hasMoved = <span class=\"literal\">true</span>; <span class=\"comment\">// we moved with a merge</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  GridService.moveTile(tile, cell.newPosition);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!GridService.samePositions(originalPos, cell.newPosition)) &#123;</span><br><span class=\"line\">  hasMoved = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>当所有的方块都已经移动过了（或尝试移动过），我们就继续检查玩家是否赢了。如果是，那么实际上我们就要设置 <code>self.win</code> 这个标志了。</p>\n<blockquote>\n<p>当有方块碰撞的时候我们会移动方块，所以在合并的条件下，我们只简单地设置 <code>hasMoved</code> 为 true。</p>\n</blockquote>\n<p>最后，我们要检查一下棋盘上是否有任何的方块移动。如果有，则：</p>\n<ol>\n<li>给棋盘添加一个新的方块</li>\n<li>检查一下有没有必要展示游戏结束界面</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!GridService.samePositions(originalPos, cell.newPosition)) &#123;</span><br><span class=\"line\">  hasMoved = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (hasMoved) &#123;</span><br><span class=\"line\">  GridService.randomlyInsertNewTile();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (self.win || !self.movesAvailable()) &#123;</span><br><span class=\"line\">    self.gameOver = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重置方块\"><a href=\"#重置方块\" class=\"headerlink\" title=\"重置方块\"></a>重置方块</h3><p>在运行任何主游戏程序前，我们要重置每一个方块以便不再跟踪其合并的状态。详细来说，就是每一次移动之后，都要清理所有记录以便让所有方块能再次被移动。因此在执行移动的循环体开头，我们会调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GridService.prepareTiles();</span><br></pre></td></tr></table></figure>\n<p><code>GridService</code> 中的 <code>prepareTiles()</code> 函数只是简单地迭代每一个方块然后重置其状态而已：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.prepareTiles = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y,tile</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tile) &#123;</span><br><span class=\"line\">      tile.reset();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><a name=\"keeping-score\"></a></p>\n<h2 id=\"计算得分\"><a href=\"#计算得分\" class=\"headerlink\" title=\"计算得分\"></a>计算得分</h2><p>回头来看看 <code>updateScore()</code> 方法，游戏本身需要记录两个得分：</p>\n<ol>\n<li>当前游戏的得分</li>\n<li>玩家的最高得分</li>\n</ol>\n<p><code>currentScore</code> 只是一个在每一次游戏的时候保存在内存中的变量，因此无需特殊对待。</p>\n<p>然而 <code>highScore</code> 则是一个贯穿每一次的游戏的变量。我们有几个方法来保存，比如 localstorage，cookies，或者两者结合。</p>\n<p>因为 cookies 是两个方法中最简单而且跨浏览器安全，我们就继续使用 cookies 来存储这个 highScore。</p>\n<p>Angular 中使用 <code>angular-cookies</code> 模块是管理 cookies 的最简单的方法了。</p>\n<p>要使用这个模块，可以到 <a href=\"http://angularjs.org\" target=\"_blank\" rel=\"noopener\">angularjs.org</a> 上下载或者使用包管理器例如 bower 来安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bower install --save angular-cookies</span><br></pre></td></tr></table></figure>\n<p>照旧，我们要在 <code>index.html</code> 中引用这个脚本然后在应用中将 <code>ngCookies</code> 设置成模块级别的依赖。</p>\n<p>像这样更新一下 <code>app/index.html</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;bower_components/angular-cookies/angular-cookies.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>然后添加 <code>ngCookies</code> 作为模块依赖（在 <code>Game</code> 模块中，我们引用 cookies 的地方）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Game'</span>, [<span class=\"string\">'Grid'</span>, <span class=\"string\">'ngCookies'</span>])</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>有了 <code>ngCookies</code> 作为依赖，我们就可以将 <code>$cookieStore</code> 服务 <em> 注入 </em> 到 <code>GameManagere</code> 服务中。现在可以在浏览器中对 cookies 进行读写了。</p>\n<p>例如，要读取玩家的最高得分，我们会写一个函数从用户的 cookie 中取来：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.getHighScore = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>($cookieStore.get(<span class=\"string\">'highScore'</span>)) || <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>回到 <code>GameManager</code> 类中的 <code>updateScore()</code> 函数，我们开始编写更新当前得分的代码。如果得分比之前记录的最高得分高，那么就更新 cookie 中的最高得分。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.updateScore = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newScore</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.currentScore = newScore;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.currentScore &gt; <span class=\"keyword\">this</span>.getHighScore()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.highScore = newScore;</span><br><span class=\"line\">    <span class=\"comment\">// Set on the cookie</span></span><br><span class=\"line\">    $cookieStore.put(<span class=\"string\">'highScore'</span>, newScopre);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"track-by-之怒\"><a href=\"#track-by-之怒\" class=\"headerlink\" title=\"track by 之怒\"></a>track by 之怒</h3><p>既然我们已经将方块显示出来了，一个 bug 也同样出现了，那就是一些有奇怪行为的方块复制品冒出来。进一步来说，就是方块可能会在不应该出现的地方出现。</p>\n<p>原因是 Angular 通过基于一个唯一的标识来获知 <code>titles</code> 数组里面的有什么方块。而我们把这个唯一的标识在视图中设定为方块在数组中的 <code>$index</code>（也就是数组中的位置）。然而我们在数组中将方块移来移去，<code>$index</code> 不再起到唯一标识的作用。我们需要另外的监测方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;game&quot;&gt;</span><br><span class=\"line\">  &lt;!-- grid-container --&gt;</span><br><span class=\"line\">  &lt;div class=&quot;tile-container&quot;&gt;</span><br><span class=\"line\">    &lt;div tile</span><br><span class=\"line\">      ng-model=&apos;tile&apos;</span><br><span class=\"line\">      ng-repeat=&apos;tile in ngModel.tiles track by $index&apos;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>与其依靠数组来标识方块的位置，我们不如使用方块自己唯一的 uuid 来跟踪。自己创建唯一标识能保证 angular 将方块数组中的每一个方块看成是唯一的对象。只要唯一的 uuid 没有变，那么 angular 就会根据这个标识来将方块识别为独立的对象。</p>\n<p>创建新实例的时候使用 <code>TileModel</code>，我们能非常轻松地为方块实现出唯一标识。我们还能以自己的方式来创建唯一标识。</p>\n<blockquote>\n<p>只要对于每一个创建的 <code>TileModel</code> 实例是唯一的，那么怎么创建这个唯一 id 的方法并无影响。</p>\n</blockquote>\n<p>要生成这个唯一的 id，我们跳到 <a href=\"http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\" target=\"_blank\" rel=\"noopener\">StackOverflow</a> 上找一个 <a href=\"http://www.ietf.org/rfc/rfc4122.txt\" target=\"_blank\" rel=\"noopener\">遵循 rfc4122</a> 的全球唯一标识生成器，然后将其打包成一个工厂，提供一个函数：<code>next()</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.factory(<span class=\"string\">'GenerateUniqueId'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> generateUid = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// http://www.ietf.org/rfc/rfc4122.txt</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> uuid = <span class=\"string\">'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'</span>.replace(<span class=\"regexp\">/[xy]/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> r = (d + <span class=\"built_in\">Math</span>.random()*<span class=\"number\">16</span>)%<span class=\"number\">16</span> | <span class=\"number\">0</span>;</span><br><span class=\"line\">      d = <span class=\"built_in\">Math</span>.floor(d/<span class=\"number\">16</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (c === <span class=\"string\">'x'</span> ? r : (r&amp;<span class=\"number\">0x7</span>|<span class=\"number\">0x8</span>)).toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> uuid;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> generateUid(); &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>要 <em> 使用 </em> 工厂 <code>GenerateUniqueId</code>，就要将它注入然后调用 <code>GenerateUniqueId.next()</code> 来产生一个新的 uuid。回到 <code>TileModel</code> 中，我们已经可以为实例生成一个唯一的 id 了（在构造函数中）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In app/scripts/grid/grid.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">.factory(<span class=\"string\">'TileModel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GenerateUniqueId</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Tile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pos, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x      = pos.x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y      = pos.y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value  = val || <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Generate a unique id for this tile</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = GenerateUniqueId.next();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.merged = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>现在每一个方块都已经有了唯一的标识了，于是就可以告诉 Angular 使用 id 而不是 <code>$index</code> 来追踪方块了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- ... --&gt;</span><br><span class=\"line\">&lt;div tile</span><br><span class=\"line\">      ng-model=&apos;tile&apos;</span><br><span class=\"line\">      ng-repeat=&apos;tile in ngModel.tiles track by $id(tile.id)&apos;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- ... --&gt;</span><br></pre></td></tr></table></figure>\n<p>这样做会出现一个问题。我们使用 nulls 来初始化数组（显式地）和 nulls 来重置数组（而不是对数组排序或者调整长度），angular 会不顾一切地试图将 nulls 看作对象。但是 null 值并不包含有唯一标识，于是就会引起浏览器抛异常，并且不知道怎么处理复制出来的对象。</p>\n<p>所以，我们要使用内置的 angular 工具来追踪唯一标识或者数组中的 <code>$index</code> 位置（因为 null 对象在方格内只有一个所以可以通过数组的位置来追踪）。我们可以向如下那样修改一下 grid_directive 中的视图来解决 null 对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- ... --&gt;</span><br><span class=\"line\">&lt;div tile</span><br><span class=\"line\">      ng-model=<span class=\"string\">'tile'</span></span><br><span class=\"line\">      ng-repeat=<span class=\"string\">'tile in ngModel.tiles track by $id(tile.id || $index)'</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;!-- ... --&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个问题也能通过实现不同的底层数据结构来解决，例如使用迭代器来查看每一个 <code>TileModel</code> 的位置而不是依靠数组下标或者每次改变数组后重新调整（或在 <code>$digest()</code> 中调整）。为了保持简单和清晰，我们使用数组来实现因为这种实现方法只需要处理上文的副作用就可以了。</p>\n</blockquote>\n<p><a name=\"game-over\"></a></p>\n<h2 id=\"我们赢了-游戏结束\"><a href=\"#我们赢了-游戏结束\" class=\"headerlink\" title=\"我们赢了?!?? 游戏结束\"></a>我们赢了?!?? 游戏结束</h2><p>当我们在原来 2048 游戏中输了的时候，一个 <em> 游戏结束 </em> 界面会滑入，让我们重新开始游戏或者在 twitter 上 follow 游戏作者。这不仅是游戏中一个酷酷的效果，也是一个中断游戏的好方法。</p>\n<p>使用基本的 angular 技术也能做到这个。我们已经在 <code>GameManager</code> 使用了变量 <code>gameOver</code> 来确定游戏什么时候结束。可以直接就用一个 <code>&lt;div&gt;</code> 元素来装着游戏结束界面，然后使用绝对定位覆盖在棋盘上。这种技术（和 Angular）的神奇在于实现起来没有任何的花招：</p>\n<p>就是简单地创建一个包含游戏结束或者玩家获胜的信息的 <code>&lt;div&gt;</code> 元素，根据游戏的状态来选择显示。比如，游戏结束界面看起来可以像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- ... --&gt;</span><br><span class=\"line\">&lt;div id=&quot;game-container&quot;&gt;</span><br><span class=\"line\">  &lt;div grid ng-model=&apos;ctrl.game&apos; class=&quot;row&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div id=&quot;game-over&quot;</span><br><span class=\"line\">        ng-if=&quot;ctrl.game.gameOver&quot;</span><br><span class=\"line\">        class=&quot;row game-overlay&quot;&gt;</span><br><span class=\"line\">      Game over</span><br><span class=\"line\">      &lt;div class=&quot;lower&quot;&gt;</span><br><span class=\"line\">        &lt;a class=&quot;retry-button&quot; ng-click=&apos;ctrl.newGame()&apos;&gt;Try again&lt;/a&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;!-- ... --&gt;</span><br></pre></td></tr></table></figure>\n<p>困难的部分是处理样式 / CSS。为效率起见，我们只是将元素设置成绝对定位在网格之上，让浏览器来决定真正的位置。这里附上 <em> 相关的 </em> 一部分 css（提醒一下，完整 CSS 在下面的 gtihub 地址中有）：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.game-overlay</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: $width;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: $width;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 255, 255, 0.47);</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">35%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\"></span><br><span class=\"line\">  .lower &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">block</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">margin-top</span>: 29<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">font-size</span>: 16<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以使用完全相同的技术来做获胜界面，同样创建一个代表获胜的 <code>.game-overlay</code> 元素即可。</p>\n</blockquote>\n<p><a name=\"running-the-animation\"></a></p>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><p>原 2048 游戏中其中一个令人印象深刻的地方是方块似乎会魔术般地从一个网格滑到下一个网格，另外游戏结束 / 获胜界面的显示显得很自然。因为使用 Angular，我们能做到 <em> 几乎一样的效果 </em>（感谢 CSS）。</p>\n<p>实际上，我们做出来的游戏能够容易地实现诸如滑动，出现，显现等的动画效果。我们几乎不会碰到 JavaScript（只需一点点）就可以实现这些效果。</p>\n<h3 id=\"CSS-位置动画（也就是添加滑动的方块）\"><a href=\"#CSS-位置动画（也就是添加滑动的方块）\" class=\"headerlink\" title=\"CSS 位置动画（也就是添加滑动的方块）\"></a>CSS 位置动画（也就是添加滑动的方块）</h3><p>因为我们通过 CSS 设置类 <code>position-[x]-[y]</code> 来定位方块，当为方块设置新位置的时候，DOM 元素会加上类 <code>position-[newX]-[newY]</code> 并移除类 <code>position-[oldX]-[oldY]</code>。在这种情况下，我们在 <code>.tile</code> 类上定义一个 CSS 变换来实现 CSS 类上自带滑动效果。</p>\n<p>相关的 SCSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.tile</span> &#123;</span><br><span class=\"line\">  @include border-radius($tile-radius);</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> transition($transition-time ease-in-out);</span><br><span class=\"line\">  <span class=\"selector-tag\">-webkit-transition-property</span>: <span class=\"selector-tag\">-webkit-transform</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">-moz-transition-property</span>: <span class=\"selector-tag\">-moz-transform</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">transition-property</span>: <span class=\"selector-tag\">transform</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">z-index</span>: 2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>CSS 变换定义好后，现在方块就会在网格之间滑动了（对，就是 <em> 那么简单 </em>）。</p>\n<h3 id=\"游戏结束界面动画\"><a href=\"#游戏结束界面动画\" class=\"headerlink\" title=\"游戏结束界面动画\"></a>游戏结束界面动画</h3><p>如果想在动画上取得更多的效果，可以使用 <code>ngAnimate</code> 模块来做。此模块本身配合 angular 一起就是开箱即用了。</p>\n<p>在使用前，同样需要安装 <code>ngAnimate</code> 模块。在 <a href=\"http://angularjs.org\" target=\"_blank\" rel=\"noopener\">angularjs.org</a> 上下载或者使用包管理器（例如 bower）来安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bower install --save angular-animate</span><br></pre></td></tr></table></figure>\n<p>同样，我们接着就需要在 HTML 中引用以便浏览器加载。修改 <code>index.html</code> 来引用 <code>angular-animate.js</code> 文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;bower_components/angular-animate/angular-animate.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>最后，就像其他 angular 模块一样，我们要告诉 angular 我们的应用依赖什么模块来运行。在应用的依赖数组中加入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular</span><br><span class=\"line\">.module(<span class=\"string\">'twentyfourtyeightApp'</span>, [<span class=\"string\">'Game'</span>, <span class=\"string\">'Grid'</span>, <span class=\"string\">'Keyboard'</span>, <span class=\"string\">'ngAnimate'</span>, <span class=\"string\">'ngCookies'</span>])</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ngAnimate\"><a href=\"#ngAnimate\" class=\"headerlink\" title=\"ngAnimate\"></a>ngAnimate</h3><p>虽然对 ngAnimate 的深度探讨超出本文范围（看 <a href=\"https://www.ng-book.com\" target=\"_blank\" rel=\"noopener\">ng-book</a> 来深入了解其机制），但是我们还是粗浅了解一下其工作机制以便在应用里实现动画。</p>\n<p>引入了 <code>ngAnimate</code> 作为模块级别依赖之后，任何时候 angular 为相关的（对于我们的应用而言）指令添加一个新对象的时候，它也会增添上一个 CSS 类（免费）。我们可以利用这些类来给游戏中的不同组件赋予 CSS 动画：</p>\n<table>\n  <tr>\n    <th>Directive</th>\n    <th>Added class</th>\n    <th>Leaving class</th>\n  </tr>\n  <tr>\n    <td>ng-repeat</td>\n    <td>ng-enter</td>\n    <td>ng-leave</td>\n  </tr>\n  <tr>\n    <td>ng-if</td>\n    <td>ng-enter</td>\n    <td>ng-leave</td>\n  </tr>\n  <tr>\n    <td>ng-class</td>\n    <td>[className]-add</td>\n    <td>[className]-remove</td>\n  </tr>\n</table>\n\n<p>当一个元素被添加进 <code>ng-repeat</code> 的作用域，新的 DOM 元素会被自动添加上 CSS 类 <code>ng-enter</code>。然后，当它真正地添加到视图上后，就会被添加上 CSS 类 <code>ng-enter-active</code>。这个机制很重要因为它让我们能够在 CSS 类 <code>ng-enter</code> 里设定动画的样子和在 CSS 类 <code>ng-enter-active</code> 里设定动画的样式。当元素在 <code>ng-repeat</code> 迭代器中被移除的时候类 <code>ng-leave</code> 也是如此的工作机制。</p>\n<p>当 DOM 元素上一个新的 CSS 类被添加（或被移除），相应的 <code>[classname]-add</code> 和 <code>[classname]-add-active</code> 也会添加到 DOM 元素上。同理，也可以在相应的类里设定 CSS 动画。</p>\n<h3 id=\"游戏结束界面动画-1\"><a href=\"#游戏结束界面动画-1\" class=\"headerlink\" title=\"游戏结束界面动画\"></a>游戏结束界面动画</h3><p>我们能使用类 <code>ng-enter</code> 来让游戏结束界面和获胜界面动起来了。记住，类 <code>.game-overlay</code> 是使用 <code>ng-if</code> 指令来实现隐藏和显示的。当 <code>ng-if</code> 的条件变化了，<code>ngAnimate</code> 会在等式值为真的时候添加上 <code>.ng-enter</code> 和 <code>.ng-enter-active</code>（或者移除元素时添加 <code>.ng-leave</code> 和 <code>.ng-leave-active</code>）。</p>\n<p>我们会在类 <code>.ng-enter</code> 中设定好动画，然后在类 <code>.ng-enter-active</code> 中激活。相关的 SCSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.game-overlay</span> &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.ng-enter</span> &#123;</span><br><span class=\"line\">    @include transition(all 1000ms ease-in);</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> transform(translate(<span class=\"number\">0</span>, <span class=\"number\">100%</span>));</span><br><span class=\"line\">    <span class=\"selector-tag\">opacity</span>: 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.ng-enter-active</span> &#123;</span><br><span class=\"line\">    @include transform(translate(0, 0));</span><br><span class=\"line\">    <span class=\"selector-tag\">opacity</span>: 1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所有的 SCSS 在文章底部的 github 连接中可以看到。</p>\n<p><a name=\"customizing-size\"></a></p>\n<h2 id=\"定制位置\"><a href=\"#定制位置\" class=\"headerlink\" title=\"定制位置\"></a>定制位置</h2><p>假设我们想使用不同的棋盘大小。例如，原 2048 是 4x4 的。如果我们想要 3x3 或者 6x6 呢？不用变动太多的代码我们就能轻松实现。</p>\n<p>棋盘本身是通过 SCSS 来创建和定位的，而网格又是通过 <code>GridService</code> 来管理的。所以我们在这两个地方修改一下以便能自定义棋盘。</p>\n<h3 id=\"动态-CSS\"><a href=\"#动态-CSS\" class=\"headerlink\" title=\"动态 CSS\"></a>动态 CSS</h3><p>好吧实际上我们并不是打算弄动态 CSS，但是我们可以创建更加多实际会用得上的 CSS。与其使用单个 <code>#game</code> 标签，我们可以实时创建可以动态设置网格的 DOM 元素标签。也就是说，我们将 3x3 的棋盘版本嵌套在 ID 是 <code>#game-3</code> 的 DOM 元素下，将 6x6 的棋盘版本嵌套在 id 标签是 <code>#game-6</code> 的元素下。</p>\n<p>可以在原本已经是动态的 SCSS 中编写出一个<a href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\" target=\"_blank\" rel=\"noopener\">混合</a>。就是很简单地找到 css ID 标签 <code>#game</code> 然后将其包裹进一个混合。例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> game-board($tile-count: <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">  $tile-size: ($width - $tile-padding * ($tile-count + 1)) / $tile-count;</span><br><span class=\"line\">  #game-#&#123;$tile-count&#125; &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">relative</span>;</span><br><span class=\"line\">    padding: $tile-padding;</span><br><span class=\"line\">    <span class=\"selector-tag\">cursor</span>: <span class=\"selector-tag\">default</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#bbaaa0</span>;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们可以引用 <code>game-board</code> 混合来动态创建一个包含有不同棋盘版本的样式表了，棋盘的版本都各自独立在其 <code>#game-[n]</code> 标签下。</p>\n<p>要做出这样不同的版本，我们只需要遍历所有的棋盘大小然后调用上面的混合就可以了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$min-tile-count: 3;       // lowest tile count</span><br><span class=\"line\">$max-tile-count: 6;       // highest tile count</span><br><span class=\"line\">@<span class=\"keyword\">for</span> $i from $min-tile-count through $max-tile-count &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> game-board($i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态的-GridService\"><a href=\"#动态的-GridService\" class=\"headerlink\" title=\"动态的 GridService\"></a>动态的 GridService</h3><p>现在已经编写好了应付不同大小棋盘的 CSS 了，我们还需要修改 <code>GridService</code> 好让启动应用的时候能设置网格的大小。</p>\n<p>Angular 让这变得十分简单。首先，我们需要将 <code>GridService</code> 变成 <code>provider</code>，而不是一个直接的 <code>service</code>。如果你不清楚服务（译者注：service）和提供者（译者注：provider）之间的不同，看 <a href=\"https://www.ng-book.com\" target=\"_blank\" rel=\"noopener\">ng-book</a> 作深入了解。简单来说，一个提供者能够让我们在运行之前对其进行配置。</p>\n<p>此外，我们也需要将提供者中的构造函数修改为 <code>$get</code> 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.provider(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = <span class=\"number\">4</span>; <span class=\"comment\">// Default size</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setSize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sz</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.size = sz ? sz : <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> service = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$<span class=\"keyword\">get</span> = function(TileModel) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>提供者中任何不在 <code>$get</code> 方法中的方法都能在应用的 <code>.config()</code> 函数中访问得到。<code>$get()</code> 中的所有东西不能被 <code>.config()</code> 方法访问，而能在运行的时候被应用访问。</p>\n<p>实现动态棋盘大小的工作就这么多。现在我们试着做一个 6x6 的棋盘而不是 4x4 的棋盘。在 app 模块的 <code>.config()</code> 函数中，我们叫来 <code>GridServiceProvider</code> 来设置大小：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular</span><br><span class=\"line\">.module(<span class=\"string\">'twentyfourtyeightApp'</span>, [<span class=\"string\">'Game'</span>, <span class=\"string\">'Grid'</span>, <span class=\"string\">'Keyboard'</span>, <span class=\"string\">'ngAnimate'</span>, <span class=\"string\">'ngCookies'</span>])</span><br><span class=\"line\">.config(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GridServiceProvider</span>) </span>&#123;</span><br><span class=\"line\">  GridServiceProvider.setSize(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Angular 在创建一个提供者的时候，会自动生成一个仅供配置时使用的模块，我们使用名字：[serviceName]Provider 来实现注入。</p>\n</blockquote>\n<p><a name=\"demo\"></a></p>\n<h2 id=\"演示-demo\"><a href=\"#演示-demo\" class=\"headerlink\" title=\"演示 demo\"></a>演示 demo</h2><p>完整的 demo 在这里：<a href=\"http://ng2048.github.io/\" target=\"_blank\" rel=\"noopener\">http://ng2048.github.io/</a>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>唷！我们希望你已经在愉快地使用 Angular 来编写这个 2048 游戏了。博文中应该已经覆盖了大部分的过程了。如果你觉得不错，可以在下面留下评论。如果你对继续学习 Angular 有兴趣，务必去看看我们的书<a href=\"https://www.ng-book.com/\" target=\"_blank\" rel=\"noopener\">Complete Book on AngularJS</a>。这是唯一一本会不断更新 AngularJS 知识的书，并且包括了在 AngularJS 中所有你需要了解的东西。</p>\n<p><a href=\"https://news.ycombinator.com/item?id=7554348\" target=\"_blank\" rel=\"noopener\">在 HackerNews 上讨论</a></p>\n<h2 id=\"Thanks\"><a href=\"#Thanks\" class=\"headerlink\" title=\"Thanks\"></a>Thanks</h2><p>非常感谢 <a href=\"http://gabrielecirulli.com/\" target=\"_blank\" rel=\"noopener\">Gabriele Cirulli</a> 编写出了妙极的（和让人上瘾的）2048，同样感谢他对此文的启发。文中的很多主意都是从原游戏中搜集、提炼，用以阐明如何使用 Angular 来编写。</p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><p>游戏的完整代码在 Github 上，地址是 <a href=\"http://d.pr/pNtX。要在本地编译游戏，只需要复制代码然后运行：\" target=\"_blank\" rel=\"noopener\">http://d.pr/pNtX。要在本地编译游戏，只需要复制代码然后运行：</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install</span><br><span class=\"line\">$ bower install</span><br><span class=\"line\">$ grunt serve</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题与解决方法\"><a href=\"#问题与解决方法\" class=\"headerlink\" title=\"问题与解决方法\"></a>问题与解决方法</h2><p>如果你使用不了 npm install，保证你安装了最新的 node.js 和 npm。</p>\n<p>这个版本库在 node v0.10.26 和 npm 1.4.3 上测试。</p>\n<p>以下是一个安装最新版本的 node 和 node 版本管理器 <code>n</code> 的方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm cache clean -f</span><br><span class=\"line\">$ sudo npm install -g n</span><br><span class=\"line\">$ sudo n stable</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>原文<a href=\"http://www.ng-newsletter.com/posts/building-2048-in-angularjs.html\" target=\"_blank\" rel=\"noopener\">http://www.ng-newsletter.com/posts/building-2048-in-angularjs.html</a>，所有版权属于原文。考虑到排版和图片，内容稍有修改，对文章表达的意思并无太大影响。第一次渣翻长文，求翻译大大们拍砖和调教。</p>\n</blockquote>\n<p>我们最近经常被问到的其中一个问题是作为一个框架，Angular 在什么情况下使用并不太适合。我们的标准答案通常是编写游戏的时候，因为 Angular 有它自己的事件处理循环（$digest 循环）而游戏通常要求非常多的底层 DOM 操作。其实这个答案并不准确因为 Angular 其实是能支持多数游戏的编写的。即使要求大量的 DOM 操作的游戏，Angular 也能胜任其静态部分，例如高分记录和游戏菜单。</p>\n<p>如果你是像我那样的人（同时是个技术人），你有可能会喜欢玩那个流行的 <a href=\"http://gabrielecirulli.github.io/2048\" target=\"_blank\" rel=\"noopener\">2048</a> 游戏。游戏的目标是通过合并相同数值的方块来得到数值是 2048 的方块。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/game.gif\" alt=\"Injection\"></p>\n<p><a href=\"https://news.ycombinator.com/item?id=7554348\" target=\"_blank\" rel=\"noopener\">在 HackerNews 上讨论</a></p>\n<p>在今天的博文中，我们准备使用 AngularJS 来仿制这个游戏，而且是从头到尾完整地解释整个 app 的编写流程。这个 app 是一个相当复杂的应用，我们也希望利用这篇博文来展示如何编写复杂的 AngularJS 应用。</p>\n<p>此 Angular 版应用的<a href=\"http://d.pr/SnWD\" target=\"_blank\" rel=\"noopener\">demo</a>。</p>\n<p>来让我们开始吧！</p>\n<blockquote>\n<p>TL;DR: 本应用的完整源代码都能在文章底部的 github 链接里面找到。</p>\n</blockquote>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#planning\">计划</a></li>\n<li><a href=\"#modular\">模块结构</a></li>\n<li><a href=\"#game-controller\">GameController</a></li>\n<li><a href=\"#tdd\">测试，测试，测试</a></li>\n<li><a href=\"#build-grid\">建造游戏网格</a></li>\n<li><a href=\"#scss\">SCSS 来救援</a></li>\n<li><a href=\"#the-tile-directive\">Tile 指令</a></li>\n<li><a href=\"#starting-the-game\">游戏棋盘</a></li>\n<li><a href=\"#grid-theory\">网格理论</a></li>\n<li><a href=\"#keyboard\">玩法（键盘）</a></li>\n<li><a href=\"#start-button\">按下开始按钮之时</a></li>\n<li><a href=\"#game-loop\">游戏循环</a></li>\n<li><a href=\"#keeping-score\">计算得分</a></li>\n<li><a href=\"#game-over\">游戏结束和获胜界面</a></li>\n<li><a href=\"#running-the-animation\">动画</a></li>\n<li><a href=\"#customizing-size\">自定义</a></li>\n<li><a href=\"#demo\">演示</a></li>\n</ol>\n<p><a name=\"planning\"></a></p>\n<h2 id=\"第一步：计划\"><a href=\"#第一步：计划\" class=\"headerlink\" title=\"第一步：计划\"></a>第一步：计划</h2><p><img src=\"http://www.ng-newsletter.com/images/2048/3d-board.png\" alt=\"Minification\"></p>\n<p>我们首先想做的是对将要编写的应用进行高层次设计。如果是仿制一个应用或是从零开始，我们都会这样做，不论应用有多大。</p>\n<p>审视一下，我们可以看到游戏是有一块游戏棋盘，上面有一些方块。每一个方块的位置就是数值方块的位置。我们可以利用这一个事实，使用 CSS3 而不是 javascript 来摆放方块，后者需要知道方块摆放的位置。当摆放方块的时候，我们只需要保证方块覆盖在合适的位置上就可以了。</p>\n<p>CSS3 的使用让我们不但能够免于在 CSS 上搞动画的工作，而且能使用标准的 AngularJS 行为（译者注：AngularJS behavior）来跟踪游戏棋盘、方块和游戏逻辑的状态。</p>\n<p>因为我们只有一个页面，所以只需要一个 controller 来管理页面。</p>\n<p>既然在应用的运行期间只有一个游戏棋盘，我们就另外创建单一一个 <code>GridService</code> 的 service 实例来保存所有的网格逻辑。service 都是单例对象，适合用来存储网格。我们会使用 <code>GridService</code> 来放置和移动方块、寻找可供移动的位置和管理网格。</p>\n<p>我们将游戏的逻辑和运行存储在另外一个叫 <code>GameManager</code> 的 service 中。<code>GameManager</code> 负责管理游戏状态、处理移动和维护得分（包括当前得分和最高得分）。</p>\n<p>最后，还需要一个组件来控制键盘。我们将使用一个名为 <code>KeyboardService</code> 的 service（只需要一个键盘动作的处理）。我们会在这篇文章中实现桌面版的处理，然而我们也可以重用同一个 service 来处理触屏动作使其能在移动设备上使用。</p>\n<h3 id=\"开始编写应用\"><a href=\"#开始编写应用\" class=\"headerlink\" title=\"开始编写应用\"></a>开始编写应用</h3><p>要开始编写，我们先创建一个基本的应用（我们使用<a href=\"http://yeoman.io\" target=\"_blank\" rel=\"noopener\">yeoman</a> angular generator 来生成应用的结构，但这是非必要的。我们只是将其作为一个起始点，但很快就会做出分支）。我们新建一个包含整个应用的目录，然后再在 <code>app/</code> 目录旁边建一个 <code>test/</code> 目录。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/directory_structure.png\" alt=\"Minification\"></p>\n<blockquote>\n<p>以下使用 yeamon tool 来构建项目的指南。如果你更喜欢自己动手，可以跳过依赖安装直接进入下一章节。</p>\n</blockquote>\n<p>我们要先保证安装了 <code>yeamon</code> 才能在项目中使用。Yeamon 依赖 NodeJS 和 npm。NodeJS 的安装并不在本文叙述的范围内但是在 <a href=\"http://nodejs.org\" target=\"_blank\" rel=\"noopener\">NodeJS.org</a> 上有一个很好的指南。</p>\n<p>在 <code>npm</code> 安装完后，我们就能安装 yeamon tool，<code>yo</code>，和 angular generator（<code>yo</code> 会使用这个生成器来生成我们的 Angular 应用）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g yo</span><br><span class=\"line\">$ npm install -g generator-angular</span><br></pre></td></tr></table></figure>\n<p>安装完之后，就可以使用 yeamon tool 来创建应用了，按照下面的来：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/Development &amp;&amp; mkdir 2048</span><br><span class=\"line\">$ yo angular twentyfourtyeight</span><br></pre></td></tr></table></figure>\n<p>工具会问你一些问题，一律答 yes，除了只选 <code>angular-cookies</code> 作为依赖，因为我们不需要除了缺省以外的依赖。</p>\n<blockquote>\n<p>注意使用 Angular generator 会要求你安装 ruby 环境、gem 和 compass。文章下面给出的完整代码中会介绍如何避免使用 ruby 和 compass。</p>\n</blockquote>\n<h4 id=\"我们的-angular-模块\"><a href=\"#我们的-angular-模块\" class=\"headerlink\" title=\"我们的 angular 模块\"></a>我们的 angular 模块</h4><p>新建 <code>scripts/app.js</code> 文件来控制我们的应用。来，开始编写吧：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'twentyfourtyeightApp'</span>, [])</span><br></pre></td></tr></table></figure>\n<p><a name=\"modular\"></a></p>\n<h2 id=\"模块结构\"><a href=\"#模块结构\" class=\"headerlink\" title=\"模块结构\"></a>模块结构</h2><p>现在比较推荐的 Angular 应用结构是根据功能来构建而不是类型。也就是说，不是以 controllers（译者注：控制器）、services、directives 等来分离我们的组件而是以功能来定义模块结构。例如在我们的应用中，定义了一个 <code>Game</code> 模块和 <code>Keyboard</code> 模块。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/scripts_dir.png\" alt=\"Minification\"></p>\n<p>这样的模块结构让我们能够清晰分离出跟文件结构相匹配的职责。这样做既能帮助我们构建大型的复杂的 angular 应用，也能让功能在不同的应用间共享。</p>\n<p>之后我们将会建立起匹配文件和目录结构的测试环境。</p>\n<h4 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a>视图</h4><p>在我们的项目中，从视图开始编写是最容易的。审视一下，要做的视图 / 模板只有一个。我们不需要多个视图，所以只需要一个 <code>&lt;div&gt;</code> 元素来包含应用中的所有内容。</p>\n<p>在我们的的 <code>app/index.html</code> 文件中，我们需要包含所有的依赖（包括 <code>angular.js</code> 自身和自己编写的 javascript 文件——现在就只有 <code>scripts/app.js</code>），就像下面的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- index.html --&gt;</span><br><span class=\"line\">&lt;doctype html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">  &lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;2048&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;styles/main.css&quot;&gt;</span><br><span class=\"line\">  &lt;/head&gt;</span><br><span class=\"line\">  &lt;body ng-app=&quot;twentyfourtyeightApp&quot;</span><br><span class=\"line\">    &lt;!-- header --&gt;</span><br><span class=\"line\">    &lt;div class=&quot;container&quot; ng-include=&quot;&apos;views/main.html&apos;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;!-- script tags --&gt;</span><br><span class=\"line\">    &lt;script src=&quot;bower_components/angular/angular.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;scripts/app.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>你完全可以编写更复杂的多视图游戏——如果你这样打算的话请在下面留言，我们非常期待你的表现。</p>\n</blockquote>\n<p>现在 <code>app/index.html</code> 文件做好了，我们只需要在 <code>app/views/main.html</code> 中继续细节化应用层面的视图就可以了。当我们需要在应用中引入新资源的时候就只需要修改 <code>index.html</code> 了。</p>\n<p>赶快打开 <code>app/views/main.html</code>，所有的游戏相关的视图都放在此。通过使用 <code>controllerAs</code> 语法，控制器就可以显式暴露在任何需要在 <code>$scope</code> 中找数据和查询控制器对应组件的地方。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- app/views/main.html --&gt;</span><br><span class=\"line\">&lt;div id=&quot;content&quot; ng-controller=&apos;GameController as ctrl&apos;&gt;</span><br><span class=\"line\">  &lt;!-- Now the variable: ctrl refers to the GameController --&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>controllerAs</code> 语法是 1.2 版本提供的比较新的语法。当要在页面处理多个控制器的时候非常有用，因为这样就能指定包含我们需要的功能和数据的控制器。</p>\n</blockquote>\n<p>在视图中，我们想至少要显示如下几个东西：</p>\n<ol>\n<li>游戏的静态标题</li>\n<li>当前的游戏得分和本地用户最高的得分</li>\n<li>游戏棋盘</li>\n</ol>\n<p>游戏的静态标题可以像下面那么简单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- heading inside app/views/main.html --&gt;</span><br><span class=\"line\">&lt;div id=&quot;content&quot; ng-controller=&apos;GameController as ctrl&apos;&gt;</span><br><span class=\"line\">  &lt;div id=&quot;heading&quot; class=&quot;row&quot;&gt;</span><br><span class=\"line\">    &lt;h1 class=&quot;title&quot;&gt;ng-2048&lt;/h1&gt;</span><br><span class=\"line\">    &lt;div class=&quot;scores-container&quot;&gt;</span><br><span class=\"line\">      &lt;div class=&quot;score-container&quot;&gt;&#123;&#123; ctrl.game.currentScore &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">      &lt;div class=&quot;best-container&quot;&gt;&#123;&#123; ctrl.game.highScore &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;!-- ... --&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>注意在引用 <code>currentScore</code> 和 <code>highScore</code> 的时候我们也在视图中引用了 <code>GameController</code>。<code>controllerAs</code> 语法让我们能显式地引用自己感兴趣的控制器。</p>\n<p><a name=\"game-controller\"></a></p>\n<h2 id=\"控制器-GameController\"><a href=\"#控制器-GameController\" class=\"headerlink\" title=\"控制器 GameController\"></a>控制器 GameController</h2><p>现在既然已经有了一个合理的项目结构，我们赶快来创建一个 <code>GmaeController</code> 来控制会在视图上显示的数据。在 <code>app/scripts/app.js</code> 中，我们可以在主要模块 <code>twentyfourtyeightApp</code> 里创建这个控制器。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular</span><br><span class=\"line\">.module(<span class=\"string\">'twentyfourtyeightApp'</span>, [])</span><br><span class=\"line\">.controller(<span class=\"string\">'GameController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在视图中，我们已经引用了一个 <code>game</code> 对象，此对象会在 <code>GameController</code> 中进行设置。<code>game</code> 对象引用的是主 <em> 游戏对象 </em>。我们会在另外一个新的模块中创建这个主游戏对象，新的模块也会保存游戏中的所有引用。</p>\n<p>现在还没有创建这个模块，应用不会在浏览器中载入。而在控制器里面，我们可以加上对 <code>GameManager</code> 的依赖：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.controller(<span class=\"string\">'GameController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GameManager</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.game = GameManager;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>记住，我们正在做的是为应用中不同的部分创建模块级别的依赖，所以为了能在我们的应用中加载这些模块，需要在我们 Angular 模块中作为依赖来列出。将 <code>Game</code> 作为 <code>twentyfourtyeightApp</code> 的依赖，要在我们定义模块的地方的数组中列出。</p>\n<p>完整的 <code>app/scripts/app.js</code> 文件看起来应该像下面那样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular</span><br><span class=\"line\">.module(<span class=\"string\">'twentyfourtyeightApp'</span>, [<span class=\"string\">'Game'</span>])</span><br><span class=\"line\">.controller(<span class=\"string\">'GameController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GameManager</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.game = GameManager;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"The-Game\"><a href=\"#The-Game\" class=\"headerlink\" title=\"The Game\"></a>The Game</h3><p>现在已经将部分数据绑定到视图上（译者注：原文 Now that we have the view partially hooked up to the view，或有误），我们可以开始编写游戏的逻辑了。在 <code>app/scripts/</code> 目录下新建 <code>app/scripts/game/game.js</code> 中创建游戏模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Game'</span>, []);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当创建模块的时候，我们通常将其放在以模块命名的目录内，而以模块命名的文件来完成初始化工作。比如，我们正在写一个游戏 (译者注：game) 模块，于是我们在 <code>app/scripts/game</code> 目录下的 <code>game.js</code> 中编写。这个方法在生产环境下被认为是可扩展的和合理的。</p>\n</blockquote>\n<p><code>Game</code> 模块会提供唯一的核心组件：<code>GameManager</code>。</p>\n<p>我们编写的 <code>GameManager</code> 模块要做到：维持游戏的状态和玩家能做出的移动，维护得分、判断游戏结束和搞清楚是玩家赢了还是输了。</p>\n<p>当在编写应用的时候，我们通常将已知需要的方法写成桩方法，为这些方法写测试然后再填内容。</p>\n<blockquote>\n<p>为了文章起见，我们在这个模块里会走一遍这个流程。当继续写剩下的模块的时候，我们则只会涉及到应该测试的核心组件。</p>\n</blockquote>\n<p>我们知道到现在为止 <code>GameManager</code> 中会提供的几个 <em> 已知的 </em> 功能：</p>\n<ol>\n<li>创建一个新的游戏</li>\n<li>处理游戏循环 / 移动操作</li>\n<li>更新得分</li>\n<li>跟踪游戏的进行情况</li>\n</ol>\n<p>记住这几个功能，我们就能勾勒出 <code>GameManager</code> 服务的基本轮廓以供测试：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Game'</span>, [])</span><br><span class=\"line\">.service(<span class=\"string\">'GameManager'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Create a new game</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.newGame = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// Handle the move action</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.move = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// Update the score</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.updateScore = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newScore</span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// Are there moves left?</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.movesAvailable = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>完成了基本的功能性函数之后，先挪一下，去写测试来决定在 <code>GameManager</code> 中 <em> 已知的 </em> 需要支持的函数中空白部分的内容。</p>\n<p><a name=\"tdd\"></a></p>\n<h2 id=\"测试驱动开发（TDD）\"><a href=\"#测试驱动开发（TDD）\" class=\"headerlink\" title=\"测试驱动开发（TDD）\"></a>测试驱动开发（TDD）</h2><p>在开始实施测试前，我们需要配置好 karma 来驱动我们的测试。如果你对 karma 并不熟悉，就只需要了解到它是一个测试运行器，能让我们舒服而高效地在控制台和代码中自动化操作前端测试。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/running_karma.png\" alt=\"Running karma\"></p>\n<p>Karma 作为一个 npm 包，依赖于 NodeJS。运行命令行来安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g karma</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数 <code>-g</code> 告诉 npm 这个包作为全局模块来安装。没有这个参数，包将只会安装到本地的工作目录上。</p>\n</blockquote>\n<p>如果你是通过 yeoman angular 生成器来构建应用的话可以跳过以下的部分。</p>\n<p>要使用 karma，需要一个配置文件。虽然我们这里不会深入叙述如何配置 Karma（在 <a href=\"https://www.ng-book.com\" target=\"_blank\" rel=\"noopener\">ng-book</a> 中查看详细的 karma 配置选项），但是过程中决定性的部分就是让 Karma 载入所有我们想要测试的文件。</p>\n<p>我们可以使用 <code>karma init</code> 命令来生成一个基本的配置文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ karma init karma.conf.js</span><br></pre></td></tr></table></figure>\n<p>命令会问几个问题然后生成 <code>karma.conf.js</code>。这里我们修改一下其中两个选项：<code>files</code> 数组和打开 <code>autoWatch</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">files: [</span><br><span class=\"line\">  <span class=\"string\">'app/bower_components/angular/angular.js'</span>,</span><br><span class=\"line\">  <span class=\"string\">'app/bower_components/angular-mocks/angular-mocks.js'</span>,</span><br><span class=\"line\">  <span class=\"string\">'app/bower_components/angular-cookies/angular-cookies.js'</span>,</span><br><span class=\"line\">  <span class=\"string\">'app/scripts/**/*.js'</span>,</span><br><span class=\"line\">  <span class=\"string\">'test/unit/**/*.js'</span></span><br><span class=\"line\">],</span><br><span class=\"line\">autoWatch: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>一旦写好了配置文件，任何时候我们保存文件都可以运行测试了（测试文件在 <code>test/unit/</code> 目录内）。</p>\n<p>我们像如下那样执行命令 <code>karma start</code> 来运行测试：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ karma start karma.conf.js</span><br></pre></td></tr></table></figure>\n<h3 id=\"编写第一个测试\"><a href=\"#编写第一个测试\" class=\"headerlink\" title=\"编写第一个测试\"></a>编写第一个测试</h3><p>karma 已经配置好了，可以写对 <code>GameManager</code> 的基本测试了。然而我们还并不清楚应用的整个功能，所以暂时只能写有限的测试。</p>\n<blockquote>\n<p>在编写应用的时候我们经常发现 API 需要修改，所以与其在变化前投入大量时间，不如建立好对基本功能的测试然后在深入测试中找到最终的 API。</p>\n</blockquote>\n<p>用是否有可能的移动来作为第一个写的测试是个好选择。简单地编写几个我们已知需要的返回真 / 假的调用，来测试我们应用的逻辑行为。</p>\n<p>创建 <code>test/unit/game/game_spec.js</code> 文件然后开始填入内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'Game module'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  describe(<span class=\"string\">'GameManager'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Inject the Game module into this test</span></span><br><span class=\"line\">    beforeEach(<span class=\"built_in\">module</span>(<span class=\"string\">'Game'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Our tests will go below here</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在这个测试中我们使用 <a href=\"http://jasmine.github.io/2.0/introduction.html\" target=\"_blank\" rel=\"noopener\">Jasmine</a> 语法。</p>\n</blockquote>\n<p>跟其他单元测试一样，我们需要创建一个 <code>GameManager</code> 对象的实例。我们可以使用普通的语法（测试服务的时候）将它注入到测试中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// Inject the Game module into this test</span></span><br><span class=\"line\">beforeEach(<span class=\"built_in\">module</span>(<span class=\"string\">'Game'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> gameManager; <span class=\"comment\">// instance of the GameManager</span></span><br><span class=\"line\">beforeEach(inject(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GameManager</span>) </span>&#123;</span><br><span class=\"line\">  gameManager = GameManager;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>有了这个 <code>gameManager</code> 实例，就可以建立对函数 <code>movesAvailable()</code> 的期望值。</p>\n<p>我们定义的 <code>movesAvailable()</code> 函数是用来检测是否有空格剩余和是否有方块可以合并。另外这个结果跟游戏是否结束是有关联的，我们会将这个方法放进 <code>GameManager</code> 中，但是在之后创建的 <code>GridService</code> 中才实现大多数的复杂细节。</p>\n<p>棋盘上要有剩余可走的地方，必须满足以下两个条件：</p>\n<ol>\n<li>棋盘上有空余空格</li>\n<li>方块可以合并</li>\n</ol>\n<p>弄清楚了这两个条件，我们就可以写出测试来看看是否符合。</p>\n<p>基本的思路就是我们写出的单元测试对于设定的条件要能作可观察到的反应。然后因为要依赖 <code>GridService</code> 来反映游戏的状态，所以需要模拟出这个条件来保证在 <code>GameManager</code> 中的逻辑是正确的。</p>\n<h4 id=\"模拟-GridService\"><a href=\"#模拟-GridService\" class=\"headerlink\" title=\"模拟 GridService\"></a>模拟 <code>GridService</code></h4><p>要模拟 <code>GridService</code>，我们只需要简单地 <em> 重写 </em> 缺省的 Angular 行为，替换 <em> 真正的 </em> 服务为我们模拟出来的服务，然后就可以在模拟的服务中建立可控制条件。</p>\n<p>详细一点说就是，我们简单地创建一个拥有模拟方法的假对象然后通过在 <code>$provide</code> 中换上来骗 Angular 说这个假对象是 <em> 真 </em> 对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> _gridService;</span><br><span class=\"line\">beforeEach(<span class=\"built_in\">module</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$provide</span>) </span>&#123;</span><br><span class=\"line\">  _gridService = &#123;</span><br><span class=\"line\">    anyCellsAvailable: angular.noop,</span><br><span class=\"line\">    tileMatchesAvailable: angular.noop</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Switch out the real GridService for our</span></span><br><span class=\"line\">  <span class=\"comment\">// fake version</span></span><br><span class=\"line\">  $provide.value(<span class=\"string\">'GridService'</span>, _gridService);</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>现在我们就可以用 <code>_gridService</code> 这个假对象实例来建立条件了。</p>\n<p>我们希望当有单元格剩余的时候函数 <code>movesAvailable()</code> 返回 true。在 <code>GridService</code> 中模拟一个 <code>anyCellsAvailable()</code> 函数（其实还没写）。我们期望这个在 <code>GridService</code> 的函数能告诉我们还有剩余的单元格。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">describe(<span class=\"string\">'.movesAvailable'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should report true if there are cells available'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    spyOn(_gridService, <span class=\"string\">'anyCellsAvailable'</span>).andReturn(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    expect(gameManager.movesAvailable()).toBeTruthy();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>现在基础工作已经做好了，我们可以接着建立第二个条件了。如果方块可以合并，那么我们希望 <code>movesAvailable()</code> 保证会返回 true。相反的情况也是返回 true 因为既没有单元格空余也没有可合并的方块才是没有步数可走。</p>\n<p>另外两个保证这个结果的测试是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">it(<span class=\"string\">'should report true if there are matches available'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  spyOn(_gridService, <span class=\"string\">'anyCellsAvailable'</span>).andReturn(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  spyOn(_gridService, <span class=\"string\">'tileMatchesAvailable'</span>).andReturn(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  expect(gameManager.movesAvailable()).toBeTruthy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">it(<span class=\"string\">'should report false if there are no cells nor matches available'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  spyOn(_gridService, <span class=\"string\">'anyCellsAvailable'</span>).andReturn(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  spyOn(_gridService, <span class=\"string\">'tileMatchesAvailable'</span>).andReturn(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  expect(gameManager.movesAvailable()).toBeFalsy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>将基础工作搞好，我们也好在实现真正函数前写好测试。</p>\n<blockquote>\n<p>虽然考虑到整个文章的整体性我们不会再在文章中使用 TDD，但是我们建议你应该始终使用 TDD。可以在下面的完整代码中查看更多的测试代码。</p>\n</blockquote>\n<h2 id=\"回到-GameManager\"><a href=\"#回到-GameManager\" class=\"headerlink\" title=\"回到 GameManager\"></a>回到 GameManager</h2><p>现在我们的任务就是实现函数 <code>movesAvailable()</code>。然而我们已经确认了代码可行性<strong>和</strong>要求的条件，实现起来实在简单。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.movesAvailable = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> GridService.anyCellsAvailable() ||</span><br><span class=\"line\">          GridService.tileMatchesAvailable();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p><a name=\"build-grid\"></a></p>\n<h2 id=\"建造游戏网格\"><a href=\"#建造游戏网格\" class=\"headerlink\" title=\"建造游戏网格\"></a>建造游戏网格</h2><p>到现在为止我们已经让 <code>GameManager</code> 运行起来了，然后就是要创建 <code>GridService</code> 来处理在棋盘中的所有状况。</p>\n<p>回忆一下我们的想法：在 <code>GridService</code> 中使用两个本地数组变量，基本数组 <code>grid</code> 和基本数组 <code>tiles</code>。在 <code>app/scripts/grid/grid.js</code> 文件中写服务：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Grid'</span>, [])</span><br><span class=\"line\">.service(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.grid   = [];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.tiles  = [];</span><br><span class=\"line\">  <span class=\"comment\">// Size of the board</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size   = <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当开始一个新的游戏的时候，我们需要清空这些数组。而因为 <code>grid</code> 数组只是用来放方块的 DOM 元素组成的。</p>\n<p>然而数组 <code>tiles</code> 则是动态的，它会跟踪游戏过程中的当前的方块。使用游戏中不同的状态之前，先在页面上建造好网格先吧，这样我们也好看看大概样子是怎么样。</p>\n<p>回到 <code>app/views/main.html</code>，我们开始设计网格。因为网格是动态而又带有我们给它写的逻辑，所以只有就其放在其指令（译者注：directive）中才合乎逻辑。使用指令可以让主要的模板保持简洁，同样也能将功能封装在指令中而让主要的控制器保持简洁。</p>\n<p>在 <code>app/index.html</code> 中我们将网格指令添加上然后在控制器中传递给 <code>GameManager</code> 实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- instructions --&gt;</span><br><span class=\"line\">&lt;div id=&quot;game-container&quot;&gt;</span><br><span class=\"line\">  &lt;div grid ng-model=&apos;ctrl.game&apos; class=&quot;row&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;!-- ... --&gt;</span><br></pre></td></tr></table></figure>\n<p>我们是在 <code>Grid</code> 模块里写这个指令的，所以在 <code>app/scripts/grid/</code> 目录下，新建一个 <code>grid_directive.js</code> 文件来安放我们的 <code>grid</code> 指令。</p>\n<p>在 <code>grid</code> 指令里面，我们只需要少量变量因为它需要封装视图，能做的事情不多。</p>\n<p>指令会需要持有 <code>GameManager</code> 的实例（或者至少是一个有 <code>grid</code> 和 <code>tiles</code> 数组的模型），所以将其设置为指令的依赖。另外，不希望指令由于页面上的其它内容或者 GameManager 自身的原因瘫痪，所以我们创建了隔离作用域。</p>\n<blockquote>\n<p>查看我们写的 <a href=\"http://www.ng-newsletter.com/posts/directives.html\" target=\"_blank\" rel=\"noopener\">自定义指令</a> 来更加深入指令的编写，或者查看 <a href=\"https://www.ng-book.com\" target=\"_blank\" rel=\"noopener\">ng-book</a> 中有关指令的细节。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Grid'</span>)</span><br><span class=\"line\">.directive(<span class=\"string\">'grid'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    restrict: <span class=\"string\">'A'</span>,</span><br><span class=\"line\">    <span class=\"built_in\">require</span>: <span class=\"string\">'ngModel'</span>,</span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      ngModel: <span class=\"string\">'='</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'scripts/grid/grid.html'</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这个指令的主要功能是构建网格视图，所以我们不需要写任何自定义逻辑。</p>\n<h3 id=\"grid-html\"><a href=\"#grid-html\" class=\"headerlink\" title=\"grid.html\"></a>grid.html</h3><p>在指令的模板里面，我们会运行两个 <code>ngRepeat</code> 来显示网格和方块数组，还会（暂时）在循环中使用 <code>$index</code> 来跟踪。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;game&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;grid-container&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;grid-cell&quot;</span><br><span class=\"line\">      ng-repeat=&quot;cell in ngModel.grid track by $index&quot;&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;tile-container&quot;&gt;</span><br><span class=\"line\">    &lt;div tile</span><br><span class=\"line\">      ng-model=&apos;tile&apos;</span><br><span class=\"line\">      ng-repeat=&apos;tile in ngModel.tiles track by $index&apos;&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>第一个 <code>ng-repeat</code> 简单易懂，就是遍历了 grid 数组然后生成了 class 属性是 <code>grid-cell</code> 的单个空 div 元素。</p>\n<p>在第二个 <code>ng-repeat</code> 中，我们会为每一个显示的元素生成一个名为 <code>tile</code> 的指令。这个 <code>tile</code> 指令会负责生成每一个方格元素的样子。我们很快就会去编写 <code>tile</code> 指令……</p>\n<p>精明的读者可能会发现我们只适用一维数组来显示二维网格。当我们渲染视图的时候，我们只会得到一列“方格”，而不是一个网格。</p>\n<p>要将它弄成网格，我们来深入 CSS 的编写。</p>\n<p><a name=\"scss\"></a></p>\n<h2 id=\"开始-SCSS\"><a href=\"#开始-SCSS\" class=\"headerlink\" title=\"开始 SCSS\"></a>开始 SCSS</h2><p>在这个项目中，我们会使用 SASS 的一个变种：scss。scss 除了是一个更强大的 CSS 外，还能动态地生成 CSS。</p>\n<p>应用所有显示的元素的主要部分会使用 CSS 来完成，包括动画、布局和可视元素（方格的颜色等）。</p>\n<p>要创建二维的棋盘，我们会用到 CSS3 关键字：<code>transform</code> 来处理每一个特定的方格的位置。</p>\n<h3 id=\"CSS3-transform-属性\"><a href=\"#CSS3-transform-属性\" class=\"headerlink\" title=\"CSS3 transform 属性\"></a>CSS3 transform 属性</h3><p>CSS3 transform 属性是一个可以让我们对元素进行 2D 或者 3D 上的移动、扭曲、旋转、缩放等操作（支持动画）的属性。用上了此属性，就可以直接将方块放在棋盘上然后剩下就只是应用合适的 <code>transform</code> 属性的事了。</p>\n<p>例如，在下面的演示中，我们有一个宽 40px 高 40px 的盒子。</p>\n<div style=\"margin:40px;padding:40px 0;border-bottom:1px solid #333;\">\n  <div style=\"width:40px;height:40px;background-color:blue;\"></div>\n</div>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们应用一个 <code>translateX(300px)</code> 的 <code>transform</code> 属性，就可以将盒子向右移动了 300px，就像下面所展示的：</p>\n<div style=\"margin:40px;padding:40px 0;border-bottom:1px solid #333;\">\n  <div style=\"width:40px;height:40px;background-color:blue;-webkit-transform:translateX(300px);transform:translateX(300px);\"></div>\n</div>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span><span class=\"selector-class\">.transformed</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">translateX</span>(300px);</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(300px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 translate 属性，我们只需应用 CSS 类就可以在棋盘上随便移动方块了。现在，精妙之处在于页面是多变的，我们如何能将类写得足够动态可以对应到网格上的正确位置。</p>\n<p>这里就是 SCSS 大显身手的地方了。我们会创建几个变量（例如一行有多少个方格）然后在 SCSS 中结合数学来帮助我们计算。</p>\n<p>来看一下计算棋盘上正确位置需要的变量：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$width: 400px;          // The width of the whole board</span><br><span class=\"line\">$tile-count: 4;         // The number of tiles per row/column</span><br><span class=\"line\">$tile-padding: 15px;    // The padding between tiles</span><br></pre></td></tr></table></figure>\n<p>让 SCSS 用这些变量帮我们动态计算位置。首先算出每一个方格的大小。在 SCSS 中非常简单：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$tile-size: ($width - $tile-padding * ($tile-count + 1)) / $tile-count;</span><br></pre></td></tr></table></figure>\n<p>现在我们就可以使用适当的宽和高来建立那个 <code>#game</code> 容器了。同时 <code>#game</code> 容器也会被设置成位置参照，它的子元素将会使用绝对定位。我们将 <code>.grid-container</code> 和 <code>tile-container</code> 放在 <code>#game</code> 容器内。</p>\n<p>我们这里只展示跟 scss 有关的部分。剩下的代码可以在文章末尾的 github 地址上找到。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#game</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: $width;</span><br><span class=\"line\">  height: $width; // The gameboard is a square</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-class\">.grid-container</span> &#123;</span><br><span class=\"line\">    position: absolute;   // the grid is absolutely positioned</span><br><span class=\"line\">    z-index: 1;           // IMPORTANT to set the z-index for layering</span><br><span class=\"line\">    margin: 0 auto;       // center</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-class\">.grid-cell</span> &#123;</span><br><span class=\"line\">      width: $tile-size;              // set the cell width</span><br><span class=\"line\">      height: $tile-size;             // set the cell height</span><br><span class=\"line\">      margin-bottom: $tile-padding;   // the padding between lower cells</span><br><span class=\"line\">      margin-right: $tile-padding;    // the padding between the right cell</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.tile-container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">    <span class=\"attribute\">z-index</span>: <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    .tile &#123;</span><br><span class=\"line\">      width: $tile-size;        // tile width</span><br><span class=\"line\">      height: $tile-size;       // tile height</span><br><span class=\"line\">      // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意为了让 <code>.tile-container</code> 放在 <code>.grid-container</code> 前面，我们<strong>必须</strong>要为 <code>.tile-container</code> 更高的 <code>z-index</code> 值。如果没有设置 <code>z-index</code> 值，浏览器会将两个元素放在同等高度，就不好看了。</p>\n<p>做好这一步之后，现在我们来动态生成方块的位置。我们需要是一个 <code>.position-{x}-{y}</code> 类，用来应用到方块上，这样浏览器就会知道方块的位置然后将它放置好。既然我们是计算相对于网格容器的的 transformation 属性值，那就使用 <code>0,0</code> 作为第一个方块的初始位置。</p>\n<p>我们对队列进行迭代，结合基于计算出来的期望偏移，动态生成每一个类。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.tile</span> &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  // Dynamically create .position-#&#123;x&#125;-#&#123;y&#125; classes to mark</span><br><span class=\"line\">  // where each tile will be placed</span><br><span class=\"line\">  @<span class=\"keyword\">for</span> $x from <span class=\"number\">1</span> through $tile-count &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">for</span> $y from <span class=\"number\">1</span> through $tile-count &#123;</span><br><span class=\"line\">      $zeroOffsetX: $x - 1;</span><br><span class=\"line\">      $zeroOFfsetY: $y - 1;</span><br><span class=\"line\">      $newX: ($tile-size) * ($zeroOffsetX) + ($tile-padding * $zeroOffsetX);</span><br><span class=\"line\">      $newY: ($tile-size) * ($zeroOffsetY) + ($tile-padding * $zeroOffsetY);</span><br><span class=\"line\"></span><br><span class=\"line\">      &amp;.position-#&#123;$zeroOffsetX&#125;-#&#123;$zeroOffsetY&#125; &#123;</span><br><span class=\"line\">        -webkit-transform: translate($newX, $newY);</span><br><span class=\"line\">        transform: translate($newX, $newY);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意我们不得不使用从 1 开始的偏移量来计算位置，而不是传统的从 0 开始。这是受 SASS 自身的限制所迫。不过我们可以使用将索引减 1 来解决。</p>\n</blockquote>\n<p>现在我们写好了动态的 <code>.position-#{x}-#{y}</code>CSS 类，方块能够显示在页面上了。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/screen.png\" alt=\"2-d grid\n\"></p>\n<h3 id=\"为不同的方块上色\"><a href=\"#为不同的方块上色\" class=\"headerlink\" title=\"为不同的方块上色\"></a>为不同的方块上色</h3><p>注意到当有不同的方块出现的时候，各自都是不同颜色的。不同的颜色标识着不同方块所代表的值。如此一来玩家能看得出方格所处的状态。使用和我们迭代方格数目的时候同样的技巧来创建方格颜色方案。</p>\n<p>要创建出颜色方案，我们首先要创建一个 SCSS 数组，包含有每一种需要用到的背景颜色。每一种颜色：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$colors:  #EEE4DA, // 2</span><br><span class=\"line\">          #EAE0C8, // 4</span><br><span class=\"line\">          #F59563, // 8</span><br><span class=\"line\">          #3399ff, // 16</span><br><span class=\"line\">          #ffa333, // 32</span><br><span class=\"line\">          #cef030, // 64</span><br><span class=\"line\">          #E8D8CE, // 128</span><br><span class=\"line\">          #990303, // 256</span><br><span class=\"line\">          #6BA5DE, // 512</span><br><span class=\"line\">          #DCAD60, // 1024</span><br><span class=\"line\">          #B60022; // 2048</span><br></pre></td></tr></table></figure>\n<p>使用了 <code>$colors</code> 数组，我们只要迭代每一个颜色就能基于方块的值来动态创建一个类。也就是说，当一个方块的值是 2，我们会给它加上指定背景颜色是 <code>#EEE4DA</code> 的 <code>.tile-2</code> 类。与其给每个方块用硬编码，我们不如用 SCSS 的魔法来完成：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">for</span> $i from <span class=\"number\">1</span> through length($colors) &#123;</span><br><span class=\"line\">  &amp;.tile-#&#123;power(2, $i)&#125; .tile-inner &#123;</span><br><span class=\"line\">    background: nth($colors, $i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，我们需要自己定义 <code>power()</code> 混合（译者注：mixin）。定义如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">function</span> power ($x, $n) &#123;</span><br><span class=\"line\">  $ret: 1;</span><br><span class=\"line\"></span><br><span class=\"line\">  @<span class=\"keyword\">if</span> $n &gt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">for</span> $i from <span class=\"number\">1</span> through $n &#123;</span><br><span class=\"line\">      $ret: $ret * $x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; @<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">for</span> $i from $n to <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">      $ret: $ret / $x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @<span class=\"keyword\">return</span> $ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"the-tile-directive\"></a></p>\n<h2 id=\"Tile-指令\"><a href=\"#Tile-指令\" class=\"headerlink\" title=\"Tile 指令\"></a>Tile 指令</h2><p>SCSS 的繁琐工作完成了，我们可以回到 tile 指令的编写中了。通过动态的位置布局，让 CSS 按我们所设计的那样将方块摆放到位。</p>\n<p>然而 <code>tile</code> 指令是一个自定义视图的容器，并不需要做很多事。我们需要的是它负责显示的单元格的访问权。除此以外，并不需要在指令内放任何功能。代码简单到足以自我描述：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Grid'</span>)</span><br><span class=\"line\">.directive(<span class=\"string\">'tile'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    restrict: <span class=\"string\">'A'</span>,</span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      ngModel: <span class=\"string\">'='</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    templateUrl: <span class=\"string\">'scripts/grid/tile.html'</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>现在，<code>tile</code> 指令中有趣的地方就是我们如何动态的为网格布局。而模板会需要用到在隔离作用域（译者注：isolate scope）中的 <code>ngModel</code> 变量来处理好一切。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div ng-if=&apos;ngModel&apos; class=&quot;tile position-&#123;&#123; ngModel.x &#125;&#125;-&#123;&#123; ngModel.y &#125;&#125; tile-&#123;&#123; ngModel.value &#125;&#125;&quot;&gt;</span><br><span class=\"line\">  &lt;div class=&quot;tile-inner&quot;&gt;</span><br><span class=\"line\">    &#123;&#123; ngModel.value &#125;&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>我们几乎已经可以将这个基础的指令直接显示了。对于每一个有 <code>x</code> 和 <code>y</code> 坐标的方块而言，它们都会 <em> 自动 </em> 被赋予一个 <code>.position-#{x}-#{y}</code> 的类。浏览器会 <em> 自动 </em> 地将它们放到我们期待的位置。</p>\n<p>这意味着我们的方块对象会需要一个 <code>x</code> 和 <code>y</code> 以及 <code>value</code> 让指令来使用。为此，对于每一个显示的方块，我们都需要创建一个新的对象。</p>\n<h3 id=\"TileModel\"><a href=\"#TileModel\" class=\"headerlink\" title=\"TileModel\"></a>TileModel</h3><p>与其创建一个 <em> 哑 </em> 对象，我们还不如创建一个比较智能的对象，既存储数据也能提供功能。</p>\n<p>我们希望能使用 Angular 的依赖注入，因此创建一个服务来安置数据模型。我们在 <code>Grid</code> 模块中创建一个 <code>TileModel</code> 服务，因为跟游戏棋盘有关的操作时，它只需要使用底层的 <code>TileModel</code>。</p>\n<p>使用 <code>.factory</code> 方法，我们能够简单地创建一个工厂函数。跟使用 <code>service()</code> 函数时传递的用以定义服务的函数会被默认为服务的构造函数不同的是，使用 <code>factory()</code> 函数会认为传递函数返回的对象才是服务。所以，只用 <code>factory()</code> 函数，我们可以将服务赋给任何对象以便在我们 Angular 应用中随时 <em> 注入 </em>。</p>\n<p>在 <code>app/scripts/grid/grid.js</code> 文件中，我们可以创建 <code>TileModel</code> 工厂：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Grid'</span>)</span><br><span class=\"line\">.factory(<span class=\"string\">'TileModel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Tile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pos, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = pos.x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = pos.y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = val || <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> Tile;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>现在在我们 Angular 应用中的任何地方，我们都可以 <em> 注入 </em> 这个 <code>TileModel</code> 并想全局对象一样使用。非常方便不是吗？</p>\n<blockquote>\n<p>不要忘了要为我们在 <code>TileModel</code> 中实现的任何功能写测试。</p>\n</blockquote>\n<h3 id=\"我们第一个网格\"><a href=\"#我们第一个网格\" class=\"headerlink\" title=\"我们第一个网格\"></a>我们第一个网格</h3><p>现在我们已经写好了 <code>TileModel</code> 了，我们可以开始在 <code>tiles</code> 数组中放入 <code>TileModel</code> 的实例了，然后发现它们 <em> 神奇地 </em> 出现在网格中正确的位置上。</p>\n<p>让我们来试试在 <code>GridService</code> 中的 <code>tiles</code> 数组中加入一些方块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Grid'</span>, [])</span><br><span class=\"line\">.factory(<span class=\"string\">'TileModel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.service(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">TileModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.tiles  = [];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.tiles.push(<span class=\"keyword\">new</span> TileModel(&#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">1</span>&#125;, <span class=\"number\">2</span>));</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.tiles.push(<span class=\"keyword\">new</span> TileModel(&#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>&#125;, <span class=\"number\">2</span>));</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a name=\"starting-the-game\"></a></p>\n<h2 id=\"棋盘已经准备好了\"><a href=\"#棋盘已经准备好了\" class=\"headerlink\" title=\"棋盘已经准备好了\"></a>棋盘已经准备好了</h2><p>现在我们具备显示方块的能力了，还需要在 <code>GridService</code> 中实现准备棋盘的功能。当第一次载入页面的时候我们想创建一个空的棋盘。而同样的动作也应该发生在当用户在进行游戏的时候点击了 <code>New Game</code> 或者 <code>Try again</code> 的时候。</p>\n<p>要清理棋盘，我们会在 <code>GridService</code> 中创建一个叫 <code>buildEmptyGameBoard()</code> 的函数。这个方法会负责将 <code>GridService</code> 中的 <code>grid</code> 数组和 <code>tiles</code> 数组填充 null。</p>\n<p>在开始编写代码之前，我们先写出测试以保证 <code>buildEmptyGameBoard()</code> 函数的行为没问题。然而这个写的过程在上面已经讲过一遍了，所以不再讨论直接给出结果。写出来的测试大概就像下面那样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In test/unit/grid/grid_spec.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">describe(<span class=\"string\">'.buildEmptyGameBoard'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> nullArr;</span><br><span class=\"line\"></span><br><span class=\"line\">  beforeEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    nullArr = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"number\">16</span>; x++) &#123;</span><br><span class=\"line\">      nullArr.push(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  it(<span class=\"string\">'should clear out the grid array with nulls'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> grid = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"number\">16</span>; x++) &#123;</span><br><span class=\"line\">      grid.push(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    gridService.grid = grid;</span><br><span class=\"line\">    gridService.buildEmptyGameBoard();</span><br><span class=\"line\">    expect(gridService.grid).toEqual(nullArr);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  it(<span class=\"string\">'should clear out the tiles array with nulls'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tiles = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"number\">16</span>; x++) &#123;</span><br><span class=\"line\">      tiles.push(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    gridService.tiles = tiles;</span><br><span class=\"line\">    gridService.buildEmptyGameBoard();</span><br><span class=\"line\">    expect(gridService.tiles).toEqual(nullArr);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>既然测试写好了，就可以实现 <code>buildEmptyGameBoard()</code> 函数的函数体了。</p>\n<p>函数并不大，代码也足以自我说明。在 <code>app/scripts/grid/grid.js</code> 中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.service(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">TileModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.buildEmptyGameBoard = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Initialize our grid</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; service.size * service.size; x++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.grid[x] = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Initialize our tile array</span></span><br><span class=\"line\">    <span class=\"comment\">// with a bunch of null objects</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>) </span>&#123;</span><br><span class=\"line\">      self.setCellAt(&#123;<span class=\"attr\">x</span>:x,<span class=\"attr\">y</span>:y&#125;, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码使用了一些足以自我描述出会做什么的辅助方法。部分我们会在整个项目中用到辅助函数如下列出，都是自我描述的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Run a method for each element in the tiles array</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.forEach = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> totalSize = <span class=\"keyword\">this</span>.size * <span class=\"keyword\">this</span>.size;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; totalSize; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pos = <span class=\"keyword\">this</span>._positionToCoordinates(i);</span><br><span class=\"line\">    cb(pos.x, pos.y, <span class=\"keyword\">this</span>.tiles[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set a cell at position</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.setCellAt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pos, tile</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.withinGrid(pos)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xPos = <span class=\"keyword\">this</span>._coordinatesToPosition(pos);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tiles[xPos] = tile;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Fetch a cell at a given position</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.getCellAt = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pos</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.withinGrid(pos)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"keyword\">this</span>._coordinatesToPosition(pos);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.tiles[x];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A small helper function to determine if a position is</span></span><br><span class=\"line\"><span class=\"comment\">// within the boundaries of our grid</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.withinGrid = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cell</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cell.x &gt;= <span class=\"number\">0</span> &amp;&amp; cell.x &lt; <span class=\"keyword\">this</span>.size &amp;&amp;</span><br><span class=\"line\">          cell.y &gt;= <span class=\"number\">0</span> &amp;&amp; cell.y &lt; <span class=\"keyword\">this</span>.size;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h5 id=\"究竟是什么？！？？\"><a href=\"#究竟是什么？！？？\" class=\"headerlink\" title=\"究竟是什么？！？？\"></a>究竟是什么？！？？</h5><p><code>this._positionToCoordinates()</code> 和 <code>this._coordinatesToPosition()</code> 这两个函数是什么？</p>\n<p>回忆起之前我们已经讨论过了我们会使用一个一维数组来存储网格。在考虑到性能和复杂动画的处理，这是较为可取的。关于动画我们会稍后研究。我们暂且只能从使用单维数组表示多维数组的复杂性得到一点好处。</p>\n<p><a name=\"grid-theory\"></a></p>\n<h2 id=\"一维数组中的多维数组\"><a href=\"#一维数组中的多维数组\" class=\"headerlink\" title=\"一维数组中的多维数组\"></a>一维数组中的多维数组</h2><p>如何使用单维数组表示多维数组？先来看看在棋盘上用每一个单元格的值来标出网格位置，不需要有颜色。在代码中，这个多维数组被分解成数组的数组。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/grid-1.png\" alt=\"2-d grid\"> <img src=\"http://www.ng-newsletter.com/images/2048/grid-2.png\" alt=\"2-d grid\"></p>\n<p>看看每个单元格的位置，如果单维数组来看，可以看出一个关系来：</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/grid-3.png\" alt=\"2-d grid\"></p>\n<p>我们可以看到，在第一个单元格，<code>(0,0)</code> 单元格对应的数组下标是 <code>0</code>。第二个数组元素下标是 1 而单元格是 <code>(1.0)</code>。移动到下一行，单元格是 <code>(0,1)</code> 对应第四个数组元素而下标是 5 的数组元素是单元格 <code>(1,1)</code>。</p>\n<p>据此可以推断出两个位置之间的等式关系。</p>\n<h4 id=\"i-x-ny\"><a href=\"#i-x-ny\" class=\"headerlink\" title=\"i = x + ny\"></a>i = <span style=\"color:red\">x</span> + <span style=\"color:blue\">n</span>y</h4><p><code>i</code> 代表数组元素的下标，<code>x</code> 和 <code>y</code> 是多维数组中的位置坐标，<code>n</code> 是一行 / 列的单元格数。</p>\n<p>我们在上面定义的两个辅助函数就是将数组下标转换为 x-y 坐标的过程和相反的转换过程。从理论上来说，使用 x-y 坐标处理单元格会比较简单，但是从功能上考虑我们却会在单维数组里存放方块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Helper to convert x to x,y</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>._positionToCoordinates = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = i % service.size,</span><br><span class=\"line\">      y = (i - x) / service.size;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    x: x,</span><br><span class=\"line\">    y: y</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Helper to convert coordinates to position</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>._coordinatesToPosition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pos</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (pos.y * service.size) + pos.x;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化玩家位置\"><a href=\"#初始化玩家位置\" class=\"headerlink\" title=\"初始化玩家位置\"></a>初始化玩家位置</h3><p>在游戏的一开始，我们想预先放几块。我们会为玩家随机在棋盘上挑选放方块的地方。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.service(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">TileModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.startingTileNumber = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.buildStartingPosition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"keyword\">this</span>.startingTileNumber; x++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.randomlyInsertNewTile();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>构建一开始的位置非常简单因为它只根据我们想放多少块方块来调用 <code>randomlyInsertNewTile()</code> 函数。<code>randomlyInsertNewTile()</code> 函数需要我们知道所有可以随机放置方块的位置。这个功能非常容易实现因为需要做的只是遍历单维数组的同时记录下还没有方块放置的位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.service(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">TileModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// Get all the available tiles</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.availableCells = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cells = [],</span><br><span class=\"line\">        self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> foundTile = self.getCellAt(&#123;<span class=\"attr\">x</span>:x, <span class=\"attr\">y</span>:y&#125;);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!foundTile) &#123;</span><br><span class=\"line\">        cells.push(&#123;<span class=\"attr\">x</span>:x,<span class=\"attr\">y</span>:y&#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cells;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>有了一个棋盘上所有可用的坐标的列表，我们就可以简单地在数组中取随机位置。<code>randomAvailableCell()</code> 函数为我们处理。要实现函数的方法非常多。以下是我们在 2048 中实现的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.service(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">TileModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.randomAvailableCell = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cells = <span class=\"keyword\">this</span>.availableCells();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cells.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cells[<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * cells.length)];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>从这里开始，我们可以简单地创建一个新的 TileModel 实例然后插入到我们的 <code>this.tiles</code> 数组中了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.service(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">TileModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.randomlyInsertNewTile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> cell = <span class=\"keyword\">this</span>.randomAvailableCell(),</span><br><span class=\"line\">        tile = <span class=\"keyword\">new</span> TileModel(cell, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.insertTile(tile);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Add a tile to the tiles array</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.insertTile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tile</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pos = <span class=\"keyword\">this</span>._coordinatesToPosition(tile);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.tiles[pos] = tile;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Remove a tile from the tiles array</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.removeTile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pos</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> pos = <span class=\"keyword\">this</span>._coordinatesToPosition(tile);</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>.tiles[pos];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>现在，得益于我们使用的 Angular，视图中的棋盘上，网格块会神奇地显示出方块来。</p>\n<p>记住，明智的做法是接下来写测试来测试我们对于功能的假设实现。我们已经在为项目写测试的过程中发现了不少 bug，同样的事情你也会遇到的。</p>\n<p><a name=\"keyboard\"></a></p>\n<h2 id=\"键盘交互\"><a href=\"#键盘交互\" class=\"headerlink\" title=\"键盘交互\"></a>键盘交互</h2><p>很好，现在我们已经将方块放到棋盘上了。但一个不能玩的游戏有啥意思呢？是时候将注意力转移到加入交互上面去了。</p>\n<blockquote>\n<p>为文章起见，我们只准备着眼在键盘的交互而没有考虑触控的交互。然而，加上触控支持并不应该太难，特别是我们只关注滑动动作，这个在 <code>ngTouch</code> 里有提供。我们将其留给你自己实现。</p>\n</blockquote>\n<p>游戏本身使用方向键（或者 a,w,s,d 键）来玩。在游戏中，我们希望让玩家在页面上跟游戏简单地交互。而不是要求玩家将焦点移到在游戏棋盘元素上（或者同样问题下的其他元素）。玩家只需要让页面获得焦点就可以进行游戏了。</p>\n<p>要做到这种交互，就要将事件监听绑定在 document 上。在 Angular 中，我们会 <code>绑定</code> 自己的事件监听在 Angular 提供的 <code>$ducoment</code> 服务上。要处理用户交互的创建，我们会将键盘事件绑定包裹在一个服务中。记住在页面中我们只需要一个键盘处理器，所以只要一个服务就可以了。</p>\n<p>此外，我们也希望为用户的任何输入动作作出自定义的反应。使用了服务能自然地注入到应用中然后根据用户的输入来决定应用的反应。</p>\n<p>首先，在 <code>app/scripts/Keyboard/keyboard.js</code> 文件中创建一个新的模块（因为我们正在做基于模块的开发的）<code>KeyBoard</code>（文件不存在就要先创建）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app/scripts/keyboard/keyboard.js</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'Keyboard'</span>, []);</span><br></pre></td></tr></table></figure>\n<p>正如创建任何新的 JavaScript 一样，我们需要在 <code>index.html</code> 中引用。现在 <code>&lt;script&gt;</code> 标签列表看起来是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;!-- body --&gt;</span><br><span class=\"line\">  &lt;script src=&quot;scripts/app.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;scripts/grid/grid.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;scripts/grid/grid_directive.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;scripts/grid/tile_directive.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;scripts/keyboard/keyboard.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">  &lt;script src=&quot;scripts/game/game.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>然后，因为新建一个模块，我们同样需要告诉自己的 Angular 模块在应用在需要依赖这个新模块：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.module(<span class=\"string\">'twentyfourtyeightApp'</span>, [<span class=\"string\">'Game'</span>, <span class=\"string\">'Grid'</span>, <span class=\"string\">'Keyboard'</span>])</span><br></pre></td></tr></table></figure>\n<p><code>Keyboard</code> 服务的实现思路，就是在 <code>$document</code> 上 <code>绑定</code> 了 <code>Keydown</code> 事件来捕获用户的键盘操作。而另一端，在我们的 angular 对象中，我们会注册一有用户操作就触发的处理函数。</p>\n<p>来写代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app/scripts/keyboard/keyboard.js</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'Keyboard'</span>, [])</span><br><span class=\"line\">.service(<span class=\"string\">'KeyboardService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$document</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize the keyboard event binding</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Bind event handlers to get called</span></span><br><span class=\"line\">  <span class=\"comment\">// when an event is fired</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.keyEventHandlers = [];</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.on = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>init()</code> 函数会作为 <code>KeyboardService</code> 的开始，然后开始监听键盘事件。我们会过滤掉不感兴趣的键盘事件。</p>\n<p>对于感兴趣的事件，我们会阻止它的默认行为然后将它交给我们的 <code>KeyEventHandlers</code>。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/keyboard.png\" alt=\"2-d grid\"></p>\n<p>如何知道那些是我们感兴趣的呢？既然 <em> 感兴趣的 </em> 键盘操作是固定的，那么我们就去检查事件是否有其中一种键盘事件所激发。</p>\n<p>一旦方向键被按下，document 会接收到一个包含被按下的按键的键码的事件。</p>\n<p>我们可以为这些事件建立一个映射，然后查询捕获到的键盘动作是否在这个 <em> 感兴趣的 </em> 映射中。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app/scripts/keyboard/keyboard.js</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'Keyboard'</span>, [])</span><br><span class=\"line\">.service(<span class=\"string\">'KeyboardService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$document</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> UP    = <span class=\"string\">'up'</span>,</span><br><span class=\"line\">      RIGHT = <span class=\"string\">'right'</span>,</span><br><span class=\"line\">      DOWN  = <span class=\"string\">'down'</span>,</span><br><span class=\"line\">      LEFT  = <span class=\"string\">'left'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> keyboardMap = &#123;</span><br><span class=\"line\">    <span class=\"number\">37</span>: LEFT,</span><br><span class=\"line\">    <span class=\"number\">38</span>: UP,</span><br><span class=\"line\">    <span class=\"number\">39</span>: RIGHT,</span><br><span class=\"line\">    <span class=\"number\">40</span>: DOWN</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Initialize the keyboard event binding</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.init = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.keyEventHandlers = [];</span><br><span class=\"line\">    $<span class=\"built_in\">document</span>.bind(<span class=\"string\">'keydown'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">evt</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> key = keyboardMap[evt.which];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// An interesting key was pressed</span></span><br><span class=\"line\">        evt.preventDefault();</span><br><span class=\"line\">        self._handleKeyEvent(key, evt);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>每当一个存在于我们映射中的按键触发了 <code>keydown</code> 事件，<code>KeyboardService</code> 就会执行 <code>this._handleKeyEvent</code> 函数。</p>\n<p>这个函数的整个职责就是调用每一个为按键注册了的处理函数。它就是简单地对处理函数数组进行迭代，使用按键和原事件组为参数来调用处理函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>._handleKeyEvent = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key, evt</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> callbacks = <span class=\"keyword\">this</span>.keyEventHandlers;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!callbacks) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  evt.preventDefault();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (callbacks) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; callbacks.length; x++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> cb = callbacks[x];</span><br><span class=\"line\">      cb(key, evt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>另一方面，我们只需要将处理函数压入处理函数数组就可以了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.on = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cb</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.keyEventHandlers.push(cb);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"使用-Keyboard-Service\"><a href=\"#使用-Keyboard-Service\" class=\"headerlink\" title=\"使用 Keyboard Service\"></a>使用 Keyboard Service</h3><p>现在我们已经有能力来监控用户的键盘事件，我们需要在应用开始运行的时候就监控。因为我们将它做成了一个服务，所以可以很简单地在主要的控制器中做这件事。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/keyboard-sequence.png\" alt=\"2-d grid\"></p>\n<p>首先，我们需要调用 <code>init()</code> 函数来开始监听键盘。接着，我们会注册函数来告诉 <code>GameManager</code> 来调用 <code>move()</code> 函数。</p>\n<p>回到 <code>GameController</code>，我们添加上 <code>newGame()</code> 函数和 <code>startGame()</code> 函数。<code>newGame()</code> 函数会告诉游戏服务创建一个新的游戏然后开始键盘事件处理。</p>\n<p>来开始编码吧！我们需要将 <code>Keyboard</code> 模块作为一个新的模块依赖 <em> 注入 </em> 到应用中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'twentyfourtyeightApp'</span>, [<span class=\"string\">'Game'</span>, <span class=\"string\">'Keyboard'</span>])</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>然后就可以将 <code>KeyboardService</code> 注入到 <code>GameController</code> 中来开始跟用户交互了。首先，<code>newGame()</code> 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ... (from above)</span></span><br><span class=\"line\">.controller(<span class=\"string\">'GameController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GameManager, KeyboardService</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.game = GameManager;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Create a new game</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.newGame = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    KeyboardService.init();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.game.newGame();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.startGame();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>我们还没有在 <code>GameManager</code> 中定义 <code>newGame()</code> 方法，但很快就会去填好内容。</p>\n<p>一旦我们开始了新游戏，我们会调用 <code>startGame()</code>。<code>startGame()</code> 函数会准备好键盘服务的事件处理函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.controller(<span class=\"string\">'GameController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GameManager, KeyboardService</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.startGame = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    KeyboardService.on(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">      self.game.move(key);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Create a new game on boot</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.newGame();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a name=\"start-button\"></a></p>\n<h2 id=\"按下那开始按钮\"><a href=\"#按下那开始按钮\" class=\"headerlink\" title=\"按下那开始按钮\"></a>按下那开始按钮</h2><p>我们做了许多工作来达到开始游戏这么个目的。最后要实现的方法就是 <code>GameManager</code> 中的 <code>newGame()</code> 了，函数会：</p>\n<ol>\n<li>创建一个空的棋盘</li>\n<li>准备好开始的位置</li>\n<li>初始化游戏</li>\n</ol>\n<p>其实我们已经在 <code>GridService</code> 中实现了这些逻辑，所以现在就差把它们连起来了！</p>\n<p>在我们的 <code>app/scripts/game/game.js</code> 文件中，加入 <code>newGame()</code> 函数吧。此函数会重置游戏状态成应有的初始条件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Game'</span>, [])</span><br><span class=\"line\">.service(<span class=\"string\">'GameManager'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GridService</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Create a new game</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.newGame = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    GridService.buildEmptyGameBoard();</span><br><span class=\"line\">    GridService.buildStartingPosition();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.reinit();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Reset game state</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.reinit = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.gameOver = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.win = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.currentScore = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.highScore = <span class=\"number\">0</span>; <span class=\"comment\">// we'll come back to this</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在浏览器中载入页面，包含功能的网格就出来了…… 然而这个阶段还是非常无聊因为我们还没有定义任何移动的功能。</p>\n<p><a name=\"game-loop\"></a></p>\n<h2 id=\"动起来（游戏循环）\"><a href=\"#动起来（游戏循环）\" class=\"headerlink\" title=\"动起来（游戏循环）\"></a>动起来（游戏循环）</h2><p>现在我们来深入游戏功能的实现。当用户按下任何一个方向键，我们会调用 <code>GridService</code> 中的 <code>move()</code> 函数（在 <code>GameController</code> 中写的）。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/game-1.png\" alt=\"non-playable version\"></p>\n<p>要编写 <code>move()</code> 函数，我们需要定义游戏的约束。那就是说，我们需要定义游戏对于每一个给出的移动的操作。</p>\n<p>对于每一步移动，我们要：</p>\n<ol>\n<li>确定用户按下的方向键指示的方向</li>\n<li>为棋盘上每一个方块找到所有最远的可能移动的位置。同时抓取下一个方块看是否能 <em> 合并 </em> 起来。</li>\n<li>对于每一个方块，我们想确定下一个位置是否存在一个等值的方块。<ul>\n<li>如果下一个方块不存在，那么只将方块移动到可能的最远位置即可。（意味着这个最远位置就是棋盘的边缘。）</li>\n<li>如果下一个方块存在：<ul>\n<li>且方块值不同的话，那么将方块放在最远位置（下一个方块就是当前方块的移动边界）。</li>\n<li>且方块值和当前方块相同的话，我们就找到一个可能的合并了。<ul>\n<li>如果该方块已经是合并的结果了，则跳过并认定为已使用。</li>\n<li>如果方块还没合并过，那么则认为需要合并。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>既然定义了功能，就可以制定出写 <code>move()</code> 函数的策略了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Game'</span>, [])</span><br><span class=\"line\">.service(<span class=\"string\">'GameManager'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GridService</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.move = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>; <span class=\"comment\">// Hold a reference to the GameManager, for later</span></span><br><span class=\"line\">    <span class=\"comment\">// define move here</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (self.win) &#123; <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>移动是有限制条件的：如果游戏已经结束或者游戏循环因为某种原因而终止了，那么就只需要返回并继续。</p>\n<p>接下来我们需要在网格上走一下来找出所有可供移动的地方。而因为掌握空方格的位置其实是网格的职责，因此我们会在 <code>GridService</code> 中写一个新的函数来帮助我们找出这些可能会经过的方格。</p>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/grid-vectors.gif\" alt=\"non-playable version\"></p>\n<p>我们通过提取玩家按键指示的 <em> 向量 </em> 来决定方向。例如，如果玩家按下了右键头键，那么就是想移动到 <code>x</code> 值 <em> 更大的 </em> 方格上。</p>\n<p>如果玩家按了上箭头，那么玩家就是想将方块移动到 <code>y</code> 值 <em> 更小的 </em> 方格上。我们可以使用一个 JavaScript 对象将向量和玩家按键映射起来（从 <code>KeyboardService</code> 中得到的按键），就像这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In our `GridService` app/scripts/grid/grid.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> vectors = &#123;</span><br><span class=\"line\">  <span class=\"string\">'left'</span>: &#123; <span class=\"attr\">x</span>: <span class=\"number\">-1</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  <span class=\"string\">'right'</span>: &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span>, <span class=\"attr\">y</span>: <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">  <span class=\"string\">'up'</span>: &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">-1</span> &#125;,</span><br><span class=\"line\">  <span class=\"string\">'down'</span>: &#123; <span class=\"attr\">x</span>: <span class=\"number\">0</span>, <span class=\"attr\">y</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>现在我们就可以简单地迭代每一个可能的位置，并使用向量来控制迭代的方向：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.service(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">TileModel</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.traversalDirections = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> vector = vectors[key];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> positions = &#123;<span class=\"attr\">x</span>: [], <span class=\"attr\">y</span>: []&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> x = <span class=\"number\">0</span>; x &lt; <span class=\"keyword\">this</span>.size; x++) &#123;</span><br><span class=\"line\">      positions.x.push(x);</span><br><span class=\"line\">      positions.y.push(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Reorder if we're going right</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vector.x &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      positions.x = positions.x.reverse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Reorder the y positions if we're going down</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vector.y &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      positions.y = positions.y.reverse();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> positions;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>现在新的函数 <code>traversalDirections()</code> 定义好了，在 <code>move()</code> 函数中就可以在可能的移动上进行迭代了。回到 <code>GameMabager</code>，我们会根据这些可能的位置在网格上走动。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.move = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">// define move here</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (self.win) &#123; <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> positions = GridService.traversalDirections(key);</span><br><span class=\"line\"></span><br><span class=\"line\">  positions.x.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    positions.y.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// For every position</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>在位置的循环中，我们会对可供移动的位置进行迭代同时查找存在的方块。从这里开始，我们将编写函数的第二部分，找出从该方块出发能到达的所有方格。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// For every position</span></span><br><span class=\"line\"><span class=\"comment\">// save the tile's original position</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> originalPosition = &#123;<span class=\"attr\">x</span>:x,<span class=\"attr\">y</span>:y&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> tile = GridService.getCellAt(originalPosition);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tile) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// if we have a tile here</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cell = GridService.calculateNextPosition(tile, key);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://www.ng-newsletter.com/images/2048/next-process.gif\" alt=\"non-playable version\"></p>\n<p>如果我们确实在该方格内找到了方块，就会开始查看该方格最远能到哪里。先在网格上找到下一个位置，检查这个方格是否在棋盘内和方格是否为空。</p>\n<p>如果该方格是空的 <strong> 而且 </strong> 在棋盘内，那么继续取得下一个方格然后执行一样的检查。</p>\n<p>如果两个条件中任意一个不满足，那么要不我们到达了棋盘的边界，要不我们找到了下一个方块。我们会保存前一个位置（译者注：原文为 the next position，翻译为下一个位置。但根据描述和下文的代码此处应该为前一个位置。）同时抓取下一个方格（不管是否存在下一个方格）。</p>\n<p>而这个过程是对网格进行操作，于是就这个函数放在 <code>GridService</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// in GridService</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.calculateNextPosition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cell, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> vector = vectors[key];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> previous;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    previous = cell;</span><br><span class=\"line\">    cell = &#123;</span><br><span class=\"line\">      x: previous.x + vector.x,</span><br><span class=\"line\">      y: previous.y + vector.y</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">while</span> (<span class=\"keyword\">this</span>.withinGrid(cell) &amp;&amp; <span class=\"keyword\">this</span>.cellAvailable(cell));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    newPosition: previous,</span><br><span class=\"line\">    next: <span class=\"keyword\">this</span>.getCellAt(cell)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>现在我们可以计算下一个有可能放得下我们的方块的地方，接着就是检查是否有合并的可能。</p>\n<p>一个 <em> 合并 </em> 的定义是两个相同值的方块碰撞在一起。我们会检查 <code>next</code> 的位置上是否有相同值的方块并且还之前没有被 <em> 合并 </em> 过。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"comment\">// For every position</span></span><br><span class=\"line\"><span class=\"comment\">// save the tile's original position</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> originalPosition = &#123;<span class=\"attr\">x</span>:x,<span class=\"attr\">y</span>:y&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> tile = GridService.getCellAt(originalPosition);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tile) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// if we have a tile here</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> cell = GridService.calculateNextPosition(tile, key),</span><br><span class=\"line\">      next = cell.next;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (next &amp;&amp;</span><br><span class=\"line\">      next.value === tile.value &amp;&amp;</span><br><span class=\"line\">      !next.merged) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Handle merged</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Handle moving tile</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果这个所谓的下一个位置并 <em> 不 </em> 符合上面的条件，那么我们就会将方块从当前的位置移动到这个下一个位置（else 语句）。</p>\n<p>这是更相比之下更容易处理的条件，所需要做的就是将方块移动到 newPosition 位置。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (next &amp;&amp;</span><br><span class=\"line\">    next.value === tile.value &amp;&amp;</span><br><span class=\"line\">    !next.merged) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Handle merged</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  GridService.moveTile(tile, cell.newPosition);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"移动方块\"><a href=\"#移动方块\" class=\"headerlink\" title=\"移动方块\"></a>移动方块</h3><p>就像你大概猜测那样，<code>moveTile()</code> 函数最好就是定义在 <code>GridService</code> 中。</p>\n<p>移动一个方块就是简单地更新一下方块在数组中的位置和更新 <code>TileModel</code> 而已。</p>\n<p>就像我们定义的那样，函数里面有两个目的不同的操作。当我们：</p>\n<h5 id=\"在数组中移动方块的时候\"><a href=\"#在数组中移动方块的时候\" class=\"headerlink\" title=\"在数组中移动方块的时候\"></a>在数组中移动方块的时候</h5><p>数组 <code>GridService.tiles</code>（译者注：原文为 GridService）为后端映射了方块的位置。数组中方块的位置 <em> 没有 </em> 和网格中方块的位置绑定。</p>\n<h5 id=\"更新-TileModel-中的位置的时候\"><a href=\"#更新-TileModel-中的位置的时候\" class=\"headerlink\" title=\"更新 TileModel 中的位置的时候\"></a>更新 TileModel 中的位置的时候</h5><p>我们要为前端的 CSS 更新坐标来放置方块。</p>\n<p>简而言之：为了在后端能跟踪方块们，我们需要更新 <code>GridService</code> 中的 <code>this.tiles</code> 数组 <em> 同时 </em> 更新方块对象的位置。</p>\n<p>于是 <code>moveTile()</code> 就变成了一个简单的两步操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// GridService</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.moveTile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tile, newPosition</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> oldPos = &#123;</span><br><span class=\"line\">    x: tile.x,</span><br><span class=\"line\">    y: tile.y</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Update array location</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setCellAt(oldPos, <span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setCellAt(newPosition, tile);</span><br><span class=\"line\">  <span class=\"comment\">// Update tile model</span></span><br><span class=\"line\">  tile.updatePosition(newPosition);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>现在我们需要定义我们的 <code>tile.updatePosition()</code> 方法。这个方法所做的就像它字面上的那样，就是简单地更新模型自己的 <code>x</code> 和 <code>y</code> 坐标。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.factory(<span class=\"string\">'TileModel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  Tile.prototype.updatePosition = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newPos</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = newPos.x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = newPos.y;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>回到 <code>GridService</code> 中，我们已经可以只是调用 <code>moveTile()</code> 来同时更新 <code>GridService.tiles</code> 数组和方块自己的位置了。</p>\n<h3 id=\"合并一个方块\"><a href=\"#合并一个方块\" class=\"headerlink\" title=\"合并一个方块\"></a>合并一个方块</h3><p>既然我们已经处理了 <em> 比较简单 </em> 的情况了，那么合并一个方块就是我们下一个需要攻克的问题。合并定义如下：</p>\n<ul>\n<li>当一个方块在下一个可移动的方格上遇到相同值的方块的时候就需要合并。*</li>\n</ul>\n<p>当一个方块被合并出来，棋盘就算需要改变，同样当前得分和最高得分也需要更新（如果需要的话）。</p>\n<p>合并需要几个步骤：</p>\n<ol>\n<li>在最后的位置上添加一个新的带合并值的方块</li>\n<li>移除旧方块</li>\n<li>更新游戏得分</li>\n<li>检查游戏是否结束</li>\n</ol>\n<p>拆解后，合并操作很简单。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> hasWon = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (next &amp;&amp;</span><br><span class=\"line\">    next.value === tile.value &amp;&amp;</span><br><span class=\"line\">    !next.merged) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Handle merged</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> newValue = tile.value * <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"comment\">// Create a new tile</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> mergedTile = GridService.newTile(tile, newValue);</span><br><span class=\"line\">  mergedTile.merged = [tile, cell.next];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Insert the new tile</span></span><br><span class=\"line\">  GridService.insertTile(mergedTile);</span><br><span class=\"line\">  <span class=\"comment\">// Remove the old tile</span></span><br><span class=\"line\">  GridService.removeTile(tile);</span><br><span class=\"line\">  <span class=\"comment\">// Move the location of the mergedTile into the next position</span></span><br><span class=\"line\">  GridService.moveTile(merged, next);</span><br><span class=\"line\">  <span class=\"comment\">// Update the score of the game</span></span><br><span class=\"line\">  self.updateScore(self.currentScore + newValue);</span><br><span class=\"line\">  <span class=\"comment\">// Check for the winning value</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (merged.value &gt;= self.winningValue) &#123;</span><br><span class=\"line\">    hasWon = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>我们只想支持一行只有一个方块移动的效果（就是说如果一行里面有两个可以合并的情况，则只会合并一个），因此不得不跟踪 <code>合并了的</code> 方块。通过将 <code>.merged</code> 标志设置成随便什么东西而不是 <code>undefined</code> 就可以做到。</p>\n<p>在结束这个函数的编写之前，还需要解释一下这里用到的我们还没有定义的函数。</p>\n<p><code>GridService.newTile()</code> 函数就是简单地创建 <code>TileModel</code> 对象。合并操作就放在包含创建新方块函数的｀GridService｀中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// GridService</span><br><span class=\"line\">this.newTile = function(pos, value) &#123;</span><br><span class=\"line\">  return new TileModel(pos, value);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// ...</span><br></pre></td></tr></table></figure>\n<p>我们一会再回来叙述 <code>self.updateScore()</code>。现在暂时只需要知道它更新游戏得分就可以了（就像函数名所表明的那样）。</p>\n<h3 id=\"移动了方块之后\"><a href=\"#移动了方块之后\" class=\"headerlink\" title=\"移动了方块之后\"></a>移动了方块之后</h3><p>我们只希望在一次有效的方块移动之后才增加新的方块，因此需要检查一下是否真的有任何一个方块移动了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hasMoved = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">  hasMoved = <span class=\"literal\">true</span>; <span class=\"comment\">// we moved with a merge</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  GridService.moveTile(tile, cell.newPosition);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!GridService.samePositions(originalPos, cell.newPosition)) &#123;</span><br><span class=\"line\">  hasMoved = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>当所有的方块都已经移动过了（或尝试移动过），我们就继续检查玩家是否赢了。如果是，那么实际上我们就要设置 <code>self.win</code> 这个标志了。</p>\n<blockquote>\n<p>当有方块碰撞的时候我们会移动方块，所以在合并的条件下，我们只简单地设置 <code>hasMoved</code> 为 true。</p>\n</blockquote>\n<p>最后，我们要检查一下棋盘上是否有任何的方块移动。如果有，则：</p>\n<ol>\n<li>给棋盘添加一个新的方块</li>\n<li>检查一下有没有必要展示游戏结束界面</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!GridService.samePositions(originalPos, cell.newPosition)) &#123;</span><br><span class=\"line\">  hasMoved = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (hasMoved) &#123;</span><br><span class=\"line\">  GridService.randomlyInsertNewTile();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (self.win || !self.movesAvailable()) &#123;</span><br><span class=\"line\">    self.gameOver = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重置方块\"><a href=\"#重置方块\" class=\"headerlink\" title=\"重置方块\"></a>重置方块</h3><p>在运行任何主游戏程序前，我们要重置每一个方块以便不再跟踪其合并的状态。详细来说，就是每一次移动之后，都要清理所有记录以便让所有方块能再次被移动。因此在执行移动的循环体开头，我们会调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GridService.prepareTiles();</span><br></pre></td></tr></table></figure>\n<p><code>GridService</code> 中的 <code>prepareTiles()</code> 函数只是简单地迭代每一个方块然后重置其状态而已：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.prepareTiles = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y,tile</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tile) &#123;</span><br><span class=\"line\">      tile.reset();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><a name=\"keeping-score\"></a></p>\n<h2 id=\"计算得分\"><a href=\"#计算得分\" class=\"headerlink\" title=\"计算得分\"></a>计算得分</h2><p>回头来看看 <code>updateScore()</code> 方法，游戏本身需要记录两个得分：</p>\n<ol>\n<li>当前游戏的得分</li>\n<li>玩家的最高得分</li>\n</ol>\n<p><code>currentScore</code> 只是一个在每一次游戏的时候保存在内存中的变量，因此无需特殊对待。</p>\n<p>然而 <code>highScore</code> 则是一个贯穿每一次的游戏的变量。我们有几个方法来保存，比如 localstorage，cookies，或者两者结合。</p>\n<p>因为 cookies 是两个方法中最简单而且跨浏览器安全，我们就继续使用 cookies 来存储这个 highScore。</p>\n<p>Angular 中使用 <code>angular-cookies</code> 模块是管理 cookies 的最简单的方法了。</p>\n<p>要使用这个模块，可以到 <a href=\"http://angularjs.org\" target=\"_blank\" rel=\"noopener\">angularjs.org</a> 上下载或者使用包管理器例如 bower 来安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bower install --save angular-cookies</span><br></pre></td></tr></table></figure>\n<p>照旧，我们要在 <code>index.html</code> 中引用这个脚本然后在应用中将 <code>ngCookies</code> 设置成模块级别的依赖。</p>\n<p>像这样更新一下 <code>app/index.html</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;bower_components/angular-cookies/angular-cookies.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>然后添加 <code>ngCookies</code> 作为模块依赖（在 <code>Game</code> 模块中，我们引用 cookies 的地方）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'Game'</span>, [<span class=\"string\">'Grid'</span>, <span class=\"string\">'ngCookies'</span>])</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>有了 <code>ngCookies</code> 作为依赖，我们就可以将 <code>$cookieStore</code> 服务 <em> 注入 </em> 到 <code>GameManagere</code> 服务中。现在可以在浏览器中对 cookies 进行读写了。</p>\n<p>例如，要读取玩家的最高得分，我们会写一个函数从用户的 cookie 中取来：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.getHighScore = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>($cookieStore.get(<span class=\"string\">'highScore'</span>)) || <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>回到 <code>GameManager</code> 类中的 <code>updateScore()</code> 函数，我们开始编写更新当前得分的代码。如果得分比之前记录的最高得分高，那么就更新 cookie 中的最高得分。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.updateScore = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newScore</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.currentScore = newScore;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.currentScore &gt; <span class=\"keyword\">this</span>.getHighScore()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.highScore = newScore;</span><br><span class=\"line\">    <span class=\"comment\">// Set on the cookie</span></span><br><span class=\"line\">    $cookieStore.put(<span class=\"string\">'highScore'</span>, newScopre);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"track-by-之怒\"><a href=\"#track-by-之怒\" class=\"headerlink\" title=\"track by 之怒\"></a>track by 之怒</h3><p>既然我们已经将方块显示出来了，一个 bug 也同样出现了，那就是一些有奇怪行为的方块复制品冒出来。进一步来说，就是方块可能会在不应该出现的地方出现。</p>\n<p>原因是 Angular 通过基于一个唯一的标识来获知 <code>titles</code> 数组里面的有什么方块。而我们把这个唯一的标识在视图中设定为方块在数组中的 <code>$index</code>（也就是数组中的位置）。然而我们在数组中将方块移来移去，<code>$index</code> 不再起到唯一标识的作用。我们需要另外的监测方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;game&quot;&gt;</span><br><span class=\"line\">  &lt;!-- grid-container --&gt;</span><br><span class=\"line\">  &lt;div class=&quot;tile-container&quot;&gt;</span><br><span class=\"line\">    &lt;div tile</span><br><span class=\"line\">      ng-model=&apos;tile&apos;</span><br><span class=\"line\">      ng-repeat=&apos;tile in ngModel.tiles track by $index&apos;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>与其依靠数组来标识方块的位置，我们不如使用方块自己唯一的 uuid 来跟踪。自己创建唯一标识能保证 angular 将方块数组中的每一个方块看成是唯一的对象。只要唯一的 uuid 没有变，那么 angular 就会根据这个标识来将方块识别为独立的对象。</p>\n<p>创建新实例的时候使用 <code>TileModel</code>，我们能非常轻松地为方块实现出唯一标识。我们还能以自己的方式来创建唯一标识。</p>\n<blockquote>\n<p>只要对于每一个创建的 <code>TileModel</code> 实例是唯一的，那么怎么创建这个唯一 id 的方法并无影响。</p>\n</blockquote>\n<p>要生成这个唯一的 id，我们跳到 <a href=\"http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\" target=\"_blank\" rel=\"noopener\">StackOverflow</a> 上找一个 <a href=\"http://www.ietf.org/rfc/rfc4122.txt\" target=\"_blank\" rel=\"noopener\">遵循 rfc4122</a> 的全球唯一标识生成器，然后将其打包成一个工厂，提供一个函数：<code>next()</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.factory(<span class=\"string\">'GenerateUniqueId'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> generateUid = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// http://www.ietf.org/rfc/rfc4122.txt</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> uuid = <span class=\"string\">'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'</span>.replace(<span class=\"regexp\">/[xy]/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">c</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> r = (d + <span class=\"built_in\">Math</span>.random()*<span class=\"number\">16</span>)%<span class=\"number\">16</span> | <span class=\"number\">0</span>;</span><br><span class=\"line\">      d = <span class=\"built_in\">Math</span>.floor(d/<span class=\"number\">16</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (c === <span class=\"string\">'x'</span> ? r : (r&amp;<span class=\"number\">0x7</span>|<span class=\"number\">0x8</span>)).toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> uuid;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> generateUid(); &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>要 <em> 使用 </em> 工厂 <code>GenerateUniqueId</code>，就要将它注入然后调用 <code>GenerateUniqueId.next()</code> 来产生一个新的 uuid。回到 <code>TileModel</code> 中，我们已经可以为实例生成一个唯一的 id 了（在构造函数中）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In app/scripts/grid/grid.js</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">.factory(<span class=\"string\">'TileModel'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GenerateUniqueId</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Tile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pos, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x      = pos.x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y      = pos.y;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value  = val || <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Generate a unique id for this tile</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = GenerateUniqueId.next();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.merged = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>现在每一个方块都已经有了唯一的标识了，于是就可以告诉 Angular 使用 id 而不是 <code>$index</code> 来追踪方块了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- ... --&gt;</span><br><span class=\"line\">&lt;div tile</span><br><span class=\"line\">      ng-model=&apos;tile&apos;</span><br><span class=\"line\">      ng-repeat=&apos;tile in ngModel.tiles track by $id(tile.id)&apos;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- ... --&gt;</span><br></pre></td></tr></table></figure>\n<p>这样做会出现一个问题。我们使用 nulls 来初始化数组（显式地）和 nulls 来重置数组（而不是对数组排序或者调整长度），angular 会不顾一切地试图将 nulls 看作对象。但是 null 值并不包含有唯一标识，于是就会引起浏览器抛异常，并且不知道怎么处理复制出来的对象。</p>\n<p>所以，我们要使用内置的 angular 工具来追踪唯一标识或者数组中的 <code>$index</code> 位置（因为 null 对象在方格内只有一个所以可以通过数组的位置来追踪）。我们可以向如下那样修改一下 grid_directive 中的视图来解决 null 对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- ... --&gt;</span><br><span class=\"line\">&lt;div tile</span><br><span class=\"line\">      ng-model=<span class=\"string\">'tile'</span></span><br><span class=\"line\">      ng-repeat=<span class=\"string\">'tile in ngModel.tiles track by $id(tile.id || $index)'</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;!-- ... --&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这个问题也能通过实现不同的底层数据结构来解决，例如使用迭代器来查看每一个 <code>TileModel</code> 的位置而不是依靠数组下标或者每次改变数组后重新调整（或在 <code>$digest()</code> 中调整）。为了保持简单和清晰，我们使用数组来实现因为这种实现方法只需要处理上文的副作用就可以了。</p>\n</blockquote>\n<p><a name=\"game-over\"></a></p>\n<h2 id=\"我们赢了-游戏结束\"><a href=\"#我们赢了-游戏结束\" class=\"headerlink\" title=\"我们赢了?!?? 游戏结束\"></a>我们赢了?!?? 游戏结束</h2><p>当我们在原来 2048 游戏中输了的时候，一个 <em> 游戏结束 </em> 界面会滑入，让我们重新开始游戏或者在 twitter 上 follow 游戏作者。这不仅是游戏中一个酷酷的效果，也是一个中断游戏的好方法。</p>\n<p>使用基本的 angular 技术也能做到这个。我们已经在 <code>GameManager</code> 使用了变量 <code>gameOver</code> 来确定游戏什么时候结束。可以直接就用一个 <code>&lt;div&gt;</code> 元素来装着游戏结束界面，然后使用绝对定位覆盖在棋盘上。这种技术（和 Angular）的神奇在于实现起来没有任何的花招：</p>\n<p>就是简单地创建一个包含游戏结束或者玩家获胜的信息的 <code>&lt;div&gt;</code> 元素，根据游戏的状态来选择显示。比如，游戏结束界面看起来可以像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- ... --&gt;</span><br><span class=\"line\">&lt;div id=&quot;game-container&quot;&gt;</span><br><span class=\"line\">  &lt;div grid ng-model=&apos;ctrl.game&apos; class=&quot;row&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;div id=&quot;game-over&quot;</span><br><span class=\"line\">        ng-if=&quot;ctrl.game.gameOver&quot;</span><br><span class=\"line\">        class=&quot;row game-overlay&quot;&gt;</span><br><span class=\"line\">      Game over</span><br><span class=\"line\">      &lt;div class=&quot;lower&quot;&gt;</span><br><span class=\"line\">        &lt;a class=&quot;retry-button&quot; ng-click=&apos;ctrl.newGame()&apos;&gt;Try again&lt;/a&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;!-- ... --&gt;</span><br></pre></td></tr></table></figure>\n<p>困难的部分是处理样式 / CSS。为效率起见，我们只是将元素设置成绝对定位在网格之上，让浏览器来决定真正的位置。这里附上 <em> 相关的 </em> 一部分 css（提醒一下，完整 CSS 在下面的 gtihub 地址中有）：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.game-overlay</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: $width;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: $width;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(255, 255, 255, 0.47);</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">35%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\"></span><br><span class=\"line\">  .lower &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">block</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">margin-top</span>: 29<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">font-size</span>: 16<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>我们可以使用完全相同的技术来做获胜界面，同样创建一个代表获胜的 <code>.game-overlay</code> 元素即可。</p>\n</blockquote>\n<p><a name=\"running-the-animation\"></a></p>\n<h2 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h2><p>原 2048 游戏中其中一个令人印象深刻的地方是方块似乎会魔术般地从一个网格滑到下一个网格，另外游戏结束 / 获胜界面的显示显得很自然。因为使用 Angular，我们能做到 <em> 几乎一样的效果 </em>（感谢 CSS）。</p>\n<p>实际上，我们做出来的游戏能够容易地实现诸如滑动，出现，显现等的动画效果。我们几乎不会碰到 JavaScript（只需一点点）就可以实现这些效果。</p>\n<h3 id=\"CSS-位置动画（也就是添加滑动的方块）\"><a href=\"#CSS-位置动画（也就是添加滑动的方块）\" class=\"headerlink\" title=\"CSS 位置动画（也就是添加滑动的方块）\"></a>CSS 位置动画（也就是添加滑动的方块）</h3><p>因为我们通过 CSS 设置类 <code>position-[x]-[y]</code> 来定位方块，当为方块设置新位置的时候，DOM 元素会加上类 <code>position-[newX]-[newY]</code> 并移除类 <code>position-[oldX]-[oldY]</code>。在这种情况下，我们在 <code>.tile</code> 类上定义一个 CSS 变换来实现 CSS 类上自带滑动效果。</p>\n<p>相关的 SCSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.tile</span> &#123;</span><br><span class=\"line\">  @include border-radius($tile-radius);</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> transition($transition-time ease-in-out);</span><br><span class=\"line\">  <span class=\"selector-tag\">-webkit-transition-property</span>: <span class=\"selector-tag\">-webkit-transform</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">-moz-transition-property</span>: <span class=\"selector-tag\">-moz-transform</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">transition-property</span>: <span class=\"selector-tag\">transform</span>;</span><br><span class=\"line\">  <span class=\"selector-tag\">z-index</span>: 2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>CSS 变换定义好后，现在方块就会在网格之间滑动了（对，就是 <em> 那么简单 </em>）。</p>\n<h3 id=\"游戏结束界面动画\"><a href=\"#游戏结束界面动画\" class=\"headerlink\" title=\"游戏结束界面动画\"></a>游戏结束界面动画</h3><p>如果想在动画上取得更多的效果，可以使用 <code>ngAnimate</code> 模块来做。此模块本身配合 angular 一起就是开箱即用了。</p>\n<p>在使用前，同样需要安装 <code>ngAnimate</code> 模块。在 <a href=\"http://angularjs.org\" target=\"_blank\" rel=\"noopener\">angularjs.org</a> 上下载或者使用包管理器（例如 bower）来安装。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bower install --save angular-animate</span><br></pre></td></tr></table></figure>\n<p>同样，我们接着就需要在 HTML 中引用以便浏览器加载。修改 <code>index.html</code> 来引用 <code>angular-animate.js</code> 文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=&quot;bower_components/angular-animate/angular-animate.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>最后，就像其他 angular 模块一样，我们要告诉 angular 我们的应用依赖什么模块来运行。在应用的依赖数组中加入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular</span><br><span class=\"line\">.module(<span class=\"string\">'twentyfourtyeightApp'</span>, [<span class=\"string\">'Game'</span>, <span class=\"string\">'Grid'</span>, <span class=\"string\">'Keyboard'</span>, <span class=\"string\">'ngAnimate'</span>, <span class=\"string\">'ngCookies'</span>])</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ngAnimate\"><a href=\"#ngAnimate\" class=\"headerlink\" title=\"ngAnimate\"></a>ngAnimate</h3><p>虽然对 ngAnimate 的深度探讨超出本文范围（看 <a href=\"https://www.ng-book.com\" target=\"_blank\" rel=\"noopener\">ng-book</a> 来深入了解其机制），但是我们还是粗浅了解一下其工作机制以便在应用里实现动画。</p>\n<p>引入了 <code>ngAnimate</code> 作为模块级别依赖之后，任何时候 angular 为相关的（对于我们的应用而言）指令添加一个新对象的时候，它也会增添上一个 CSS 类（免费）。我们可以利用这些类来给游戏中的不同组件赋予 CSS 动画：</p>\n<table>\n  <tr>\n    <th>Directive</th>\n    <th>Added class</th>\n    <th>Leaving class</th>\n  </tr>\n  <tr>\n    <td>ng-repeat</td>\n    <td>ng-enter</td>\n    <td>ng-leave</td>\n  </tr>\n  <tr>\n    <td>ng-if</td>\n    <td>ng-enter</td>\n    <td>ng-leave</td>\n  </tr>\n  <tr>\n    <td>ng-class</td>\n    <td>[className]-add</td>\n    <td>[className]-remove</td>\n  </tr>\n</table>\n\n<p>当一个元素被添加进 <code>ng-repeat</code> 的作用域，新的 DOM 元素会被自动添加上 CSS 类 <code>ng-enter</code>。然后，当它真正地添加到视图上后，就会被添加上 CSS 类 <code>ng-enter-active</code>。这个机制很重要因为它让我们能够在 CSS 类 <code>ng-enter</code> 里设定动画的样子和在 CSS 类 <code>ng-enter-active</code> 里设定动画的样式。当元素在 <code>ng-repeat</code> 迭代器中被移除的时候类 <code>ng-leave</code> 也是如此的工作机制。</p>\n<p>当 DOM 元素上一个新的 CSS 类被添加（或被移除），相应的 <code>[classname]-add</code> 和 <code>[classname]-add-active</code> 也会添加到 DOM 元素上。同理，也可以在相应的类里设定 CSS 动画。</p>\n<h3 id=\"游戏结束界面动画-1\"><a href=\"#游戏结束界面动画-1\" class=\"headerlink\" title=\"游戏结束界面动画\"></a>游戏结束界面动画</h3><p>我们能使用类 <code>ng-enter</code> 来让游戏结束界面和获胜界面动起来了。记住，类 <code>.game-overlay</code> 是使用 <code>ng-if</code> 指令来实现隐藏和显示的。当 <code>ng-if</code> 的条件变化了，<code>ngAnimate</code> 会在等式值为真的时候添加上 <code>.ng-enter</code> 和 <code>.ng-enter-active</code>（或者移除元素时添加 <code>.ng-leave</code> 和 <code>.ng-leave-active</code>）。</p>\n<p>我们会在类 <code>.ng-enter</code> 中设定好动画，然后在类 <code>.ng-enter-active</code> 中激活。相关的 SCSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.game-overlay</span> &#123;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.ng-enter</span> &#123;</span><br><span class=\"line\">    @include transition(all 1000ms ease-in);</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> transform(translate(<span class=\"number\">0</span>, <span class=\"number\">100%</span>));</span><br><span class=\"line\">    <span class=\"selector-tag\">opacity</span>: 0;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &amp;<span class=\"selector-class\">.ng-enter-active</span> &#123;</span><br><span class=\"line\">    @include transform(translate(0, 0));</span><br><span class=\"line\">    <span class=\"selector-tag\">opacity</span>: 1;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所有的 SCSS 在文章底部的 github 连接中可以看到。</p>\n<p><a name=\"customizing-size\"></a></p>\n<h2 id=\"定制位置\"><a href=\"#定制位置\" class=\"headerlink\" title=\"定制位置\"></a>定制位置</h2><p>假设我们想使用不同的棋盘大小。例如，原 2048 是 4x4 的。如果我们想要 3x3 或者 6x6 呢？不用变动太多的代码我们就能轻松实现。</p>\n<p>棋盘本身是通过 SCSS 来创建和定位的，而网格又是通过 <code>GridService</code> 来管理的。所以我们在这两个地方修改一下以便能自定义棋盘。</p>\n<h3 id=\"动态-CSS\"><a href=\"#动态-CSS\" class=\"headerlink\" title=\"动态 CSS\"></a>动态 CSS</h3><p>好吧实际上我们并不是打算弄动态 CSS，但是我们可以创建更加多实际会用得上的 CSS。与其使用单个 <code>#game</code> 标签，我们可以实时创建可以动态设置网格的 DOM 元素标签。也就是说，我们将 3x3 的棋盘版本嵌套在 ID 是 <code>#game-3</code> 的 DOM 元素下，将 6x6 的棋盘版本嵌套在 id 标签是 <code>#game-6</code> 的元素下。</p>\n<p>可以在原本已经是动态的 SCSS 中编写出一个<a href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\" target=\"_blank\" rel=\"noopener\">混合</a>。就是很简单地找到 css ID 标签 <code>#game</code> 然后将其包裹进一个混合。例如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> game-board($tile-count: <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">  $tile-size: ($width - $tile-padding * ($tile-count + 1)) / $tile-count;</span><br><span class=\"line\">  #game-#&#123;$tile-count&#125; &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">position</span>: <span class=\"selector-tag\">relative</span>;</span><br><span class=\"line\">    padding: $tile-padding;</span><br><span class=\"line\">    <span class=\"selector-tag\">cursor</span>: <span class=\"selector-tag\">default</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#bbaaa0</span>;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们可以引用 <code>game-board</code> 混合来动态创建一个包含有不同棋盘版本的样式表了，棋盘的版本都各自独立在其 <code>#game-[n]</code> 标签下。</p>\n<p>要做出这样不同的版本，我们只需要遍历所有的棋盘大小然后调用上面的混合就可以了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$min-tile-count: 3;       // lowest tile count</span><br><span class=\"line\">$max-tile-count: 6;       // highest tile count</span><br><span class=\"line\">@<span class=\"keyword\">for</span> $i from $min-tile-count through $max-tile-count &#123;</span><br><span class=\"line\">  @<span class=\"keyword\">include</span> game-board($i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态的-GridService\"><a href=\"#动态的-GridService\" class=\"headerlink\" title=\"动态的 GridService\"></a>动态的 GridService</h3><p>现在已经编写好了应付不同大小棋盘的 CSS 了，我们还需要修改 <code>GridService</code> 好让启动应用的时候能设置网格的大小。</p>\n<p>Angular 让这变得十分简单。首先，我们需要将 <code>GridService</code> 变成 <code>provider</code>，而不是一个直接的 <code>service</code>。如果你不清楚服务（译者注：service）和提供者（译者注：provider）之间的不同，看 <a href=\"https://www.ng-book.com\" target=\"_blank\" rel=\"noopener\">ng-book</a> 作深入了解。简单来说，一个提供者能够让我们在运行之前对其进行配置。</p>\n<p>此外，我们也需要将提供者中的构造函数修改为 <code>$get</code> 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.provider(<span class=\"string\">'GridService'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.size = <span class=\"number\">4</span>; <span class=\"comment\">// Default size</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.setSize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sz</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.size = sz ? sz : <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> service = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$<span class=\"keyword\">get</span> = function(TileModel) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>提供者中任何不在 <code>$get</code> 方法中的方法都能在应用的 <code>.config()</code> 函数中访问得到。<code>$get()</code> 中的所有东西不能被 <code>.config()</code> 方法访问，而能在运行的时候被应用访问。</p>\n<p>实现动态棋盘大小的工作就这么多。现在我们试着做一个 6x6 的棋盘而不是 4x4 的棋盘。在 app 模块的 <code>.config()</code> 函数中，我们叫来 <code>GridServiceProvider</code> 来设置大小：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular</span><br><span class=\"line\">.module(<span class=\"string\">'twentyfourtyeightApp'</span>, [<span class=\"string\">'Game'</span>, <span class=\"string\">'Grid'</span>, <span class=\"string\">'Keyboard'</span>, <span class=\"string\">'ngAnimate'</span>, <span class=\"string\">'ngCookies'</span>])</span><br><span class=\"line\">.config(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">GridServiceProvider</span>) </span>&#123;</span><br><span class=\"line\">  GridServiceProvider.setSize(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Angular 在创建一个提供者的时候，会自动生成一个仅供配置时使用的模块，我们使用名字：[serviceName]Provider 来实现注入。</p>\n</blockquote>\n<p><a name=\"demo\"></a></p>\n<h2 id=\"演示-demo\"><a href=\"#演示-demo\" class=\"headerlink\" title=\"演示 demo\"></a>演示 demo</h2><p>完整的 demo 在这里：<a href=\"http://ng2048.github.io/\" target=\"_blank\" rel=\"noopener\">http://ng2048.github.io/</a>。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>唷！我们希望你已经在愉快地使用 Angular 来编写这个 2048 游戏了。博文中应该已经覆盖了大部分的过程了。如果你觉得不错，可以在下面留下评论。如果你对继续学习 Angular 有兴趣，务必去看看我们的书<a href=\"https://www.ng-book.com/\" target=\"_blank\" rel=\"noopener\">Complete Book on AngularJS</a>。这是唯一一本会不断更新 AngularJS 知识的书，并且包括了在 AngularJS 中所有你需要了解的东西。</p>\n<p><a href=\"https://news.ycombinator.com/item?id=7554348\" target=\"_blank\" rel=\"noopener\">在 HackerNews 上讨论</a></p>\n<h2 id=\"Thanks\"><a href=\"#Thanks\" class=\"headerlink\" title=\"Thanks\"></a>Thanks</h2><p>非常感谢 <a href=\"http://gabrielecirulli.com/\" target=\"_blank\" rel=\"noopener\">Gabriele Cirulli</a> 编写出了妙极的（和让人上瘾的）2048，同样感谢他对此文的启发。文中的很多主意都是从原游戏中搜集、提炼，用以阐明如何使用 Angular 来编写。</p>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><p>游戏的完整代码在 Github 上，地址是 <a href=\"http://d.pr/pNtX。要在本地编译游戏，只需要复制代码然后运行：\" target=\"_blank\" rel=\"noopener\">http://d.pr/pNtX。要在本地编译游戏，只需要复制代码然后运行：</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install</span><br><span class=\"line\">$ bower install</span><br><span class=\"line\">$ grunt serve</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题与解决方法\"><a href=\"#问题与解决方法\" class=\"headerlink\" title=\"问题与解决方法\"></a>问题与解决方法</h2><p>如果你使用不了 npm install，保证你安装了最新的 node.js 和 npm。</p>\n<p>这个版本库在 node v0.10.26 和 npm 1.4.3 上测试。</p>\n<p>以下是一个安装最新版本的 node 和 node 版本管理器 <code>n</code> 的方法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo npm cache clean -f</span><br><span class=\"line\">$ sudo npm install -g n</span><br><span class=\"line\">$ sudo n stable</span><br></pre></td></tr></table></figure>\n","popularPost_tmp_postPath":true,"eyeCatchImage":"http://www.ng-newsletter.com/images/2048/game.gif","popularPost_tmp_gaData":{"updated":"Wed Jun 11 2014 14:13:25 GMT+0800 (China Standard Time)","title":"[译]使用 AngularJS 编写 2048 游戏","path":"translation-building-the-2048-game-in-angularjs/","eyeCatchImage":"http://www.ng-newsletter.com/images/2048/game.gif","excerpt":null,"date":"2014-05-29T04:58:14.000Z","pv":0,"totalPV":0,"categories":"翻译 > 技术","tags":["angularjs","translation"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":21772}],"PostAsset":[],"PostCategory":[{"post_id":"cjw0oyuoo000in7t42ptgmu1p","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyup6001mn7t4e51pesy1"},{"post_id":"cjw0oyuoo000in7t42ptgmu1p","category_id":"cjw0oyup3001en7t4au3jv79l","_id":"cjw0oyup6001on7t40cfd0b70"},{"post_id":"cjw0oyuon000hn7t4qy7wyuol","category_id":"cjw0oyup2001an7t4wi9wrzlf","_id":"cjw0oyupl0034n7t48cqsve6x"},{"post_id":"cjw0oyuon000hn7t4qy7wyuol","category_id":"cjw0oyupi002un7t45qqrsrln","_id":"cjw0oyupl0036n7t4s9b4gcjq"},{"post_id":"cjw0oyuor000mn7t4l8wqcjlf","category_id":"cjw0oyup4001gn7t4wpce5rrc","_id":"cjw0oyupn003bn7t4fp3q1sq3"},{"post_id":"cjw0oyuor000mn7t4l8wqcjlf","category_id":"cjw0oyupk0032n7t4b25dvbgo","_id":"cjw0oyupn003en7t4bom0uzrw"},{"post_id":"cjw0oyuoq000ln7t46bsmrtzj","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyupo003hn7t4eubyscf9"},{"post_id":"cjw0oyuoq000ln7t46bsmrtzj","category_id":"cjw0oyuop000jn7t4v2afobf1","_id":"cjw0oyupo003jn7t4mul61ads"},{"post_id":"cjw0oyuoq000ln7t46bsmrtzj","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyupo003ln7t4x8icobf0"},{"post_id":"cjw0oyuoq000ln7t46bsmrtzj","category_id":"cjw0oyupl0038n7t4p3qxkzej","_id":"cjw0oyupp003nn7t47tbcwyqa"},{"post_id":"cjw0oyuoe0009n7t4o8s66jum","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyupp003qn7t4goyzl5yn"},{"post_id":"cjw0oyuoe0009n7t4o8s66jum","category_id":"cjw0oyuop000jn7t4v2afobf1","_id":"cjw0oyupq003tn7t4tauz2r2v"},{"post_id":"cjw0oyuoe0009n7t4o8s66jum","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyupr003wn7t4xwe21s28"},{"post_id":"cjw0oyuoe0009n7t4o8s66jum","category_id":"cjw0oyupl0038n7t4p3qxkzej","_id":"cjw0oyups003zn7t453vf1yhi"},{"post_id":"cjw0oyuos000pn7t47ae2wgh3","category_id":"cjw0oyup4001gn7t4wpce5rrc","_id":"cjw0oyups0040n7t4nsg7faxr"},{"post_id":"cjw0oyuos000pn7t47ae2wgh3","category_id":"cjw0oyupn003fn7t4ctyamz82","_id":"cjw0oyupu0043n7t4k9f7nlom"},{"post_id":"cjw0oyuot000qn7t4dibtlp4g","category_id":"cjw0oyup8001yn7t4k30wxe0f","_id":"cjw0oyupu0044n7t4gi338nq5"},{"post_id":"cjw0oyuot000qn7t4dibtlp4g","category_id":"cjw0oyupo003kn7t4ny5hjnj1","_id":"cjw0oyupv0047n7t4rtwesk5c"},{"post_id":"cjw0oyuo60003n7t4aa8t3riq","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyupw0048n7t4y4w54o5g"},{"post_id":"cjw0oyuo60003n7t4aa8t3riq","category_id":"cjw0oyuos000nn7t4osfuiewl","_id":"cjw0oyupx004bn7t4wlcbb21n"},{"post_id":"cjw0oyuo60003n7t4aa8t3riq","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyupy004cn7t43f5pqw4g"},{"post_id":"cjw0oyuo60003n7t4aa8t3riq","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyupz004fn7t497do2bh3"},{"post_id":"cjw0oyuou000sn7t4rs0fzhdc","category_id":"cjw0oyup4001gn7t4wpce5rrc","_id":"cjw0oyupz004hn7t4px06lo5q"},{"post_id":"cjw0oyuou000sn7t4rs0fzhdc","category_id":"cjw0oyupr003vn7t43awoxvym","_id":"cjw0oyuq1004ln7t482gzk1ki"},{"post_id":"cjw0oyuog000an7t4o98366t0","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuq1004nn7t4wjf4l3ug"},{"post_id":"cjw0oyuog000an7t4o98366t0","category_id":"cjw0oyuop000jn7t4v2afobf1","_id":"cjw0oyuq3004rn7t4uih9i9uu"},{"post_id":"cjw0oyuog000an7t4o98366t0","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuq3004tn7t427mi4mls"},{"post_id":"cjw0oyuog000an7t4o98366t0","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyuq4004vn7t46ft6dwib"},{"post_id":"cjw0oyuov000vn7t4srtjlcry","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuq5004xn7t4k2pltkwo"},{"post_id":"cjw0oyuov000vn7t4srtjlcry","category_id":"cjw0oyuos000nn7t4osfuiewl","_id":"cjw0oyuq60050n7t4zduve0vz"},{"post_id":"cjw0oyuov000vn7t4srtjlcry","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuq70052n7t43r06elmy"},{"post_id":"cjw0oyuov000vn7t4srtjlcry","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyuq80055n7t4j368itdw"},{"post_id":"cjw0oyuow000yn7t45yujj46a","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuq80056n7t45971vgfv"},{"post_id":"cjw0oyuow000yn7t45yujj46a","category_id":"cjw0oyuop000jn7t4v2afobf1","_id":"cjw0oyuq90057n7t4nbjahtap"},{"post_id":"cjw0oyuow000yn7t45yujj46a","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuq90058n7t46xkuos8q"},{"post_id":"cjw0oyuow000yn7t45yujj46a","category_id":"cjw0oyup3001cn7t46wwg7v5x","_id":"cjw0oyuq90059n7t4fpgs94m2"},{"post_id":"cjw0oyuow000yn7t45yujj46a","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuq9005an7t4souk0gr5"},{"post_id":"cjw0oyuow000yn7t45yujj46a","category_id":"cjw0oyupl0038n7t4p3qxkzej","_id":"cjw0oyuqa005bn7t4cbewiecx"},{"post_id":"cjw0oyuoj000dn7t40pzk5xqm","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuqa005cn7t4pm05r2mk"},{"post_id":"cjw0oyuoj000dn7t40pzk5xqm","category_id":"cjw0oyuos000nn7t4osfuiewl","_id":"cjw0oyuqa005dn7t4r9qrw0fd"},{"post_id":"cjw0oyuoj000dn7t40pzk5xqm","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuqb005en7t40exnqurl"},{"post_id":"cjw0oyuoj000dn7t40pzk5xqm","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyuqb005fn7t4o146iim2"},{"post_id":"cjw0oyuoy0011n7t4jtg6xjlm","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuqb005gn7t4qzqu1n5x"},{"post_id":"cjw0oyuoy0011n7t4jtg6xjlm","category_id":"cjw0oyuop000jn7t4v2afobf1","_id":"cjw0oyuqb005hn7t4fbqfd6xq"},{"post_id":"cjw0oyuoy0011n7t4jtg6xjlm","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuqb005in7t4tjqbans1"},{"post_id":"cjw0oyuoy0011n7t4jtg6xjlm","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyuqb005jn7t4opkwisqb"},{"post_id":"cjw0oyuoz0014n7t4hg4oajx9","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuqc005kn7t4xihn6b7o"},{"post_id":"cjw0oyuoz0014n7t4hg4oajx9","category_id":"cjw0oyuop000jn7t4v2afobf1","_id":"cjw0oyuqc005ln7t430x0b4an"},{"post_id":"cjw0oyuoz0014n7t4hg4oajx9","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuqc005mn7t4lekwfxkf"},{"post_id":"cjw0oyuoz0014n7t4hg4oajx9","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyuqc005nn7t4hamk1di4"},{"post_id":"cjw0oyuoa0005n7t4i1cgsb4p","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuqc005on7t4khvyy5ql"},{"post_id":"cjw0oyuoa0005n7t4i1cgsb4p","category_id":"cjw0oyuos000nn7t4osfuiewl","_id":"cjw0oyuqd005pn7t4ueynfosl"},{"post_id":"cjw0oyuoa0005n7t4i1cgsb4p","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuqd005qn7t43e6kaujc"},{"post_id":"cjw0oyuoa0005n7t4i1cgsb4p","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyuqd005rn7t44z7xwlyn"},{"post_id":"cjw0oyuol000en7t4jqpzis59","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuqd005sn7t4pj60ff3a"},{"post_id":"cjw0oyuol000en7t4jqpzis59","category_id":"cjw0oyuos000nn7t4osfuiewl","_id":"cjw0oyuqd005tn7t4hp5fd5z5"},{"post_id":"cjw0oyuol000en7t4jqpzis59","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuqd005un7t4dj7lk96b"},{"post_id":"cjw0oyuol000en7t4jqpzis59","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyuqe005vn7t4dq87p3fm"},{"post_id":"cjw0oyuod0007n7t4j7g12asw","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuqe005wn7t4tjrg09tx"},{"post_id":"cjw0oyuod0007n7t4j7g12asw","category_id":"cjw0oyup3001cn7t46wwg7v5x","_id":"cjw0oyuqe005xn7t49ark9hpi"},{"post_id":"cjw0oyuod0007n7t4j7g12asw","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuqe005yn7t418iqx7nj"},{"post_id":"cjw0oyuod0007n7t4j7g12asw","category_id":"cjw0oyupl0038n7t4p3qxkzej","_id":"cjw0oyuqe005zn7t42xifte0f"},{"post_id":"cjw0oyurq0060n7t4kc8g6jxr","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyus6006hn7t4cl841qk0"},{"post_id":"cjw0oyurq0060n7t4kc8g6jxr","category_id":"cjw0oyury0064n7t4j9ch4gl3","_id":"cjw0oyus6006jn7t43uefwpe6"},{"post_id":"cjw0oyuru0063n7t4525ark5x","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyus7006nn7t4ihu5rdc3"},{"post_id":"cjw0oyuru0063n7t4525ark5x","category_id":"cjw0oyuop000jn7t4v2afobf1","_id":"cjw0oyus7006pn7t48tp6w54i"},{"post_id":"cjw0oyuru0063n7t4525ark5x","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyus8006sn7t4vvb4vj36"},{"post_id":"cjw0oyuru0063n7t4525ark5x","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyus8006un7t4h3kn1r2d"},{"post_id":"cjw0oyuru0063n7t4525ark5x","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyus8006xn7t4dqifyq0a"},{"post_id":"cjw0oyuru0063n7t4525ark5x","category_id":"cjw0oyupl0038n7t4p3qxkzej","_id":"cjw0oyus8006zn7t4ahi3alg4"},{"post_id":"cjw0oyus00067n7t4l6d8fi5f","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyus80071n7t4on72zl6i"},{"post_id":"cjw0oyus00067n7t4l6d8fi5f","category_id":"cjw0oyuos000nn7t4osfuiewl","_id":"cjw0oyus90074n7t449oajwif"},{"post_id":"cjw0oyus00067n7t4l6d8fi5f","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyus90075n7t4sx4sjv84"},{"post_id":"cjw0oyus00067n7t4l6d8fi5f","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyus90076n7t4aa4tbe55"},{"post_id":"cjw0oyus2006bn7t4kx77e81h","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyus90078n7t41nkw8ayj"},{"post_id":"cjw0oyus2006bn7t4kx77e81h","category_id":"cjw0oyuos000nn7t4osfuiewl","_id":"cjw0oyus9007an7t4i419hlfk"},{"post_id":"cjw0oyus2006bn7t4kx77e81h","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyus9007cn7t4erdp4euy"},{"post_id":"cjw0oyus2006bn7t4kx77e81h","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyus9007en7t4g364uteh"},{"post_id":"cjw0oyus4006dn7t4g3moi85a","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyus9007fn7t4nazq8ccu"},{"post_id":"cjw0oyus4006dn7t4g3moi85a","category_id":"cjw0oyuos000nn7t4osfuiewl","_id":"cjw0oyus9007gn7t4wgz48lfb"},{"post_id":"cjw0oyus4006dn7t4g3moi85a","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyus9007hn7t4tlf59zq5"},{"post_id":"cjw0oyus4006dn7t4g3moi85a","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyus9007in7t43gayxnni"},{"post_id":"cjw0oyurz0065n7t4pz3cwhl8","category_id":"cjw0oyup2001an7t4wi9wrzlf","_id":"cjw0oyus9007jn7t441toohlj"},{"post_id":"cjw0oyurz0065n7t4pz3cwhl8","category_id":"cjw0oyus5006gn7t4nms5oj4v","_id":"cjw0oyus9007kn7t4fd9bhjq9"},{"post_id":"cjw0oyurs0061n7t4ltt032gh","category_id":"cjw0oyus20069n7t4i8pl8uzh","_id":"cjw0oyus9007ln7t4h04l98o5"},{"post_id":"cjw0oyurs0061n7t4ltt032gh","category_id":"cjw0oyus7006mn7t4d6ezev4b","_id":"cjw0oyusa007mn7t4twbp8hxl"},{"post_id":"cjw0oyutk007nn7t4ikztnfs1","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyutr007wn7t4u2unmuan"},{"post_id":"cjw0oyutk007nn7t4ikztnfs1","category_id":"cjw0oyuos000nn7t4osfuiewl","_id":"cjw0oyuts0080n7t4hey2dd6s"},{"post_id":"cjw0oyutk007nn7t4ikztnfs1","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyutu0084n7t43zo8w3yy"},{"post_id":"cjw0oyutk007nn7t4ikztnfs1","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyutv0088n7t4toho9mz7"},{"post_id":"cjw0oyutl007on7t4lgd4tfth","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyutx008cn7t4d5pbkl3r"},{"post_id":"cjw0oyutl007on7t4lgd4tfth","category_id":"cjw0oyuos000nn7t4osfuiewl","_id":"cjw0oyuty008fn7t4clvhivpc"},{"post_id":"cjw0oyutl007on7t4lgd4tfth","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuu0008kn7t4p60bvhg7"},{"post_id":"cjw0oyutl007on7t4lgd4tfth","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyuu6008nn7t41wfi5zff"},{"post_id":"cjw0oyutm007qn7t48v4j0g7u","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuu8008sn7t46rhh8h53"},{"post_id":"cjw0oyutm007qn7t48v4j0g7u","category_id":"cjw0oyuos000nn7t4osfuiewl","_id":"cjw0oyuua008vn7t41jshcqsd"},{"post_id":"cjw0oyutm007qn7t48v4j0g7u","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuub0090n7t4tir16iyn"},{"post_id":"cjw0oyutm007qn7t48v4j0g7u","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyuuc0093n7t498gxdhl8"},{"post_id":"cjw0oyutn007rn7t4meb9n8e7","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuue0098n7t4dummy1xs"},{"post_id":"cjw0oyutn007rn7t4meb9n8e7","category_id":"cjw0oyuos000nn7t4osfuiewl","_id":"cjw0oyuuf009bn7t4hr629r2j"},{"post_id":"cjw0oyutn007rn7t4meb9n8e7","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuug009dn7t44ay5g7zv"},{"post_id":"cjw0oyutn007rn7t4meb9n8e7","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyuuh009gn7t4tj49gxmi"},{"post_id":"cjw0oyuto007sn7t4tub4xh2h","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuuh009jn7t4124b9p53"},{"post_id":"cjw0oyuto007sn7t4tub4xh2h","category_id":"cjw0oyuop000jn7t4v2afobf1","_id":"cjw0oyuui009mn7t4t6u4wj44"},{"post_id":"cjw0oyuto007sn7t4tub4xh2h","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuuj009pn7t4s9bfj7n9"},{"post_id":"cjw0oyuto007sn7t4tub4xh2h","category_id":"cjw0oyup3001cn7t46wwg7v5x","_id":"cjw0oyuuj009rn7t45yh6441y"},{"post_id":"cjw0oyuto007sn7t4tub4xh2h","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuuk009tn7t4l4omk15s"},{"post_id":"cjw0oyuto007sn7t4tub4xh2h","category_id":"cjw0oyupl0038n7t4p3qxkzej","_id":"cjw0oyuul009wn7t4pdgvjsf6"},{"post_id":"cjw0oyutq007vn7t43ovwy5xq","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuul009yn7t4hsl5w5ly"},{"post_id":"cjw0oyutq007vn7t43ovwy5xq","category_id":"cjw0oyutt0083n7t42b5n1m47","_id":"cjw0oyuum00a2n7t4gbjwe0te"},{"post_id":"cjw0oyutq007vn7t43ovwy5xq","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuum00a4n7t4gj3g8473"},{"post_id":"cjw0oyutq007vn7t43ovwy5xq","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyuun00a7n7t4y4atq4ph"},{"post_id":"cjw0oyutr007yn7t4ipuvirab","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuuq00a9n7t4a7q4zae0"},{"post_id":"cjw0oyutr007yn7t4ipuvirab","category_id":"cjw0oyutt0083n7t42b5n1m47","_id":"cjw0oyuur00adn7t44o6mq6wn"},{"post_id":"cjw0oyutr007yn7t4ipuvirab","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuus00aen7t4zlkp19xa"},{"post_id":"cjw0oyutr007yn7t4ipuvirab","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyuut00ahn7t4xvbd19o2"},{"post_id":"cjw0oyuts0082n7t4efjcang1","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuut00ajn7t4ceu1eace"},{"post_id":"cjw0oyuts0082n7t4efjcang1","category_id":"cjw0oyutz008jn7t4tf3xx1h9","_id":"cjw0oyuuu00ann7t4y0txtlyy"},{"post_id":"cjw0oyutu0086n7t4o13cqhot","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuuu00aon7t47kgraesj"},{"post_id":"cjw0oyutu0086n7t4o13cqhot","category_id":"cjw0oyutz008jn7t4tf3xx1h9","_id":"cjw0oyuuv00arn7t4mnqn3txc"},{"post_id":"cjw0oyutw008an7t4mj32o96u","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuuv00atn7t4jpqutgpt"},{"post_id":"cjw0oyutw008an7t4mj32o96u","category_id":"cjw0oyutz008jn7t4tf3xx1h9","_id":"cjw0oyuuw00axn7t40al8st68"},{"post_id":"cjw0oyutx008en7t4u0upp2gw","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuuw00ayn7t48ia9w1pt"},{"post_id":"cjw0oyutx008en7t4u0upp2gw","category_id":"cjw0oyuue0097n7t4g8clkec1","_id":"cjw0oyuuw00b0n7t4h8zjhyud"},{"post_id":"cjw0oyutx008en7t4u0upp2gw","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuux00b2n7t4cyn3ir6d"},{"post_id":"cjw0oyutx008en7t4u0upp2gw","category_id":"cjw0oyupl0038n7t4p3qxkzej","_id":"cjw0oyuux00b5n7t4e7zs6v65"},{"post_id":"cjw0oyuty008in7t4iu3j23vo","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuux00b7n7t4wkhtcxwi"},{"post_id":"cjw0oyuty008in7t4iu3j23vo","category_id":"cjw0oyuue0097n7t4g8clkec1","_id":"cjw0oyuuy00b9n7t4apkagxpc"},{"post_id":"cjw0oyuty008in7t4iu3j23vo","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuuy00bbn7t4qpo7pvxl"},{"post_id":"cjw0oyuty008in7t4iu3j23vo","category_id":"cjw0oyupl0038n7t4p3qxkzej","_id":"cjw0oyuuz00ben7t44i63859h"},{"post_id":"cjw0oyuu4008mn7t49i3lupdc","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuuz00bgn7t4fngvsycq"},{"post_id":"cjw0oyuu4008mn7t49i3lupdc","category_id":"cjw0oyuue0097n7t4g8clkec1","_id":"cjw0oyuuz00bin7t45um2esa4"},{"post_id":"cjw0oyuu4008mn7t49i3lupdc","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuv000bkn7t4ea6p6byc"},{"post_id":"cjw0oyuu4008mn7t49i3lupdc","category_id":"cjw0oyupl0038n7t4p3qxkzej","_id":"cjw0oyuv000bnn7t4geehl89y"},{"post_id":"cjw0oyuu7008qn7t4lnc5135x","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuv000bpn7t4cmfufu5c"},{"post_id":"cjw0oyuu7008qn7t4lnc5135x","category_id":"cjw0oyuue0097n7t4g8clkec1","_id":"cjw0oyuv100brn7t4i2eg7vrb"},{"post_id":"cjw0oyuu7008qn7t4lnc5135x","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuv100btn7t4z0mjxj2d"},{"post_id":"cjw0oyuu7008qn7t4lnc5135x","category_id":"cjw0oyupl0038n7t4p3qxkzej","_id":"cjw0oyuv100bwn7t4pa4ekbrw"},{"post_id":"cjw0oyuu8008un7t4f1masz2a","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyuv200byn7t4vuo494hy"},{"post_id":"cjw0oyuu8008un7t4f1masz2a","category_id":"cjw0oyuue0097n7t4g8clkec1","_id":"cjw0oyuv200c0n7t4woheq4ea"},{"post_id":"cjw0oyuu8008un7t4f1masz2a","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyuv200c2n7t4d7scsc7q"},{"post_id":"cjw0oyuu8008un7t4f1masz2a","category_id":"cjw0oyupl0038n7t4p3qxkzej","_id":"cjw0oyuv200c4n7t4zsh7diyn"},{"post_id":"cjw0oyuue009an7t4ndhcyk19","category_id":"cjw0oyup8001yn7t4k30wxe0f","_id":"cjw0oyuv300c7n7t4qdl8kmna"},{"post_id":"cjw0oyuue009an7t4ndhcyk19","category_id":"cjw0oyuul00a0n7t46wzyq91c","_id":"cjw0oyuv300c9n7t4ntnd6owz"},{"post_id":"cjw0oyuue009an7t4ndhcyk19","category_id":"cjw0oyup4001gn7t4wpce5rrc","_id":"cjw0oyuv400ccn7t4vqa0dm5t"},{"post_id":"cjw0oyuue009an7t4ndhcyk19","category_id":"cjw0oyuut00amn7t4m32bryhr","_id":"cjw0oyuv400cen7t4aix5hfaj"},{"post_id":"cjw0oyuua008xn7t4pl40pwov","category_id":"cjw0oyup8001yn7t4k30wxe0f","_id":"cjw0oyuv400chn7t4hlrvjfp6"},{"post_id":"cjw0oyuua008xn7t4pl40pwov","category_id":"cjw0oyuul00a0n7t46wzyq91c","_id":"cjw0oyuv500cjn7t4lmsz3u69"},{"post_id":"cjw0oyuua008xn7t4pl40pwov","category_id":"cjw0oyup4001gn7t4wpce5rrc","_id":"cjw0oyuv500cln7t4iz6gpzfd"},{"post_id":"cjw0oyuua008xn7t4pl40pwov","category_id":"cjw0oyuut00amn7t4m32bryhr","_id":"cjw0oyuv500cnn7t4xr96s5lu"},{"post_id":"cjw0oyuub0092n7t46m9a9kt6","category_id":"cjw0oyup8001yn7t4k30wxe0f","_id":"cjw0oyuv500cpn7t4llisr1fw"},{"post_id":"cjw0oyuub0092n7t46m9a9kt6","category_id":"cjw0oyuul00a0n7t46wzyq91c","_id":"cjw0oyuv500cqn7t4t0qcibhz"},{"post_id":"cjw0oyuub0092n7t46m9a9kt6","category_id":"cjw0oyup4001gn7t4wpce5rrc","_id":"cjw0oyuv500crn7t4r2v8wgcn"},{"post_id":"cjw0oyuub0092n7t46m9a9kt6","category_id":"cjw0oyuut00amn7t4m32bryhr","_id":"cjw0oyuv500csn7t48w1imhr8"},{"post_id":"cjw0oyuud0095n7t466dubtj7","category_id":"cjw0oyup8001yn7t4k30wxe0f","_id":"cjw0oyuv600ctn7t44xc4lhv3"},{"post_id":"cjw0oyuud0095n7t466dubtj7","category_id":"cjw0oyuul00a0n7t46wzyq91c","_id":"cjw0oyuv600cun7t4ag1bn526"},{"post_id":"cjw0oyuud0095n7t466dubtj7","category_id":"cjw0oyup4001gn7t4wpce5rrc","_id":"cjw0oyuv600cvn7t407vo4fcm"},{"post_id":"cjw0oyuud0095n7t466dubtj7","category_id":"cjw0oyuut00amn7t4m32bryhr","_id":"cjw0oyuv600cwn7t4gjglmdsq"},{"post_id":"cjw0oyuwp00cxn7t47q80zy62","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyux200d7n7t4p9wvlyew"},{"post_id":"cjw0oyuwp00cxn7t47q80zy62","category_id":"cjw0oyutt0083n7t42b5n1m47","_id":"cjw0oyux300dan7t4cg1ey4am"},{"post_id":"cjw0oyuwp00cxn7t47q80zy62","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyux400dcn7t4y9cp1ulx"},{"post_id":"cjw0oyuwp00cxn7t47q80zy62","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyux400den7t431ad1pkv"},{"post_id":"cjw0oyuwr00d0n7t49vqjvle7","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyux400dgn7t4sm2goy8c"},{"post_id":"cjw0oyuwr00d0n7t49vqjvle7","category_id":"cjw0oyutz008jn7t4tf3xx1h9","_id":"cjw0oyux400din7t41n9uyt5f"},{"post_id":"cjw0oyuwq00cyn7t48019uty1","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyux400dkn7t4wq0rwi9z"},{"post_id":"cjw0oyuwq00cyn7t48019uty1","category_id":"cjw0oyutt0083n7t42b5n1m47","_id":"cjw0oyux500dmn7t4opmvb8tj"},{"post_id":"cjw0oyuwq00cyn7t48019uty1","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyux500don7t42m7ets4y"},{"post_id":"cjw0oyuwq00cyn7t48019uty1","category_id":"cjw0oyupp003pn7t4f4upfgu5","_id":"cjw0oyux500dqn7t4xe3npehe"},{"post_id":"cjw0oyuwt00d2n7t4bzsthwxo","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyux500dsn7t4qhxfumgc"},{"post_id":"cjw0oyuwt00d2n7t4bzsthwxo","category_id":"cjw0oyuue0097n7t4g8clkec1","_id":"cjw0oyux500dun7t480me82up"},{"post_id":"cjw0oyuwt00d2n7t4bzsthwxo","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyux500dwn7t4qzo1vu0a"},{"post_id":"cjw0oyuwt00d2n7t4bzsthwxo","category_id":"cjw0oyupl0038n7t4p3qxkzej","_id":"cjw0oyux500dyn7t4uj3nzuja"},{"post_id":"cjw0oyuwv00d4n7t4svu71l67","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyux500e0n7t4fttpdkxb"},{"post_id":"cjw0oyuwv00d4n7t4svu71l67","category_id":"cjw0oyuue0097n7t4g8clkec1","_id":"cjw0oyux500e2n7t4entlfskh"},{"post_id":"cjw0oyuwv00d4n7t4svu71l67","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyux500e4n7t48e6ix85b"},{"post_id":"cjw0oyuwv00d4n7t4svu71l67","category_id":"cjw0oyupl0038n7t4p3qxkzej","_id":"cjw0oyux500e6n7t41n8pm994"},{"post_id":"cjw0oyux200d9n7t4thfi551r","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyux500e7n7t4rltmpmqv"},{"post_id":"cjw0oyux200d9n7t4thfi551r","category_id":"cjw0oyutz008jn7t4tf3xx1h9","_id":"cjw0oyux500e8n7t4x4zv00d7"},{"post_id":"cjw0oyux100d6n7t4kuibeuzv","category_id":"cjw0oyuoe0008n7t46443el5e","_id":"cjw0oyux500e9n7t4wzqysnq1"},{"post_id":"cjw0oyux100d6n7t4kuibeuzv","category_id":"cjw0oyuue0097n7t4g8clkec1","_id":"cjw0oyux500ean7t4hxsc0kjx"},{"post_id":"cjw0oyux100d6n7t4kuibeuzv","category_id":"cjw0oyup5001kn7t46ue4gdoo","_id":"cjw0oyux500ebn7t4a0lx3pj6"},{"post_id":"cjw0oyux100d6n7t4kuibeuzv","category_id":"cjw0oyupl0038n7t4p3qxkzej","_id":"cjw0oyux600ecn7t45utrvxdt"},{"post_id":"cjw0oyv5100edn7t40830ez1c","category_id":"cjw0oyus20069n7t4i8pl8uzh","_id":"cjw0oyv5400efn7t44437i1fh"},{"post_id":"cjw0oyv5100edn7t40830ez1c","category_id":"cjw0oyus7006mn7t4d6ezev4b","_id":"cjw0oyv5400ehn7t4p9ir8tju"},{"post_id":"cjw0oyv5x00ejn7t4el5cxbwv","category_id":"cjw0oyv6000eln7t4069frf6q","_id":"cjw0oyv6200epn7t4u0da969s"},{"post_id":"cjw0oyv5x00ejn7t4el5cxbwv","category_id":"cjw0oyv6100enn7t4k5bt9h9p","_id":"cjw0oyv6200eqn7t4i2bi8nq4"}],"PostTag":[{"post_id":"cjw0oyuo60003n7t4aa8t3riq","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyuov000un7t47o2yrvte"},{"post_id":"cjw0oyuo60003n7t4aa8t3riq","tag_id":"cjw0oyuoh000bn7t4wsbc54tr","_id":"cjw0oyuow000xn7t4ee8hj6fg"},{"post_id":"cjw0oyuo60003n7t4aa8t3riq","tag_id":"cjw0oyuom000gn7t4u69l7nbt","_id":"cjw0oyuoy0010n7t4vj8z96up"},{"post_id":"cjw0oyuo60003n7t4aa8t3riq","tag_id":"cjw0oyuop000kn7t4o26wvxj7","_id":"cjw0oyuoz0013n7t4pg7vl9up"},{"post_id":"cjw0oyuo60003n7t4aa8t3riq","tag_id":"cjw0oyuos000on7t40ubp02m2","_id":"cjw0oyup00016n7t4n7gwan4u"},{"post_id":"cjw0oyuoy0011n7t4jtg6xjlm","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyup10018n7t4mmr0pg5c"},{"post_id":"cjw0oyuoa0005n7t4i1cgsb4p","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyup5001in7t4rjcmze2a"},{"post_id":"cjw0oyuoa0005n7t4i1cgsb4p","tag_id":"cjw0oyuoh000bn7t4wsbc54tr","_id":"cjw0oyup5001jn7t4kvk04zir"},{"post_id":"cjw0oyuoa0005n7t4i1cgsb4p","tag_id":"cjw0oyuom000gn7t4u69l7nbt","_id":"cjw0oyup6001nn7t44tuppvgi"},{"post_id":"cjw0oyuoa0005n7t4i1cgsb4p","tag_id":"cjw0oyup10019n7t4ca5gkq4b","_id":"cjw0oyup6001pn7t4k3q21mv8"},{"post_id":"cjw0oyuoa0005n7t4i1cgsb4p","tag_id":"cjw0oyup2001bn7t4kmw39i14","_id":"cjw0oyup7001sn7t4p4zcv5wm"},{"post_id":"cjw0oyuoa0005n7t4i1cgsb4p","tag_id":"cjw0oyuos000on7t40ubp02m2","_id":"cjw0oyup7001tn7t4qqa52gxy"},{"post_id":"cjw0oyuoa0005n7t4i1cgsb4p","tag_id":"cjw0oyup4001fn7t40sd0ntj0","_id":"cjw0oyup8001wn7t4n0ajzkmf"},{"post_id":"cjw0oyuod0007n7t4j7g12asw","tag_id":"cjw0oyup5001hn7t4dsbsvrfm","_id":"cjw0oyup8001xn7t4qxoqkyim"},{"post_id":"cjw0oyuoe0009n7t4o8s66jum","tag_id":"cjw0oyup5001hn7t4dsbsvrfm","_id":"cjw0oyup90020n7t4sj9f6no1"},{"post_id":"cjw0oyuoe0009n7t4o8s66jum","tag_id":"cjw0oyup7001rn7t4ofcd08iy","_id":"cjw0oyup90021n7t4ifoxd2wx"},{"post_id":"cjw0oyuog000an7t4o98366t0","tag_id":"cjw0oyup8001vn7t49don4qym","_id":"cjw0oyupc0028n7t4vyar4qs8"},{"post_id":"cjw0oyuog000an7t4o98366t0","tag_id":"cjw0oyup9001zn7t4jumot632","_id":"cjw0oyupc002an7t4rt6f78kz"},{"post_id":"cjw0oyuog000an7t4o98366t0","tag_id":"cjw0oyupa0023n7t4ba0m0tbl","_id":"cjw0oyupd002cn7t4h57tn4vs"},{"post_id":"cjw0oyuog000an7t4o98366t0","tag_id":"cjw0oyupb0025n7t48sq3ecxe","_id":"cjw0oyupe002en7t4olllsyb4"},{"post_id":"cjw0oyuoj000dn7t40pzk5xqm","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyupe002gn7t4vbqlk0iz"},{"post_id":"cjw0oyuoj000dn7t40pzk5xqm","tag_id":"cjw0oyupb0027n7t4zqazk6io","_id":"cjw0oyupf002in7t440wgnoo8"},{"post_id":"cjw0oyuol000en7t4jqpzis59","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyupf002kn7t4nwv8f4gn"},{"post_id":"cjw0oyuol000en7t4jqpzis59","tag_id":"cjw0oyupb0027n7t4zqazk6io","_id":"cjw0oyupg002mn7t4xq8thwyl"},{"post_id":"cjw0oyuon000hn7t4qy7wyuol","tag_id":"cjw0oyupe002fn7t4rmvi6hml","_id":"cjw0oyupg002on7t476exfvwx"},{"post_id":"cjw0oyuoq000ln7t46bsmrtzj","tag_id":"cjw0oyup5001hn7t4dsbsvrfm","_id":"cjw0oyupj002wn7t4qjm9p1cl"},{"post_id":"cjw0oyuoq000ln7t46bsmrtzj","tag_id":"cjw0oyupg002nn7t44ac78ju1","_id":"cjw0oyupj002xn7t4kohto6r1"},{"post_id":"cjw0oyuoq000ln7t46bsmrtzj","tag_id":"cjw0oyuph002qn7t4o8ve0fvg","_id":"cjw0oyupk0030n7t435jn7vlu"},{"post_id":"cjw0oyuoq000ln7t46bsmrtzj","tag_id":"cjw0oyupi002tn7t4758w7p0e","_id":"cjw0oyupk0031n7t4jaxmtyx1"},{"post_id":"cjw0oyuor000mn7t4l8wqcjlf","tag_id":"cjw0oyupi002vn7t4y8smgjc2","_id":"cjw0oyupl0035n7t4r91bbnc3"},{"post_id":"cjw0oyuos000pn7t47ae2wgh3","tag_id":"cjw0oyupk002zn7t49u6cir08","_id":"cjw0oyupl0037n7t49ouwo98l"},{"post_id":"cjw0oyuot000qn7t4dibtlp4g","tag_id":"cjw0oyupl0033n7t4ez5v0ppt","_id":"cjw0oyupn003dn7t4m06sjsdq"},{"post_id":"cjw0oyuot000qn7t4dibtlp4g","tag_id":"cjw0oyupm0039n7t4mvbg785u","_id":"cjw0oyupo003gn7t4x69656ho"},{"post_id":"cjw0oyuou000sn7t4rs0fzhdc","tag_id":"cjw0oyupn003cn7t4wiclf30g","_id":"cjw0oyupp003on7t4x50781f3"},{"post_id":"cjw0oyuou000sn7t4rs0fzhdc","tag_id":"cjw0oyupo003in7t4x4miqne1","_id":"cjw0oyupq003rn7t40wzpwigd"},{"post_id":"cjw0oyuov000vn7t4srtjlcry","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyupq003un7t4mz0divkq"},{"post_id":"cjw0oyuov000vn7t4srtjlcry","tag_id":"cjw0oyupb0027n7t4zqazk6io","_id":"cjw0oyupr003xn7t4tp2e9lbr"},{"post_id":"cjw0oyuow000yn7t45yujj46a","tag_id":"cjw0oyup5001hn7t4dsbsvrfm","_id":"cjw0oyupz004gn7t4hri7pnfd"},{"post_id":"cjw0oyuow000yn7t45yujj46a","tag_id":"cjw0oyupg002nn7t44ac78ju1","_id":"cjw0oyupz004jn7t481gaix4a"},{"post_id":"cjw0oyuow000yn7t45yujj46a","tag_id":"cjw0oyuph002qn7t4o8ve0fvg","_id":"cjw0oyuq1004mn7t4jcj0wiqc"},{"post_id":"cjw0oyuow000yn7t45yujj46a","tag_id":"cjw0oyupi002tn7t4758w7p0e","_id":"cjw0oyuq2004pn7t43o88ppq2"},{"post_id":"cjw0oyuow000yn7t45yujj46a","tag_id":"cjw0oyupw004an7t4ta1y6ntj","_id":"cjw0oyuq3004sn7t4zumb6s9x"},{"post_id":"cjw0oyuoz0014n7t4hg4oajx9","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyuq5004wn7t4ui2fpr6x"},{"post_id":"cjw0oyuoz0014n7t4hg4oajx9","tag_id":"cjw0oyupy004en7t46j4pw95h","_id":"cjw0oyuq6004zn7t4kz52alcz"},{"post_id":"cjw0oyuoz0014n7t4hg4oajx9","tag_id":"cjw0oyupa0023n7t4ba0m0tbl","_id":"cjw0oyuq70051n7t4ot63klmq"},{"post_id":"cjw0oyuoz0014n7t4hg4oajx9","tag_id":"cjw0oyupb0025n7t48sq3ecxe","_id":"cjw0oyuq80054n7t4ax1hhghs"},{"post_id":"cjw0oyuru0063n7t4525ark5x","tag_id":"cjw0oyup5001hn7t4dsbsvrfm","_id":"cjw0oyus00066n7t4lfnj0xby"},{"post_id":"cjw0oyuru0063n7t4525ark5x","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyus2006an7t4upky83il"},{"post_id":"cjw0oyuru0063n7t4525ark5x","tag_id":"cjw0oyupa0023n7t4ba0m0tbl","_id":"cjw0oyus3006cn7t4312zghux"},{"post_id":"cjw0oyuru0063n7t4525ark5x","tag_id":"cjw0oyupb0025n7t48sq3ecxe","_id":"cjw0oyus5006fn7t4cpee3tgm"},{"post_id":"cjw0oyurq0060n7t4kc8g6jxr","tag_id":"cjw0oyuru0062n7t485uo6tdo","_id":"cjw0oyus6006in7t430bvy0hp"},{"post_id":"cjw0oyus00067n7t4l6d8fi5f","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyus7006ln7t4tk6jnuzx"},{"post_id":"cjw0oyus00067n7t4l6d8fi5f","tag_id":"cjw0oyupo003in7t4x4miqne1","_id":"cjw0oyus7006on7t4jki7fqh2"},{"post_id":"cjw0oyus2006bn7t4kx77e81h","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyus8006qn7t4tdwcjwk1"},{"post_id":"cjw0oyus2006bn7t4kx77e81h","tag_id":"cjw0oyupb0027n7t4zqazk6io","_id":"cjw0oyus8006tn7t4jydd2rxi"},{"post_id":"cjw0oyus4006dn7t4g3moi85a","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyus8006vn7t47zzcw8wl"},{"post_id":"cjw0oyus4006dn7t4g3moi85a","tag_id":"cjw0oyupb0027n7t4zqazk6io","_id":"cjw0oyus8006yn7t4fuc21jn6"},{"post_id":"cjw0oyurs0061n7t4ltt032gh","tag_id":"cjw0oyus10068n7t49votm7j4","_id":"cjw0oyus80070n7t4qsxbyzuf"},{"post_id":"cjw0oyurs0061n7t4ltt032gh","tag_id":"cjw0oyus5006en7t4xmlfikcc","_id":"cjw0oyus90073n7t4idymafmj"},{"post_id":"cjw0oyurz0065n7t4pz3cwhl8","tag_id":"cjw0oyus6006kn7t40ex8osws","_id":"cjw0oyus90077n7t460gdgh7y"},{"post_id":"cjw0oyurz0065n7t4pz3cwhl8","tag_id":"cjw0oyus8006rn7t42sk41t3a","_id":"cjw0oyus90079n7t4wks9c8os"},{"post_id":"cjw0oyurz0065n7t4pz3cwhl8","tag_id":"cjw0oyus8006wn7t4raokj0kf","_id":"cjw0oyus9007bn7t4bq0jn4rx"},{"post_id":"cjw0oyurz0065n7t4pz3cwhl8","tag_id":"cjw0oyus80072n7t4a87z3o93","_id":"cjw0oyus9007dn7t419fwnxou"},{"post_id":"cjw0oyutk007nn7t4ikztnfs1","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyutq007un7t4kt3erk7z"},{"post_id":"cjw0oyutk007nn7t4ikztnfs1","tag_id":"cjw0oyutm007pn7t48flsdy7l","_id":"cjw0oyutr007xn7t4gl3jffcn"},{"post_id":"cjw0oyuto007sn7t4tub4xh2h","tag_id":"cjw0oyup5001hn7t4dsbsvrfm","_id":"cjw0oyuts0081n7t4bnd2qllb"},{"post_id":"cjw0oyuto007sn7t4tub4xh2h","tag_id":"cjw0oyupg002nn7t44ac78ju1","_id":"cjw0oyutu0085n7t4szq2dvfo"},{"post_id":"cjw0oyuto007sn7t4tub4xh2h","tag_id":"cjw0oyuph002qn7t4o8ve0fvg","_id":"cjw0oyutv0089n7t4z1fbzecq"},{"post_id":"cjw0oyuto007sn7t4tub4xh2h","tag_id":"cjw0oyupi002tn7t4758w7p0e","_id":"cjw0oyutx008dn7t4utao0jga"},{"post_id":"cjw0oyuto007sn7t4tub4xh2h","tag_id":"cjw0oyupo003in7t4x4miqne1","_id":"cjw0oyuty008hn7t4iemp6ott"},{"post_id":"cjw0oyutl007on7t4lgd4tfth","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyuu4008ln7t4ps79t7vz"},{"post_id":"cjw0oyutl007on7t4lgd4tfth","tag_id":"cjw0oyutp007tn7t49nn2rqk9","_id":"cjw0oyuu7008pn7t42dzey0tu"},{"post_id":"cjw0oyutm007qn7t48v4j0g7u","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyuu8008tn7t4yp2y5a27"},{"post_id":"cjw0oyutm007qn7t48v4j0g7u","tag_id":"cjw0oyuts007zn7t42y7scqu2","_id":"cjw0oyuua008wn7t4cvhgvxwd"},{"post_id":"cjw0oyutm007qn7t48v4j0g7u","tag_id":"cjw0oyutv0087n7t4udxkvwnl","_id":"cjw0oyuub0091n7t40dc1mrtc"},{"post_id":"cjw0oyutn007rn7t4meb9n8e7","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyuud0094n7t40djt5912"},{"post_id":"cjw0oyutn007rn7t4meb9n8e7","tag_id":"cjw0oyuts007zn7t42y7scqu2","_id":"cjw0oyuue0099n7t48li1pp6l"},{"post_id":"cjw0oyutq007vn7t43ovwy5xq","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyuuh009fn7t4z6r9tbdz"},{"post_id":"cjw0oyutq007vn7t43ovwy5xq","tag_id":"cjw0oyuu7008on7t4w8hszx69","_id":"cjw0oyuuh009hn7t453o3ykn7"},{"post_id":"cjw0oyutq007vn7t43ovwy5xq","tag_id":"cjw0oyuua008yn7t4rfqylfrf","_id":"cjw0oyuui009ln7t4n7ehyshx"},{"post_id":"cjw0oyutq007vn7t43ovwy5xq","tag_id":"cjw0oyuue0096n7t4lt2a86qn","_id":"cjw0oyuui009nn7t48tlytvrj"},{"post_id":"cjw0oyutr007yn7t4ipuvirab","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyuuk009vn7t4aeuh9emc"},{"post_id":"cjw0oyutr007yn7t4ipuvirab","tag_id":"cjw0oyuu7008on7t4w8hszx69","_id":"cjw0oyuul009xn7t402b85kop"},{"post_id":"cjw0oyutr007yn7t4ipuvirab","tag_id":"cjw0oyuua008yn7t4rfqylfrf","_id":"cjw0oyuum00a1n7t49ci5dbgs"},{"post_id":"cjw0oyutr007yn7t4ipuvirab","tag_id":"cjw0oyuue0096n7t4lt2a86qn","_id":"cjw0oyuum00a3n7t4esqjfld8"},{"post_id":"cjw0oyuts0082n7t4efjcang1","tag_id":"cjw0oyuuk009sn7t44zeznlr0","_id":"cjw0oyuun00a8n7t487amdkf7"},{"post_id":"cjw0oyuts0082n7t4efjcang1","tag_id":"cjw0oyuul009zn7t4w30ui3gf","_id":"cjw0oyuuq00aan7t46u9vwjgp"},{"post_id":"cjw0oyutu0086n7t4o13cqhot","tag_id":"cjw0oyuuk009sn7t44zeznlr0","_id":"cjw0oyuut00ain7t4w795wfok"},{"post_id":"cjw0oyutu0086n7t4o13cqhot","tag_id":"cjw0oyuul009zn7t4w30ui3gf","_id":"cjw0oyuut00akn7t4y7j6k4dy"},{"post_id":"cjw0oyutw008an7t4mj32o96u","tag_id":"cjw0oyuuk009sn7t44zeznlr0","_id":"cjw0oyuuv00asn7t4zfez6byt"},{"post_id":"cjw0oyutw008an7t4mj32o96u","tag_id":"cjw0oyuul009zn7t4w30ui3gf","_id":"cjw0oyuuv00aun7t4czmqpdke"},{"post_id":"cjw0oyutx008en7t4u0upp2gw","tag_id":"cjw0oyup5001hn7t4dsbsvrfm","_id":"cjw0oyuux00b1n7t4uu7pptyj"},{"post_id":"cjw0oyutx008en7t4u0upp2gw","tag_id":"cjw0oyuuu00apn7t4emr7cx29","_id":"cjw0oyuux00b3n7t4rdjij0tz"},{"post_id":"cjw0oyutx008en7t4u0upp2gw","tag_id":"cjw0oyuuv00avn7t4mma828ba","_id":"cjw0oyuux00b6n7t4yv8oos7l"},{"post_id":"cjw0oyuty008in7t4iu3j23vo","tag_id":"cjw0oyup5001hn7t4dsbsvrfm","_id":"cjw0oyuuy00ban7t4pdspm4l5"},{"post_id":"cjw0oyuty008in7t4iu3j23vo","tag_id":"cjw0oyuuu00apn7t4emr7cx29","_id":"cjw0oyuuy00bcn7t4umyulpz1"},{"post_id":"cjw0oyuty008in7t4iu3j23vo","tag_id":"cjw0oyuuv00avn7t4mma828ba","_id":"cjw0oyuuz00bfn7t4egq3pjp4"},{"post_id":"cjw0oyuu4008mn7t49i3lupdc","tag_id":"cjw0oyup5001hn7t4dsbsvrfm","_id":"cjw0oyuv000bjn7t4jdr85y3e"},{"post_id":"cjw0oyuu4008mn7t49i3lupdc","tag_id":"cjw0oyuuu00apn7t4emr7cx29","_id":"cjw0oyuv000bln7t4mkae2isn"},{"post_id":"cjw0oyuu4008mn7t49i3lupdc","tag_id":"cjw0oyuuv00avn7t4mma828ba","_id":"cjw0oyuv000bon7t4c647nkwa"},{"post_id":"cjw0oyuu7008qn7t4lnc5135x","tag_id":"cjw0oyup5001hn7t4dsbsvrfm","_id":"cjw0oyuv100bsn7t41x29psij"},{"post_id":"cjw0oyuu7008qn7t4lnc5135x","tag_id":"cjw0oyuuu00apn7t4emr7cx29","_id":"cjw0oyuv100bun7t4tsb8wip8"},{"post_id":"cjw0oyuu7008qn7t4lnc5135x","tag_id":"cjw0oyuuv00avn7t4mma828ba","_id":"cjw0oyuv200bxn7t48hvmnfmz"},{"post_id":"cjw0oyuu8008un7t4f1masz2a","tag_id":"cjw0oyup5001hn7t4dsbsvrfm","_id":"cjw0oyuv200c1n7t49flgzkqh"},{"post_id":"cjw0oyuu8008un7t4f1masz2a","tag_id":"cjw0oyuuu00apn7t4emr7cx29","_id":"cjw0oyuv200c3n7t4i4n103oh"},{"post_id":"cjw0oyuu8008un7t4f1masz2a","tag_id":"cjw0oyuuv00avn7t4mma828ba","_id":"cjw0oyuv300c6n7t46bsr5qxi"},{"post_id":"cjw0oyuua008xn7t4pl40pwov","tag_id":"cjw0oyupl0033n7t4ez5v0ppt","_id":"cjw0oyuv300c8n7t4zrj7b7k3"},{"post_id":"cjw0oyuua008xn7t4pl40pwov","tag_id":"cjw0oyuv200bzn7t4yytmr6b9","_id":"cjw0oyuv300cbn7t4h0pon8ym"},{"post_id":"cjw0oyuub0092n7t46m9a9kt6","tag_id":"cjw0oyupl0033n7t4ez5v0ppt","_id":"cjw0oyuv400cdn7t4z7gxor9l"},{"post_id":"cjw0oyuub0092n7t46m9a9kt6","tag_id":"cjw0oyuv200bzn7t4yytmr6b9","_id":"cjw0oyuv400cgn7t45w36lycg"},{"post_id":"cjw0oyuud0095n7t466dubtj7","tag_id":"cjw0oyupl0033n7t4ez5v0ppt","_id":"cjw0oyuv400cin7t4o34eq6u7"},{"post_id":"cjw0oyuud0095n7t466dubtj7","tag_id":"cjw0oyuv200bzn7t4yytmr6b9","_id":"cjw0oyuv500ckn7t4vtfuzrp7"},{"post_id":"cjw0oyuue009an7t4ndhcyk19","tag_id":"cjw0oyupl0033n7t4ez5v0ppt","_id":"cjw0oyuv500cmn7t4pynb6myc"},{"post_id":"cjw0oyuue009an7t4ndhcyk19","tag_id":"cjw0oyuv200bzn7t4yytmr6b9","_id":"cjw0oyuv500con7t49xqohsq2"},{"post_id":"cjw0oyuwp00cxn7t47q80zy62","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyuwr00czn7t4ji1e3vpn"},{"post_id":"cjw0oyuwp00cxn7t47q80zy62","tag_id":"cjw0oyuu7008on7t4w8hszx69","_id":"cjw0oyuwt00d1n7t471zyy7vl"},{"post_id":"cjw0oyuwp00cxn7t47q80zy62","tag_id":"cjw0oyuua008yn7t4rfqylfrf","_id":"cjw0oyuwv00d3n7t4glocbntk"},{"post_id":"cjw0oyuwp00cxn7t47q80zy62","tag_id":"cjw0oyuue0096n7t4lt2a86qn","_id":"cjw0oyux100d5n7t46imrqsc8"},{"post_id":"cjw0oyuwq00cyn7t48019uty1","tag_id":"cjw0oyuob0006n7t496zg231m","_id":"cjw0oyux200d8n7t4untgvmjv"},{"post_id":"cjw0oyuwq00cyn7t48019uty1","tag_id":"cjw0oyuu7008on7t4w8hszx69","_id":"cjw0oyux300dbn7t41ozgi2ok"},{"post_id":"cjw0oyuwq00cyn7t48019uty1","tag_id":"cjw0oyuua008yn7t4rfqylfrf","_id":"cjw0oyux400ddn7t4uaai0uxw"},{"post_id":"cjw0oyuwq00cyn7t48019uty1","tag_id":"cjw0oyuue0096n7t4lt2a86qn","_id":"cjw0oyux400dfn7t45qts2c4u"},{"post_id":"cjw0oyuwr00d0n7t49vqjvle7","tag_id":"cjw0oyuuk009sn7t44zeznlr0","_id":"cjw0oyux400dhn7t4pf6a5b87"},{"post_id":"cjw0oyuwr00d0n7t49vqjvle7","tag_id":"cjw0oyuul009zn7t4w30ui3gf","_id":"cjw0oyux400djn7t4sgw8ladg"},{"post_id":"cjw0oyuwt00d2n7t4bzsthwxo","tag_id":"cjw0oyup5001hn7t4dsbsvrfm","_id":"cjw0oyux400dln7t4ygvussfe"},{"post_id":"cjw0oyuwt00d2n7t4bzsthwxo","tag_id":"cjw0oyuuu00apn7t4emr7cx29","_id":"cjw0oyux500dnn7t4nbz8bqbu"},{"post_id":"cjw0oyuwt00d2n7t4bzsthwxo","tag_id":"cjw0oyuuv00avn7t4mma828ba","_id":"cjw0oyux500dpn7t4eunlkyei"},{"post_id":"cjw0oyuwv00d4n7t4svu71l67","tag_id":"cjw0oyup5001hn7t4dsbsvrfm","_id":"cjw0oyux500drn7t42ky73rrh"},{"post_id":"cjw0oyuwv00d4n7t4svu71l67","tag_id":"cjw0oyuuu00apn7t4emr7cx29","_id":"cjw0oyux500dtn7t4jy7xcwtn"},{"post_id":"cjw0oyuwv00d4n7t4svu71l67","tag_id":"cjw0oyuuv00avn7t4mma828ba","_id":"cjw0oyux500dvn7t4k09klkbc"},{"post_id":"cjw0oyux100d6n7t4kuibeuzv","tag_id":"cjw0oyup5001hn7t4dsbsvrfm","_id":"cjw0oyux500dxn7t47473jgs1"},{"post_id":"cjw0oyux100d6n7t4kuibeuzv","tag_id":"cjw0oyuuu00apn7t4emr7cx29","_id":"cjw0oyux500dzn7t40c1ralsi"},{"post_id":"cjw0oyux100d6n7t4kuibeuzv","tag_id":"cjw0oyuuv00avn7t4mma828ba","_id":"cjw0oyux500e1n7t46jkvd4ay"},{"post_id":"cjw0oyux200d9n7t4thfi551r","tag_id":"cjw0oyuuk009sn7t44zeznlr0","_id":"cjw0oyux500e3n7t4673objmj"},{"post_id":"cjw0oyux200d9n7t4thfi551r","tag_id":"cjw0oyuul009zn7t4w30ui3gf","_id":"cjw0oyux500e5n7t4mbnkwkvc"},{"post_id":"cjw0oyv5100edn7t40830ez1c","tag_id":"cjw0oyus10068n7t49votm7j4","_id":"cjw0oyv5400egn7t4pb6urv7l"},{"post_id":"cjw0oyv5100edn7t40830ez1c","tag_id":"cjw0oyv5300een7t4it4goniv","_id":"cjw0oyv5400ein7t4c081l2fp"},{"post_id":"cjw0oyv5x00ejn7t4el5cxbwv","tag_id":"cjw0oyv6000ekn7t4tor1aatc","_id":"cjw0oyv6100emn7t43lpb3wmv"},{"post_id":"cjw0oyv5x00ejn7t4el5cxbwv","tag_id":"cjw0oyuu7008on7t4w8hszx69","_id":"cjw0oyv6100eon7t4majalcu3"}],"Tag":[{"name":"javascript","_id":"cjw0oyuob0006n7t496zg231m"},{"name":"mocha","_id":"cjw0oyuoh000bn7t4wsbc54tr"},{"name":"chai","_id":"cjw0oyuom000gn7t4u69l7nbt"},{"name":"istanbul","_id":"cjw0oyuop000kn7t4o26wvxj7"},{"name":"测试","_id":"cjw0oyuos000on7t40ubp02m2"},{"name":"travisci","_id":"cjw0oyup10019n7t4ca5gkq4b"},{"name":"codecov","_id":"cjw0oyup2001bn7t4kmw39i14"},{"name":"持续交付","_id":"cjw0oyup4001fn7t40sd0ntj0"},{"name":"python","_id":"cjw0oyup5001hn7t4dsbsvrfm"},{"name":"radioit","_id":"cjw0oyup7001rn7t4ofcd08iy"},{"name":"11.11","_id":"cjw0oyup8001vn7t49don4qym"},{"name":"segmentfault","_id":"cjw0oyup9001zn7t4jumot632"},{"name":"walkthrough","_id":"cjw0oyupa0023n7t4ba0m0tbl"},{"name":"quiz","_id":"cjw0oyupb0025n7t48sq3ecxe"},{"name":"string-template","_id":"cjw0oyupb0027n7t4zqazk6io"},{"name":"anime","_id":"cjw0oyupe002fn7t4rmvi6hml"},{"name":"script","_id":"cjw0oyupg002nn7t44ac78ju1"},{"name":"spider","_id":"cjw0oyuph002qn7t4o8ve0fvg"},{"name":"scraper","_id":"cjw0oyupi002tn7t4758w7p0e"},{"name":"poem","_id":"cjw0oyupi002vn7t4y8smgjc2"},{"name":"life","_id":"cjw0oyupk002zn7t49u6cir08"},{"name":"photograph","_id":"cjw0oyupl0033n7t4ez5v0ppt"},{"name":"exhibition","_id":"cjw0oyupm0039n7t4mvbg785u"},{"name":"movie","_id":"cjw0oyupn003cn7t4wiclf30g"},{"name":"bytalk","_id":"cjw0oyupo003in7t4x4miqne1"},{"name":"pyspider","_id":"cjw0oyupw004an7t4ta1y6ntj"},{"name":"alibaba","_id":"cjw0oyupy004en7t46j4pw95h"},{"name":"C#","_id":"cjw0oyuru0062n7t485uo6tdo"},{"name":"ancient-egypt","_id":"cjw0oyus10068n7t49votm7j4"},{"name":"god","_id":"cjw0oyus5006en7t4xmlfikcc"},{"name":"pso2","_id":"cjw0oyus6006kn7t40ex8osws"},{"name":"鬼斬","_id":"cjw0oyus8006rn7t42sk41t3a"},{"name":"剑灵","_id":"cjw0oyus8006wn7t4raokj0kf"},{"name":"MMORPG","_id":"cjw0oyus80072n7t4a87z3o93"},{"name":"FictionInjection","_id":"cjw0oyutm007pn7t48flsdy7l"},{"name":"i18n","_id":"cjw0oyutp007tn7t49nn2rqk9"},{"name":"ECMAScript6","_id":"cjw0oyuts007zn7t42y7scqu2"},{"name":"note","_id":"cjw0oyutv0087n7t4udxkvwnl"},{"name":"angularjs","_id":"cjw0oyuu7008on7t4w8hszx69"},{"name":"angular-material","_id":"cjw0oyuua008yn7t4rfqylfrf"},{"name":"electron","_id":"cjw0oyuue0096n7t4lt2a86qn"},{"name":"tutorial","_id":"cjw0oyuuk009sn7t44zeznlr0"},{"name":"chrome","_id":"cjw0oyuul009zn7t4w30ui3gf"},{"name":"Qt","_id":"cjw0oyuuu00apn7t4emr7cx29"},{"name":"software","_id":"cjw0oyuuv00avn7t4mma828ba"},{"name":"travel","_id":"cjw0oyuv200bzn7t4yytmr6b9"},{"name":"history","_id":"cjw0oyv5300een7t4it4goniv"},{"name":"translation","_id":"cjw0oyv6000ekn7t4tor1aatc"}]}}